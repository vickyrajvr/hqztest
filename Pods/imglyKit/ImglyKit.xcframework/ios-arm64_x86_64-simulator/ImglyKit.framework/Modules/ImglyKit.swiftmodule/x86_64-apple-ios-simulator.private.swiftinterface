// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ImglyKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import CommonCrypto
import Compression
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMedia
import CoreMotion
import CoreServices
import CoreText
import Foundation
import ImageIO
@_exported import ImglyKit
import Metal
import MetalKit
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import Security
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import os
import simd
@_inheritsConvenienceInitializers @objc(PESDKActionListSectionController) open class ActionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKActionMenuItem) open class ActionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage
  final public let actionClosure: (inout ImglyKit.PhotoEditModel) -> Swift.Void
  final public let selectedClosure: ((ImglyKit.PhotoEditModel) -> Swift.Bool)?
  @objc final public let supportsPhoto: Swift.Bool
  @objc final public let supportsVideo: Swift.Bool
  convenience public init(title: Swift.String, icon: UIKit.UIImage, actionClosure: @escaping (inout ImglyKit.PhotoEditModel) -> Swift.Void, selectedClosure: ((ImglyKit.PhotoEditModel) -> Swift.Bool)?)
  convenience public init(title: Swift.String, icon: UIKit.UIImage, supportsPhoto: Swift.Bool, supportsVideo: Swift.Bool, actionClosure: @escaping (inout ImglyKit.PhotoEditModel) -> Swift.Void, selectedClosure: ((ImglyKit.PhotoEditModel) -> Swift.Bool)?)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.ActionMenuItem {
  @objc public static func createMagicItem() -> ImglyKit.ActionMenuItem
}
extension ImglyKit.ActionMenuItem {
  @objc convenience dynamic public init(title: Swift.String, icon: UIKit.UIImage, objcActionClosure: @escaping (ImglyKit._ObjCPhotoEditModel) -> Swift.Void, objcSelectedClosure: ((ImglyKit._ObjCPhotoEditModel) -> Swift.Bool)?)
}
@objcMembers @objc(PESDKAdjustEditController) @_Concurrency.MainActor(unsafe) open class AdjustEditController : ImglyKit.ViewController {
  @_Concurrency.MainActor(unsafe) final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.AdjustEditControllerDelegate)?
  @_Concurrency.MainActor(unsafe) open var adjustTool: ImglyKit.AdjustTool? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func setAdjustTool(_ adjustTool: ImglyKit.AdjustTool?, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func updateSlider(for adjustTool: ImglyKit.AdjustTool)
  @objc deinit
}
extension ImglyKit.AdjustEditController : ImglyKit.SliderEditControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension ImglyKit.AdjustEditController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.AdjustEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
@objc(PESDKAdjustEditControllerDelegate) public protocol AdjustEditControllerDelegate {
  @objc func adjustEditController(_ adjustEditController: ImglyKit.AdjustEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func adjustEditControllerTargetScrollView(_ adjustEditController: ImglyKit.AdjustEditController) -> UIKit.UIScrollView?
  @objc func adjustEditControllerDidChangePhotoEditModel(_ adjustEditController: ImglyKit.AdjustEditController)
  @objc func adjustEditControllerDidSlide(_ adjustEditController: ImglyKit.AdjustEditController, toValue value: CoreFoundation.CGFloat)
  @objc func adjustEditControllerDidEndSliding(_ adjustEditController: ImglyKit.AdjustEditController)
}
@_inheritsConvenienceInitializers @objc(PESDKAdjustListSectionController) open class AdjustListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAdjustMenuItem) open class AdjustMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  final public let adjustTool: ImglyKit.AdjustTool?
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init?(adjustTool: ImglyKit.AdjustTool)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKAdjustToolController) @_Concurrency.MainActor(unsafe) open class AdjustToolController : ImglyKit.MenuToolController, ImglyKit.AdjustEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let adjustEditController: ImglyKit.AdjustEditController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(adjustEditController: ImglyKit.AdjustEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc public func adjustEditControllerDidChangePhotoEditModel(_ adjustEditController: ImglyKit.AdjustEditController)
  @_Concurrency.MainActor(unsafe) @objc public func adjustEditControllerTargetScrollView(_ adjustEditController: ImglyKit.AdjustEditController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc public func adjustEditController(_ adjustEditController: ImglyKit.AdjustEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func adjustEditControllerDidSlide(_ adjustEditController: ImglyKit.AdjustEditController, toValue value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public func adjustEditControllerDidEndSliding(_ adjustEditController: ImglyKit.AdjustEditController)
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
}
extension ImglyKit.AdjustToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum AdjustTool : Swift.Int {
  case brightness
  case contrast
  case saturation
  case shadows
  case highlights
  case exposure
  case clarity
  case gamma
  case blacks
  case whites
  case temperature
  case sharpness
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AdjustOverlayAction : Swift.Int {
  case undo
  case redo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKAdjustLimits) open class AdjustLimits : ObjectiveC.NSObject {
  @objc final public let minimum: CoreFoundation.CGFloat
  @objc final public let maximum: CoreFoundation.CGFloat
  @objc public init(minimum: CoreFoundation.CGFloat, maximum: CoreFoundation.CGFloat)
  @objc deinit
}
@objcMembers @objc(PESDKAdjustToolControllerOptions) open class AdjustToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let showResetButton: Swift.Bool
  final public let allowedAdjustTools: [ImglyKit.AdjustTool]
  final public let adjustToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AdjustTool?) -> Swift.Void)?
  final public let adjustToolSelectedClosure: ((ImglyKit.AdjustTool?) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.AdjustTool) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  final public let allowedAdjustOverlayActions: [ImglyKit.AdjustOverlayAction]
  @objc final public let adjustActionSelectedClosure: ((ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  @objc final public let limitConfigurationClosure: ((ImglyKit.AdjustTool) -> ImglyKit.AdjustLimits?)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.AdjustToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAdjustToolControllerOptionsBuilder) open class AdjustToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc public var showResetButton: Swift.Bool
  open var allowedAdjustTools: [ImglyKit.AdjustTool]
  open var adjustToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AdjustTool?) -> Swift.Void)?
  open var adjustToolSelectedClosure: ((ImglyKit.AdjustTool?) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.AdjustTool) -> Swift.Void)?
  @objc public var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  open var allowedAdjustOverlayActions: [ImglyKit.AdjustOverlayAction]
  @objc open var adjustActionSelectedClosure: ((ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  @objc open var limitConfigurationClosure: ((ImglyKit.AdjustTool) -> ImglyKit.AdjustLimits?)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.AdjustToolControllerOptionsBuilder {
  @objc(allowedAdjustTools) dynamic open var _objCAllowedAdjustTools: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedAdjustOverlayActions) dynamic open var _objCAllowedAdjustOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(adjustToolButtonConfigurationBlock) dynamic open var _objCAdjustToolButtonConfigurationBlock: ((ImglyKit.MenuCollectionViewCell, Foundation.NSNumber?) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc(adjustToolSelectedBlock) dynamic open var _objCAdjustToolSelectedBlock: ((Foundation.NSNumber?) -> Swift.Void)? {
    @objc get
    @objc set
  }
}
public struct AdjustmentModel : Swift.Equatable {
  public var brightness: Swift.Double
  public var contrast: Swift.Double
  public var shadows: Swift.Double
  public var highlights: Swift.Double
  public var exposure: Swift.Double
  public var clarity: Swift.Double
  public var saturation: Swift.Double
  public var gamma: Swift.Double
  public var blacks: Swift.Double
  public var whites: Swift.Double
  public var temperature: Swift.Double
  public var sharpness: Swift.Double
  public init(brightness: Swift.Double, contrast: Swift.Double, shadows: Swift.Double, highlights: Swift.Double, exposure: Swift.Double, clarity: Swift.Double, saturation: Swift.Double, gamma: Swift.Double, blacks: Swift.Double, whites: Swift.Double, temperature: Swift.Double, sharpness: Swift.Double)
  public init()
  public static func == (a: ImglyKit.AdjustmentModel, b: ImglyKit.AdjustmentModel) -> Swift.Bool
}
extension ImglyKit.AdjustmentModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAnalytics) open class Analytics : ObjectiveC.NSObject, ImglyKit.AnalyticsClient {
  @objc open var isEnabled: Swift.Bool
  @objc open func addAnalyticsClient(_ client: any ImglyKit.AnalyticsClient)
  @objc open func removeAnalyticsClient(_ client: any ImglyKit.AnalyticsClient)
  @objc open func logScreenView(_ screenView: ImglyKit.PESDKAnalyticsScreenViewName)
  @objc open func logEvent(_ event: ImglyKit.PESDKAnalyticsEventName, attributes: [ImglyKit.PESDKAnalyticsEventAttributeName : Any]? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKAnalyticsClient) public protocol AnalyticsClient {
  @objc func logScreenView(_ screenView: ImglyKit.PESDKAnalyticsScreenViewName)
  @objc func logEvent(_ event: ImglyKit.PESDKAnalyticsEventName, attributes: [ImglyKit.PESDKAnalyticsEventAttributeName : Any]?)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAnimationDelegate) open class AnimationDelegate : ObjectiveC.NSObject, QuartzCore.CAAnimationDelegate {
  @objc final public let block: (Swift.Bool) -> Swift.Void
  @objc open func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @objc deinit
}
extension ImglyKit.IMGLYWrapper where Base == Foundation.NSNotification.Name {
  public static let StickerCategoriesDidChange: Foundation.Notification.Name
}
extension Foundation.NSNotification.Name {
  @available(*, deprecated, renamed: "imgly.StickerCategoriesDidChange")
  public static var StickerCategoriesDidChange: Foundation.Notification.Name {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAssetCatalog) final public class AssetCatalog : ObjectiveC.NSObject {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public var stickers: [ImglyKit.StickerCategory] {
    @objc get
    @objc set
  }
  @objc final public var videoClips: [ImglyKit.VideoClipCategory] {
    @objc get
    @objc set
  }
  @objc final public var frames: [ImglyKit.Frame] {
    @objc get
    @objc set
  }
  @objc final public var effects: [ImglyKit.Effect] {
    @objc get
    @objc set
  }
  @objc final public var overlays: [ImglyKit.Overlay] {
    @objc get
    @objc set
  }
  @objc final public var fonts: [ImglyKit.Font] {
    @objc get
    @objc set
  }
  @objc final public var textDesigns: [ImglyKit.TextDesign] {
    @objc get
    @objc set
  }
  @objc final public var audioClips: [ImglyKit.AudioClipCategory] {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use `AssetCatalog.defaultItems` or a custom one in the `Configuration` instead. Please see the PE.SDK (https://img.ly/docs/pesdk/ios/introduction/migration/) or VE.SDK (https://img.ly/docs/vesdk/ios/introduction/migration/) version 11 migration guide for details.")
  public static let shared: ImglyKit.AssetCatalog
  @objc @available(*, deprecated, message: "`AssetCatalog.isShared` is deprecated.")
  final public var isShared: Swift.Bool {
    @objc get
  }
  @objc @available(*, deprecated, renamed: "defaultItems", message: "Use `AssetCatalog.defaultItems` instead.")
  public static var sharedItems: ImglyKit.AssetCatalog {
    @objc get
  }
  @objc public static var defaultItems: ImglyKit.AssetCatalog {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc convenience public init(stickers: [ImglyKit.StickerCategory], frames: [ImglyKit.Frame], effects: [ImglyKit.Effect], overlays: [ImglyKit.Overlay], fonts: [ImglyKit.Font], textDesigns: [ImglyKit.TextDesign])
  @objc public init(stickers: [ImglyKit.StickerCategory], frames: [ImglyKit.Frame], effects: [ImglyKit.Effect], overlays: [ImglyKit.Overlay], fonts: [ImglyKit.Font], textDesigns: [ImglyKit.TextDesign], videoClips: [ImglyKit.VideoClipCategory], audioClips: [ImglyKit.AudioClipCategory])
  @objc final public func removeTemporaryItems()
  @objc final public func removeTemporaryItems(removeEmptyCategories: Swift.Bool)
  @objc final public func sticker(withIdentifier identifier: Swift.String) -> ImglyKit.Sticker?
  @objc final public func frame(withIdentifier identifier: Swift.String) -> ImglyKit.Frame?
  @objc final public func effect(withIdentifier identifier: Swift.String) -> ImglyKit.Effect?
  @objc final public func overlay(withIdentifier identifier: Swift.String) -> ImglyKit.Overlay?
  @objc final public func font(withIdentifier identifier: Swift.String) -> ImglyKit.Font?
  @objc final public func textDesign(withIdentifier identifier: Swift.String) -> ImglyKit.TextDesign?
  @objc final public func videoClip(withIdentifier identifier: Swift.String) -> ImglyKit.VideoClip?
  @objc final public func audioClip(withIdentifier identifier: Swift.String) -> ImglyKit.AudioClip?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAssetCollectionViewCell) @_Concurrency.MainActor(unsafe) open class AssetCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var activityIndicator: UIKit.UIActivityIndicatorView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupImageView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objcMembers @objc(PESDKAudioAsset) open class AudioAsset : ObjectiveC.NSObject {
  @objc open var url: Foundation.URL?
  open var metadata: ImglyKit.AudioMetadata?
  @objc convenience public init(url: Foundation.URL)
  convenience public init(metadata: ImglyKit.AudioMetadata)
  public init(url: Foundation.URL?, metadata: ImglyKit.AudioMetadata?)
  @objc deinit
}
@objcMembers @objc(PESDKVideoAsset) open class VideoAsset : ObjectiveC.NSObject {
  @objc open var asset: AVFoundation.AVAsset?
  @objc open var userInfo: [Swift.String : Any]?
  @objc public init(asset: AVFoundation.AVAsset, userInfo: [Swift.String : Any]? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAssetManager) open class AssetManager : ObjectiveC.NSObject {
  @objc open func setImageAsset(_ imageAsset: ImglyKit.ImageAsset?, forIdentifier identifier: Swift.String, metadata: [Swift.String : Swift.String]?)
  @objc open func setImageAsset(_ imageAsset: ImglyKit.ImageAsset?, forIdentifier identifier: Swift.String)
  @objc open func imageAsset(forIdentifier identifier: Swift.String, metadata: [Swift.String : Swift.String]?) -> ImglyKit.ImageAsset?
  @objc open func imageAsset(forIdentifier identifier: Swift.String) -> ImglyKit.ImageAsset?
  @objc open func setVideoAsset(_ videoAsset: ImglyKit.VideoAsset?, forIdentifier identifier: Swift.String)
  @objc open func videoAsset(forIdentifier identifier: Swift.String) -> ImglyKit.VideoAsset?
  @objc open func setAudioAsset(_ audioAsset: ImglyKit.AudioAsset?, forIdentifier identifier: Swift.String)
  @objc open func audioAsset(forIdentifier identifier: Swift.String) -> ImglyKit.AudioAsset?
  @objc open var progressClosure: ((Swift.Bool) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
  @objc open func getAudio(at url: Foundation.URL, for identifier: Swift.String?, withLoadingIndicator: Swift.Bool = true, completion: @escaping ((ImglyKit.AudioAsset?, (any Swift.Error)?) -> Swift.Void))
  open func getMetadata(from url: Foundation.URL, with identifier: Swift.String?, completion: @escaping (_ metadata: ImglyKit.AudioMetadata?) -> Swift.Void)
  @objc open func getImages(at urls: [Foundation.URL], completion: @escaping (([Foundation.URL : UIKit.UIImage], [any Swift.Error]) -> Swift.Void))
  @objc open func getImage(at url: Foundation.URL, completion: @escaping ((UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void))
}
extension ImglyKit.AssetManager {
  open func populate(renderer: ImglyKit.PhotoEditRenderer, model: ImglyKit.PhotoEditModel, configuration: ImglyKit.Configuration = Configuration(), completion: @escaping (([Foundation.URL : UIKit.UIImage], [any Swift.Error]) -> Swift.Void))
  @objc(populateWithRenderer:model:configuration:completion:) dynamic open func _objCPopulate(renderer: ImglyKit.PhotoEditRenderer, model: ImglyKit._ObjCPhotoEditModel, configuration: ImglyKit.Configuration = Configuration(), completion: @escaping (([Foundation.URL : UIKit.UIImage], [any Swift.Error]) -> Swift.Void))
}
@objc(PESDKAssetResolver) public protocol AssetResolver {
  @objc func deserialize(from data: [Swift.String : Swift.String], completion: @escaping (_ item: (any ImglyKit.ResolvableAsset)?) -> Swift.Void)
  @objc func serialize(_ asset: any ImglyKit.ResolvableAsset) -> [Swift.String : Swift.String]?
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClip) open class AudioClip : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let artist: Swift.String?
  @objc final public let thumbnailURL: Foundation.URL?
  @objc final public let audioURL: Foundation.URL
  final public let duration: CoreMedia.CMTime?
  @objc final public let resolver: Swift.String?
  @objc convenience public init(identifier: Swift.String, audioURL: Foundation.URL)
  @objc convenience public init(identifier: Swift.String, audioURL: Foundation.URL, resolver: Swift.String)
  convenience public init(identifier: Swift.String, audioURL: Foundation.URL, title: Swift.String?, artist: Swift.String?, thumbnailURL: Foundation.URL?, duration: CoreMedia.CMTime?)
  convenience public init(identifier: Swift.String, audioURL: Foundation.URL, title: Swift.String?, artist: Swift.String?, thumbnailURL: Foundation.URL?, duration: CoreMedia.CMTime?, resolver: Swift.String?)
  @objc @available(*, deprecated, message: "Use `assetCatalog.audioClip(withIdentifier:)` of your `Configuration` object instead.")
  public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.AudioClip?
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension ImglyKit.AudioClip : ImglyKit.ResolvableAsset {
}
@objcMembers @objc(PESDKAudioClipCategory) open class AudioClipCategory : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let imageURL: Foundation.URL?
  @objc final public let audioClips: [ImglyKit.AudioClip]
  @objc @available(*, deprecated, message: "Use `assetCatalog.audioClips` of your `Configuration` object instead.")
  public static var all: [ImglyKit.AudioClipCategory] {
    @objc get
    @objc set
  }
  @objc public static var defaultItems: [ImglyKit.AudioClipCategory]
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL?, audioClips: [ImglyKit.AudioClip])
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, audioClips: [ImglyKit.AudioClip])
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objcMembers @objc(PESDKAudioCollectionCategory) open class AudioCollectionCategory : ImglyKit.AudioClipCategory {
  @objc final public let audioCollection: any ImglyKit.AudioCollection
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL?, audioCollection: any ImglyKit.AudioCollection)
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, audioCollection: any ImglyKit.AudioCollection)
  @objc deinit
}
@objcMembers @objc(PESDKAudioProviderCategory) open class AudioProviderCategory : ImglyKit.AudioClipCategory {
  final public let audioProvider: (any ImglyKit.AudioProvider)?
  @objc(audioProvider) final public let _objCAudioProvider: (any ImglyKit._ObjCAudioProvider)?
  convenience public init(title: Swift.String, imageURL: Foundation.URL?, audioProvider: any ImglyKit.AudioProvider)
  @objc(initWithTitle:imageURL:audioProvider:) convenience public init(title: Swift.String, imageURL: Foundation.URL?, _objCAudioProvider: any ImglyKit._ObjCAudioProvider)
  public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, audioProvider: any ImglyKit.AudioProvider)
  @objc(initWithIdentifier:title:imageURL:audioProvider:) public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, _objCAudioProvider: any ImglyKit._ObjCAudioProvider)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class AudioClipCategoryListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClipCategoryMenuItem) open class AudioClipCategoryMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let audioClipCategory: ImglyKit.AudioClipCategory
  @objc final public let title: Swift.String
  @objc final public let iconURL: Foundation.URL?
  @objc convenience public init(audioClipCategory: ImglyKit.AudioClipCategory)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
public struct AudioClipModel : Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public var trimModel: ImglyKit.TrimModel
  public init(identifier: Swift.String)
  public static func == (a: ImglyKit.AudioClipModel, b: ImglyKit.AudioClipModel) -> Swift.Bool
}
extension ImglyKit.AudioClipModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKAudioClipSelectionController) @_Concurrency.MainActor(unsafe) open class AudioClipSelectionController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var tableView: UIKit.UITableView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var gradientView: ImglyKit.GradientView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var visualEffectView: UIKit.UIVisualEffectView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var searchBar: ImglyKit.AudioSeachBar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var errorView: ImglyKit.AudioErrorView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var emptyView: ImglyKit.AudioEmptyView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func handleError()
  @objc(audioProvider) @_Concurrency.MainActor(unsafe) open var _objCAudioProvider: (any ImglyKit._ObjCAudioProvider)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var audioProvider: (any ImglyKit.AudioProvider)? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var assetManager: ImglyKit.AssetManager?
  @objc @_Concurrency.MainActor(unsafe) open var audioClips: [ImglyKit.AudioClip] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.AudioClipSelectionControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var cellConfigurationClosure: ((ImglyKit.AudioClipTableViewCell, ImglyKit.AudioClip) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var useMetadata: Swift.Bool?
  @objc @_Concurrency.MainActor(unsafe) public static var tableViewCellType: ImglyKit.AudioClipTableViewCell.Type {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.AudioClipSelectionController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
extension ImglyKit.AudioClipSelectionController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension ImglyKit.AudioClipSelectionController : UIKit.UITableViewDataSourcePrefetching {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, prefetchRowsAt indexPaths: [Foundation.IndexPath])
}
extension ImglyKit.AudioClipSelectionController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
}
@objc(PESDKAudioClipSelectionControllerDelegate) public protocol AudioClipSelectionControllerDelegate {
  @objc func audioClipSelectionController(_ audioClipSelectionController: ImglyKit.AudioClipSelectionController, didSelect audioClip: ImglyKit.AudioClip?)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioClipTableViewCell) @_Concurrency.MainActor(unsafe) open class AudioClipTableViewCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var audioClip: ImglyKit.AudioClip? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var artistFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var durationFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let artworkImageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let playImageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let artistLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) final public let durationLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objcMembers @objc @_Concurrency.MainActor(unsafe) open class AudioClipToolController : ImglyKit.MenuToolController {
  @objc @_Concurrency.MainActor(unsafe) final public let audioClipSelectionController: ImglyKit.AudioClipSelectionController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(audioClipSelectionController: ImglyKit.AudioClipSelectionController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
extension ImglyKit.AudioClipToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
extension ImglyKit.AudioClipToolController : ImglyKit.AudioClipSelectionControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioClipSelectionController(_ audioClipSelectionController: ImglyKit.AudioClipSelectionController, didSelect audioClip: ImglyKit.AudioClip?)
}
extension ImglyKit.AudioClipToolController : ImglyKit.AudioCollectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioCollection(_ audioCollection: any ImglyKit.AudioCollection, didSelect audioClip: ImglyKit.AudioClip?)
}
@objcMembers @objc(PESDKAudioClipToolControllerOptions) open class AudioClipToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let audioClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AudioClipCategory) -> Swift.Void)?
  @objc final public let audioClipButtonConfigurationClosure: ((ImglyKit.AudioClipTableViewCell, ImglyKit.AudioClip) -> Swift.Void)?
  @objc final public let defaultAudioClipCategoryIndex: Swift.Int
  @objc final public let useMetadata: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.AudioClipToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKAudioClipToolControllerOptionsBuilder) open class AudioClipToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var audioClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AudioClipCategory) -> Swift.Void)?
  @objc open var audioClipButtonConfigurationClosure: ((ImglyKit.AudioClipTableViewCell, ImglyKit.AudioClip) -> Swift.Void)?
  @objc open var defaultAudioClipCategoryIndex: Swift.Int
  @objc open var useMetadata: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.AudioClipToolControllerOptions)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClipViewModel) open class AudioClipViewModel : ObjectiveC.NSObject {
  @objc final public let audioClip: ImglyKit.AudioClip
  @objc convenience public init(audioClip: ImglyKit.AudioClip)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioEmptyView) @_Concurrency.MainActor(unsafe) open class AudioEmptyView : ImglyKit.EmptyView {
  @_Concurrency.MainActor(unsafe) @objc override public var query: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioErrorView) @_Concurrency.MainActor(unsafe) open class AudioErrorView : ImglyKit.ErrorView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct AudioMetadata {
}
public struct AudioModel : Swift.Equatable {
  public var clips: [ImglyKit.AudioClipModel]
  public var volumeBalance: Swift.Double
  public init()
  public init(clips: [ImglyKit.AudioClipModel], volumeBalance: Swift.Double)
  public static func == (a: ImglyKit.AudioModel, b: ImglyKit.AudioModel) -> Swift.Bool
}
extension ImglyKit.AudioModel : ImglyKit.ObjectiveCBridgeable {
}
public protocol AudioProvider : AnyObject {
  func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.AudioProviderResult, any Swift.Error>) -> Swift.Void)
  func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.AudioProviderResult, any Swift.Error>) -> Swift.Void)
  func get(identifier: Swift.String, completion: @escaping (Swift.Result<ImglyKit.AudioProviderResult, any Swift.Error>) -> Swift.Void)
}
@objcMembers @objc(PESDKAudioProviderResult) open class AudioProviderResult : ObjectiveC.NSObject {
  @objc final public let audioClips: [ImglyKit.AudioClip]
  @objc final public let hasMore: Swift.Bool
  @objc public init(audioClips: [ImglyKit.AudioClip], hasMore: Swift.Bool = false)
  @objc deinit
}
@objc(PESDKAudioProvider) public protocol _ObjCAudioProvider {
  @objc func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.AudioProviderResult?, (any Swift.Error)?) -> Swift.Void)
  @objc func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.AudioProviderResult?, (any Swift.Error)?) -> Swift.Void)
  @objc func get(identifier: Swift.String, completion: @escaping (ImglyKit.AudioProviderResult?, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioSearchBar) @_Concurrency.MainActor(unsafe) open class AudioSeachBar : ImglyKit.SearchBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc(PESDKAudioCollection) public protocol AudioCollection {
  @objc weak var delegate: (any ImglyKit.AudioCollectionDelegate)? { get set }
  @objc var viewController: UIKit.UIViewController { get }
}
@objc(PESDKAudioCollectionDelegate) public protocol AudioCollectionDelegate {
  @objc func audioCollection(_ audioCollection: any ImglyKit.AudioCollection, didSelect audioClip: ImglyKit.AudioClip?)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioToolController) @_Concurrency.MainActor(unsafe) open class AudioToolController : ImglyKit.PhotoEditToolController, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) open var proxyZoomController: ImglyKit.ProxyZoomController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var sliderContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimViewContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var labelContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var slider: ImglyKit.TooltipSlider {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var startTimeLabel: ImglyKit.PrimaryLabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trackNameLabel: ImglyKit.PrimaryLabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimView: ImglyKit.AudioTrimView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) @objc override open var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @objc @_Concurrency.MainActor(unsafe) open var deleteButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var playPauseButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
}
extension ImglyKit.AudioToolController : ImglyKit.AudioTrimViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioTrimViewDidStartScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioTrimView(_ audioTrimView: ImglyKit.AudioTrimView, didScrollAudioTrackTo startTime: CoreMedia.CMTime)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func audioTrimViewDidStopScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
}
extension ImglyKit.AudioToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
extension ImglyKit.AudioToolController : ImglyKit.ProxyZoomControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc public enum AudioOverlayAction : Swift.Int {
  case delete
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKAudioToolControllerOptions) open class AudioToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AudioOverlayAction) -> Swift.Void)?
  final public let allowedAudioOverlayActions: [ImglyKit.AudioOverlayAction]
  @objc final public let audioOverlayActionSelectedClosure: ((ImglyKit.AudioOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.AudioToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKAudioToolControllerOptionsBuilder) open class AudioToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AudioOverlayAction) -> Swift.Void)?
  open var allowedAudioOverlayActions: [ImglyKit.AudioOverlayAction]
  @objc open var audioOverlayActionSelectedClosure: ((ImglyKit.AudioOverlayAction) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.AudioToolControllerOptions)
  @objc deinit
}
extension ImglyKit.AudioToolControllerOptionsBuilder {
  @objc(allowedAudioOverlayActions) dynamic open var _objCAllowedAudioOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objc(PESDKAudioTrimViewDelegate) public protocol AudioTrimViewDelegate {
  @objc func audioTrimViewDidStartScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
  @objc func audioTrimView(_ audioTrimView: ImglyKit.AudioTrimView, didScrollAudioTrackTo startTime: CoreMedia.CMTime)
  @objc func audioTrimViewDidStopScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioTrimView) @_Concurrency.MainActor(unsafe) open class AudioTrimView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any ImglyKit.AudioTrimViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var asset: AVFoundation.AVAsset? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var audioStartTime: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timelineTime: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var timelineDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension ImglyKit.AudioTrimView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
}
@objc(PESDKBlendMode) public enum BlendMode : Swift.Int {
  case normal
  case overlay
  case softLight
  case hardLight
  case multiply
  case darken
  case colorBurn
  case screen
  case lighten
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ImglyKit.BlendMode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var defaultIntensity: CoreFoundation.CGFloat {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKBlendModeCollectionViewCell) @_Concurrency.MainActor(unsafe) open class BlendModeCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var font: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var selectedFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let blendModeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKBlendModeMenuItem) open class BlendModeMenuItem : ObjectiveC.NSObject {
  @objc final public let blendMode: ImglyKit.BlendMode
  @objc final public let title: Swift.String
  @objc convenience public init(blendMode: ImglyKit.BlendMode)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKBoxGradientView) @_Concurrency.MainActor(unsafe) open class BoxGradientView : ImglyKit.FocusGradientView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public struct Branding {
  public init(image: UIKit.UIImage)
}
public protocol BrandedView {
  var branding: ImglyKit.Branding? { get }
}
public protocol BrandedTool {
}
@_hasMissingDesignatedInitializers @objc(PESDKBrush) open class Brush : ObjectiveC.NSObject {
  @objc deinit
}
extension ImglyKit.Brush : ImglyKit.GeneratorDelegate {
  @objc dynamic public func generatorDidChange(_ generator: ImglyKit.StampGenerator)
}
@objcMembers @_Concurrency.MainActor(unsafe) open class BrushColorToolController : ImglyKit.ColorToolController<ImglyKit.BrushSpriteModel, ImglyKit.SpriteGestureController<ImglyKit.BrushSpriteModel, UIKit.UIView>, UIKit.UIView> {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc @_Concurrency.MainActor(unsafe) open var colorChangedHandler: ((UIKit.UIColor) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
extension ImglyKit.BrushColorToolController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@objc(PESDKBrushColorToolControllerOptions) open class BrushColorToolControllerOptions : ImglyKit.ColorToolControllerOptions {
  @objc convenience dynamic public init()
  @objc public init(brushBuilder: ImglyKit.BrushColorToolControllerOptionsBuilder)
  @objc deinit
}
@objc(PESDKBrushColorToolControllerOptionsBuilder) open class BrushColorToolControllerOptionsBuilder : ImglyKit.ColorToolControllerOptionsBuilder {
  @objc override dynamic public init()
  @objc public init(brushOptions: ImglyKit.BrushColorToolControllerOptions)
  @objc deinit
}
extension ImglyKit.BrushEditController : ImglyKit.VideoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKBrushEditController) @_Concurrency.MainActor(unsafe) open class BrushEditController : ImglyKit.ViewController {
  @_Concurrency.MainActor(unsafe) final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>
  @objc @_Concurrency.MainActor(unsafe) open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.BrushTool) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.BrushEditControllerDelegate)?
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var brushPreviewView: ImglyKit.BrushPreviewView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var activeBrushTool: ImglyKit.BrushTool? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var size: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var hardness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
}
extension ImglyKit.BrushEditController : ImglyKit.SliderEditControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension ImglyKit.BrushEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension ImglyKit.BrushEditController : ImglyKit.PhotoEditModelSettable {
}
@objc(PESDKBrushEditControllerDelegate) public protocol BrushEditControllerDelegate {
  @objc func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func brushEditControllerPhotoEditModelDidChange(_ brushEditController: ImglyKit.BrushEditController)
  @objc func brushEditControllerTargetScrollView(_ brushEditController: ImglyKit.BrushEditController) -> UIKit.UIScrollView?
  @objc func brushEditControllerSpriteViewController(_ brushEditController: ImglyKit.BrushEditController) -> ImglyKit.SpriteViewController?
  @objc func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToSize size: CoreFoundation.CGFloat)
  @objc func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToHardness hardness: CoreFoundation.CGFloat)
  @objc func brushEditControllerDidStartSliding(_ brushEditController: ImglyKit.BrushEditController)
  @objc func brushEditControllerDidEndSliding(_ brushEditController: ImglyKit.BrushEditController)
}
@_inheritsConvenienceInitializers @objc(PESDKBrushListSectionController) open class BrushListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKBrushMenuItem) open class BrushMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let brushTool: ImglyKit.BrushTool
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(brushTool: ImglyKit.BrushTool, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKBrushPreviewView) @_Concurrency.MainActor(unsafe) open class BrushPreviewView : UIKit.UIVisualEffectView {
  @objc @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var width: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var hardness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public struct BrushSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var paths: [ImglyKit.PathModel]
  public func pathModel(with uuid: Foundation.UUID) -> (Swift.Int, ImglyKit.PathModel)?
  public init()
  public init(paths: [ImglyKit.PathModel])
  public static func == (a: ImglyKit.BrushSpriteModel, b: ImglyKit.BrushSpriteModel) -> Swift.Bool
}
public func == (lhs: [ImglyKit.PathModel], rhs: [ImglyKit.PathModel]) -> Swift.Bool
public func != (lhs: [ImglyKit.PathModel], rhs: [ImglyKit.PathModel]) -> Swift.Bool
@objcMembers @objc(PESDKBrushToolController) @_Concurrency.MainActor(unsafe) open class BrushToolController : ImglyKit.MenuToolController, ImglyKit.BrushEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let brushEditController: ImglyKit.BrushEditController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(brushEditController: ImglyKit.BrushEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc public func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func brushEditControllerPhotoEditModelDidChange(_ brushEditController: ImglyKit.BrushEditController)
  @_Concurrency.MainActor(unsafe) @objc public func brushEditControllerTargetScrollView(_ brushEditController: ImglyKit.BrushEditController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc public func brushEditControllerSpriteViewController(_ brushEditController: ImglyKit.BrushEditController) -> ImglyKit.SpriteViewController?
  @_Concurrency.MainActor(unsafe) @objc public func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToSize size: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToHardness hardness: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public func brushEditControllerDidStartSliding(_ brushEditController: ImglyKit.BrushEditController)
  @_Concurrency.MainActor(unsafe) @objc public func brushEditControllerDidEndSliding(_ brushEditController: ImglyKit.BrushEditController)
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
}
extension ImglyKit.BrushToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum BrushTool : Swift.Int {
  case color
  case size
  case hardness
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BrushOverlayAction : Swift.Int {
  case undo
  case redo
  case delete
  case bringToFront
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKBrushToolControllerOptions) open class BrushToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedBrushTools: [ImglyKit.BrushTool]
  @objc final public let brushToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.BrushTool) -> Swift.Void)?
  @objc final public let brushToolSelectedClosure: ((ImglyKit.BrushTool) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.BrushTool) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.BrushOverlayAction) -> Swift.Void)?
  final public let allowedBrushOverlayActions: [ImglyKit.BrushOverlayAction]
  @objc final public let brushActionSelectedClosure: ((ImglyKit.BrushOverlayAction) -> Swift.Void)?
  final public let minimumBrushSize: ImglyKit.FloatValue
  final public let maximumBrushSize: ImglyKit.FloatValue
  final public let defaultBrushSize: ImglyKit.FloatValue
  @objc final public let minimumBrushHardness: CoreFoundation.CGFloat
  @objc final public let maximumBrushHardness: CoreFoundation.CGFloat
  @objc final public let defaultBrushHardness: CoreFoundation.CGFloat
  @objc final public let defaultBrushColor: UIKit.UIColor
  @objc final public let usesUniformHardness: Swift.Bool
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.BrushToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKBrushToolControllerOptionsBuilder) open class BrushToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedBrushTools: [ImglyKit.BrushTool]
  @objc open var brushToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.BrushTool) -> Swift.Void)?
  @objc open var brushToolSelectedClosure: ((ImglyKit.BrushTool) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.BrushTool) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.BrushOverlayAction) -> Swift.Void)?
  open var allowedBrushOverlayActions: [ImglyKit.BrushOverlayAction]
  @objc open var brushActionSelectedClosure: ((ImglyKit.BrushOverlayAction) -> Swift.Void)?
  open var minimumBrushSize: ImglyKit.FloatValue
  open var maximumBrushSize: ImglyKit.FloatValue
  open var defaultBrushSize: ImglyKit.FloatValue
  @objc open var minimumBrushHardness: CoreFoundation.CGFloat
  @objc open var maximumBrushHardness: CoreFoundation.CGFloat
  @objc open var defaultBrushHardness: CoreFoundation.CGFloat
  @objc open var defaultBrushColor: UIKit.UIColor
  @objc open var usesUniformHardness: Swift.Bool
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.BrushToolControllerOptions)
  @objc deinit
}
extension ImglyKit.BrushToolControllerOptionsBuilder {
  @objc(allowedBrushTools) dynamic open var _objCAllowedBrushTools: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedBrushOverlayActions) dynamic open var _objCAllowedBrushOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(minimumBrushSize) dynamic open var _objCMinimumBrushSize: ImglyKit._ObjCFloatValue {
    @objc get
    @objc set
  }
  @objc(maximumBrushSize) dynamic open var _objCMaximumBrushSize: ImglyKit._ObjCFloatValue {
    @objc get
    @objc set
  }
  @objc(defaultBrushSize) dynamic open var _objCDefaultBrushSize: ImglyKit._ObjCFloatValue {
    @objc get
    @objc set
  }
}
extension ImglyKit.IMGLYWrapper where Base : Foundation.Bundle {
  public static var resourceBundle: Foundation.Bundle {
    get
  }
}
extension Foundation.Bundle {
  @available(*, deprecated, renamed: "imgly.resourceBundle")
  public static var imglyBundle: Foundation.Bundle {
    get
  }
  @available(*, deprecated, renamed: "imgly_resourceBundle", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(imglyBundle) public static var _objC_imglyBundle: Foundation.Bundle {
    @objc get
  }
  @objc(imgly_resourceBundle) public static var _objC_imgly_resourceBundle: Foundation.Bundle {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKButton) @_Concurrency.MainActor(unsafe) open class Button : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setActionClosure(_ actionClosure: ((Swift.AnyObject) -> Swift.Void)?, for controlEvents: UIKit.UIControl.Event)
  @objc @_Concurrency.MainActor(unsafe) open var actionClosure: ((Swift.AnyObject) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var registeredControlEvents: UIKit.UIControl.Event? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var touchAreaInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.IMGLYWrapper where Base == CoreGraphics.CGContext {
  public func addRoundedRect(of size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGSize)
  public func addRoundedRect(of size: CoreFoundation.CGSize, topLeftRadius: CoreFoundation.CGFloat, topRightRadius: CoreFoundation.CGFloat, bottomLeftRadius: CoreFoundation.CGFloat, bottomRightRadius: CoreFoundation.CGFloat)
}
infix operator ~== : ComparisonPrecedence
extension ImglyKit.IMGLYWrapper where Base == CoreFoundation.CGRect {
  public func fitted(into targetRect: CoreFoundation.CGRect, with contentMode: UIKit.UIView.ContentMode) -> CoreFoundation.CGRect
}
public struct Camera : SwiftUI.View {
  public init(configuration: ImglyKit.Configuration? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8ImglyKit6CameraV4bodyQrvp", 0) __
}
extension ImglyKit.Camera {
  public func onDidCancel(perform action: @escaping () -> Swift.Void) -> ImglyKit.Camera
  public func onDidSave(perform action: @escaping (_ result: ImglyKit.CameraResult) -> Swift.Void) -> ImglyKit.Camera
  public func onRequestLocationAccess(perform action: @escaping (CoreLocation.CLLocationManager) -> Swift.Void) -> ImglyKit.Camera
}
@objc public enum CameraControllerError : Swift.Int, Swift.Error {
  case multipleCallsToSetup
  case unableToInitializeCaptureDevice
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCameraController) open class CameraController : ObjectiveC.NSObject {
  @objc open var locationAccessRequestClosure: ((CoreLocation.CLLocationManager) -> Swift.Void)?
  @objc final public let videoPreviewView: UIKit.UIView
  @objc final public let videoPreviewViewContainer: UIKit.UIView
  @objc dynamic open var recordingMode: ImglyKit.RecordingMode {
    @objc get
    @objc set
  }
  @objc open var runningStateChangedHandler: ((_ running: Swift.Bool) -> Swift.Void)?
  @objc open var cameraPositionChangedHandler: ((_ previousPosition: AVFoundation.AVCaptureDevice.Position, _ newPosition: AVFoundation.AVCaptureDevice.Position) -> Swift.Void)?
  @objc open var recordingModeChangedHandler: ((_ recordingMode: ImglyKit.RecordingMode) -> Swift.Void)?
  @objc open var availableCameraPositionsChangedHandler: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc open var flashChangedHandler: ((_ hasFlash: Swift.Bool, _ flashMode: AVFoundation.AVCaptureDevice.FlashMode, _ flashAvailable: Swift.Bool) -> Swift.Void)?
  @objc open var torchChangedHandler: ((_ hasTorch: Swift.Bool, _ torchMode: AVFoundation.AVCaptureDevice.TorchMode, _ torchAvailable: Swift.Bool) -> Swift.Void)?
  @objc open var capturingStillImageHandler: ((_ capturing: Swift.Bool) -> Swift.Void)?
  @objc open var sessionInterruptionHandler: ((_ interrupted: Swift.Bool) -> Swift.Void)?
  @objc open var sessionRuntimeErrorHandler: ((_ error: Foundation.NSError) -> Swift.Void)?
  @objc open var authorizationFailedHandler: (() -> Swift.Void)?
  @objc open var videoRecordingStartedHandler: (() -> Swift.Void)?
  @objc open var videoRecordingFinishedHandler: ((_ fileURL: Foundation.URL) -> Swift.Void)?
  @objc open var videoRecordingFailedHandler: (() -> Swift.Void)?
  @objc open var videoRecordingProgressHandler: ((_ seconds: Swift.Int) -> Swift.Void)?
  @objc open var previewFrameChangedHandler: ((_ previewFrame: CoreFoundation.CGRect) -> Swift.Void)?
  @objc open var focusPointChangedHandler: ((_ point: CoreFoundation.CGPoint) -> Swift.Void)?
  @objc open var focusModeChangedHandler: ((_ focusMode: AVFoundation.AVCaptureDevice.FocusMode, _ exposureMode: AVFoundation.AVCaptureDevice.ExposureMode) -> Swift.Void)?
  @objc open var focusDisabledHandler: (() -> Swift.Void)?
  @objc open var videoOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var audioOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var videoRecordingFileType: AVFoundation.AVFileType
  @objc open var videoRecordingFileExtension: Swift.String
  @objc open var assetWriterConfigurationClosure: ((AVFoundation.AVAssetWriter) -> Swift.Void)?
  open var cameraPosition: AVFoundation.AVCaptureDevice.Position? {
    get
  }
  open var cameraPositions: [AVFoundation.AVCaptureDevice.Position] {
    get
    set
  }
  open var flashModes: [AVFoundation.AVCaptureDevice.FlashMode] {
    get
    set
  }
  open var torchModes: [AVFoundation.AVCaptureDevice.TorchMode] {
    get
    set
  }
  @objc open var tapToFocusEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var effect: ImglyKit.Effect? {
    @objc get
    @objc set
  }
  @objc open var effectIntensity: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var includeEffectInOutput: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var includeUserLocation: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  @objc(setupWithInitialRecordingMode:error:) open func setup(with recordingMode: ImglyKit.RecordingMode) throws
  @objc(setupWithInitialRecordingMode:completion:error:) open func setup(with recordingMode: ImglyKit.RecordingMode, completion: (() -> Swift.Void)?) throws
  @objc open func startCamera()
  @objc open func stopCamera()
  @objc open func toggleCameraPosition()
  @objc(switchToCameraAtPosition:) open func switchToCamera(at position: AVFoundation.AVCaptureDevice.Position)
  @objc open func takePhoto(_ completion: @escaping (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
  @objc open func takePhotoAndReturnData(_ completion: @escaping (Foundation.Data?, Foundation.NSError?) -> Swift.Void)
  @objc open func startVideoRecording()
  @objc open func stopVideoRecording()
  @objc open func selectNextLightMode()
  @objc open func zoom(withDesiredZoomFactor zoomFactor: CoreFoundation.CGFloat)
}
extension ImglyKit.CameraController : Foundation.NSKeyValueObservingCustomization {
  public static func keyPathsAffectingValue(for key: Swift.AnyKeyPath) -> Swift.Set<Swift.AnyKeyPath>
  public static func automaticallyNotifiesObservers(for key: Swift.AnyKeyPath) -> Swift.Bool
}
extension ImglyKit.CameraController : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
extension ImglyKit.CameraController {
  @objc(cameraPositions) dynamic open var _objCCameraPositions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(flashModes) dynamic open var _objCFlashModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(torchModes) dynamic open var _objCTorchModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objcMembers @objc(PESDKCameraViewController) @_Concurrency.MainActor(unsafe) open class CameraViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(configuration: ImglyKit.Configuration = Configuration())
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var backgroundContainerView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var topControlsView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cameraPreviewContainer: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var bottomControlsView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var bottomSafeAreaHidingView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cancelButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var flashButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var switchCameraButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cameraRollButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var actionButtonContainer: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var recordingTimeLabel: UIKit.UILabel {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var actionButton: UIKit.UIControl? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var filterSelectionButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var filterIntensitySlider: ImglyKit.Slider {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var swipeRightGestureRecognizer: UIKit.UISwipeGestureRecognizer {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var swipeLeftGestureRecognizer: UIKit.UISwipeGestureRecognizer {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var pinchGestureRecognizer: UIKit.UIPinchGestureRecognizer {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var filterSelectionController: ImglyKit.FilterSelectionController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cameraController: ImglyKit.CameraController? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cancelBlock: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var completionBlock: ((ImglyKit.CameraResult) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var locationAccessRequestClosure: ((CoreLocation.CLLocationManager) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutomaticallyForwardAppearanceMethods: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setLastImageFromRollAsPreview()
  @objc @_Concurrency.MainActor(unsafe) open func takePhoto(_ sender: ImglyKit.Button?)
  @objc @_Concurrency.MainActor(unsafe) open func recordVideo(_ sender: ImglyKit.VideoRecordButton?)
  @objc deinit
}
extension ImglyKit.CameraViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension ImglyKit.CameraViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCameraResult) public class CameraResult : ObjectiveC.NSObject {
  @objc final public let data: Foundation.Data?
  @objc final public let url: Foundation.URL?
  final public let model: ImglyKit.PhotoEditModel
  @objc deinit
}
extension ImglyKit.CameraResult {
  @objc(model) dynamic public var _objCPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
  }
}
extension ImglyKit.CameraViewController {
  @objc(photoEditModel) @_Concurrency.MainActor(unsafe) dynamic open var _objCPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCameraViewControllerOptions) open class CameraViewControllerOptions : ObjectiveC.NSObject {
  @objc final public let backgroundColor: UIKit.UIColor?
  @objc final public let cancelButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let flashButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let switchCameraButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let cameraRollButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let photoActionButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let filterSelectorButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let timeLabelConfigurationClosure: ((UIKit.UILabel) -> Swift.Void)?
  @objc final public let filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let recordingModeButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.RecordingMode) -> Swift.Void)?
  @objc final public let cropToSquare: Swift.Bool
  @objc final public let maximumVideoLength: Swift.Int
  @objc final public let tapToFocusEnabled: Swift.Bool
  @objc final public let showCancelButton: Swift.Bool
  @objc final public let showCameraRoll: Swift.Bool
  @objc final public let showFilters: Swift.Bool
  @objc final public let showFilterIntensitySlider: Swift.Bool
  @objc final public let initialFilterIntensity: CoreFoundation.CGFloat
  final public let allowedCameraPositions: [AVFoundation.AVCaptureDevice.Position]
  final public let allowedFlashModes: [AVFoundation.AVCaptureDevice.FlashMode]
  final public let allowedTorchModes: [AVFoundation.AVCaptureDevice.TorchMode]
  final public let allowedRecordingModes: [ImglyKit.RecordingMode]
  final public let allowedRecordingOrientations: [ImglyKit.RecordingOrientation]
  @objc final public let videoOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc final public let audioOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc final public let videoRecordingFileType: AVFoundation.AVFileType
  @objc final public let videoRecordingFileExtension: Swift.String
  @objc final public let assetWriterConfigurationClosure: ((AVFoundation.AVAssetWriter) -> Swift.Void)?
  @objc final public let includeUserLocation: Swift.Bool
  @objc final public let writeVideoWithFilterApplied: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCameraViewControllerOptionsBuilder) open class CameraViewControllerOptionsBuilder : ObjectiveC.NSObject {
  @objc open var backgroundColor: UIKit.UIColor?
  @objc open var cancelButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var flashButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var switchCameraButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var cameraRollButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var photoActionButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var filterSelectorButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var timeLabelConfigurationClosure: ((UIKit.UILabel) -> Swift.Void)?
  @objc open var filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var recordingModeButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.RecordingMode) -> Swift.Void)?
  @objc open var cropToSquare: Swift.Bool
  @objc open var maximumVideoLength: Swift.Int
  @objc open var tapToFocusEnabled: Swift.Bool
  @objc open var showCancelButton: Swift.Bool
  @objc open var showCameraRoll: Swift.Bool
  @objc open var showFilters: Swift.Bool
  @objc open var showFilterIntensitySlider: Swift.Bool
  @objc open var initialFilterIntensity: CoreFoundation.CGFloat
  open var allowedCameraPositions: [AVFoundation.AVCaptureDevice.Position]
  open var allowedFlashModes: [AVFoundation.AVCaptureDevice.FlashMode]
  open var allowedTorchModes: [AVFoundation.AVCaptureDevice.TorchMode]
  open var allowedRecordingModes: [ImglyKit.RecordingMode]
  open var allowedRecordingOrientations: [ImglyKit.RecordingOrientation]
  @objc open var videoOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var audioOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var videoRecordingFileType: AVFoundation.AVFileType
  @objc open var videoRecordingFileExtension: Swift.String
  @objc open var assetWriterConfigurationClosure: ((AVFoundation.AVAssetWriter) -> Swift.Void)?
  @objc open var includeUserLocation: Swift.Bool
  @objc open var writeVideoWithFilterApplied: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.CameraViewControllerOptionsBuilder {
  @objc(allowedCameraPositions) dynamic open var _objCAllowedCameraPositions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedFlashModes) dynamic open var _objCAllowedFlashModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedTorchModes) dynamic open var _objCAllowedTorchModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedRecordingModes) dynamic open var _objCAllowedRecordingModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedRecordingOrientations) dynamic open var _objCallowedRecordingOrientations: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCancelButton) @_Concurrency.MainActor(unsafe) open class CancelButton : ImglyKit.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(PESDKCanvasViewDataSource) public protocol CanvasViewDataSource {
  @objc func canvasViewNormalizedCropRect(_ canvasView: ImglyKit.CanvasView) -> CoreFoundation.CGRect
  @objc func canvasViewAppliedOrientation(_ canvasView: ImglyKit.CanvasView) -> ImglyKit.Orientation
  @objc func canvasViewStraightenAngle(_ canvasView: ImglyKit.CanvasView) -> CoreFoundation.CGFloat
  @objc func canvasViewImageInsets(_ canvasView: ImglyKit.CanvasView) -> UIKit.UIEdgeInsets
  @objc func canvasViewOutputImageSize(_ canvasView: ImglyKit.CanvasView) -> CoreFoundation.CGSize
}
public protocol CanvasViewMetalDelegate : AnyObject {
  func canvasView(_ canvasView: ImglyKit.CanvasView, didAddPathModel pathModel: ImglyKit.PathModel)
}
@objcMembers @objc(PESDKCanvasView) @_Concurrency.MainActor(unsafe) open class CanvasView : MetalKit.MTKView {
  @objc @_Concurrency.MainActor(unsafe) final public let painting: ImglyKit.Painting
  @objc @_Concurrency.MainActor(unsafe) open var activeTool: ImglyKit.Tool
  @objc @_Concurrency.MainActor(unsafe) weak open var dataSource: (any ImglyKit.CanvasViewDataSource)?
  @_Concurrency.MainActor(unsafe) weak open var canvasDelegate: (any ImglyKit.CanvasViewMetalDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public let uuid: Foundation.UUID
  @objc @_Concurrency.MainActor(unsafe) open var currentlyPainting: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) required public init(painting: ImglyKit.Painting, activeTool: ImglyKit.Tool, uuid: Foundation.UUID, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func handlePan(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func convertPointToDocument(_ pt: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
extension ImglyKit.CanvasView : ImglyKit.Identifiable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCircleGradientView) @_Concurrency.MainActor(unsafe) open class CircleGradientView : ImglyKit.FocusGradientView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKClarityFilter) open class ClarityFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKClipTrimToolController) @_Concurrency.MainActor(unsafe) open class ClipTrimToolController : ImglyKit.TrimToolController {
  @objc @_Concurrency.MainActor(unsafe) open var deleteOverlayButton: ImglyKit.OverlayButton? {
    get
  }
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
@objc public enum ClipTrimOverlayAction : Swift.Int {
  case delete
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKClipTrimToolControllerOptions) open class ClipTrimToolControllerOptions : ImglyKit.TrimToolOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  final public let allowedClipTrimOverlayActions: [ImglyKit.ClipTrimOverlayAction]
  @objc final public let clipTrimOverlayActionSelectedClosure: ((ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.ClipTrimToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKClipTrimToolControllerOptionsBuilder) open class ClipTrimToolControllerOptionsBuilder : ImglyKit.TrimToolOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  open var allowedClipTrimOverlayActions: [ImglyKit.ClipTrimOverlayAction]
  @objc open var clipTrimOverlayActionSelectedClosure: ((ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.ClipTrimToolControllerOptions)
  @objc deinit
}
public struct CollectionViewTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(collectionView: UIKit.UICollectionView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColor) open class Color : ObjectiveC.NSObject {
  @objc final public let color: UIKit.UIColor
  @objc final public let colorName: Swift.String
  @objc convenience public init(color: UIKit.UIColor, colorName: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPipette) open class PipettableColor : ImglyKit.Color {
  @objc public init(color: UIKit.UIColor = UIColor.clear, colorName: Swift.String)
  @objc deinit
}
@objc(PESDKColorCollectionViewDelegate) public protocol ColorCollectionViewDelegate {
  @objc func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
}
@objcMembers @objc(PESDKColorCollectionView) @_Concurrency.MainActor(unsafe) open class ColorCollectionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var colorPalette: ImglyKit.ColorPalette
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.ColorCollectionViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectedColor: ImglyKit.Color? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(colorPalette: ImglyKit.ColorPalette)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func selectColor(atIndex index: Swift.Int, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.ColorCollectionView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension ImglyKit.ColorCollectionView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKColorCollectionViewCell) @_Concurrency.MainActor(unsafe) open class ColorCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) open var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let colorView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let iconView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKColorListSectionController) open class ColorListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func sizeForItem(at index: Swift.Int) -> CoreFoundation.CGSize
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
public struct ColorMatrix {
  public var data: [CoreFoundation.CGFloat] {
    get
  }
  public init()
  public init(data: [CoreFoundation.CGFloat])
  public init(exposure: CoreFoundation.CGFloat)
  public init(contrast: CoreFoundation.CGFloat)
  public init(saturation: CoreFoundation.CGFloat)
  public init(brightness: CoreFoundation.CGFloat)
  public mutating func concatenate(_ matrix: ImglyKit.ColorMatrix)
  public func concatenating(_ matrix: ImglyKit.ColorMatrix) -> ImglyKit.ColorMatrix
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorMenuItem) open class ColorMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let color: UIKit.UIColor
  @objc final public let colorName: Swift.String
  @objc convenience public init(color: UIKit.UIColor, colorName: Swift.String)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPipetteMenuItem) open class ColorPipetteMenuItem : ImglyKit.ColorMenuItem {
  public var normalizedPosition: CoreFoundation.CGPoint?
  @objc deinit
}
@objcMembers @objc(PESDKColorPalette) open class ColorPalette : ObjectiveC.NSObject {
  @objc final public let colors: [ImglyKit.Color]
  @objc public init(colors: [ImglyKit.Color])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPickerView) @_Concurrency.MainActor(unsafe) open class ColorPickerView : UIKit.UIControl {
  @objc @_Concurrency.MainActor(unsafe) public var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_Concurrency.MainActor(unsafe) open class ColorPickerViewController<SpriteModelType, GestureController, SelectionView> : ImglyKit.ViewController, ImglyKit.ProxyZoomControllerDelegate, ImglyKit.ColorPipetteViewDelegate where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.ColorPickerViewControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var colorPipetteView: ImglyKit.ColorPipetteView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var colorPickerView: ImglyKit.ColorPickerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var containerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?
  @objc @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) required public init(spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor(unsafe) open var isColorPipetteVisible: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func toggleColorPipette(at normalizedPosition: CoreFoundation.CGPoint? = nil)
  @_Concurrency.MainActor(unsafe) open func showColorPipette(at normalizedPosition: CoreFoundation.CGPoint? = nil)
  @objc @_Concurrency.MainActor(unsafe) open func hideColorPipette()
  @objc @_Concurrency.MainActor(unsafe) open var isColorPickerVisible: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open func toggleColorPicker()
  @objc @_Concurrency.MainActor(unsafe) open func showColorPicker()
  @objc @_Concurrency.MainActor(unsafe) open func hideColorPicker()
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc public func colorPipetteView(_ colorPipetteView: ImglyKit.ColorPipetteView, didPick newColor: Swift.Bool, _ color: UIKit.UIColor, at normalizedPosition: CoreFoundation.CGPoint)
  @objc deinit
}
extension ImglyKit.ColorPickerViewController : ImglyKit.SpriteEditControllerDelegate {
}
public protocol ColorPickerViewControllerDelegate : AnyObject {
  func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor, at normalizedPosition: CoreFoundation.CGPoint) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  func colorPickerViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerPreviewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.MediaEditPreviewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
}
@objc(PESDKColorPipetteViewDelegate) public protocol ColorPipetteViewDelegate {
  @objc func colorPipetteView(_ colorPipetteView: ImglyKit.ColorPipetteView, didPick newColor: Swift.Bool, _ color: UIKit.UIColor, at normalizedPosition: CoreFoundation.CGPoint)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPipetteView) @_Concurrency.MainActor(unsafe) open class ColorPipetteView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.ColorPipetteViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var normalizedPosition: CoreFoundation.CGPoint? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var position: CoreFoundation.CGPoint? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var magnificationScale: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayView: ImglyKit.ColorPipetteOverlayView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var magnificationView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var previewController: ImglyKit.MediaEditPreviewController? {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setNeedsDisplay()
  @objc deinit
}
extension ImglyKit.ColorPipetteView : MetalKit.MTKViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func draw(in view: MetalKit.MTKView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKColorPipetteOverlayView) @_Concurrency.MainActor(unsafe) open class ColorPipetteOverlayView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var pickedColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.TextColorToolController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
extension ImglyKit.StickerColorToolController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
extension ImglyKit.BrushColorToolController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@_Concurrency.MainActor(unsafe) open class ColorToolController<SpriteModelType, GestureController, SelectionView> : ImglyKit.MenuToolController, ImglyKit.BrandedTool where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor, at normalizedPosition: CoreFoundation.CGPoint) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func colorPickerViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func colorPickerViewControllerPreviewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.MediaEditPreviewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func colorPickerViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func colorPickerViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func colorPickerViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @objc deinit
}
extension ImglyKit.ColorToolController : ImglyKit.ColorPickerViewControllerDelegate {
}
extension ImglyKit.ColorToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKColorToolControllerOptions) open class ColorToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let availableColors: [ImglyKit.Color]
  @objc final public let colorActionButtonConfigurationClosure: ((ImglyKit.ColorCollectionViewCell, UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc final public let colorActionSelectedClosure: ((UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.ColorToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKColorToolControllerOptionsBuilder) open class ColorToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var availableColors: [ImglyKit.Color]
  @objc open var colorActionButtonConfigurationClosure: ((ImglyKit.ColorCollectionViewCell, UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc open var colorActionSelectedClosure: ((UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.ColorToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKColorizeFilter) open class ColorizeFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputColor: UIKit.UIColor?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CompositeTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(transitionAnimators: [any ImglyKit.TransitionAnimator])
  public init(_ transitionAnimators: any ImglyKit.TransitionAnimator...)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func finishPresentationAnimation()
  public func prepareDismissalAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@_inheritsConvenienceInitializers @objc(PESDKCompositionActionFooterView) @_Concurrency.MainActor(unsafe) open class CompositionActionFooterView : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) final public let label: ImglyKit.SubtleLabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKCompositionActionListSectionController) open class CompositionActionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc override open var supportedElementKinds: [Swift.String] {
    @objc get
  }
  @objc override open func viewForSupplementaryElement(ofKind elementKind: Swift.String, at index: Swift.Int) -> UIKit.UICollectionReusableView
  @objc override open func sizeForSupplementaryView(ofKind elementKind: Swift.String, at index: Swift.Int) -> CoreFoundation.CGSize
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCompositionActionMenuItem) open class CompositionActionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let title: Swift.String?
  @objc final public let icon: UIKit.UIImage
  final public let actionClosure: (inout ImglyKit.PhotoEditModel) -> Swift.Void
  @objc final public let supplementaryText: Swift.String?
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKCompositionEditController) @_Concurrency.MainActor(unsafe) open class CompositionEditController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var proxyZoomController: ImglyKit.ProxyZoomController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimViewContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimView: ImglyKit.VideoTrimView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.CompositionEditControllerDelegate)?
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
extension ImglyKit.CompositionEditController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.CompositionEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension ImglyKit.CompositionEditController : ImglyKit.VideoTrimViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
extension ImglyKit.CompositionEditController : ImglyKit.ProxyZoomControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc(PESDKCompositionEditControllerDelegate) public protocol CompositionEditControllerDelegate {
  @objc func compositionEditControllerPreviewController(_ compositionEditController: ImglyKit.CompositionEditController) -> ImglyKit.VideoEditPreviewController?
  @objc func compositionEditControllerDidChangePhotoEditModel(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc func compositionEditControllerDidStartDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc func compositionEditControllerDidStopDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc func compositionEditControllerTargetScrollView(_ compositionEditController: ImglyKit.CompositionEditController) -> UIKit.UIScrollView?
}
@_inheritsConvenienceInitializers @objc(PESDKCompositionListSectionController) open class CompositionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc override open func canMoveItem(at index: Swift.Int) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCompositionMenuItem) open class CompositionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
public struct CompositionModel : Swift.Equatable {
  public var clips: [ImglyKit.VideoClipModel]
  public func clipModel(with uuid: Foundation.UUID) -> (Swift.Int, ImglyKit.VideoClipModel)?
  public init()
  public init(clips: [ImglyKit.VideoClipModel])
  public static func == (a: ImglyKit.CompositionModel, b: ImglyKit.CompositionModel) -> Swift.Bool
}
extension ImglyKit.CompositionModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKCompositionToolController) @_Concurrency.MainActor(unsafe) open class CompositionToolController : ImglyKit.MenuToolController, ImglyKit.CompositionEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let compositionEditController: ImglyKit.CompositionEditController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(compositionEditController: ImglyKit.CompositionEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: any ImglyKit.MenuItem, from previousMenuItems: [any ImglyKit.MenuItem], to menuItems: [any ImglyKit.MenuItem])
  @_Concurrency.MainActor(unsafe) @objc public func compositionEditControllerPreviewController(_ compositionEditController: ImglyKit.CompositionEditController) -> ImglyKit.VideoEditPreviewController?
  @_Concurrency.MainActor(unsafe) @objc public func compositionEditControllerDidChangePhotoEditModel(_ compositionEditController: ImglyKit.CompositionEditController)
  @_Concurrency.MainActor(unsafe) @objc public func compositionEditControllerDidStartDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @_Concurrency.MainActor(unsafe) @objc public func compositionEditControllerDidStopDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @_Concurrency.MainActor(unsafe) @objc public func compositionEditControllerTargetScrollView(_ compositionEditController: ImglyKit.CompositionEditController) -> UIKit.UIScrollView?
  @objc @_Concurrency.MainActor(unsafe) open var playPauseButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
}
extension ImglyKit.CompositionToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
extension ImglyKit.CompositionToolController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, targetIndexPathForMoveFromItemAt originalIndexPath: Foundation.IndexPath, toProposedIndexPath proposedIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
}
extension ImglyKit.CompositionToolController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@available(iOS 14, *)
extension ImglyKit.CompositionToolController : PhotosUI.PHPickerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
extension ImglyKit.CompositionToolController : ImglyKit.VideoClipToolControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoClipToolController(_ videoClipToolController: ImglyKit.VideoClipToolController, didSelect videos: [ImglyKit.VideoClip])
}
@objc public enum CompositionOverlayAction : Swift.Int {
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKVideoClipLibraryMode) public enum VideoClipLibraryMode : Swift.Int {
  case personal
  case predefined
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKCompositionToolControllerOptions) open class CompositionToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  final public let allowedCompositionOverlayActions: [ImglyKit.CompositionOverlayAction]
  @objc final public let compositionOverlayActionSelectedClosure: ((ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  @objc final public let compositionTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc final public let videoClipLibraryMode: ImglyKit.VideoClipLibraryMode
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.CompositionToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKCompositionToolControllerOptionsBuilder) open class CompositionToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  open var allowedCompositionOverlayActions: [ImglyKit.CompositionOverlayAction]
  @objc open var compositionOverlayActionSelectedClosure: ((ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  @objc open var compositionTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc open var videoClipLibraryMode: ImglyKit.VideoClipLibraryMode
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.CompositionToolControllerOptions)
  @objc deinit
}
extension ImglyKit.CompositionToolControllerOptionsBuilder {
  @objc(allowedCompositionOverlayActions) dynamic open var _objCallowedCompositionOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
extension ImglyKit.Configuration {
  @objc dynamic public var photoEditViewControllerOptions: ImglyKit.PhotoEditViewControllerOptions {
    @objc get
  }
}
extension ImglyKit.ConfigurationBuilder {
  @objc dynamic open func configurePhotoEditViewController(_ builder: (ImglyKit.PhotoEditViewControllerOptionsBuilder) -> Swift.Void)
}
extension ImglyKit.Configuration {
  @objc dynamic public var videoEditViewControllerOptions: ImglyKit.VideoEditViewControllerOptions {
    @objc get
  }
  @objc dynamic public var trimToolControllerOptions: ImglyKit.TrimToolControllerOptions {
    @objc get
  }
  @objc dynamic public var compositionToolControllerOptions: ImglyKit.CompositionToolControllerOptions {
    @objc get
  }
  @objc dynamic public var clipTrimToolControllerOptions: ImglyKit.ClipTrimToolControllerOptions {
    @objc get
  }
  @objc dynamic public var videoClipToolControllerOptions: ImglyKit.VideoClipToolControllerOptions {
    @objc get
  }
  @objc dynamic public var audioClipToolControllerOptions: ImglyKit.AudioClipToolControllerOptions {
    @objc get
  }
  @objc dynamic public var audioToolControllerOptions: ImglyKit.AudioToolControllerOptions {
    @objc get
  }
  @objc dynamic public var stickerDurationToolControllerOptions: ImglyKit.StickerDurationToolControllerOptions {
    @objc get
  }
  @objc dynamic public var textDurationToolControllerOptions: ImglyKit.TextDurationToolControllerOptions {
    @objc get
  }
  @objc dynamic public var textDesignDurationToolControllerOptions: ImglyKit.TextDesignDurationToolControllerOptions {
    @objc get
  }
}
extension ImglyKit.ConfigurationBuilder {
  @objc dynamic open func configureTrimToolController(_ builder: (ImglyKit.TrimToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureCompositionToolController(_ builder: (ImglyKit.CompositionToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureVideoClipToolController(_ builder: (ImglyKit.VideoClipToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureClipTrimToolController(_ builder: (ImglyKit.ClipTrimToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureAudioToolController(_ builder: (ImglyKit.AudioToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureAudioClipToolController(_ builder: (ImglyKit.AudioClipToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureStickerDurationToolController(_ builder: (ImglyKit.StickerDurationToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureTextDurationToolController(_ builder: (ImglyKit.TextDurationToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureTextDesignDurationToolController(_ builder: (ImglyKit.TextDesignDurationToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureVideoEditViewController(_ builder: (ImglyKit.VideoEditViewControllerOptionsBuilder) -> Swift.Void)
}
public typealias ButtonConfigurationClosure = (ImglyKit.Button) -> Swift.Void
public typealias ViewConfigurationClosure = (UIKit.UIView) -> Swift.Void
public typealias DidEnterToolClosure = () -> Swift.Void
public typealias WillLeaveToolClosure = () -> Swift.Void
public typealias ToolbarItemClosure = (ImglyKit.ToolbarItem) -> Swift.Void
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKConfiguration) open class Configuration : ObjectiveC.NSObject {
  final public let theme: ImglyKit.Theme
  final public let appearanceProxyConfigurationClosure: ((ImglyKit.Theme) -> Swift.Void)?
  @objc final public let assetCatalog: ImglyKit.AssetCatalog
  @objc public var cameraViewControllerOptions: ImglyKit.CameraViewControllerOptions {
    @objc get
  }
  @objc public var filterToolControllerOptions: ImglyKit.FilterToolControllerOptions {
    @objc get
  }
  @objc public var overlayToolControllerOptions: ImglyKit.OverlayToolControllerOptions {
    @objc get
  }
  @objc public var stickerToolControllerOptions: ImglyKit.StickerToolControllerOptions {
    @objc get
  }
  @objc public var stickerOptionsToolControllerOptions: ImglyKit.StickerOptionsToolControllerOptions {
    @objc get
  }
  @objc public var stickerColorToolControllerOptions: ImglyKit.ColorToolControllerOptions {
    @objc get
  }
  @objc public var transformToolControllerOptions: ImglyKit.TransformToolControllerOptions {
    @objc get
  }
  @objc public var focusToolControllerOptions: ImglyKit.FocusToolControllerOptions {
    @objc get
  }
  @objc public var textToolControllerOptions: ImglyKit.TextToolControllerOptions {
    @objc get
  }
  @objc public var textOptionsToolControllerOptions: ImglyKit.TextOptionsToolControllerOptions {
    @objc get
  }
  @objc public var textFontToolControllerOptions: ImglyKit.TextFontToolControllerOptions {
    @objc get
  }
  @objc public var textColorToolControllerOptions: ImglyKit.TextColorToolControllerOptions {
    @objc get
  }
  @objc public var adjustToolControllerOptions: ImglyKit.AdjustToolControllerOptions {
    @objc get
  }
  @objc public var brushToolControllerOptions: ImglyKit.BrushToolControllerOptions {
    @objc get
  }
  @objc public var brushColorToolControllerOptions: ImglyKit.BrushColorToolControllerOptions {
    @objc get
  }
  @objc public var frameToolControllerOptions: ImglyKit.FrameToolControllerOptions {
    @objc get
  }
  @objc public var frameOptionsToolControllerOptions: ImglyKit.FrameOptionsToolControllerOptions {
    @objc get
  }
  @objc public var textDesignToolControllerOptions: ImglyKit.TextDesignToolControllerOptions {
    @objc get
  }
  @objc public var textDesignOptionsToolControllerOptions: ImglyKit.TextDesignOptionsToolControllerOptions {
    @objc get
  }
  @objc public var textDesignColorToolControllerOptions: ImglyKit.TextDesignColorToolControllerOptions {
    @objc get
  }
  @objc public var textDesignLayoutToolControllerOptions: ImglyKit.TextDesignLayoutToolControllerOptions {
    @objc get
  }
  @objc public var snappingOptions: ImglyKit.SnappingOptions {
    @objc get
  }
  @objc public var watermarkOptions: ImglyKit.WatermarkOptions {
    @objc get
  }
  public func getOptions<T>() -> T? where T : AnyObject
  @objc convenience override dynamic public init()
  @objc public init(builder: (ImglyKit.ConfigurationBuilder) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKConfigurationBuilder) open class ConfigurationBuilder : ObjectiveC.NSObject {
  open var theme: ImglyKit.Theme {
    get
    set
  }
  @objc(theme) open var _objCTheme: ImglyKit._ObjCTheme
  open var appearanceProxyConfigurationClosure: ((ImglyKit.Theme) -> Swift.Void)?
  @objc(appearanceProxyConfigurationClosure) open var _objCAppearanceProxyConfigurationClosure: ((ImglyKit._ObjCTheme) -> Swift.Void)?
  @objc open var assetCatalog: ImglyKit.AssetCatalog
  public func getOptions<T>() -> T? where T : AnyObject
  @objc public func addOptions(_ options: Swift.AnyObject)
  @objc open func configureCameraViewController(_ builder: (ImglyKit.CameraViewControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFilterToolController(_ builder: (ImglyKit.FilterToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureOverlayToolController(_ builder: (ImglyKit.OverlayToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureStickerToolController(_ builder: (ImglyKit.StickerToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureStickerOptionsToolController(_ builder: (ImglyKit.StickerOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureStickerColorToolController(_ builder: (ImglyKit.ColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFocusToolController(_ builder: (ImglyKit.FocusToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextToolController(_ builder: (ImglyKit.TextToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextOptionsToolController(_ builder: (ImglyKit.TextOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextFontToolController(_ builder: (ImglyKit.TextFontToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextColorToolController(_ builder: (ImglyKit.TextColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureAdjustToolController(_ builder: (ImglyKit.AdjustToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureBrushToolController(_ builder: (ImglyKit.BrushToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureBrushColorToolController(_ builder: (ImglyKit.BrushColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTransformToolController(_ builder: (ImglyKit.TransformToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFrameToolController(_ builder: (ImglyKit.FrameToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFrameOptionsToolController(_ builder: (ImglyKit.FrameOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextDesignToolController(_ builder: (ImglyKit.TextDesignToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextDesignOptionsToolController(_ builder: (ImglyKit.TextDesignOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextDesignColorToolController(_ builder: (ImglyKit.TextDesignColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextDesignLayoutToolController(_ builder: (ImglyKit.TextDesignLayoutToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureSnapping(_ builder: (ImglyKit.SnappingOptionsBuilder) -> Swift.Void)
  @objc open func configureWatermark(_ builder: (ImglyKit.WatermarkOptionsBuilder) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.ConfigurationBuilder {
  @objc(configureFromDictionary:error:) dynamic public func configure(from dictionary: [Swift.String : Any]) throws
  @objc(configureFromData:error:) dynamic public func configure(from data: Foundation.Data) throws
}
@objc(PESDKConfigurationSerializationConfiguration) public class ConfigurationSerializationConfiguration : ObjectiveC.NSObject, Swift.Codable {
  final public let export: ImglyKit.ConfigurationSerializationExport?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ConfigurationSerializationExport : Swift.Codable {
  public let filename: Swift.String?
  public let force: Swift.Bool?
  public let image: ImglyKit.ConfigurationSerializationImage?
  public let video: ImglyKit.ConfigurationSerializationVideo?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConfigurationSerializationImage : Swift.Codable {
  public let format: ImglyKit.ConfigurationSerializationImageFormat?
  public let quality: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConfigurationSerializationImageFormat : Swift.String, Swift.Codable {
  case imageHeif
  case imageJPEG
  case imagePNG
  case imageTiff
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ConfigurationSerializationVideo : Swift.Codable {
  public let bitRate: Swift.Double?
  public let codec: ImglyKit.ConfigurationSerializationVideoCodec?
  public let format: ImglyKit.ConfigurationSerializationVideoFormat?
  public let quality: Swift.Double?
  public let segments: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConfigurationSerializationVideoCodec : Swift.String, Swift.Codable {
  case h264
  case hevc
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigurationSerializationVideoFormat : Swift.String, Swift.Codable {
  case videoMp4
  case videoQuicktime
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objcMembers @objc(PESDKCoreImageEffect) open class CoreImageEffect : ImglyKit.Effect {
  @objc final public let ciFilterName: Swift.String?
  @objc final public let options: [Swift.String : Swift.AnyObject]?
  @objc public init(identifier: Swift.String, ciFilterName filterName: Swift.String?, displayName: Swift.String, options: [Swift.String : Swift.AnyObject]?)
  @objc override open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc deinit
}
@objc(PESDKCropAndStraightenViewDelegate) public protocol CropAndStraightenViewDelegate {
  @objc func cropAndStraightenViewWillBeginTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @objc func cropAndStraightenViewDidEndTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @objc func cropAndStraightenViewDidTrack(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropAndStraightenView) @_Concurrency.MainActor(unsafe) open class CropAndStraightenView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var spriteContainerView: ImglyKit.SpriteContainerView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.CropAndStraightenViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var straightenAngle: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropRect: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var orientation: ImglyKit.Orientation {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open var imageCropRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func imageCropRect(forViewRect viewRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor(unsafe) open func fitImageRegion(_ imageRegion: CoreFoundation.CGRect, inCropRectAnimated animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var isTracking: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isDecelerating: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var canvasFrame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ImglyKit.CropAndStraightenView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
extension ImglyKit.CropAndStraightenView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension ImglyKit.CropAndStraightenView : MetalKit.MTKViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func draw(in view: MetalKit.MTKView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropAspect) open class CropAspect : ObjectiveC.NSObject {
  @objc convenience override dynamic public init()
  @objc convenience public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc convenience public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, rotatable: Swift.Bool)
  @objc convenience public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, localizedName: Swift.String)
  @objc public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, localizedName: Swift.String, rotatable: Swift.Bool)
  @objc final public let width: CoreFoundation.CGFloat
  @objc final public let height: CoreFoundation.CGFloat
  @objc final public let localizedName: Swift.String
  @objc final public let isRotatable: Swift.Bool
  @objc open var ratio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var isSquare: Swift.Bool {
    @objc get
  }
  @objc open func width(forHeight height: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc open func height(forWidth width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc open var inversed: ImglyKit.CropAspect {
    @objc get
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public func == (lhs: ImglyKit.CropAspect, rhs: ImglyKit.CropAspect) -> Swift.Bool
@_inheritsConvenienceInitializers @objc(PESDKCropAspectListSectionController) open class CropAspectListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func selectItem(at index: Swift.Int)
  @objc override open func deselectItem(at index: Swift.Int)
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCropAspectMenuItem) open class CropAspectMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let cropAspect: ImglyKit.CropAspect?
  @objc final public let title: Swift.String
  @objc final public let rotatable: Swift.Bool
  @objc final public let resetsTransform: Swift.Bool
  @objc public init(cropAspect: ImglyKit.CropAspect)
  @objc convenience public init(title: Swift.String)
  @objc public static var resetItem: ImglyKit.CropAspectMenuItem {
    @objc get
  }
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
public enum CropHandle {
  case top
  case left
  case right
  case bottom
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public var opposite: ImglyKit.CropHandle {
    get
  }
  public var isTop: Swift.Bool {
    get
  }
  public var isBottom: Swift.Bool {
    get
  }
  public var isLeft: Swift.Bool {
    get
  }
  public var isRight: Swift.Bool {
    get
  }
  public var isLateral: Swift.Bool {
    get
  }
  public var isCorner: Swift.Bool {
    get
  }
  public var adjacent: (ImglyKit.CropHandle, ImglyKit.CropHandle) {
    get
  }
  public static var allHandles: [ImglyKit.CropHandle] {
    get
  }
  public static func == (a: ImglyKit.CropHandle, b: ImglyKit.CropHandle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropHandleView) @_Concurrency.MainActor(unsafe) open class CropHandleView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var isTop: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isLeft: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isRight: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isBottom: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isCorner: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isLateral: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var oppositeHandle: ImglyKit.CropHandle {
    get
  }
  @_Concurrency.MainActor(unsafe) open var adjacentHandles: (ImglyKit.CropHandle, ImglyKit.CropHandle) {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let handle: ImglyKit.CropHandle
  @objc @_Concurrency.MainActor(unsafe) open var isLineWeightHeavy: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(for handle: ImglyKit.CropHandle)
  @_Concurrency.MainActor(unsafe) @objc convenience override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropMaskView) @_Concurrency.MainActor(unsafe) open class CropMaskView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let effectView: UIKit.UIVisualEffectView
  @objc @_Concurrency.MainActor(unsafe) dynamic public var effect: UIKit.UIVisualEffect? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropOverlayView) @_Concurrency.MainActor(unsafe) open class CropOverlayView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open var isMaskedContentVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setMaskedContentVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var cropRect: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isCropGridVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setCropGridVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var isStraightenGridVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setStraightenGridVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCustomAdjustmentsFilter) open class CustomAdjustmentsFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputBrightness: Foundation.NSNumber?
  @objc open var inputContrast: Foundation.NSNumber?
  @objc open var inputSaturation: Foundation.NSNumber?
  @objc open var inputShadows: Foundation.NSNumber?
  @objc open var inputHighlights: Foundation.NSNumber?
  @objc open var inputExposure: Foundation.NSNumber?
  @objc open var inputGamma: Foundation.NSNumber?
  @objc open var inputBlacks: Foundation.NSNumber?
  @objc open var inputWhites: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCustomPatchConfiguration) open class CustomPatchConfiguration : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var topImageGroup: ImglyKit.FrameImageGroup?
  @objc public var leftImageGroup: ImglyKit.FrameImageGroup?
  @objc public var bottomImageGroup: ImglyKit.FrameImageGroup?
  @objc public var rightImageGroup: ImglyKit.FrameImageGroup?
  @objc public var layoutMode: ImglyKit.FrameLayoutMode
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKCustomPatchFrameBuilder) open class CustomPatchFrameBuilder : ObjectiveC.NSObject, ImglyKit.FrameBuilder {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public init(configuration: ImglyKit.CustomPatchConfiguration)
  @objc public func build(size: CoreFoundation.CGSize, relativeScale: CoreFoundation.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultDynamicFrames) open class DefaultDynamicFrames : ObjectiveC.NSObject {
  @objc public static var artDecorFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc public static var woodPassepartoutFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc public static var blackPassepartoutFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc public static var diaFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultLogger) public class DefaultLogger : ObjectiveC.NSObject, ImglyKit.LoggerProtocol {
  @objc public func error(_ message: Swift.String)
  @objc public func warn(_ message: Swift.String)
  @objc public func info(_ message: Swift.String)
  @objc public func debug(_ message: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultProgressView) open class DefaultProgressView : ObjectiveC.NSObject, ImglyKit.ProgressView {
  @objc final public let overlayView: UIKit.UIView
  @objc final public let backgroundView: UIKit.UIView
  @objc final public let imageView: UIKit.UIImageView
  @objc final public let label: UIKit.UILabel
  @objc final public let cancelButton: ImglyKit.CancelButton
  @objc open var animationDuration: Swift.Double
  @objc public static let sharedView: ImglyKit.DefaultProgressView
  @objc override dynamic public init()
  @objc open func show(withMessage message: Swift.String)
  @objc open func show(withMessage message: Swift.String, cancelText: Swift.String, cancelHandler: @escaping () -> Swift.Void)
  @objc open func setProgress(_ value: Swift.Double)
  @objc open func hide()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDeserializer) public class Deserializer : ObjectiveC.NSObject {
  @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKDeserializationResult) public class DeserializationResult : ObjectiveC.NSObject {
    final public let model: ImglyKit.PhotoEditModel?
    @objc final public let photo: (any ImglyKit.PhotoRepresentation)?
    @objc deinit
  }
  public static func deserialize(data: Foundation.Data, imageDimensions: CoreFoundation.CGSize?, existingModel: ImglyKit.PhotoEditModel? = nil, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
  @available(*, deprecated, message: "Use `deserialize(data:imageDimensions:existingModel:assetCatalog:)` instead")
  public static func deserialize(data: Foundation.Data, imageDimensions: CoreFoundation.CGSize?, existingModel: ImglyKit.PhotoEditModel? = nil) -> ImglyKit.Deserializer.DeserializationResult
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.Deserializer.DeserializationResult {
  @objc(model) dynamic public var _objCModel: ImglyKit._ObjCPhotoEditModel? {
    @objc get
  }
}
extension ImglyKit.Deserializer {
  @available(*, deprecated, message: "Use `deserializeWithData:assetCatalog:` instead.")
  @objc(deserializeWithData:) public static func _objCDeserialize(data: Foundation.Data) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:assetCatalog:) public static func _objCDeserialize(data: Foundation.Data, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
  @available(*, deprecated, message: "Use `deserializeWithData:imageDimensions:assetCatalog:` instead.")
  @objc(deserializeWithData:imageDimensions:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreFoundation.CGSize) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:imageDimensions:assetCatalog:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreFoundation.CGSize, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
  @available(*, deprecated, message: "Use `deserializeWithData:imageDimensions:existingModel:assetCatalog:` instead.")
  @objc(deserializeWithData:imageDimensions:existingModel:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreFoundation.CGSize, existingModel: ImglyKit._ObjCPhotoEditModel) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:imageDimensions:existingModel:assetCatalog:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreFoundation.CGSize, existingModel: ImglyKit._ObjCPhotoEditModel, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
}
@objc public enum RecordingOrientation : Swift.Int {
  case portrait
  case portraitBottomUp
  case landscapeBottomLeft
  case landscapeBottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDeviceOrientationController) open class DeviceOrientationController : ObjectiveC.NSObject {
  open var captureVideoOrientation: AVFoundation.AVCaptureVideoOrientation? {
    get
  }
  @objc open func start()
  @objc open func stop()
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKDiffable) public protocol Diffable {
  @objc var diffIdentifier: any ObjectiveC.NSObjectProtocol { get }
  @objc func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDimmedLabel) @_Concurrency.MainActor(unsafe) open class DimmedLabel : ImglyKit.Label {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDimmingView) @_Concurrency.MainActor(unsafe) open class DimmingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKDuoToneEffect) open class DuoToneEffect : ImglyKit.Effect {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let lightColor: UIKit.UIColor?
  @objc final public let darkColor: UIKit.UIColor?
  @objc public init(identifier: Swift.String, lightColor: UIKit.UIColor?, darkColor: UIKit.UIColor?, displayName: Swift.String)
  @objc override open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDuoToneFilter) open class DuoToneFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc open var inputLightColor: UIKit.UIColor?
  @objc open var inputDarkColor: UIKit.UIColor?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DurationToolController<SpriteModelType, GestureController, SelectionView> : ImglyKit.TimelineToolController where SpriteModelType : ImglyKit.SpriteModel, SpriteModelType : ImglyKit.TimeBased, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc deinit
}
extension ImglyKit.DurationToolController : ImglyKit.SpriteEditControllerDelegate {
}
@objcMembers @objc(PESDKDurationToolControllerOptions) open class DurationToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(durationBuilder: ImglyKit.DurationToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKDurationToolControllerOptionsBuilder) open class DurationToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(durationOptions: ImglyKit.DurationToolControllerOptions)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EditController {
  public static let shared: ImglyKit.EditController
  final public func increaseEditCount(for product: ImglyKit.LicenseProduct)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKEffect) open class Effect : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let identifier: Swift.String
  @objc final public let displayName: Swift.String
  @objc open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc public init(identifier: Swift.String, displayName: Swift.String)
  @objc override dynamic public init()
  @objc public class var defaultItems: [ImglyKit.Effect] {
    @objc get
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.effects` of your `Configuration` object instead.")
  public static var all: [ImglyKit.Effect] {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.effect(withIdentifier:)` of your `Configuration` object instead.")
  public static func effect(withIdentifier identifier: Swift.String) -> ImglyKit.Effect?
  @objc deinit
}
@objcMembers @objc(PESDKNoEffect) public class NoEffect : ImglyKit.Effect {
  @objc override dynamic public init()
  @objc deinit
}
public struct EffectFilterModel : Swift.Equatable {
  public var identifier: Swift.String
  public var intensity: Swift.Double
  public init(identifier: Swift.String, intensity: Swift.Double)
  public init()
  public static func == (a: ImglyKit.EffectFilterModel, b: ImglyKit.EffectFilterModel) -> Swift.Bool
}
extension ImglyKit.EffectFilterModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objc(PESDKEffectListSectionController) open class EffectListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKEffectMenuItem) open class EffectMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let effect: ImglyKit.Effect
  @objc final public let thumbnail: UIKit.UIImage?
  @objc public init(effect: ImglyKit.Effect, thumbnail: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKEffectThumbnailRenderer) open class EffectThumbnailRenderer : ObjectiveC.NSObject {
  @objc final public let inputImage: UIKit.UIImage
  @objc public init(inputImage: UIKit.UIImage)
  @objc(generateThumbnailsForEffects:ofSize:singleCompletion:) open func generateThumbnails(for effects: [ImglyKit.Effect], of size: CoreFoundation.CGSize, singleCompletion: @escaping ((_ thumbnail: UIKit.UIImage, _ effect: ImglyKit.Effect) -> Swift.Void))
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKEmptyView) @_Concurrency.MainActor(unsafe) open class EmptyView : UIKit.UIStackView {
  @objc @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var label: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var query: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKErrorView) @_Concurrency.MainActor(unsafe) open class ErrorView : UIKit.UIStackView {
  @objc @_Concurrency.MainActor(unsafe) public var retryButton: ImglyKit.Button {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var label: UIKit.UILabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class WeakContainer<T> {
  open var value: T? {
    get
    set
  }
  @objc deinit
}
public protocol EventSubscribable : AnyObject {
  var subscribers: [ImglyKit.WeakContainer<any ImglyKit.EventSubscriber>] { get set }
  func subscribe(_ subscriber: any ImglyKit.EventSubscriber)
  func unsubscribe(_ subscriber: any ImglyKit.EventSubscriber)
}
extension ImglyKit.EventSubscribable {
  public func subscribe(_ subscriber: any ImglyKit.EventSubscriber)
  public func unsubscribe(_ subscriber: any ImglyKit.EventSubscriber)
  public func notifySubscribers(_ closure: (any ImglyKit.EventSubscriber) -> Swift.Void)
}
public protocol EventSubscriber : AnyObject {
  func viewControllerDidFinish(_ viewController: UIKit.UIViewController)
  func viewControllerDidCancel(_ viewController: UIKit.UIViewController)
  func viewController(_ viewController: UIKit.UIViewController, didSelect menuItem: any ImglyKit.MenuItem)
  func photoEditToolController(_ photoEditToolController: UIKit.UIViewController, wantsToPresent toolController: ImglyKit.PhotoEditToolController)
  func photoEditModelDidChange(_ photoEditModel: ImglyKit.PhotoEditModel)
  func registerUndoChange(from oldPhotoEditModel: ImglyKit.PhotoEditModel, to newPhotoEditModel: ImglyKit.PhotoEditModel)
  func userInterfaceStateDidChange(_ userInterfaceState: ImglyKit.UserInterfaceState)
}
public struct FadeCollectionViewTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(view: UIKit.UIView, collectionView: UIKit.UICollectionView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
public struct FadeTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(view: UIKit.UIView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@objcMembers @objc(PESDKFilterEditController) @_Concurrency.MainActor(unsafe) open class FilterEditController : ImglyKit.ViewController {
  @_Concurrency.MainActor(unsafe) final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.FilterEditControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var effect: ImglyKit.Effect? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var showFilterIntensitySlider: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var initialFilterIntensity: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) required public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func setEffect(_ effect: ImglyKit.Effect?, animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.FilterEditController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.FilterEditController : ImglyKit.SliderEditControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension ImglyKit.FilterEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
@objc(PESDKFilterEditControllerDelegate) public protocol FilterEditControllerDelegate {
  @objc func filterEditControllerTargetScrollView(_ filterEditController: ImglyKit.FilterEditController) -> UIKit.UIScrollView?
  @objc func filterEditControllerDidChangePhotoEditModel(_ filterEditController: ImglyKit.FilterEditController)
  @objc func filterEditController(_ filterEditController: ImglyKit.FilterEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFilterSelectionController) open class FilterSelectionController : ObjectiveC.NSObject {
  @objc final public let collectionView: UIKit.UICollectionView
  @objc open var selectedBlock: ((ImglyKit.Effect) -> Swift.Void)?
  @objc open var activeEffectBlock: (() -> (ImglyKit.Effect?))?
  @objc open var cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Effect) -> Swift.Void)?
  @objc convenience override dynamic public init()
  @objc convenience public init(configuration: ImglyKit.Configuration)
  @objc convenience public init(inputImage: UIKit.UIImage?)
  @objc convenience public init(inputImage: UIKit.UIImage?, cellClass: ImglyKit.MenuCollectionViewCell.Type)
  @objc public init(inputImage: UIKit.UIImage?, cellClass: ImglyKit.MenuCollectionViewCell.Type, configuration: ImglyKit.Configuration)
  @objc open func updateSelection(animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.FilterSelectionController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension ImglyKit.FilterSelectionController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension ImglyKit.FilterSelectionController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
@objcMembers @objc(PESDKFilterToolController) @_Concurrency.MainActor(unsafe) open class FilterToolController : ImglyKit.MenuToolController, ImglyKit.FilterEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let filterEditController: ImglyKit.FilterEditController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(filterEditController: ImglyKit.FilterEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc open func filterEditControllerDidChangePhotoEditModel(_ filterEditController: ImglyKit.FilterEditController)
  @_Concurrency.MainActor(unsafe) @objc open func filterEditControllerTargetScrollView(_ filterEditController: ImglyKit.FilterEditController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc open func filterEditController(_ filterEditController: ImglyKit.FilterEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.FilterToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKFilterToolControllerOptions) open class FilterToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let filterIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let showFilterIntensitySlider: Swift.Bool
  @objc final public let initialFilterIntensity: CoreFoundation.CGFloat
  @objc final public let filterSelectedClosure: ((ImglyKit.Effect) -> Swift.Void)?
  @objc final public let filterIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Effect) -> Swift.Void)?
  @objc final public let filterCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Effect) -> Swift.Void)?
  @objc final public let folderCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell) -> Swift.Void)?
  @objc final public let filterGroups: [ImglyKit.Group]
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FilterToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKFilterToolControllerOptionsBuilder) open class FilterToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var filterIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var showFilterIntensitySlider: Swift.Bool
  @objc open var initialFilterIntensity: CoreFoundation.CGFloat
  @objc open var filterSelectedClosure: ((ImglyKit.Effect) -> Swift.Void)?
  @objc open var filterIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Effect) -> Swift.Void)?
  @objc open var filterCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Effect) -> Swift.Void)?
  @objc open var folderCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell) -> Swift.Void)?
  @objc open var filterGroups: [ImglyKit.Group]
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.FilterToolControllerOptions)
  @objc deinit
}
public struct FittedLayout<View> : ImglyKit.Layout where View : UIKit.UIView {
  public let view: View
  public init(view: View)
  public func constraints(in view: UIKit.UIView, with insets: UIKit.UIEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
}
public enum FloatValue : Swift.Equatable {
  case relative(CoreFoundation.CGFloat)
  case absolute(CoreFoundation.CGFloat)
  public static func == (a: ImglyKit.FloatValue, b: ImglyKit.FloatValue) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFloatValue) final public class _ObjCFloatValue : ObjectiveC.NSObject {
  final public let relativeValue: CoreFoundation.CGFloat?
  final public let absoluteValue: CoreFoundation.CGFloat?
  @objc public init(relativeValue: CoreFoundation.CGFloat)
  @objc public init(absoluteValue: CoreFoundation.CGFloat)
  @objc deinit
}
@objcMembers @objc(PESDKFocusEditController) @_Concurrency.MainActor(unsafe) open class FocusEditController : ImglyKit.ViewController {
  @_Concurrency.MainActor(unsafe) final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?
  @objc @_Concurrency.MainActor(unsafe) open var boxGradientView: ImglyKit.BoxGradientView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var circleGradientView: ImglyKit.CircleGradientView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var linearGradientView: ImglyKit.LinearGradientView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var focusMode: ImglyKit.FocusMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.FocusEditControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) required public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func setFocusMode(_ focusMode: ImglyKit.FocusMode, animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.FocusEditController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.FocusEditController : ImglyKit.SliderEditControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension ImglyKit.FocusEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
@objc(PESDKFocusEditControllerDelegate) public protocol FocusEditControllerDelegate {
  @objc func focusEditControllerDidChangePhotoEditModel(_ focusEditController: ImglyKit.FocusEditController)
  @objc func focusEditControllerPreviewView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIView?
  @objc func focusEditControllerTargetScrollView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIScrollView?
  @objc func focusEditControllerUntransformedImageSize(_ focusEditController: ImglyKit.FocusEditController) -> CoreFoundation.CGSize
  @objc func focusEditController(_ focusEditController: ImglyKit.FocusEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFocusGradientView) @_Concurrency.MainActor(unsafe) open class FocusGradientView : UIKit.UIControl {
  @objc @_Concurrency.MainActor(unsafe) open var centerPoint: CoreFoundation.CGPoint {
    get
  }
  @_Concurrency.MainActor(unsafe) open var controlPoints: (CoreFoundation.CGPoint, CoreFoundation.CGPoint) {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var fadeWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var normalizedFadeWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @objc deinit
}
extension ImglyKit.FocusGradientView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(PESDKFocusListSectionController) open class FocusListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFocusMenuItem) open class FocusMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let focusMode: ImglyKit.FocusMode
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init?(focusMode: ImglyKit.FocusMode)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objc(PESDKFocusMode) public enum FocusMode : Swift.Int {
  case off
  case radial
  case mirrored
  case linear
  case gaussian
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct FocusModel : Swift.Equatable {
  public var normalizedControlPoint1: CoreFoundation.CGPoint
  public var normalizedControlPoint2: CoreFoundation.CGPoint
  public var normalizedBlurRadius: Swift.Double
  public var normalizedFadeWidth: Swift.Double
  public var mode: ImglyKit.FocusMode
  public var blurQuality: ImglyKit.BlurQuality
  public init(normalizedControlPoint1: CoreFoundation.CGPoint, normalizedControlPoint2: CoreFoundation.CGPoint, normalizedBlurRadius: Swift.Double, normalizedFadeWidth: Swift.Double, mode: ImglyKit.FocusMode, blurQuality: ImglyKit.BlurQuality)
  public init()
  public static func == (a: ImglyKit.FocusModel, b: ImglyKit.FocusModel) -> Swift.Bool
}
extension ImglyKit.FocusModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKFocusToolController) @_Concurrency.MainActor(unsafe) open class FocusToolController : ImglyKit.MenuToolController, ImglyKit.FocusEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let focusEditController: ImglyKit.FocusEditController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(focusEditController: ImglyKit.FocusEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc public func focusEditControllerDidChangePhotoEditModel(_ focusEditController: ImglyKit.FocusEditController)
  @_Concurrency.MainActor(unsafe) @objc public func focusEditControllerPreviewView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) public func focusEditControllerPreviewContainer(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) open func focusEditControllerDidSlide(_ focusEditController: ImglyKit.FocusEditController, toValue value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public func focusEditControllerTargetScrollView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc public func focusEditControllerUntransformedImageSize(_ focusEditController: ImglyKit.FocusEditController) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc public func focusEditController(_ focusEditController: ImglyKit.FocusEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.FocusToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKFocusToolControllerOptions) open class FocusToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedFocusModes: [ImglyKit.FocusMode]
  @objc final public let focusModeButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FocusMode) -> Swift.Void)?
  @objc final public let focusModeSelectedClosure: ((ImglyKit.FocusMode) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderUpdatedValueClosure: ((ImglyKit.Slider, ImglyKit.FocusMode) -> Swift.Void)?
  @objc final public let circleGradientViewConfigurationClosure: ((ImglyKit.CircleGradientView) -> Swift.Void)?
  @objc final public let boxGradientViewConfigurationClosure: ((ImglyKit.BoxGradientView) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FocusToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFocusToolControllerOptionsBuilder) open class FocusToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedFocusModes: [ImglyKit.FocusMode] {
    get
    set
  }
  @objc open var focusModeButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FocusMode) -> Swift.Void)?
  @objc open var focusModeSelectedClosure: ((ImglyKit.FocusMode) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderUpdatedValueClosure: ((ImglyKit.Slider, ImglyKit.FocusMode) -> Swift.Void)?
  @objc open var circleGradientViewConfigurationClosure: ((ImglyKit.CircleGradientView) -> Swift.Void)?
  @objc open var boxGradientViewConfigurationClosure: ((ImglyKit.BoxGradientView) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.FocusToolControllerOptionsBuilder {
  @objc(allowedFocusModes) dynamic open var _objCAllowedFocusModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(PESDKFolderListSectionController) open class FolderListSectionController : ImglyKit.MenuListSectionController {
  @objc override open var numberOfItems: Swift.Int {
    @objc get
  }
  @objc override open func sizeForItem(at index: Swift.Int) -> CoreFoundation.CGSize
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didSelectItem(at index: Swift.Int)
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKFolderMenuItem) open class FolderMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let thumbnail: UIKit.UIImage?
  @objc final public let accessibilityIdentifier: Swift.String?
  @objc final public let items: [any ImglyKit.MenuItem]
  @objc public init(identifier: Swift.String, title: Swift.String, thumbnail: UIKit.UIImage?, accessibilityIdentifier: Swift.String?, items: [any ImglyKit.MenuItem])
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objc(PESDKFont) open class Font : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let url: Foundation.URL?
  @objc final public let displayName: Swift.String
  @objc open var fontName: Swift.String
  @objc open var identifier: Swift.String
  @objc public init(url: Foundation.URL, displayName: Swift.String, fontName: Swift.String, identifier: Swift.String)
  @objc public init(displayName: Swift.String, fontName: Swift.String, identifier: Swift.String)
  public struct Identifiers {
    public static var openSansBold: Swift.String {
      get
    }
    public static var aleoBold: Swift.String {
      get
    }
    public static var amaticsc: Swift.String {
      get
    }
    public static var sancreek: Swift.String {
      get
    }
    public static var kumarOneOutline: Swift.String {
      get
    }
    public static var nixieOne: Swift.String {
      get
    }
    public static var bungeeInline: Swift.String {
      get
    }
    public static var lobster: Swift.String {
      get
    }
    public static var molle: Swift.String {
      get
    }
    public static var ostrichSansBlack: Swift.String {
      get
    }
    public static var ostrichSansBold: Swift.String {
      get
    }
    public static var robotoBlackItalic: Swift.String {
      get
    }
    public static var robotoLightItalic: Swift.String {
      get
    }
    public static var codystar: Swift.String {
      get
    }
    public static var trashHand: Swift.String {
      get
    }
    public static var carterOne: Swift.String {
      get
    }
    public static var kronaOne: Swift.String {
      get
    }
    public static var monoton: Swift.String {
      get
    }
    public static var notable: Swift.String {
      get
    }
    public static var yesevaOne: Swift.String {
      get
    }
    public static var vt323: Swift.String {
      get
    }
    public static var stintUltraExpanded: Swift.String {
      get
    }
    @available(*, deprecated, message: "Font Campton Bold is not available anymore. Falling back to `Font.outfitBold`.")
    public static var camptonBold: Swift.String {
      get
    }
    @available(*, deprecated, message: "Font Galano Grotesque Bold is not available anymore. Falling back to `Font.lexendBold`.")
    public static var galanoGrotesqueBold: Swift.String {
      get
    }
    public static var palanquinDarkSemiBold: Swift.String {
      get
    }
    public static var archivoBlack: Swift.String {
      get
    }
    public static var permanentMarker: Swift.String {
      get
    }
    public static var firaSans: Swift.String {
      get
    }
    public static var oswaldSemiBold: Swift.String {
      get
    }
    public static var poppins: Swift.String {
      get
    }
    public static var lexendBold: Swift.String {
      get
    }
    public static var outfitBold: Swift.String {
      get
    }
  }
  @objc deinit
}
extension ImglyKit.Font.Identifiers {
  public static var petitFormalScript: Swift.String {
    get
  }
  public static var ultra: Swift.String {
    get
  }
  public static var robotoBlack: Swift.String {
    get
  }
  public static var robotoLight: Swift.String {
    get
  }
  public static var sueEllenFrancisco: Swift.String {
    get
  }
  public static var ostrichSansHeavy: Swift.String {
    get
  }
  @available(*, deprecated, message: "Font Wolesbro is not available anymore. Falling back to `Font.Identifiers.cookie`.")
  public static var wolesbro: Swift.String {
    get
  }
  public static var montserratLight: Swift.String {
    get
  }
  @available(*, deprecated, message: "Font Amberlight is not available anymore. Falling back to `Font.Identifiers.allison`.")
  public static var amberlight: Swift.String {
    get
  }
  public static var rasa500: Swift.String {
    get
  }
  public static var rasaRegular: Swift.String {
    get
  }
  public static var handycheeraRegular: Swift.String {
    get
  }
  public static var abrilFatfaceRegular: Swift.String {
    get
  }
  public static var nunitoBold: Swift.String {
    get
  }
  public static var cookie: Swift.String {
    get
  }
  public static var allison: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFontImporter) open class FontImporter : ObjectiveC.NSObject {
  @objc @available(*, deprecated, message: "Use `assetCatalog.fonts` of your `Configuration` object instead.")
  public static var all: [ImglyKit.Font] {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.font(withIdentifier:)` of your `Configuration` object instead.")
  public static func font(withIdentifier identifier: Swift.String) -> ImglyKit.Font?
  @objc public class var defaultItems: [ImglyKit.Font] {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKFontListSectionController) open class FontListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFontMenuItem) open class FontMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let font: ImglyKit.Font
  @objc final public let title: Swift.String
  @objc convenience public init(font: ImglyKit.Font)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objc(PESDKFontSelectorViewDelegate) public protocol FontSelectorViewDelegate {
  @objc func fontSelectorView(_ fontSelectorView: ImglyKit.FontSelectorView, didSelectFontWithName fontName: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFontSelectorView) @_Concurrency.MainActor(unsafe) open class FontSelectorView : UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) weak open var selectorDelegate: (any ImglyKit.FontSelectorViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var labelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectedFontName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKHandleButton) @_Concurrency.MainActor(unsafe) open class HandleButton : ImglyKit.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @objc deinit
}
@_Concurrency.MainActor(unsafe) open class FontSelectorViewController<SpriteModelType, GestureController, SelectionView> : ImglyKit.ViewController, ImglyKit.FontSelectorViewDelegate where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.FontSelectorViewControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var fontSelectorView: ImglyKit.FontSelectorView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var handleButton: ImglyKit.HandleButton {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var dimmingView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var handleButtonConfigurationClosure: ((ImglyKit.HandleButton) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var fontSelectorViewConfigurationClosure: ((ImglyKit.FontSelectorView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc public func fontSelectorView(_ fontSelectorView: ImglyKit.FontSelectorView, didSelectFontWithName fontName: Swift.String)
  @objc deinit
}
extension ImglyKit.FontSelectorViewController : ImglyKit.SpriteEditControllerDelegate {
}
public protocol FontSelectorViewControllerDelegate : AnyObject {
  func fontSelectorViewController<SpriteModelType, GestureController, SelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SelectionView>, didPick font: ImglyKit.Font) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  func fontSelectorViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func fontSelectorViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func fontSelectorViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func fontSelectorViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
}
@objcMembers @objc(PESDKFrame) open class Frame : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc open var imageInsets: UIKit.UIEdgeInsets
  @objc public var relativeScale: CoreFoundation.CGFloat {
    get
  }
  @objc final public let tolerance: CoreFoundation.CGFloat
  @objc final public let identifier: Swift.String
  @objc open var isDynamic: Swift.Bool {
    get
  }
  @objc public init(frameBuilder: any ImglyKit.FrameBuilder, relativeScale: CoreFoundation.CGFloat, thumbnailURL: Foundation.URL, identifier: Swift.String)
  @objc public init(identifier: Swift.String, tolerance: CoreFoundation.CGFloat)
  @objc open func addImage(_ imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, forRatio ratio: CoreFoundation.CGFloat)
  @objc open func imageURL(forRatio ratio: CoreFoundation.CGFloat) -> Foundation.URL?
  @objc open func maskImageURL(forRatio ratio: CoreFoundation.CGFloat, withTolerance tolerance: CoreFoundation.CGFloat) -> Foundation.URL?
  @objc open func image(forSize size: CoreFoundation.CGSize, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc open func image(forSize size: CoreFoundation.CGSize, relativeScale: CoreFoundation.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc open func staticImage(forRatio ratio: CoreFoundation.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc open func saveThumbnailToCameraRoll(forSize size: CoreFoundation.CGSize)
  @objc open func thumbnailURL(forRatio ratio: CoreFoundation.CGFloat) -> Foundation.URL?
  @objc open func hasImage(forRatio ratio: CoreFoundation.CGFloat) -> Swift.Bool
  @objc @available(*, deprecated, message: "Use `assetCatalog.frames` of your `Configuration` object instead.")
  public static var all: [ImglyKit.Frame] {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.frame(withIdentifier:)` of your `Configuration` object instead.")
  public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.Frame?
  @objc public class var defaultItems: [ImglyKit.Frame] {
    @objc get
  }
  @objc deinit
}
@objc public enum FrameBuildMode : Swift.Int {
  case horizontal
  case vertical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKFrameBuilderProtocol) public protocol FrameBuilder {
  @objc func build(size: CoreFoundation.CGSize, relativeScale: CoreFoundation.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
}
@_inheritsConvenienceInitializers @objc(PESDKFrameEditController) @_Concurrency.MainActor(unsafe) open class FrameEditController : ImglyKit.TransformEditController {
  @objc @_Concurrency.MainActor(unsafe) open var rotationEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var frameImageView: UIKit.UIImageView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setFrame(_ frame: ImglyKit.Frame?, with image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameImageGroup) open class FrameImageGroup : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var startImage: UIKit.UIImage?
  @objc public var midImage: UIKit.UIImage?
  @objc public var endImage: UIKit.UIImage?
  @objc final public let startImageURL: Foundation.URL?
  @objc final public let midImageURL: Foundation.URL?
  @objc final public let endImageURL: Foundation.URL?
  @objc public var midImageMode: ImglyKit.FrameTileMode
  @objc public init(startImageURL: Foundation.URL?, midImageURL: Foundation.URL, endImageURL: Foundation.URL?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFrameImageView) @_Concurrency.MainActor(unsafe) open class FrameImageView : ImglyKit.SpriteImageView {
  @_Concurrency.MainActor(unsafe) @objc required public init(uuid: Foundation.UUID)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum FrameLayoutMode : Swift.Int {
  case horizontalInside
  case verticalInside
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(PESDKFrameListSectionController) open class FrameListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameMenuItem) open class FrameMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let frame: ImglyKit.Frame?
  @objc final public let thumbnailURL: Foundation.URL?
  @objc convenience public init(frame: ImglyKit.Frame, ratio: CoreFoundation.CGFloat)
  @objc convenience override dynamic public init()
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKFrameOptionListSectionController) open class FrameOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameOptionMenuItem) open class FrameOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let frameAction: ImglyKit.FrameAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(frameAction: ImglyKit.FrameAction)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKFrameOptionsToolController) @_Concurrency.MainActor(unsafe) open class FrameOptionsToolController : ImglyKit.MenuToolController, ImglyKit.TransformEditControllerDelegate, ImglyKit.SliderContainerControllerDelegate, ImglyKit.BrandedTool {
  @_Concurrency.MainActor(unsafe) final public let sliderContainerController: ImglyKit.SliderContainerController<ImglyKit.Slider, ImglyKit.FrameEditController>
  @objc @_Concurrency.MainActor(unsafe) final public let frameEditController: ImglyKit.FrameEditController
  @_Concurrency.MainActor(unsafe) override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var activeFrameAction: ImglyKit.FrameAction? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(sliderContainerController: ImglyKit.SliderContainerController<ImglyKit.Slider, ImglyKit.FrameEditController>, frameEditController: ImglyKit.FrameEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @_Concurrency.MainActor(unsafe) @objc open func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @_Concurrency.MainActor(unsafe) @objc public func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @_Concurrency.MainActor(unsafe) open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func sliderContainerControllerDidSlide<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func sliderContainerControllerDidEndSliding<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @objc deinit
}
extension ImglyKit.FrameOptionsToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum FrameAction : Swift.Int {
  case replace
  case width
  case opacity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKFrameOptionsToolControllerOptions) open class FrameOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedFrameActions: [ImglyKit.FrameAction]
  final public let cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FrameAction?) -> Swift.Void)?
  @objc final public let frameActionSelectedClosure: ((ImglyKit.FrameAction) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.FrameAction) -> Swift.Void)?
  @objc final public let rotationEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FrameOptionsToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKFrameOptionsToolControllerOptionsBuilder) open class FrameOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedFrameActions: [ImglyKit.FrameAction]
  open var cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FrameAction?) -> Swift.Void)?
  @objc open var frameActionSelectedClosure: ((ImglyKit.FrameAction) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.FrameAction) -> Swift.Void)?
  @objc open var rotationEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.FrameOptionsToolControllerOptions)
  @objc deinit
}
extension ImglyKit.FrameOptionsToolControllerOptionsBuilder {
  @objc(allowedFrameActions) dynamic open var _objCAllowedFrameActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
public struct FrameSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public var scale: CoreFoundation.CGFloat?
  public var alpha: CoreFoundation.CGFloat
  public var ratio: CoreFoundation.CGFloat?
  public init(identifier: Swift.String)
  public init(frame: ImglyKit.Frame)
  public static func == (a: ImglyKit.FrameSpriteModel, b: ImglyKit.FrameSpriteModel) -> Swift.Bool
}
@objc public enum FrameTileMode : Swift.Int {
  case stretch
  case `repeat`
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKFrameToolController) @_Concurrency.MainActor(unsafe) open class FrameToolController : ImglyKit.MenuToolController, ImglyKit.TransformEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) open var selectedFrame: ImglyKit.Frame?
  @objc @_Concurrency.MainActor(unsafe) final public let frameEditController: ImglyKit.FrameEditController
  @_Concurrency.MainActor(unsafe) override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(frameEditController: ImglyKit.FrameEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @_Concurrency.MainActor(unsafe) @objc open func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @_Concurrency.MainActor(unsafe) @objc public func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
extension ImglyKit.FrameToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKFrameToolControllerOptions) open class FrameToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let selectedFrameClosure: ((ImglyKit.Frame?) -> Swift.Void)?
  @objc final public let cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Frame?) -> Swift.Void)?
  @objc final public let rotationEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FrameToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameToolControllerOptionsBuilder) open class FrameToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var selectedFrameClosure: ((ImglyKit.Frame?) -> Swift.Void)?
  @objc open var cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Frame?) -> Swift.Void)?
  @objc open var rotationEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFreehandTool) open class FreehandTool : ImglyKit.Tool {
  @objc open var color: UIKit.UIColor
  @objc open var hardness: CoreFoundation.CGFloat
  @objc open var brush: ImglyKit.Brush?
  @objc override open func gestureBegan(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func beginPath(location: CoreFoundation.CGPoint, force: CoreFoundation.CGFloat = 1)
  @objc override open func gestureMoved(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func continuePath(location: CoreFoundation.CGPoint, canvas: ImglyKit.CanvasView, force: CoreFoundation.CGFloat = 1)
  @objc override open func gestureEnded(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func endPath(location: CoreFoundation.CGPoint, canvas: ImglyKit.CanvasView, didMove: Swift.Bool = true)
  @objc override open func gestureCancelled(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKGaussianFocusFilter) open class GaussianFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKGiphyStickerCategory) open class GiphyStickerCategory : ImglyKit.StickerProviderCategory {
  @objc(initWithAPIKey:language:rating:) public init(apiKey: Swift.String, language: Swift.String = Bundle.main.preferredLocalizations.first ?? "en", rating: Swift.String = "g")
  @objc deinit
}
@objcMembers @objc(PESDKGiphyStickerProvider) public class GiphyStickerProvider : ObjectiveC.NSObject {
  @objc(initWithAPIKey:language:rating:) public init(apiKey: Swift.String, language: Swift.String = Bundle.main.preferredLocalizations.first ?? "en", rating: Swift.String = "g")
  @objc deinit
}
extension ImglyKit.GiphyStickerProvider : ImglyKit.StickerProvider {
  public func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.StickerProviderResult, any Swift.Error>) -> Swift.Void)
  public func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.StickerProviderResult, any Swift.Error>) -> Swift.Void)
}
extension ImglyKit.GiphyStickerProvider : ImglyKit._ObjCStickerProvider {
  @objc dynamic public func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.StickerProviderResult?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.StickerProviderResult?, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKGradientFocusFilter) open class GradientFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputNormalizedControlPoint1: Foundation.NSValue?
  @objc open var inputNormalizedControlPoint2: Foundation.NSValue?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKGradientView) @_Concurrency.MainActor(unsafe) open class GradientView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var topColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var bottomColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(topColor: UIKit.UIColor, bottomColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKGroup) open class Group : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let displayName: Swift.String
  @objc final public let thumbnail: UIKit.UIImage?
  @objc final public let memberIdentifiers: [Swift.String]
  @objc public init(identifier: Swift.String, displayName: Swift.String, thumbnail: UIKit.UIImage?, memberIdentifiers: [Swift.String])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class IMGLY : ObjectiveC.NSObject {
  @objc dynamic public static var forceExtendedSRGBColorSpace: Swift.Bool
  @objc public class func unlockWithLicense(at url: Foundation.URL)
  @objc open class func crashIfNeeded() throws
  @objc(unlockWithLicenseFromURL:error:) public class func unlockWithLicense(from url: Foundation.URL) throws
  @objc(unlockWithLicenseFromString:error:) public class func unlockWithLicense(from string: Swift.String) throws
  @objc(unlockWithLicenseFromDictionary:error:) public class func unlockWithLicense(from dictionary: [Swift.String : Any]) throws
  @objc public static let analytics: ImglyKit.Analytics
  @objc public static var progressView: any ImglyKit.ProgressView {
    @objc get
    @objc set
  }
  @objc public static var localizationDictionary: [Swift.String : [Swift.String : Swift.String]]?
  @objc public static var localizationBlock: ((Swift.String) -> Swift.String?)?
  @objc public static var bundleImageBlock: ((Swift.String) -> UIKit.UIImage?)? {
    @objc get
    @objc set
  }
  public static var renderPipelineBlock: ((CoreImage.CIImage, ImglyKit.PESDKRenderMode?) -> CoreImage.CIImage)?
  @objc public static var toolbarItemBlock: ((UIKit.UIViewController, ImglyKit.ToolbarItem?) -> ImglyKit.ToolbarItem?)?
  @objc public static var assetResolvers: [Swift.String : any ImglyKit.AssetResolver]?
  @objc public static func replaceClass(_ builtinClass: ObjectiveC.NSObject.Type, with replacingClass: ObjectiveC.NSObject.Type) throws
  public static func replacingClass<ReplacedClass>(for replacedClass: ReplacedClass.Type) -> ReplacedClass.Type where ReplacedClass : ObjectiveC.NSObject
  @objc public static func resetClassReplacements()
  @objc public static func reset()
  @available(*, deprecated, message: "Use `IMGLYError` instead.")
  public typealias Error = ImglyKit.IMGLYError
  @objc override dynamic public init()
  @objc deinit
}
public enum IMGLYError : Swift.Error {
  case replacingClassNotASubclass
  case licenseFatalError(Swift.String)
  case licenseError(Swift.String)
  case licenseWarning(Swift.String)
}
extension ImglyKit.IMGLYError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ImglyKit.IMGLYError : Foundation.CustomNSError {
  public var errorCode: Swift.Int {
    get
  }
}
public struct IMGLYWrapper<Base> {
}
public protocol IMGLYCompatible {
  associatedtype CompatibleType
  static var imgly: ImglyKit.IMGLYWrapper<Self.CompatibleType>.Type { get set }
  var imgly: ImglyKit.IMGLYWrapper<Self.CompatibleType> { get set }
}
extension ImglyKit.IMGLYCompatible {
  public static var imgly: ImglyKit.IMGLYWrapper<Self>.Type {
    get
    set
  }
  public var imgly: ImglyKit.IMGLYWrapper<Self> {
    get
    set
  }
}
extension UIKit.UIImage : ImglyKit.IMGLYCompatible {
  public typealias CompatibleType = UIKit.UIImage
}
extension Foundation.NSNotification.Name : ImglyKit.IMGLYCompatible {
  public typealias CompatibleType = Foundation.NSNotification.Name
}
extension Foundation.Bundle : ImglyKit.IMGLYCompatible {
  public typealias CompatibleType = Foundation.Bundle
}
extension Swift.String : ImglyKit.IMGLYCompatible {
  public typealias CompatibleType = Swift.String
}
extension CoreFoundation.CGRect : ImglyKit.IMGLYCompatible {
  public typealias CompatibleType = CoreFoundation.CGRect
}
extension CoreGraphics.CGContext : ImglyKit.IMGLYCompatible {
  public typealias CompatibleType = CoreGraphics.CGContext
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKIconGenerator) open class IconGenerator : ObjectiveC.NSObject {
  @objc(generateCropAspectImageWithWidth:height:ofSize:dottedBorder:showSwitchIcon:) open class func generateCropAspectImage(withWidth width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, of size: CoreFoundation.CGSize, dottedBorder: Swift.Bool, showSwapIcon: Swift.Bool) -> UIKit.UIImage?
  @objc(generateTextImageWithFont:ofSize:text:) open class func generateTextImage(with font: UIKit.UIFont, of size: CoreFoundation.CGSize, text: Swift.String) -> UIKit.UIImage?
  @objc(generateColorImageWithColor:borderColor:ofSize:) open class func generateColorImage(with color: UIKit.UIColor, border borderColor: UIKit.UIColor, of size: CoreFoundation.CGSize) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKImageAsset) open class ImageAsset : ObjectiveC.NSObject {
  public enum UserInfoKey : Swift.String {
    case frameWidth
    @available(*, deprecated, message: "Background removal data is not available anymore")
    case canRemoveBackground
    @available(*, deprecated, message: "Background removal data is not available anymore")
    case backgroundMask
    @available(*, deprecated, message: "Background removal data is not available anymore")
    case imageWithoutBackground
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc open var userInfo: [Swift.String : Any]?
  @objc open var ciImage: CoreImage.CIImage? {
    @objc get
  }
  @objc open var orientedCIImage: CoreImage.CIImage? {
    @objc get
  }
  @objc open var isAnimated: Swift.Bool {
    @objc get
    @objc set
  }
  @objc convenience public init(ciImage: CoreImage.CIImage, userInfo: [Swift.String : Any]? = nil)
  @objc convenience public init(image: UIKit.UIImage, userInfo: [Swift.String : Any]? = nil)
  @objc deinit
}
@objc(PESDKImageFileFormat) public enum ImageFileFormat : Swift.Int {
  case jpeg
  case png
  case heif
  case tiff
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ImageGeometry : Swift.CustomStringConvertible {
  public let inputRect: CoreFoundation.CGRect
  public var appliedOrientation: ImglyKit.Orientation
  public var appliedTransform: CoreFoundation.CGAffineTransform {
    get
  }
  public var isSizeInverted: Swift.Bool {
    get
  }
  public init()
  public init(inputSize: CoreFoundation.CGSize)
  public init(inputSize: CoreFoundation.CGSize, initialOrientation: ImglyKit.Orientation)
  public func transform(from orientation: ImglyKit.Orientation) -> CoreFoundation.CGAffineTransform
  public mutating func flipVertically()
  public mutating func flipHorizontally()
  public mutating func rotateClockwise()
  public mutating func rotateCounterClockwise()
  public mutating func apply(_ orientation: ImglyKit.Orientation)
  public func normalize(_ point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  public func normalize(_ vector: CoreFoundation.CGVector) -> CoreFoundation.CGVector
  public func normalize(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func normalize(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public func denormalize(_ point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  public func denormalize(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public var description: Swift.String {
    get
  }
}
public protocol ImageVendor {
  func addConsumer(_ closure: @escaping (CoreImage.CIImage) -> Swift.Void) -> Swift.AnyObject
  func removeConsumer(_ consumer: Swift.AnyObject)
}
@objcMembers @objc(PESDKLUTEffect) open class LUTEffect : ImglyKit.Effect {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let lutURL: Foundation.URL?
  @objc final public let horizontalTileCount: Swift.UInt
  @objc final public let verticalTileCount: Swift.UInt
  @objc public init(identifier: Swift.String, lutURL: Foundation.URL?, displayName: Swift.String)
  @objc public init(identifier: Swift.String, lutURL: Foundation.URL?, displayName: Swift.String, horizontalTileCount: Swift.UInt, verticalTileCount: Swift.UInt)
  @objc override open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLUTFilter) open class LUTFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputLUT: CoreImage.CIImage?
  @objc open var inputHorizontalTileCount: Foundation.NSNumber?
  @objc open var inputVerticalTileCount: Foundation.NSNumber?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLabel) @_Concurrency.MainActor(unsafe) open class Label : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) dynamic open var labelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc deinit
}
public protocol Layout {
  func constraints(in view: UIKit.UIView, with insets: UIKit.UIEdgeInsets) -> [UIKit.NSLayoutConstraint]
}
@objcMembers @objc(PESDKLegacyTextDesignOptionsToolController) @_Concurrency.MainActor(unsafe) open class LegacyTextDesignOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.TextDesignEditController
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(spriteEditController: ImglyKit.TextDesignEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc deinit
}
extension ImglyKit.LegacyTextDesignOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension ImglyKit.LegacyTextDesignOptionsToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class LegacyTextDesignToolController : ImglyKit.TextDesignToolController {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override open func createSpriteModelFromTextView() -> ImglyKit.TextDesignSpriteModel?
  @_Concurrency.MainActor(unsafe) @objc override open func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LicenseController {
  public static let shared: ImglyKit.LicenseController
  final public func isLocked(for product: ImglyKit.LicenseProduct) -> Swift.Bool
  final public func unlockWithLicense(at licenseURL: Foundation.URL) throws
  final public func crashIfNeeded(for product: ImglyKit.LicenseProduct) throws
  final public func printWatermarkMessage(for product: ImglyKit.LicenseProduct)
  final public func hasAccess(to feature: ImglyKit.LicenseFeature, for product: ImglyKit.LicenseProduct, ignoreState: Swift.Bool = false) -> Swift.Bool
  @objc deinit
}
public enum LicenseFeature : Swift.String, Swift.Decodable {
  case adjustment
  case brush
  case camera
  case export
  case filter
  case focus
  case frame
  case library
  case overlay
  case sticker
  case text
  case textdesign
  case transform
  case trim
  case noexporttracking
  case whitelabel
  case customassets
  case composition
  case audio
  case videolibrary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LicenseProduct : Swift.String, Swift.Decodable, Swift.CaseIterable {
  case pesdk
  case vesdk
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ImglyKit.LicenseProduct]
  public typealias RawValue = Swift.String
  public static var allCases: [ImglyKit.LicenseProduct] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc(PESDKLicenseProduct) public enum _ObjCLicenseProduct : Swift.Int {
  @objc(PESDKLicenseProductPESDK) case pesdk
  @objc(PESDKLicenseProductVESDK) case vesdk
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLineView) @_Concurrency.MainActor(unsafe) open class LineView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLinearFocusFilter) open class LinearFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputNormalizedControlPoint1: Foundation.NSValue?
  @objc open var inputNormalizedControlPoint2: Foundation.NSValue?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputFadeWidth: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLinearGradientView) @_Concurrency.MainActor(unsafe) open class LinearGradientView : ImglyKit.FocusGradientView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc public enum LogLevel : Swift.Int {
  case none
  case error
  case warn
  case info
  case debug
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKLogger) public class MasterLogger : ObjectiveC.NSObject {
  @objc public static var logLevel: ImglyKit.LogLevel
  @objc public static func add(logger: any ImglyKit.LoggerProtocol)
  @objc public static func remove(logger: any ImglyKit.LoggerProtocol)
  @objc public static func removeAll()
  @objc public static func error(_ message: Swift.String)
  @objc public static func warn(_ message: Swift.String)
  @objc public static func info(_ message: Swift.String)
  @objc public static func debug(_ message: Swift.String)
  @objc deinit
}
@objc(PESDKLoggerProtocol) public protocol LoggerProtocol {
  @objc func error(_ message: Swift.String)
  @objc func warn(_ message: Swift.String)
  @objc func info(_ message: Swift.String)
  @objc func debug(_ message: Swift.String)
}
@objcMembers @objc(PESDKMainFlowController) open class MainFlowController : ObjectiveC.NSObject {
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc final public let configuration: ImglyKit.Configuration
  final public let uneditedPhotoEditModel: ImglyKit.PhotoEditModel
  @objc weak open var mediaEditViewController: ImglyKit.MediaEditViewController? {
    get
  }
  open var userInterfaceState: ImglyKit.UserInterfaceState {
    get
    set
  }
  @objc convenience public init(mediaEditViewController: ImglyKit.MediaEditViewController, configuration: ImglyKit.Configuration)
  required public init(mediaEditViewController: ImglyKit.MediaEditViewController, photoEditModel: ImglyKit.PhotoEditModel, configuration: ImglyKit.Configuration)
  @objc deinit
}
extension ImglyKit.MainFlowController : ImglyKit.EventSubscriber {
  @objc dynamic public func viewControllerDidFinish(_ viewController: UIKit.UIViewController)
  @objc dynamic public func viewControllerDidCancel(_ viewController: UIKit.UIViewController)
  @objc dynamic public func viewController(_ viewController: UIKit.UIViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @objc dynamic public func photoEditToolController(_ photoEditToolController: UIKit.UIViewController, wantsToPresent toolController: ImglyKit.PhotoEditToolController)
  public func photoEditModelDidChange(_ photoEditModel: ImglyKit.PhotoEditModel)
  public func registerUndoChange(from oldPhotoEditModel: ImglyKit.PhotoEditModel, to newPhotoEditModel: ImglyKit.PhotoEditModel)
  public func userInterfaceStateDidChange(_ userInterfaceState: ImglyKit.UserInterfaceState)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMarkerView) @_Concurrency.MainActor(unsafe) open class MarkerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKMediaEditPreviewController) @_Concurrency.MainActor(unsafe) open class MediaEditPreviewController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var previewViewScrollingContainer: UIKit.UIScrollView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var previewView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var allowsPreviewImageZoom: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.MediaEditPreviewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var baseWorkUIImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var baseWorkCIImage: CoreImage.CIImage? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let renderer: ImglyKit.PhotoEditRenderer
  @objc @_Concurrency.MainActor(unsafe) open var spriteViewController: ImglyKit.SpriteViewController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var assetManager: ImglyKit.AssetManager?
  @objc @_Concurrency.MainActor(unsafe) public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var undoController: ImglyKit.UndoController?
  @objc @_Concurrency.MainActor(unsafe) open var loadingProgressClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) convenience public init(photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @_Concurrency.MainActor(unsafe) public init(renderer: ImglyKit.PhotoEditRenderer, photoEditModel: ImglyKit.PhotoEditModel)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @objc @_Concurrency.MainActor(unsafe) open func loadBaseImage(_ completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) open func updateRenderer()
  @_Concurrency.MainActor(unsafe) open var imageVendor: (any ImglyKit.ImageVendor)? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public func updateBrush(onlyIfMissing: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open func updateLayout()
  @objc @_Concurrency.MainActor(unsafe) open func updateInsets(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func updatePreview()
  @objc @_Concurrency.MainActor(unsafe) open func workImageSize(for screen: UIKit.UIScreen) -> CoreFoundation.CGSize
  @objc deinit
}
extension ImglyKit.MediaEditPreviewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
extension ImglyKit.MediaEditPreviewController : MetalKit.MTKViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func draw(in view: MetalKit.MTKView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
}
extension ImglyKit.MediaEditPreviewController : ImglyKit.SpriteViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func spriteViewControllerDidChangePhotoEditModel(_ spriteViewController: ImglyKit.SpriteViewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func spriteViewControllerUndoController(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.UndoController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func spriteViewControllerConfiguration(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.Configuration?
}
@objc(PESDKMediaEditPreviewControllerDelegate) public protocol MediaEditPreviewControllerDelegate {
  @objc func mediaEditPreviewControllerPreviewEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc func mediaEditPreviewControllerRenderMode(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.PESDKRenderMode
  @objc func mediaEditPreviewControllerBackgroundColor(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIColor
  @objc func mediaEditPreviewControllerPreviewInsets(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIEdgeInsets
  @objc func mediaEditPreviewControllerPreviewScale(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> CoreFoundation.CGFloat
  @objc func mediaEditPreviewControllerProxyZoomingActive(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc func mediaEditPreviewControllerResetProxyZooming(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @objc func mediaEditPreviewControllerPlaybackEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc func mediaEditPreviewControllerDidChangePhotoEditModel(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @objc func mediaEditPreviewControllerConfiguration(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.Configuration
  @objc optional func mediaEditPreviewControllerDidInitialize(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
}
@objcMembers @objc(PESDKMediaEditViewController) @_Concurrency.MainActor(unsafe) open class MediaEditViewController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var flowController: ImglyKit.MainFlowController! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let menuViewController: ImglyKit.MenuViewController
  @objc @_Concurrency.MainActor(unsafe) final public let mediaEditPreviewController: ImglyKit.MediaEditPreviewController
  @objc @_Concurrency.MainActor(unsafe) open var containerView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var toolbar: ImglyKit.Toolbar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var toolbarItem: ImglyKit.ToolbarItem
  @_Concurrency.MainActor(unsafe) open var subscribers: [ImglyKit.WeakContainer<any ImglyKit.EventSubscriber>]
  @objc @_Concurrency.MainActor(unsafe) final public let configuration: ImglyKit.Configuration
  @objc @_Concurrency.MainActor(unsafe) open var undoController: ImglyKit.UndoController {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let assetManager: ImglyKit.AssetManager
  @objc @_Concurrency.MainActor(unsafe) public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var hasChanges: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(mediaEditPreviewController: ImglyKit.MediaEditPreviewController, configuration: ImglyKit.Configuration = Configuration(), menuItems: [ImglyKit.PhotoEditMenuItem] = PhotoEditMenuItem.defaultItems, photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutomaticallyForwardAppearanceMethods: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var soundOnOffButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var playPauseButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var removeBackgroundButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open func presentTool(for toolMenuItem: ImglyKit.ToolMenuItem)
  @objc @_Concurrency.MainActor(unsafe) open func didCancel()
  @objc @_Concurrency.MainActor(unsafe) open func willPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc @_Concurrency.MainActor(unsafe) open func didPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc @_Concurrency.MainActor(unsafe) open func willDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc @_Concurrency.MainActor(unsafe) open func didDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc @_Concurrency.MainActor(unsafe) open func renderHighResolutionVariant()
  @objc @_Concurrency.MainActor(unsafe) open var viewControllers: [ImglyKit.PhotoEditToolController] {
    get
  }
  @objc(pushViewController:animated:completion:) @_Concurrency.MainActor(unsafe) open func push(_ viewController: ImglyKit.PhotoEditToolController, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @discardableResult
  @objc(popViewControllerAnimated:completion:) @_Concurrency.MainActor(unsafe) open func pop(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil) -> ImglyKit.PhotoEditToolController?
  @objc @_Concurrency.MainActor(unsafe) open var options: ImglyKit.MediaEditViewControllerOptions {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc deinit
}
extension ImglyKit.MediaEditViewController : ImglyKit.EventSubscribable {
}
extension ImglyKit.MediaEditViewController : ImglyKit.ToolbarItemProviding {
}
extension ImglyKit.MediaEditViewController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.MediaEditViewController : ImglyKit.MenuViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: any ImglyKit.MenuItem, from previousMenuItems: [any ImglyKit.MenuItem], to menuItems: [any ImglyKit.MenuItem])
}
extension ImglyKit.MediaEditViewController : ImglyKit.MediaEditPreviewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerPreviewEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerRenderMode(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.PESDKRenderMode
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerBackgroundColor(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerPreviewInsets(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerPreviewScale(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerProxyZoomingActive(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerResetProxyZooming(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerPlaybackEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerDidChangePhotoEditModel(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerConfiguration(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.Configuration
  @_Concurrency.MainActor(unsafe) @objc dynamic open func mediaEditPreviewControllerDidInitialize(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
}
extension ImglyKit.MediaEditViewController : ImglyKit.PhotoEditToolControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerPreviewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditPreviewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerBaseImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerBaseCIImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> CoreImage.CIImage?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerPreviewScrollView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolController(_ photoEditToolController: ImglyKit.PhotoEditToolController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerDidChangeWantsDefaultPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func photoEditToolControllerSpriteViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.SpriteViewController?
}
@objc(PESDKMediaEditViewControllerDelegate) public protocol MediaEditViewControllerDelegate {
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, willPresentToolController toolController: ImglyKit.PhotoEditToolController)
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, didPresentToolController toolController: ImglyKit.PhotoEditToolController)
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, willDismissToolController toolController: ImglyKit.PhotoEditToolController)
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, didDismissToolController toolController: ImglyKit.PhotoEditToolController)
}
@objc public enum MediaEditOverlayAction : Swift.Int {
  case undo
  case redo
  case soundOnOff
  case playPause
  @available(iOS 15.0, *)
  case removeBackground
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKNavigationControllerMode) public enum NavigationControllerMode : Swift.Int {
  case useNavigationBar
  case useToolbar
  case useNavigationBarAndParentNavigationItem
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMediaEditViewControllerOptions) open class MediaEditViewControllerOptions : ObjectiveC.NSObject {
  @objc final public let titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let backgroundColor: UIKit.UIColor?
  @objc final public let menuBackgroundColor: UIKit.UIColor?
  @objc final public let applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  final public let photoEditorActionSelectedClosure: ((ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  @objc final public let allowsPreviewImageZoom: Swift.Bool
  @objc final public let forceCropMode: Swift.Bool
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  final public let allowedMediaEditOverlayActions: [ImglyKit.MediaEditOverlayAction]
  @objc final public let mediaEditOverlayActionSelectedClosure: ((ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  @objc final public let undoStepByStep: Swift.Bool
  @objc final public let discardConfirmationClosure: ((ImglyKit.MediaEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc final public let navigationControllerMode: ImglyKit.NavigationControllerMode
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  final public let menuItems: [ImglyKit.PhotoEditMenuItem]
  @objc final public let forceExport: Swift.Bool
  @objc final public let singleToolUsage: Swift.Bool
  @objc convenience override dynamic public init()
  @objc public init(builder: ImglyKit.MediaEditViewControllerOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMediaEditViewControllerOptionsBuilder) open class MediaEditViewControllerOptionsBuilder : ObjectiveC.NSObject {
  @objc open var titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var backgroundColor: UIKit.UIColor?
  @objc open var menuBackgroundColor: UIKit.UIColor?
  @objc open var applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  open var photoEditorActionSelectedClosure: ((ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  @objc open var forceCropMode: Swift.Bool
  @objc open var allowsPreviewImageZoom: Swift.Bool
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  open var allowedMediaEditOverlayActions: [ImglyKit.MediaEditOverlayAction]
  @objc open var mediaEditOverlayActionSelectedClosure: ((ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  @objc open var undoStepByStep: Swift.Bool
  @objc open var discardConfirmationClosure: ((ImglyKit.MediaEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc open var navigationControllerMode: ImglyKit.NavigationControllerMode
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  open var menuItems: [ImglyKit.PhotoEditMenuItem]
  @objc open var forceExport: Swift.Bool
  @objc public var singleToolUsage: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.MediaEditViewControllerOptions)
  @objc deinit
}
extension ImglyKit.MediaEditViewControllerOptionsBuilder {
  @objc dynamic open var actionButtonConfigurationBlock: ((ImglyKit.MenuCollectionViewCell, ImglyKit._ObjCPhotoEditMenuItem) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc dynamic open var photoEditorActionSelectedBlock: ((ImglyKit._ObjCPhotoEditMenuItem) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc(allowedMediaEditOverlayActions) dynamic open var _objCAllowedMediaEditOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(menuItems) dynamic open var _objCMenuItems: [ImglyKit._ObjCPhotoEditMenuItem] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuAccessoryContainerView) @_Concurrency.MainActor(unsafe) open class MenuAccessoryContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var backgroundColorDidChange: ((UIKit.UIColor) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKMenuCollectionView) @_Concurrency.MainActor(unsafe) open class MenuCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open var flowLayout: UIKit.UICollectionViewFlowLayout {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuCollectionViewCell) @_Concurrency.MainActor(unsafe) open class MenuCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) open var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let iconImageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let captionTextLabel: ImglyKit.Label
  @objc @_Concurrency.MainActor(unsafe) final public let captionGradientView: ImglyKit.GradientView
  @objc @_Concurrency.MainActor(unsafe) final public let backgroundImageView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) final public let backgroundDimmingView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) dynamic open var dimsBackgroundImageWhenSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var dimsContentWhenNotSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var showsGradientBehindCaptionTextLabel: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let activityIndicator: UIKit.UIActivityIndicatorView
  @objc @_Concurrency.MainActor(unsafe) dynamic open var contentTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var backgroundDimmingColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var showsCaptionTextLabel: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var selectionBorderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(PESDKMenuItem) public protocol MenuItem : ImglyKit.Diffable {
  @objc static var sectionControllerType: ImglyKit.MenuListSectionController.Type { get }
  @objc optional var isTogglable: Swift.Bool { get }
}
@objc(PESDKMenuListSectionControllerListDisplayDelegate) public protocol MenuListSectionControllerListDisplayDelegate {
  @objc func sectionController(_ sectionController: ImglyKit.MenuListSectionController, willDisplay cell: UIKit.UICollectionViewCell, at index: Swift.Int)
}
@objc(PESDKMenuListSectionControllerSelectionDelegate) public protocol MenuListSectionControllerSelectionDelegate {
  @objc func sectionController(_ sectionController: ImglyKit.MenuListSectionController, didSelectItemAt index: Swift.Int, object: Any)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuListSectionController) open class MenuListSectionController : ObjectiveC.NSObject {
  @objc weak public var selectionDelegate: (any ImglyKit.MenuListSectionControllerSelectionDelegate)?
  @objc weak public var displayDelegate: (any ImglyKit.MenuListSectionControllerListDisplayDelegate)?
  @objc public var inset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc public var minimumLineSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var minimumInteritemSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var isFirstSection: Swift.Bool {
    @objc get
  }
  @objc public var isLastSection: Swift.Bool {
    @objc get
  }
  @objc public var section: Swift.Int {
    @objc get
  }
  @objc open var hasSelectedItems: Swift.Bool {
    @objc get
  }
  @objc open func hasSelection(at index: Swift.Int) -> Swift.Bool
  @objc open func selectItem(at index: Swift.Int)
  @objc open func deselectItem(at index: Swift.Int)
  @objc required override dynamic public init()
  @objc open var numberOfItems: Swift.Int {
    @objc get
  }
  @objc open func sizeForItem(at index: Swift.Int) -> CoreFoundation.CGSize
  @objc open func didUpdate(to object: Any)
  @objc open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc open func didSelectItem(at index: Swift.Int)
  @objc open func canMoveItem(at index: Swift.Int) -> Swift.Bool
  @objc open var supportedElementKinds: [Swift.String] {
    @objc get
  }
  @objc open func viewForSupplementaryElement(ofKind elementKind: Swift.String, at index: Swift.Int) -> UIKit.UICollectionReusableView
  @objc open func sizeForSupplementaryView(ofKind elementKind: Swift.String, at index: Swift.Int) -> CoreFoundation.CGSize
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuToolController) @_Concurrency.MainActor(unsafe) open class MenuToolController : ImglyKit.PhotoEditToolController, ImglyKit.MenuViewControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let menuViewController: ImglyKit.MenuViewController
  @objc @_Concurrency.MainActor(unsafe) final public let contentViewController: UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: any ImglyKit.MenuItem, from previousMenuItems: [any ImglyKit.MenuItem], to menuItems: [any ImglyKit.MenuItem])
  @objc deinit
}
@objcMembers @objc(PESDKMenuViewController) @_Concurrency.MainActor(unsafe) open class MenuViewController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let contentViewController: UIKit.UIViewController
  @objc @_Concurrency.MainActor(unsafe) open var keepsSelection: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.MenuViewControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var collectionView: ImglyKit.MenuCollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var workspaceView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var accessoryView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var menuItems: [any ImglyKit.MenuItem]
  @objc @_Concurrency.MainActor(unsafe) open var menuHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isMenuHidden: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) required public init(contentViewController: UIKit.UIViewController)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func showMenu(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func hideMenu(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func reloadData(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) open func performUpdates(animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) open func reloadMenuItems(_ menuItems: [any ImglyKit.MenuItem])
  @objc deinit
}
extension ImglyKit.MenuViewController : ImglyKit.MenuListSectionControllerSelectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sectionController(_ sectionController: ImglyKit.MenuListSectionController, didSelectItemAt index: Swift.Int, object: Any)
}
extension ImglyKit.MenuViewController : ImglyKit.MenuListSectionControllerListDisplayDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sectionController(_ sectionController: ImglyKit.MenuListSectionController, willDisplay cell: UIKit.UICollectionViewCell, at index: Swift.Int)
}
extension ImglyKit.MenuViewController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc(PESDKMenuViewControllerDelegate) public protocol MenuViewControllerDelegate {
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: any ImglyKit.MenuItem)
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: any ImglyKit.MenuItem, from previousMenuItems: [any ImglyKit.MenuItem], to menuItems: [any ImglyKit.MenuItem])
}
public struct NeutralModelValues {
  public static let none: Swift.String
  public static let autoEnhancementOperation: Swift.Bool
  public static let adjustments: CoreFoundation.CGFloat
  public static let alpha: CoreFoundation.CGFloat
  public struct Filter {
    public static let identifier: Swift.String
  }
  public struct Overlay {
    public static let identifier: Swift.String
  }
  public struct Orientation {
    public static let rotation: Swift.Int
    public static let flipVertically: Swift.Bool
    public static let flipHorizontally: Swift.Bool
  }
}
extension ImglyKit.IMGLYWrapper where Base == Foundation.NSNotification.Name {
  public static let PhotoEditPreviewControllerDidLayoutSubviews: Foundation.Notification.Name
  public static let DidSelectSpriteView: Foundation.Notification.Name
}
extension Foundation.NSNotification.Name {
  @available(*, deprecated, renamed: "imgly.PhotoEditPreviewControllerDidLayoutSubviews")
  public static var PESDKPhotoEditPreviewControllerDidLayoutSubviews: Foundation.Notification.Name {
    get
  }
  @available(*, deprecated, renamed: "imgly.DidSelectSpriteView")
  public static var PESDKDidSelectSpriteView: Foundation.Notification.Name {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAdjustmentModel) final public class _ObjCAdjustmentModel : ObjectiveC.NSObject {
  final public var adjustmentModel: ImglyKit.AdjustmentModel {
    get
  }
  @objc public init(brightness: Swift.Double, contrast: Swift.Double, shadows: Swift.Double, highlights: Swift.Double, exposure: Swift.Double, clarity: Swift.Double, saturation: Swift.Double, gamma: Swift.Double, blacks: Swift.Double, whites: Swift.Double, temperature: Swift.Double, sharpness: Swift.Double)
  @objc override dynamic public init()
  @objc final public var brightness: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var contrast: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var shadows: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var highlights: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var exposure: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var clarity: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var saturation: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var gamma: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var blacks: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var whites: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var temperature: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var sharpness: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClipModel) final public class _ObjCAudioClipModel : ObjectiveC.NSObject {
  final public var audioClipModel: ImglyKit.AudioClipModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var trimModel: ImglyKit._ObjCTrimModel {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioModel) final public class _ObjCAudioModel : ObjectiveC.NSObject {
  final public var audioModel: ImglyKit.AudioModel {
    get
  }
  @objc override dynamic public init()
  public init(clips: [ImglyKit.AudioClipModel], volumeBalance: Swift.Double)
  @objc final public var clips: [ImglyKit._ObjCAudioClipModel] {
    @objc get
    @objc set
  }
  @objc final public var volumeBalance: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKBrushSpriteModel) final public class _ObjCBrushSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var brushSpriteModel: ImglyKit.BrushSpriteModel {
    get
  }
  override final public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc override dynamic public init()
  public init(paths: [ImglyKit.PathModel])
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var paths: [ImglyKit._ObjCPathModel] {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCompositionModel) final public class _ObjCCompositionModel : ObjectiveC.NSObject {
  final public var compositionModel: ImglyKit.CompositionModel {
    get
  }
  @objc override dynamic public init()
  public init(clips: [ImglyKit.VideoClipModel])
  @objc final public var clips: [ImglyKit._ObjCVideoClipModel] {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKEffectFilterModel) final public class _ObjCEffectFilterModel : ObjectiveC.NSObject {
  final public var effectFilterModel: ImglyKit.EffectFilterModel {
    get
  }
  @objc public init(identifier: Swift.String, intensity: Swift.Double)
  @objc override dynamic public init()
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var intensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFocusModel) final public class _ObjCFocusModel : ObjectiveC.NSObject {
  final public var focusModel: ImglyKit.FocusModel {
    get
  }
  @objc public init(normalizedControlPoint1: CoreFoundation.CGPoint, normalizedControlPoint2: CoreFoundation.CGPoint, normalizedBlurRadius: Swift.Double, normalizedFadeWidth: Swift.Double, mode: ImglyKit.FocusMode, blurQuality: ImglyKit.BlurQuality)
  @objc override dynamic public init()
  @objc final public var normalizedControlPoint1: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var normalizedControlPoint2: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var normalizedBlurRadius: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var normalizedFadeWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var mode: ImglyKit.FocusMode {
    @objc get
    @objc set
  }
  @objc final public var blurQuality: ImglyKit.BlurQuality {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameSpriteModel) final public class _ObjCFrameSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var frameSpriteModel: ImglyKit.FrameSpriteModel {
    get
  }
  override final public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc public init(frame: ImglyKit.Frame)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var scale: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc final public var alpha: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var ratio: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKOverlayModel) final public class _ObjCOverlayModel : ObjectiveC.NSObject {
  final public var overlayModel: ImglyKit.OverlayModel {
    get
  }
  @objc public init(identifier: Swift.String, blendMode: ImglyKit.BlendMode, intensity: Swift.Double)
  @objc override dynamic public init()
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var blendMode: ImglyKit.BlendMode {
    @objc get
    @objc set
  }
  @objc final public var intensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPathModel) final public class _ObjCPathModel : ImglyKit._ObjCSpriteModel {
  final public var pathModel: ImglyKit.PathModel {
    get
  }
  override final public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc public init(color: UIKit.UIColor, normalizedSize: CoreFoundation.CGFloat, hardness: CoreFoundation.CGFloat, points: [CoreFoundation.CGPoint], eraseFragment: ImglyKit.PaintingFragment?, drawFragment: ImglyKit.PaintingFragment?)
  @objc public init(color: UIKit.UIColor, normalizedSize: CoreFoundation.CGFloat, hardness: CoreFoundation.CGFloat, points: [CoreFoundation.CGPoint])
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var color: UIKit.UIColor {
    @objc get
  }
  @objc final public var normalizedSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var hardness: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var points: [CoreFoundation.CGPoint] {
    @objc get
  }
  @objc final public var eraseFragment: ImglyKit.PaintingFragment? {
    @objc get
    @objc set
  }
  @objc final public var drawFragment: ImglyKit.PaintingFragment? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditModel) final public class _ObjCPhotoEditModel : ObjectiveC.NSObject {
  final public var photoEditModel: ImglyKit.PhotoEditModel {
    get
  }
  @objc override dynamic public init()
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize?, assetCatalog: ImglyKit.AssetCatalog)
  @available(*, deprecated, message: "Use `init(serializedData:referenceSize:assetCatalog:)` instead")
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize?)
  @objc @available(*, deprecated, message: "Use `init(serializedData:referenceSize:assetCatalog:)` instead")
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize)
  @objc public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize, assetCatalog: ImglyKit.AssetCatalog)
  @objc final public var adjustmentModel: ImglyKit._ObjCAdjustmentModel {
    @objc get
    @objc set
  }
  @objc final public var effectFilterModel: ImglyKit._ObjCEffectFilterModel {
    @objc get
    @objc set
  }
  @objc final public var focusModel: ImglyKit._ObjCFocusModel {
    @objc get
    @objc set
  }
  @objc final public var overlayModel: ImglyKit._ObjCOverlayModel {
    @objc get
    @objc set
  }
  @objc final public var spriteModels: [ImglyKit._ObjCSpriteModel] {
    @objc get
    @objc set
  }
  @objc final public var transformModel: ImglyKit._ObjCTransformModel {
    @objc get
    @objc set
  }
  @objc final public var trimModel: ImglyKit._ObjCTrimModel {
    @objc get
    @objc set
  }
  @objc final public var compositionModel: ImglyKit._ObjCCompositionModel {
    @objc get
    @objc set
  }
  @objc final public var audioModel: ImglyKit._ObjCAudioModel {
    @objc get
    @objc set
  }
  @objc final public var isAutoEnhancementEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isBackgroundRemoved: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSpriteModel) public class _ObjCSpriteModel : ObjectiveC.NSObject {
  public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerSpriteModel) final public class _ObjCStickerSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var stickerSpriteModel: ImglyKit.StickerSpriteModel {
    get
  }
  override final public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc public init(sticker: ImglyKit.Sticker)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var normalizedSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc final public var normalizedCenter: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var rotation: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var verticallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var horizontallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var startTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc final public var endTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  final public var tintMode: ImglyKit.StickerTintMode? {
    get
    set
  }
  @objc final public var tintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var brightness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var contrast: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var saturation: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var alpha: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var backgroundRemoved: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var metadata: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignSpriteModel) final public class _ObjCTextDesignSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var textDesignSpriteModel: ImglyKit.TextDesignSpriteModel {
    get
  }
  override final public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var rotation: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var verticallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var horizontallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var normalizedWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var normalizedCenter: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var normalizedPadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var tintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var randomizerSeed: Swift.UInt64 {
    @objc get
    @objc set
  }
  @objc final public var isInverted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextSpriteModel) final public class _ObjCTextSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var textSpriteModel: ImglyKit.TextSpriteModel {
    get
  }
  override final public var spriteModel: any ImglyKit.SpriteModel {
    get
  }
  @objc override dynamic public init()
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var normalizedWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var normalizedCenter: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var rotation: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var verticallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var horizontallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var normalizedFontSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var startTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc final public var endTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc final public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @objc final public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var fontIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTheme) final public class _ObjCTheme : ObjectiveC.NSObject {
  final public var theme: ImglyKit.Theme {
    get
  }
  @objc public init(backgroundColor: UIKit.UIColor, menuBackgroundColor: UIKit.UIColor, toolbarBackgroundColor: UIKit.UIColor, primaryColor: UIKit.UIColor)
  @objc override dynamic public init()
  @objc final public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var menuBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var toolbarBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var primaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var rotationSnapGuideColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var positionSnapGuideColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var boundingBoxSnapGuideColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var primaryFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var mediumFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var boldFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var monospacedFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var searchBarFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var uppercasedToolbarTitles: Swift.Bool {
    @objc get
    @objc set
  }
  public static var dark: ImglyKit.Theme {
    get
  }
  public static var light: ImglyKit.Theme {
    get
  }
  public static var dynamic: ImglyKit.Theme {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTransformModel) final public class _ObjCTransformModel : ObjectiveC.NSObject {
  final public var transformModel: ImglyKit.TransformModel {
    get
  }
  @objc public init(appliedOrientation: ImglyKit.Orientation, normalizedCropRect: CoreFoundation.CGRect, straightenAngle: Swift.Double, imageInsets: UIKit.UIEdgeInsets)
  @objc override dynamic public init()
  @objc final public var appliedOrientation: ImglyKit.Orientation {
    @objc get
    @objc set
  }
  @objc final public var normalizedCropRect: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc final public var straightenAngle: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var imageInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc final public var adjustedStraightenAngle: Swift.Double {
    @objc get
  }
  @objc final public var isGeometryIdentity: Swift.Bool {
    @objc get
  }
  @objc public static var identityOrientation: ImglyKit.Orientation {
    @objc get
  }
  @objc public static var identityNormalizedCropRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTrimModel) final public class _ObjCTrimModel : ObjectiveC.NSObject {
  final public var trimModel: ImglyKit.TrimModel {
    get
  }
  public init(startTime: CoreMedia.CMTime?, endTime: CoreMedia.CMTime?)
  @objc override dynamic public init()
  @objc final public var startTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc final public var endTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipModel) final public class _ObjCVideoClipModel : ObjectiveC.NSObject {
  final public var videoClipModel: ImglyKit.VideoClipModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var trimModel: ImglyKit._ObjCTrimModel {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ImglyKit.AdjustEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.BrushEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.CompositionEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.FilterEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.FocusEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.MediaEditViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.OverlayEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.PhotoEditRenderer {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.PhotoEditToolController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.SpriteContainerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.SpriteEditController {
  @_Concurrency.MainActor(unsafe) public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    get
    set
  }
}
extension ImglyKit.SpriteViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension ImglyKit.TransformEditController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
public protocol ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKOpenWeatherProvider) public class OpenWeatherProvider : ObjectiveC.NSObject, ImglyKit.WeatherProvider, CoreLocation.CLLocationManagerDelegate {
  @objc final public let apiKey: Swift.String?
  @objc public var updateInterval: Swift.Double
  @objc public init(apiKey: Swift.String?, unit: ImglyKit.TemperatureFormat)
  @objc deinit
  @objc public var temperatureFormat: ImglyKit.TemperatureFormat
  @objc public var temperature: ImglyKit.Temperature? {
    @objc get
  }
  @objc public func updateData()
  @objc public var locationAccessRequestClosure: ((CoreLocation.CLLocationManager) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
infix operator =? : AssignmentPrecedence
@objc(PESDKOrientation) public enum Orientation : Swift.Int {
  case normal = 1
  case flipX
  case rotate180
  case flipY
  case transverse
  case rotate90
  case transpose
  case rotate270
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ImglyKit.Orientation : Swift.CustomStringConvertible {
  public var exifValue: Swift.Int32 {
    get
  }
  public var description: Swift.String {
    get
  }
  public init(imageOrientation: UIKit.UIImage.Orientation)
  public func concatenating(_ o2: ImglyKit.Orientation) -> ImglyKit.Orientation
  public func orientation(between o2: ImglyKit.Orientation) -> ImglyKit.Orientation
  public var inversed: ImglyKit.Orientation {
    get
  }
  public func transform(with size: CoreFoundation.CGSize) -> CoreFoundation.CGAffineTransform
  public var isMirrored: Swift.Bool {
    get
  }
  public func calculateOrientationParameters() -> (angle: Swift.Int, flippedHorizontally: Swift.Bool, flippedVertically: Swift.Bool)
}
@objc(PESDKOutputScalingRule) public enum OutputScalingRule : Swift.Int {
  case none
  case scaleDown
  case scaleUp
  case scaleUpOrDown
  case exactResolution
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKOverlay) open class Overlay : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var identifier: Swift.String {
    get
  }
  @objc public var url: Foundation.URL? {
    get
  }
  @objc public var thumbnailURL: Foundation.URL? {
    get
  }
  @objc public var displayName: Swift.String {
    get
  }
  @objc public var initialBlendMode: ImglyKit.BlendMode {
    get
  }
  @objc public init(identifier: Swift.String, displayName: Swift.String, url: Foundation.URL?, thumbnailURL: Foundation.URL? = nil, initialBlendMode: ImglyKit.BlendMode)
  @objc @available(*, deprecated, message: "Use `assetCatalog.overlay(withIdentifier:)` of your `Configuration` object instead.")
  public static func overlay(withIdentifier identifier: Swift.String) -> ImglyKit.Overlay?
  @objc public static var none: ImglyKit.Overlay {
    @objc get
  }
  @objc public class var defaultItems: [ImglyKit.Overlay] {
    @objc get
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.overlays` of your `Configuration` object instead.")
  public static var all: [ImglyKit.Overlay] {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKOverlayButton) @_Concurrency.MainActor(unsafe) open class OverlayButton : ImglyKit.Button {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func setImage(_ image: UIKit.UIImage?)
  @objc @_Concurrency.MainActor(unsafe) open class func makeAddButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeDeleteButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeFlipButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeStraightenButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeToFrontButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeUndoButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeRedoButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeAlignmentButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeInvertButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeDisableInvertButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makePlayButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makePauseButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeSoundOnButton() -> ImglyKit.OverlayButton
  @objc @_Concurrency.MainActor(unsafe) open class func makeSoundOffButton() -> ImglyKit.OverlayButton
  @objc @available(iOS 15.0, *)
  @_Concurrency.MainActor(unsafe) open class func makeRemoveBackgroundButton() -> ImglyKit.OverlayButton
  @objc deinit
}
@objcMembers @objc(PESDKOverlayEditController) @_Concurrency.MainActor(unsafe) open class OverlayEditController : ImglyKit.ViewController {
  @_Concurrency.MainActor(unsafe) final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>
  @objc @_Concurrency.MainActor(unsafe) final public let blendModeContainerView: ImglyKit.GradientView
  @objc @_Concurrency.MainActor(unsafe) final public let blendModeCollectionView: UIKit.UICollectionView
  @_Concurrency.MainActor(unsafe) open var blendModes: [ImglyKit.BlendMode] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlay: ImglyKit.Overlay? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.OverlayEditControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var showOverlayIntensitySlider: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var showBlendModeCollectionView: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var initialOverlayIntensity: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func selectBlendMode(_ blendMode: ImglyKit.BlendMode, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func selectNextBlendMode(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showControls(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func hideControls(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showBlendModes(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func hideBlendModes(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open var isBlendModeViewHidden: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var blendModeHideTimeInterval: Foundation.TimeInterval
  @objc @_Concurrency.MainActor(unsafe) open func setOverlay(_ overlay: ImglyKit.Overlay?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @objc @_Concurrency.MainActor(unsafe) public static var collectionViewCellType: ImglyKit.BlendModeCollectionViewCell.Type {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.OverlayEditController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension ImglyKit.OverlayEditController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension ImglyKit.OverlayEditController : ImglyKit.SliderEditControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension ImglyKit.OverlayEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension ImglyKit.OverlayEditController : ImglyKit.PhotoEditModelSettable {
}
@objc(PESDKOverlayEditControllerDelegate) public protocol OverlayEditControllerDelegate {
  @objc func overlayEditControllerDidChangePhotoEditModel(_ overlayEditController: ImglyKit.OverlayEditController)
  @objc func overlayEditControllerTargetScrollView(_ overlayEditController: ImglyKit.OverlayEditController) -> UIKit.UIScrollView?
  @objc func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, willDisplay blendMode: ImglyKit.BlendMode, in cell: ImglyKit.BlendModeCollectionViewCell)
  @objc func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKOverlayFilter) open class OverlayFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputOverlayImage: CoreImage.CIImage?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc open var inputBlendMode: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKOverlayLabel) @_Concurrency.MainActor(unsafe) open class OverlayLabel : ImglyKit.Label {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKOverlayListSectionController) open class OverlayListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func selectItem(at index: Swift.Int)
  @objc override open func deselectItem(at index: Swift.Int)
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKOverlayMenuItem) open class OverlayMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let overlay: ImglyKit.Overlay
  @objc final public let title: Swift.String
  @objc final public let thumbnailURL: Foundation.URL?
  @objc final public let thumbnail: UIKit.UIImage?
  @objc convenience public init(overlay: ImglyKit.Overlay, thumbnail: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
public struct OverlayModel : Swift.Equatable {
  public var identifier: Swift.String
  public var blendMode: ImglyKit.BlendMode
  public var intensity: Swift.Double
  public init(identifier: Swift.String, blendMode: ImglyKit.BlendMode, intensity: Swift.Double)
  public init()
  public static func == (a: ImglyKit.OverlayModel, b: ImglyKit.OverlayModel) -> Swift.Bool
}
extension ImglyKit.OverlayModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKOverlayToolController) @_Concurrency.MainActor(unsafe) open class OverlayToolController : ImglyKit.MenuToolController, ImglyKit.OverlayEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let overlayEditController: ImglyKit.OverlayEditController
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(overlayEditController: ImglyKit.OverlayEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc public func overlayEditControllerDidChangePhotoEditModel(_ overlayEditController: ImglyKit.OverlayEditController)
  @_Concurrency.MainActor(unsafe) @objc public func overlayEditControllerTargetScrollView(_ overlayEditController: ImglyKit.OverlayEditController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc public func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, willDisplay blendMode: ImglyKit.BlendMode, in cell: ImglyKit.BlendModeCollectionViewCell)
  @_Concurrency.MainActor(unsafe) @objc public func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc deinit
}
extension ImglyKit.OverlayToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKOverlayToolControllerOptions) open class OverlayToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let overlayIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let showOverlayIntensitySlider: Swift.Bool
  @objc final public let showBlendModeCollectionView: Swift.Bool
  @objc final public let overlaySelectedClosure: ((ImglyKit.Overlay) -> Swift.Void)?
  @objc final public let blendModeSelectedClosure: ((ImglyKit.BlendMode) -> Swift.Void)?
  @objc final public let overlayIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Overlay) -> Swift.Void)?
  @objc final public let overlayCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Overlay) -> Swift.Void)?
  @objc final public let initialOverlayIntensity: CoreFoundation.CGFloat
  final public let allowedBlendModes: [ImglyKit.BlendMode]
  @objc final public let blendModeCollectionViewConfigurationClosure: ((UIKit.UICollectionView) -> Swift.Void)?
  @objc final public let blendModeCollectionViewCellConfigurationClosure: ((ImglyKit.BlendModeCollectionViewCell, ImglyKit.BlendMode) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.OverlayToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKOverlayToolControllerOptionsBuilder) open class OverlayToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var overlayIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var showOverlayIntensitySlider: Swift.Bool
  @objc open var overlaySelectedClosure: ((ImglyKit.Overlay) -> Swift.Void)?
  @objc open var blendModeSelectedClosure: ((ImglyKit.BlendMode) -> Swift.Void)?
  @objc open var overlayIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Overlay) -> Swift.Void)?
  @objc open var showBlendModeCollectionView: Swift.Bool
  @objc open var overlayCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Overlay) -> Swift.Void)?
  @objc open var initialOverlayIntensity: CoreFoundation.CGFloat
  open var allowedBlendModes: [ImglyKit.BlendMode]
  @objc open var blendModeCollectionViewConfigurationClosure: ((UIKit.UICollectionView) -> Swift.Void)?
  @objc open var blendModeCollectionViewCellConfigurationClosure: ((ImglyKit.BlendModeCollectionViewCell, ImglyKit.BlendMode) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.OverlayToolControllerOptions)
  @objc deinit
}
extension ImglyKit.OverlayToolControllerOptionsBuilder {
  @objc(allowedBlendModes) dynamic open var _objcAllowedBlendModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PESDK : ImglyKit.IMGLY {
  @objc override final public class func crashIfNeeded() throws
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKPainting) open class Painting : ObjectiveC.NSObject {
  @objc weak open var canvas: ImglyKit.CanvasView?
  @objc final public let dimensions: CoreFoundation.CGSize
  @objc open var bounds: CoreFoundation.CGRect {
    @objc get
  }
  @objc open var brushTexture: ImglyKit.Texture?
  @objc required public init(size: CoreFoundation.CGSize, device: any Metal.MTLDevice)
  @objc required convenience public init?(size: CoreFoundation.CGSize)
  @objc open func clear()
  @objc open func preloadPaintTexture()
  @objc(imageWithSize:backgroundColor:) open func image(with size: CoreFoundation.CGSize, backgroundColor color: UIKit.UIColor) -> UIKit.UIImage?
  @objc(ciImageWithSize:backgroundColor:) open func ciImage(with size: CoreFoundation.CGSize, backgroundColor color: UIKit.UIColor) -> CoreImage.CIImage?
  @objc deinit
}
@objcMembers @objc(PESDKPaintingFragment) open class PaintingFragment : ObjectiveC.NSObject {
  @objc final public let bounds: CoreFoundation.CGRect
  @objc final public let dataLength: Swift.Int
  @objc open var data: Foundation.Data {
    @objc get
  }
  @objc public init(data: Foundation.Data, bounds: CoreFoundation.CGRect)
  @objc deinit
  @objc open func apply(in painting: ImglyKit.Painting)
}
public struct PathModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public let color: UIKit.UIColor
  public let normalizedSize: CoreFoundation.CGFloat
  public let hardness: CoreFoundation.CGFloat
  public let points: [CoreFoundation.CGPoint]
  public var eraseFragment: ImglyKit.PaintingFragment?
  public var drawFragment: ImglyKit.PaintingFragment?
  public init(color: UIKit.UIColor, normalizedSize: CoreFoundation.CGFloat, hardness: CoreFoundation.CGFloat, points: [CoreFoundation.CGPoint], eraseFragment: ImglyKit.PaintingFragment?, drawFragment: ImglyKit.PaintingFragment?)
  public init(color: UIKit.UIColor, normalizedSize: CoreFoundation.CGFloat, hardness: CoreFoundation.CGFloat, points: [CoreFoundation.CGPoint])
  public static func == (a: ImglyKit.PathModel, b: ImglyKit.PathModel) -> Swift.Bool
}
@objcMembers @objc(PESDKPhoto) final public class Photo : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL?
  @objc final public let data: Foundation.Data?
  @objc final public let image: UIKit.UIImage?
  @objc final public var uiImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc final public var size: CoreFoundation.CGSize {
    @objc get
  }
  @objc(photoFromPhotoRepresentation:) public static func from(photoRepresentation: any ImglyKit.PhotoRepresentation) -> ImglyKit.Photo?
  @objc(initWithURL:) public init(url: Foundation.URL)
  @objc public init(data: Foundation.Data)
  @objc public init(image: UIKit.UIImage)
  @objc deinit
}
extension ImglyKit.Photo : ImglyKit.PhotoRepresentation {
}
public enum PhotoEditMenuItem {
  case tool(ImglyKit.ToolMenuItem)
  case action(ImglyKit.ActionMenuItem)
  public static var defaultItems: [ImglyKit.PhotoEditMenuItem] {
    get
  }
  public var diffIdentifier: Swift.String {
    get
  }
}
@objcMembers @objc(PESDKPhotoEditMenuItem) final public class _ObjCPhotoEditMenuItem : ObjectiveC.NSObject {
  @objc final public let toolMenuItem: ImglyKit.ToolMenuItem?
  @objc final public let actionMenuItem: ImglyKit.ActionMenuItem?
  final public var photoEditMenuItem: ImglyKit.PhotoEditMenuItem {
    get
  }
  @objc public static var defaultItems: [ImglyKit._ObjCPhotoEditMenuItem] {
    @objc get
  }
  @objc public init?(toolMenuItem: ImglyKit.ToolMenuItem?)
  @objc public init?(actionMenuItem: ImglyKit.ActionMenuItem?)
  @objc deinit
}
extension ImglyKit.PhotoEditModel {
  @available(*, deprecated, message: "Use `serialized(with:includeImageData:assetCatalog:)` or serialized(with:includeImageData:assetCatalog:assetManager:)` instead")
  public func serialized(with photo: ImglyKit.Photo, includeImageData: Swift.Bool) -> Foundation.Data?
  public func serialized(with photo: ImglyKit.Photo, includeImageData: Swift.Bool, assetCatalog: ImglyKit.AssetCatalog) -> Foundation.Data?
  public func serialized(with photo: ImglyKit.Photo, includeImageData: Swift.Bool, assetCatalog: ImglyKit.AssetCatalog, assetManager: ImglyKit.AssetManager) -> Foundation.Data?
}
public struct PhotoEditModel : Swift.Equatable {
  public var adjustmentModel: ImglyKit.AdjustmentModel
  public var effectFilterModel: ImglyKit.EffectFilterModel
  public var focusModel: ImglyKit.FocusModel
  public var overlayModel: ImglyKit.OverlayModel
  public var spriteModels: [any ImglyKit.SpriteModel]
  public var transformModel: ImglyKit.TransformModel
  public var trimModel: ImglyKit.TrimModel
  public var compositionModel: ImglyKit.CompositionModel
  public var audioModel: ImglyKit.AudioModel
  public var isAutoEnhancementEnabled: Swift.Bool
  public var isBackgroundRemoved: Swift.Bool
  public init()
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize?, assetCatalog: ImglyKit.AssetCatalog)
  @available(*, deprecated, message: "Use `init(serializedData:referenceSize:assetCatalog:)` instead")
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize?)
  @available(*, deprecated, message: "Use `init(serializedData:referenceSize:assetCatalog:)` instead")
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize)
  public init?(serializedData data: Foundation.Data, referenceSize: CoreFoundation.CGSize, assetCatalog: ImglyKit.AssetCatalog)
  public func spriteModel(with uuid: Foundation.UUID) -> (Swift.Int, any ImglyKit.SpriteModel)?
}
public func == (lhs: ImglyKit.PhotoEditModel, rhs: ImglyKit.PhotoEditModel) -> Swift.Bool
extension ImglyKit.PhotoEditModel : ImglyKit.ObjectiveCBridgeable {
}
public protocol PhotoEditModelSettable : AnyObject {
  var photoEditModel: ImglyKit.PhotoEditModel { get set }
  func performChanges(_ changes: (inout ImglyKit.PhotoEditModel) -> Swift.Void)
}
extension ImglyKit.PhotoEditModelSettable {
  public func performChanges(_ changes: (inout ImglyKit.PhotoEditModel) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditPreviewController) @_Concurrency.MainActor(unsafe) open class PhotoEditPreviewController : ImglyKit.MediaEditPreviewController {
  @objc @_Concurrency.MainActor(unsafe) final public let photo: ImglyKit.Photo
  @_Concurrency.MainActor(unsafe) required convenience public init(photoAsset: ImglyKit.Photo, photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @_Concurrency.MainActor(unsafe) @objc override open func loadBaseImage(_ completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override open func updateRenderer()
  @objc deinit
}
extension ImglyKit.PhotoEditPreviewController {
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(photoAsset: ImglyKit.Photo, photoEditModel: ImglyKit._ObjCPhotoEditModel)
}
extension ImglyKit.PhotoEditRenderer {
  @objc(generateOutputImageDataWithFormat:compressionQuality:metadataSourcePhoto:completionHandler:) dynamic open func generateOutputImageData(withFormat imageFormat: ImglyKit.ImageFileFormat, compressionQuality: CoreFoundation.CGFloat, metadataSourcePhoto: ImglyKit.Photo?, completionHandler: @escaping (_ outputImageData: Foundation.Data?, _ imageWidth: CoreFoundation.CGFloat, _ imageHeight: CoreFoundation.CGFloat) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditRenderer) open class PhotoEditRenderer : ObjectiveC.NSObject {
  required public init(productType: ImglyKit.LicenseProduct)
  @objc(initWithProductType:) convenience public init(_objCProductType: ImglyKit._ObjCLicenseProduct)
  @objc open var originalImage: CoreImage.CIImage? {
    @objc get
    @objc set
  }
  open var currentTime: CoreMedia.CMTime? {
    get
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var renderMode: ImglyKit.PESDKRenderMode {
    @objc get
    @objc set
  }
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @objc public var renderingQueue: Dispatch.DispatchQueue {
    @objc get
  }
  @objc open var outputImage: CoreImage.CIImage {
    @objc get
  }
  @objc public func watermarkedImage(from inputImage: CoreImage.CIImage) -> CoreImage.CIImage
  @objc public func customWatermarkedImage(from inputImage: CoreImage.CIImage) -> CoreImage.CIImage
  @objc open var outputImageSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc open func invalidateCache()
  @objc public var generatingCIContext: CoreImage.CIContext {
    @objc get
  }
  @objc open func newOutputImage() -> CoreGraphics.CGImage
  @objc open func renderOutputImage(into pixelBuffer: CoreVideo.CVPixelBuffer)
  @objc(createOutputImageWithCompletion:) open func createOutputImage(with completion: @escaping (_ outputImage: CoreGraphics.CGImage) -> Swift.Void)
  @objcMembers @objc(PESDKDrawReturnValue) open class DrawReturnValue : ObjectiveC.NSObject {
    @objc final public let commandBuffer: any Metal.MTLCommandBuffer
    @objc final public let colorSpace: CoreGraphics.CGColorSpace?
    @objc public init(commandBuffer: any Metal.MTLCommandBuffer, colorSpace: CoreGraphics.CGColorSpace?)
    @objc deinit
  }
  @objc @discardableResult
  open func drawOutputImage(for device: any Metal.MTLDevice, in drawable: any QuartzCore.CAMetalDrawable, to rect: CoreFoundation.CGRect, commandQueue: any Metal.MTLCommandQueue) -> ImglyKit.PhotoEditRenderer.DrawReturnValue?
  @discardableResult
  open func drawOutputImage(for device: any Metal.MTLDevice, in drawable: any QuartzCore.CAMetalDrawable, to rect: CoreFoundation.CGRect, commandQueue: any Metal.MTLCommandQueue, targetSize: CoreFoundation.CGSize? = nil, transform: CoreFoundation.CGAffineTransform = CGAffineTransform.identity, backgroundColor: UIKit.UIColor? = nil, backgroundImage: CoreImage.CIImage? = nil, nearest: Swift.Bool = false, presentAndCommit: Swift.Bool = true, label: Swift.String? = nil) -> ImglyKit.PhotoEditRenderer.DrawReturnValue?
  @objc deinit
}
extension ImglyKit.PhotoEditRenderer : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.PhotoEditToolController : ImglyKit.VideoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var videoPreviewControllingTarget: (any ImglyKit.VideoPreviewControlling)? {
    get
  }
}
@objcMembers @objc(PESDKPhotoEditToolController) @_Concurrency.MainActor(unsafe) open class PhotoEditToolController : ImglyKit.ViewController {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var subscribers: [ImglyKit.WeakContainer<any ImglyKit.EventSubscriber>]
  @objc @_Concurrency.MainActor(unsafe) open var toolbarItem: ImglyKit.ToolbarItem {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func configureToolbarItem()
  @objc @_Concurrency.MainActor(unsafe) open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc @_Concurrency.MainActor(unsafe) open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var uneditedPhotoEditModel: ImglyKit.PhotoEditModel {
    get
  }
  @_Concurrency.MainActor(unsafe) open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc @_Concurrency.MainActor(unsafe) final public let configuration: ImglyKit.Configuration
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.PhotoEditToolControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var undoController: ImglyKit.UndoController?
  @objc @_Concurrency.MainActor(unsafe) open var assetManager: ImglyKit.AssetManager?
  @objc @_Concurrency.MainActor(unsafe) public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var userInterfaceState: ImglyKit.UserInterfaceState {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didResignActiveTool()
  @objc @_Concurrency.MainActor(unsafe) open func setupForZoomAndPan()
  @objc @_Concurrency.MainActor(unsafe) open func resetForZoomAndPan()
  @objc @_Concurrency.MainActor(unsafe) open var isModelChangeLocal: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var wantsDefaultPreviewView: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var preferredRenderMode: ImglyKit.PESDKRenderMode {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var preferredPreviewBackgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var preferredDefaultPreviewViewScale: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @objc deinit
}
extension ImglyKit.PhotoEditToolController : ImglyKit.EventSubscribable {
}
extension ImglyKit.PhotoEditToolController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.PhotoEditToolController : ImglyKit.ToolbarItemProviding {
}
extension ImglyKit.PhotoEditToolController : ImglyKit.PhotoPreviewControlling {
}
@objc(PESDKPhotoEditToolControllerDelegate) public protocol PhotoEditToolControllerDelegate {
  @objc func photoEditToolControllerViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditViewController?
  @objc func photoEditToolControllerPreviewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditPreviewController?
  @objc func photoEditToolControllerBaseImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIImage?
  @objc func photoEditToolControllerBaseCIImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> CoreImage.CIImage?
  @objc func photoEditToolControllerPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIView?
  @objc func photoEditToolControllerPreviewScrollView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIScrollView?
  @objc func photoEditToolControllerSpriteViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.SpriteViewController?
  @objc func photoEditToolController(_ photoEditToolController: ImglyKit.PhotoEditToolController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func photoEditToolControllerDidChangeWantsDefaultPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController)
}
@objcMembers @objc(PESDKPhotoEditViewController) @_Concurrency.MainActor(unsafe) open class PhotoEditViewController : ImglyKit.MediaEditViewController, ImglyKit.BrandedView {
  @_Concurrency.MainActor(unsafe) final public let branding: ImglyKit.Branding?
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.PhotoEditViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override public var options: ImglyKit.MediaEditViewControllerOptions {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) required public init(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @_Concurrency.MainActor(unsafe) public static func makePhotoEditViewController(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel()) -> ImglyKit.PhotoEditViewController
  @_Concurrency.MainActor(unsafe) @objc override open func renderHighResolutionVariant()
  @objc @_Concurrency.MainActor(unsafe) open func serializedSettings(withImageData includeImageData: Swift.Bool) -> Foundation.Data?
  @_Concurrency.MainActor(unsafe) @objc override open func didCancel()
  @_Concurrency.MainActor(unsafe) @objc override open func willPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override open func didPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override open func willDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override open func didDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc deinit
}
@objc(PESDKPhotoEditViewControllerDelegate) public protocol PhotoEditViewControllerDelegate : ImglyKit.MediaEditViewControllerDelegate {
  @objc optional func photoEditViewControllerShouldStart(_ photoEditViewController: ImglyKit.PhotoEditViewController, task: ImglyKit.PhotoEditorTask) -> Swift.Bool
  @objc func photoEditViewControllerDidFinish(_ photoEditViewController: ImglyKit.PhotoEditViewController, result: ImglyKit.PhotoEditorResult)
  @objc func photoEditViewControllerDidFail(_ photoEditViewController: ImglyKit.PhotoEditViewController, error: ImglyKit.PhotoEditorError)
  @objc func photoEditViewControllerDidCancel(_ photoEditViewController: ImglyKit.PhotoEditViewController)
}
extension ImglyKit.PhotoEditViewController {
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel)
  @objc @_Concurrency.MainActor(unsafe) public static func photoEditViewController(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel) -> ImglyKit.PhotoEditViewController
}
@objcMembers @objc(PESDKPhotoEditViewControllerOptions) open class PhotoEditViewControllerOptions : ImglyKit.MediaEditViewControllerOptions {
  @objc final public let outputImageFileFormat: ImglyKit.ImageFileFormat
  @objc public var outputImageFileFormatUTI: CoreFoundation.CFString {
    @objc get
  }
  @objc final public let compressionQuality: CoreFoundation.CGFloat
  @objc convenience dynamic public init()
  @objc public init(photoEditBuilder: ImglyKit.PhotoEditViewControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKPhotoEditViewControllerOptionsBuilder) open class PhotoEditViewControllerOptionsBuilder : ImglyKit.MediaEditViewControllerOptionsBuilder {
  @objc open var outputImageFileFormat: ImglyKit.ImageFileFormat
  @objc open var compressionQuality: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc public init(photoEditOptions: ImglyKit.PhotoEditViewControllerOptions)
  @objc deinit
}
public struct PhotoEditor : SwiftUI.View {
  public init(photo: ImglyKit.Photo, configuration: ImglyKit.Configuration? = nil, photoEditModel: ImglyKit.PhotoEditModel? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8ImglyKit11PhotoEditorV4bodyQrvp", 0) __
}
extension ImglyKit.PhotoEditor {
  public func onShouldStart(perform action: @escaping (ImglyKit.PhotoEditorTask) -> Swift.Bool) -> ImglyKit.PhotoEditor
  public func onDidFail(perform action: @escaping (ImglyKit.PhotoEditorError) -> Swift.Void) -> ImglyKit.PhotoEditor
  public func onDidCancel(perform action: @escaping () -> Swift.Void) -> ImglyKit.PhotoEditor
  public func onDidSave(perform action: @escaping (_ result: ImglyKit.PhotoEditorResult) -> Swift.Void) -> ImglyKit.PhotoEditor
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditorError) public class PhotoEditorError : Foundation.NSError, Foundation.LocalizedError {
  @objc(PESDKPhotoEditorErrorReason) public enum Reason : Swift.Int, Swift.CustomStringConvertible {
    case inputImageNotFound
    case renderingFailed
    case imageSizeZero
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let reason: ImglyKit.PhotoEditorError.Reason
  @objc final public let underlyingError: (any Swift.Error)?
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc override dynamic public var localizedDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public var underlyingErrors: [any Swift.Error] {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditorResult) public class PhotoEditorResult : ObjectiveC.NSObject {
  @objc(PESDKPhotoEditorStatus) public enum Status : Swift.Int, Swift.CustomStringConvertible {
    case passedWithoutRendering
    case renderedWithoutChanges
    case renderedWithChanges
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditorOutput) public class Output : ObjectiveC.NSObject {
    @objc final public let data: Foundation.Data
    @objc public var uti: Swift.String? {
      @objc get
    }
    @objc override dynamic public var description: Swift.String {
      @objc get
    }
    @objc deinit
  }
  @objc final public let output: ImglyKit.PhotoEditorResult.Output
  @objc final public let status: ImglyKit.PhotoEditorResult.Status
  @objc final public let task: ImglyKit.PhotoEditorTask
  @objc @available(*, deprecated, message: "Use `status` instead.")
  public var hasChanges: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditorTask) public class PhotoEditorTask : ObjectiveC.NSObject {
  @objc final public let photo: ImglyKit.Photo
  final public let model: ImglyKit.PhotoEditModel
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.PhotoEditorTask {
  @objc(model) dynamic public var _objCPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
  }
}
public protocol PhotoPreviewControlling {
  var wantsDefaultPreviewView: Swift.Bool { get }
  var preferredRenderMode: ImglyKit.PESDKRenderMode { get }
  var preferredPreviewBackgroundColor: UIKit.UIColor? { get }
  var preferredPreviewViewInsets: UIKit.UIEdgeInsets { get }
  var preferredDefaultPreviewViewScale: CoreFoundation.CGFloat { get }
  var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? { get }
}
extension ImglyKit.PhotoPreviewControlling {
  public var wantsDefaultPreviewView: Swift.Bool {
    get
  }
  public var preferredRenderMode: ImglyKit.PESDKRenderMode {
    get
  }
  public var preferredPreviewBackgroundColor: UIKit.UIColor? {
    get
  }
  public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    get
  }
  public var preferredDefaultPreviewViewScale: CoreFoundation.CGFloat {
    get
  }
  public var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
}
@objc(PESDKPhotoRepresentation) public protocol PhotoRepresentation {
  @objc var url: Foundation.URL? { get }
  @objc var data: Foundation.Data? { get }
  @objc var image: UIKit.UIImage? { get }
  @objc var uiImage: UIKit.UIImage? { get }
  @objc var size: CoreFoundation.CGSize { get }
  @objc init(data: Foundation.Data)
  @objc(initWithURL:) init(url: Foundation.URL)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKPrimaryLabel) @_Concurrency.MainActor(unsafe) open class PrimaryLabel : ImglyKit.Label {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKProgressLabel) @_Concurrency.MainActor(unsafe) open class ProgressLabel : ImglyKit.Label {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc(PESDKProgressView) public protocol ProgressView {
  @objc func show(withMessage message: Swift.String)
  @objc func hide()
  @objc optional func setProgress(_ value: Swift.Double)
  @objc optional func show(withMessage message: Swift.String, cancelText: Swift.String, cancelHandler: @escaping () -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKProxyZoomController) @_Concurrency.MainActor(unsafe) open class ProxyZoomController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var proxyScrollView: UIKit.UIScrollView?
  @objc @_Concurrency.MainActor(unsafe) open var proxyContentView: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.ProxyZoomControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func setupProxyScrolling()
  @objc @_Concurrency.MainActor(unsafe) open func resetProxyScrolling()
  @objc deinit
}
extension ImglyKit.ProxyZoomController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
@objc(PESDKProxyZoomControllerDelegate) public protocol ProxyZoomControllerDelegate {
  @objc func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc(PESDKBlurQuality) public enum BlurQuality : Swift.Int {
  case low
  case high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKRadialFocusFilter) open class RadialFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputNormalizedControlPoint1: Foundation.NSValue?
  @objc open var inputNormalizedControlPoint2: Foundation.NSValue?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputFadeWidth: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum RecordingMode : Swift.Int {
  case photo
  case video
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKResolvableAsset) public protocol ResolvableAsset {
  @objc var resolver: Swift.String? { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKRoundGenerator) open class RoundGenerator : ImglyKit.StampGenerator {
  @objc open var hardness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc(renderStampInContext:) override open func renderStamp(in context: CoreGraphics.CGContext)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKScalePickerDelegate) public protocol ScalePickerDelegate {
  @objc(scalePicker:didChangeValue:) func didChange(value: CoreFoundation.CGFloat, on scalePicker: ImglyKit.ScalePicker)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKScalePicker) @_Concurrency.MainActor(unsafe) open class ScalePicker : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var currentValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var minValue: Swift.Int {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var maxValue: Swift.Int {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tickSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var mainTickSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var spaceBetweenTicks: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var tickColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var valueLabelBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.ScalePickerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func scroll(toValue value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @objc deinit
}
extension ImglyKit.ScalePicker : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSearchBar) @_Concurrency.MainActor(unsafe) open class SearchBar : UIKit.UISearchBar {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var fieldTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var fieldBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var fieldPlaceholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var fieldFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Serializer {
  @available(*, deprecated, message: "Use `serialize(_:with:includeImageData:assetCatalog:)` or `serialize(_:with:includeImageData:assetCatalog:assetManager)` instead")
  public static func serialize(_ model: ImglyKit.PhotoEditModel, with photo: any ImglyKit.PhotoRepresentation, includeImageData: Swift.Bool) -> Foundation.Data?
  public static func serialize(_ model: ImglyKit.PhotoEditModel, with photo: any ImglyKit.PhotoRepresentation, includeImageData: Swift.Bool, assetCatalog: ImglyKit.AssetCatalog) -> Foundation.Data?
  public static func serialize(_ model: ImglyKit.PhotoEditModel, with photo: any ImglyKit.PhotoRepresentation, includeImageData: Swift.Bool, assetCatalog: ImglyKit.AssetCatalog, assetManager: ImglyKit.AssetManager) -> Foundation.Data?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSharpnessFilter) open class SharpnessFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputSharpness: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objcMembers @objc(PESDKSlider) @_Concurrency.MainActor(unsafe) open class Slider : UIKit.UIControl {
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) dynamic open var thumbTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) dynamic open var thumbBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) dynamic open var filledTrackColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @IBInspectable @objc @_Concurrency.MainActor(unsafe) dynamic open var unfilledTrackColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var trackHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var trackCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var thumbSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minimumValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maximumValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var neutralValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let panGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var value: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) open func trackRects(for bounds: CoreFoundation.CGRect) -> (CoreFoundation.CGRect, CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func thumbRect(for bounds: CoreFoundation.CGRect, value: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var thumbView: UIKit.UIImageView?
  @objc @_Concurrency.MainActor(unsafe) open var leftUnfilledTrackView: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) open var rightUnfilledTrackView: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) open var filledTrackView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func beginTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open func continueTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) open func endTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class SliderContainerController<SliderType, CVC> : ImglyKit.ViewController where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.SliderContainerControllerDelegate)?
  @_Concurrency.MainActor(unsafe) final public let contentViewController: CVC?
  @objc @_Concurrency.MainActor(unsafe) open var sliderContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var slider: SliderType {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isSliderHidden: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(contentViewController: CVC?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @objc @_Concurrency.MainActor(unsafe) open func hideSlider(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showSlider(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func toggleSlider(animated: Swift.Bool)
  @objc deinit
}
public protocol SliderContainerControllerDelegate : AnyObject {
  func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  func sliderContainerControllerDidSlide<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  func sliderContainerControllerDidEndSliding<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
}
@objcMembers @_Concurrency.MainActor(unsafe) open class SliderEditController<SliderType> : ImglyKit.ViewController, ImglyKit.ProxyZoomControllerDelegate, ImglyKit.SliderContainerControllerDelegate where SliderType : ImglyKit.Slider {
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.SliderEditControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public let proxyZoomController: ImglyKit.ProxyZoomController?
  @_Concurrency.MainActor(unsafe) final public let sliderContainerController: ImglyKit.SliderContainerController<SliderType, ImglyKit.ProxyZoomController>
  @objc @_Concurrency.MainActor(unsafe) open var sliderContainerView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var slider: SliderType {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isSliderHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(proxyZoomController: ImglyKit.ProxyZoomController?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) open func hideSlider(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func showSlider(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func toggleSlider(animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func sliderContainerControllerDidSlide<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func sliderContainerControllerDidEndSliding<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @objc deinit
}
public protocol SliderEditControllerDelegate : AnyObject {
  func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSliderTooltip) @_Concurrency.MainActor(unsafe) open class SliderTooltip : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var tooltipColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var attributedString: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKMultiImageSticker) open class MultiImageSticker : ImglyKit.Sticker {
  @objc final public let stickers: [ImglyKit.Sticker]
  @objc public init(identifier: Swift.String, imageURL: Foundation.URL?, stickers: [ImglyKit.Sticker])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSmartSticker) open class SmartSticker : ImglyKit.Sticker {
  @objc(PESDKSmartStickerPromptViewController) @_Concurrency.MainActor(unsafe) open class PromptViewController : UIKit.UIViewController {
    @_Concurrency.MainActor(unsafe) public init(sticker: ImglyKit.SmartSticker)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) public func done(metadata: [Swift.String : Swift.String])
    @_Concurrency.MainActor(unsafe) public func cancel()
    @objc deinit
  }
  @objc public init(identifier: Swift.String)
  @objc public class var defaultItems: [ImglyKit.Sticker] {
    @objc get
  }
  @objc open var prompt: ImglyKit.SmartSticker.PromptViewController? {
    @objc get
  }
  @objc open func size(for metadata: [Swift.String : Swift.String]? = nil) -> CoreFoundation.CGSize
  @objc open func draw(with metadata: [Swift.String : Swift.String]?, context: CoreGraphics.CGContext, size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat)
  @objc deinit
}
@objc(PESDKTemperatureFormat) public enum TemperatureFormat : Swift.Int {
  case fahrenheit
  case celsius
  case kelvin
  case locale
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKTemperatureUnit) public enum TemperatureUnit : Swift.Int {
  case fahrenheit
  case celsius
  case kelvin
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTemperature) public class Temperature : ObjectiveC.NSObject {
  @objc final public let value: Swift.Double
  @objc final public let unit: ImglyKit.TemperatureUnit
  @objc public init(value: Swift.Double, unit: ImglyKit.TemperatureUnit)
  @objc deinit
}
@objc(PESDKWeatherProvider) public protocol WeatherProvider {
  @objc var temperatureFormat: ImglyKit.TemperatureFormat { get }
  @objc var temperature: ImglyKit.Temperature? { get }
  @objc func updateData()
}
@objc(PESDKSnapGuide) public enum SnapGuide : Swift.Int {
  case horizontalLine
  case verticalLine
  case rectangle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSnapGuideView) @_Concurrency.MainActor(unsafe) open class SnapGuideView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var guideMode: ImglyKit.SnapGuide
  @objc @_Concurrency.MainActor(unsafe) dynamic open var guideColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic open var lineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) dynamic open var lineDash: [CoreFoundation.CGFloat]
  @objc @_Concurrency.MainActor(unsafe) open var isSnapped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var didSnapHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSnappingOptions) open class SnappingOptions : ObjectiveC.NSObject {
  @objc final public let snappingEnabled: Swift.Bool
  @objc final public let rotationSnappingEnabled: Swift.Bool
  @objc final public let rotationSnappingThreshold: CoreFoundation.CGFloat
  @objc final public let positionSnappingEnabled: Swift.Bool
  @objc final public let positionSnappingThreshold: CoreFoundation.CGFloat
  @objc final public let snapToAngles: [Swift.Int]
  @objc final public let snapToHorizontalCenterLine: Swift.Bool
  @objc final public let snapToVerticalCenterLine: Swift.Bool
  final public let snapToLeft: CoreFoundation.CGFloat?
  final public let snapToRight: CoreFoundation.CGFloat?
  final public let snapToTop: CoreFoundation.CGFloat?
  final public let snapToBottom: CoreFoundation.CGFloat?
  @objc convenience override dynamic public init()
  @objc public init(builder: ImglyKit.SnappingOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSnappingOptionsOptionsBuilder) open class SnappingOptionsBuilder : ObjectiveC.NSObject {
  @objc open var snappingEnabled: Swift.Bool
  @objc open var rotationSnappingEnabled: Swift.Bool
  @objc open var rotationSnappingThreshold: CoreFoundation.CGFloat
  @objc open var positionSnappingEnabled: Swift.Bool
  @objc open var positionSnappingThreshold: CoreFoundation.CGFloat
  @objc open var snapToAngles: [Swift.Int]
  @objc open var snapToHorizontalCenterLine: Swift.Bool
  @objc open var snapToVerticalCenterLine: Swift.Bool
  open var snapToLeft: CoreFoundation.CGFloat?
  open var snapToRight: CoreFoundation.CGFloat?
  open var snapToTop: CoreFoundation.CGFloat?
  open var snapToBottom: CoreFoundation.CGFloat?
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.SnappingOptions {
  @objc(snapToLeft) dynamic open var _objCSnapToLeft: Foundation.NSNumber? {
    @objc get
  }
  @objc(snapToRight) dynamic open var _objCSnapToRight: Foundation.NSNumber? {
    @objc get
  }
  @objc(snapToTop) dynamic open var _objCSnapToTop: Foundation.NSNumber? {
    @objc get
  }
  @objc(snapToBottom) dynamic open var _objCSnapToBottom: Foundation.NSNumber? {
    @objc get
  }
}
extension ImglyKit.SnappingOptionsBuilder {
  @objc(snapToLeft) dynamic open var _objCSnapToLeft: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(snapToRight) dynamic open var _objCSnapToRight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(snapToTop) dynamic open var _objCSnapToTop: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(snapToBottom) dynamic open var _objCSnapToBottom: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objc(PESDKSoundstripeAssetResolver) @objcMembers public class SoundstripeAssetResolver : ObjectiveC.NSObject, ImglyKit.AssetResolver {
  @objc public static let identifier: Swift.String
  @objc final public let provider: ImglyKit.SoundstripeAudioProvider
  @objc required public init(provider: ImglyKit.SoundstripeAudioProvider)
  @objc public func deserialize(from data: [Swift.String : Swift.String], completion: @escaping ((any ImglyKit.ResolvableAsset)?) -> Swift.Void)
  @objc public func serialize(_ asset: any ImglyKit.ResolvableAsset) -> [Swift.String : Swift.String]?
  @objc deinit
}
@objcMembers @objc(PESDKSoundstripeAudioCategory) open class SoundstripeAudioClipCategory : ImglyKit.AudioProviderCategory {
  @objc convenience public init()
  @objc public init(provider: ImglyKit.SoundstripeAudioProvider)
  @objc deinit
}
@objcMembers @objc(PESDKSoundstripeAudioProvider) public class SoundstripeAudioProvider : ObjectiveC.NSObject {
  @objc(initWithBaseURL:headers:) public init(baseURL: Swift.String, headers: [Swift.String : Swift.String]? = nil)
  @objc deinit
}
extension ImglyKit.SoundstripeAudioProvider : ImglyKit.AudioProvider {
  public func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.AudioProviderResult, any Swift.Error>) -> Swift.Void)
  public func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.AudioProviderResult, any Swift.Error>) -> Swift.Void)
  public func get(identifier: Swift.String, completion: @escaping (Swift.Result<ImglyKit.AudioProviderResult, any Swift.Error>) -> Swift.Void)
}
extension ImglyKit.SoundstripeAudioProvider : ImglyKit._ObjCAudioProvider {
  @objc dynamic public func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.AudioProviderResult?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.AudioProviderResult?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func get(identifier: Swift.String, completion: @escaping (ImglyKit.AudioProviderResult?, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSpriteAdjustmentsFilter) open class SpriteAdjustmentsFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputBrightness: Foundation.NSNumber?
  @objc open var inputContrast: Foundation.NSNumber?
  @objc open var inputSaturation: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.IMGLYWrapper where Base == Foundation.NSNotification.Name {
  public static let SpriteContainerViewDidUpdateLayout: Foundation.Notification.Name
}
extension Foundation.NSNotification.Name {
  @available(*, deprecated, renamed: "imgly.SpriteContainerViewDidUpdateLayout")
  public static var SpriteContainerViewDidUpdateLayout: Foundation.Notification.Name {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSpriteContainerView) @_Concurrency.MainActor(unsafe) open class SpriteContainerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var referenceSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var currentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var sprites: [any UIKit.UIView & ImglyKit.Identifiable] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var imageToViewScaleFactor: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.SpriteContainerView : ImglyKit.PhotoEditModelSettable {
}
@_Concurrency.MainActor(unsafe) open class SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView> : ImglyKit.ViewController, ImglyKit.ProxyZoomControllerDelegate where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.SpriteEditControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public let proxyZoomController: ImglyKit.ProxyZoomController?
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var spriteSelectionView: SpriteSelectionView {
    get
  }
  @_Concurrency.MainActor(unsafe) open var spriteGestureController: GestureController? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public init(proxyZoomController: ImglyKit.ProxyZoomController?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc public func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) public func spriteGestureController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerDidBeginGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerDidChangeGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerDidEndGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerDidChangeSpriteModel<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerSpriteViewController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerPreviewView<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerPreviewZoomScale<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreFoundation.CGFloat where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerIsOrientationMirrored<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> Swift.Bool where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteGestureControllerTransformForEditedGeometry<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreFoundation.CGAffineTransform where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didBecomeActiveTool()
  @objc deinit
}
extension ImglyKit.SpriteEditController : ImglyKit.SpriteGestureControllerDelegate {
}
extension ImglyKit.SpriteEditController : ImglyKit.PhotoEditModelSettable {
}
public protocol SpriteEditControllerDelegate : AnyObject {
  func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
}
@objcMembers @_Concurrency.MainActor(unsafe) open class SpriteGestureController<SpriteModelType, SpriteSelectionView> : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let tapGestureRecognizer: UIKit.UITapGestureRecognizer
  @objc @_Concurrency.MainActor(unsafe) final public let panGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc @_Concurrency.MainActor(unsafe) final public let pinchGestureRecognizer: UIKit.UIPinchGestureRecognizer
  @objc @_Concurrency.MainActor(unsafe) final public let rotationGestureRecognizer: UIKit.UIRotationGestureRecognizer
  @objc @_Concurrency.MainActor(unsafe) final public let workspaceView: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) open var verticalSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var horizontalSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotationSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var spriteSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var isTapEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var spriteSelectionView: SpriteSelectionView?
  @_Concurrency.MainActor(unsafe) open var spriteModel: SpriteModelType? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.SpriteGestureControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) required public init(workspaceView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
public protocol SpriteGestureControllerDelegate : AnyObject {
  func spriteGestureController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidBeginGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidChangeGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidEndGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidChangeSpriteModel<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerSpriteViewController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerPreviewView<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerPreviewZoomScale<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreFoundation.CGFloat where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerIsOrientationMirrored<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> Swift.Bool where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerTransformForEditedGeometry<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreFoundation.CGAffineTransform where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
}
@objcMembers @objc(PESDKSpriteImageView) @_Concurrency.MainActor(unsafe) open class SpriteImageView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var rotation: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public let uuid: Foundation.UUID
  @objc @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) required public init(uuid: Foundation.UUID)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeToFit()
  @objc deinit
}
extension ImglyKit.SpriteImageView : ImglyKit.Identifiable {
}
extension ImglyKit.SpriteImageView : ImglyKit.Rotatable {
}
@objcMembers @objc(PESDKSpriteLabel) @_Concurrency.MainActor(unsafe) open class SpriteLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) open var normalizedWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var normalizedCenter: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var normalizedFontSize: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var rotation: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var verticallyFlipped: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var horizontallyFlipped: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public let uuid: Foundation.UUID
  @objc @_Concurrency.MainActor(unsafe) required public init(uuid: Foundation.UUID)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.SpriteLabel : ImglyKit.NormalizedCenterable {
}
extension ImglyKit.SpriteLabel : ImglyKit.NormalizedWidthSettable {
}
extension ImglyKit.SpriteLabel : ImglyKit.NormalizedFontSizable {
}
extension ImglyKit.SpriteLabel : ImglyKit.Identifiable {
}
extension ImglyKit.SpriteLabel : ImglyKit.Rotatable {
}
extension ImglyKit.SpriteLabel : ImglyKit.VerticallyFlippable {
}
extension ImglyKit.SpriteLabel : ImglyKit.HorizontallyFlippable {
}
extension ImglyKit.SpriteLabel : ImglyKit.Orientatable {
}
public protocol SpriteModel : ImglyKit.Identifiable, ImglyKit.ObjectiveCBridgeable {
}
public func == (lhs: [any ImglyKit.SpriteModel], rhs: [any ImglyKit.SpriteModel]) -> Swift.Bool
public func != (lhs: [any ImglyKit.SpriteModel], rhs: [any ImglyKit.SpriteModel]) -> Swift.Bool
@objcMembers @objc(PESDKSpriteTextDesignView) @_Concurrency.MainActor(unsafe) open class SpriteTextDesignView : ImglyKit.TextDesignView {
  @objc @_Concurrency.MainActor(unsafe) open var normalizedWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var normalizedCenter: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var normalizedPadding: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var rotation: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) open var verticallyFlipped: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var horizontallyFlipped: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) final public let uuid: Foundation.UUID
  @objc @_Concurrency.MainActor(unsafe) required public init(uuid: Foundation.UUID)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.NormalizedCenterable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.NormalizedWidthSettable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.NormalizedPaddable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.Identifiable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.Rotatable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.VerticallyFlippable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.HorizontallyFlippable {
}
extension ImglyKit.SpriteTextDesignView : ImglyKit.Orientatable {
}
public typealias SpriteView = UIKit.UIView & ImglyKit.Identifiable
public protocol Identifiable {
  var uuid: Foundation.UUID { get }
}
public protocol NormalizedFontSizable {
  var normalizedFontSize: CoreFoundation.CGFloat { get set }
}
public protocol NormalizedCenterable {
  var normalizedCenter: CoreFoundation.CGPoint { get set }
}
public protocol NormalizedWidthSettable {
  var normalizedWidth: CoreFoundation.CGFloat { get set }
}
extension ImglyKit.NormalizedWidthSettable where Self : ImglyKit.NormalizedSizable {
  public var normalizedWidth: CoreFoundation.CGFloat {
    get
    set
  }
}
public protocol NormalizedHeightSettable {
  var normalizedHeight: CoreFoundation.CGFloat { get set }
}
extension ImglyKit.NormalizedHeightSettable where Self : ImglyKit.NormalizedSizable {
  public var normalizedHeight: CoreFoundation.CGFloat {
    get
    set
  }
}
public protocol NormalizedSizable : ImglyKit.NormalizedHeightSettable, ImglyKit.NormalizedWidthSettable {
  var normalizedSize: CoreFoundation.CGSize { get set }
}
public protocol NormalizedPlaceable : ImglyKit.NormalizedCenterable, ImglyKit.NormalizedSizable {
  var normalizedRect: CoreFoundation.CGRect { get set }
}
extension ImglyKit.NormalizedPlaceable {
  public var normalizedRect: CoreFoundation.CGRect {
    get
    set
  }
}
public protocol NormalizedPaddable {
  var normalizedPadding: CoreFoundation.CGFloat { get set }
}
public protocol Paddable {
  var padding: CoreFoundation.CGFloat { get set }
}
public protocol Rotatable {
  var rotation: CoreFoundation.CGFloat { get set }
}
public protocol VerticallyFlippable {
  var verticallyFlipped: Swift.Bool { get set }
}
public protocol HorizontallyFlippable {
  var horizontallyFlipped: Swift.Bool { get set }
}
public protocol TimeBased {
  var startTime: CoreMedia.CMTime? { get set }
  var endTime: CoreMedia.CMTime? { get set }
}
public protocol Orientatable {
}
@objc(PESDKSpriteViewController) @_Concurrency.MainActor(unsafe) open class SpriteViewController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.SpriteViewControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var spriteContainerView: ImglyKit.SpriteContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var assetManager: ImglyKit.AssetManager?
  @objc @_Concurrency.MainActor(unsafe) public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var referenceSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var currentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required public init(productType: ImglyKit.LicenseProduct)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func tapped(_ gestureRecognizer: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) open func play(at time: CoreMedia.CMTime? = nil, with trimStartTime: CoreMedia.CMTime? = nil)
  @_Concurrency.MainActor(unsafe) open func pause(at time: CoreMedia.CMTime? = nil, with trimStartTime: CoreMedia.CMTime? = nil)
  @_Concurrency.MainActor(unsafe) open func seek(to time: CoreMedia.CMTime, with trimStartTime: CoreMedia.CMTime? = nil)
  @_Concurrency.MainActor(unsafe) open func selectSpriteView(_ spriteView: (any UIKit.UIView & ImglyKit.Identifiable)?)
  @_Concurrency.MainActor(unsafe) open func spriteView(at point: CoreFoundation.CGPoint) -> (any UIKit.UIView & ImglyKit.Identifiable)?
  @_Concurrency.MainActor(unsafe) open func spriteView(with uuid: Foundation.UUID) -> (any UIKit.UIView & ImglyKit.Identifiable)?
  @objc @_Concurrency.MainActor(unsafe) open var customWatermarkView: UIKit.UIImageView?
  @objc deinit
}
extension ImglyKit.SpriteViewController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.SpriteViewController : ImglyKit.CanvasViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func canvasViewNormalizedCropRect(_ canvasView: ImglyKit.CanvasView) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc dynamic public func canvasViewAppliedOrientation(_ canvasView: ImglyKit.CanvasView) -> ImglyKit.Orientation
  @_Concurrency.MainActor(unsafe) @objc dynamic public func canvasViewStraightenAngle(_ canvasView: ImglyKit.CanvasView) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func canvasViewImageInsets(_ canvasView: ImglyKit.CanvasView) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func canvasViewOutputImageSize(_ canvasView: ImglyKit.CanvasView) -> CoreFoundation.CGSize
}
extension ImglyKit.SpriteViewController : ImglyKit.CanvasViewMetalDelegate {
  @_Concurrency.MainActor(unsafe) public func canvasView(_ canvasView: ImglyKit.CanvasView, didAddPathModel pathModel: ImglyKit.PathModel)
}
@objc(PESDKSpriteViewControllerDelegate) public protocol SpriteViewControllerDelegate {
  @objc func spriteViewControllerDidChangePhotoEditModel(_ spriteViewController: ImglyKit.SpriteViewController)
  @objc func spriteViewControllerUndoController(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.UndoController?
  @objc func spriteViewControllerConfiguration(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.Configuration?
}
@objc(PESDKGeneratorDelegate) public protocol GeneratorDelegate {
  @objc func generatorDidChange(_ generator: ImglyKit.StampGenerator)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStampGenerator) open class StampGenerator : ObjectiveC.NSObject {
  @objc open var size: CoreFoundation.CGSize
  @objc open var stamp: UIKit.UIImage {
    @objc get
  }
  @objc open var smallStamp: UIKit.UIImage {
    @objc get
  }
  @objc open var baseDimension: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var baseBounds: CoreFoundation.CGRect {
    @objc get
  }
  @objc open var scale: CoreFoundation.CGFloat {
    @objc get
  }
  @objc weak open var delegate: (any ImglyKit.GeneratorDelegate)?
  @objc(renderStampInContext:) open func renderStamp(in context: CoreGraphics.CGContext)
  @objc open func radialFade(withHardness hardness: CoreFoundation.CGFloat) -> CoreGraphics.CGImage
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKStickerTintMode) public enum StickerTintMode : Swift.Int {
  case none
  case solid
  case colorized
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSticker) open class Sticker : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let imageURL: Foundation.URL
  @objc final public let thumbnailURL: Foundation.URL?
  @objc public var tintMode: ImglyKit.StickerTintMode
  @objc public var identifier: Swift.String {
    @objc get
  }
  @objc open var allowBrightnessAdjustment: Swift.Bool
  @objc open var allowContrastAdjustment: Swift.Bool
  @objc open var allowSaturationAdjustment: Swift.Bool
  @objc convenience public init(imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, identifier: Swift.String)
  @objc public init(imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, tintMode: ImglyKit.StickerTintMode, identifier: Swift.String)
  @objc @available(*, deprecated, message: "Use `assetCatalog.sticker(withIdentifier:)` of your `Configuration` object instead.")
  public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.Sticker?
  @objc deinit
}
@objcMembers @objc(PESDKStickerCategory) open class StickerCategory : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let imageURL: Foundation.URL
  @objc final public let stickers: [ImglyKit.Sticker]
  @available(*, deprecated, message: "Use `hideForProducts` instead.")
  public var product: ImglyKit.LicenseProduct? {
    get
    set
  }
  public var hideForProducts: Swift.Set<ImglyKit.LicenseProduct>
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL, stickers: [ImglyKit.Sticker])
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL, stickers: [ImglyKit.Sticker])
  @objc @available(*, deprecated, message: "Use `assetCatalog.stickers` of your `Configuration` object instead.")
  public static var all: [ImglyKit.StickerCategory] {
    @objc get
    @objc set
  }
  @objc public class var defaultItems: [ImglyKit.StickerCategory] {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKStickerCollectionCategory) open class StickerCollectionCategory : ImglyKit.StickerCategory {
  @objc final public let stickerCollection: any ImglyKit.StickerCollection
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL, stickerCollection: any ImglyKit.StickerCollection)
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL, stickerCollection: any ImglyKit.StickerCollection)
  @objc deinit
}
@objcMembers @objc(PESDKStickerProviderCategory) open class StickerProviderCategory : ImglyKit.StickerCategory {
  final public let stickerProvider: (any ImglyKit.StickerProvider)?
  @objc(stickerProvider) final public let _objCStickerProvider: (any ImglyKit._ObjCStickerProvider)?
  convenience public init(title: Swift.String, imageURL: Foundation.URL, stickerProvider: any ImglyKit.StickerProvider)
  @objc(initWithTitle:imageURL:stickerProvider:) convenience public init(title: Swift.String, imageURL: Foundation.URL, _objCStickerProvider: any ImglyKit._ObjCStickerProvider)
  public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL, stickerProvider: any ImglyKit.StickerProvider)
  @objc(initWithIdentifier:title:imageURL:stickerProvider:) public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL, _objCStickerProvider: any ImglyKit._ObjCStickerProvider)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKStickerCategoryListSectionController) open class StickerCategoryListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerCategoryMenuItem) open class StickerCategoryMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let stickerCategory: ImglyKit.StickerCategory
  @objc final public let title: Swift.String
  @objc final public let iconURL: Foundation.URL
  @objc convenience public init(stickerCategory: ImglyKit.StickerCategory)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerCategoryActionMenuItem) open class StickerCategoryActionMenuItem : ImglyKit.ActionMenuItem {
  @objc deinit
}
@objc(PESDKStickerCollection) public protocol StickerCollection {
  @objc weak var delegate: (any ImglyKit.StickerCollectionDelegate)? { get set }
  @objc var viewController: UIKit.UIViewController { get }
}
@objc(PESDKStickerCollectionDelegate) public protocol StickerCollectionDelegate {
  @objc func stickerCollection(_ stickerCollection: any ImglyKit.StickerCollection, didSelect sticker: ImglyKit.Sticker)
  @objc optional func stickerCollection(_ stickerCollection: any ImglyKit.StickerCollection, didSelect sticker: ImglyKit.Sticker, metadata: [Swift.String : Swift.String])
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKIconCollectionViewCell) @_Concurrency.MainActor(unsafe) open class StickerCollectionViewCell : ImglyKit.AssetCollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupImageView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class StickerColorToolController : ImglyKit.ColorToolController<ImglyKit.StickerSpriteModel, ImglyKit.StickerGestureController, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class StickerDurationToolController : ImglyKit.DurationToolController<ImglyKit.StickerSpriteModel, ImglyKit.StickerGestureController, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @objc deinit
}
@objc public enum StickerDurationOverlayAction : Swift.Int {
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKStickerDurationToolControllerOptions) open class StickerDurationToolControllerOptions : ImglyKit.DurationToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.StickerDurationOverlayAction) -> Swift.Void)?
  final public let allowedStickerDurationOverlayActions: [ImglyKit.StickerDurationOverlayAction]
  @objc final public let stickerDurationOverlayActionSelectedClosure: ((ImglyKit.StickerDurationOverlayAction) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.StickerDurationToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKStickerDurationToolControllerOptionsBuilder) open class StickerDurationToolControllerOptionsBuilder : ImglyKit.DurationToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.StickerDurationOverlayAction) -> Swift.Void)?
  open var allowedStickerDurationOverlayActions: [ImglyKit.StickerDurationOverlayAction]
  @objc open var stickerDurationOverlayActionSelectedClosure: ((ImglyKit.StickerDurationOverlayAction) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.StickerDurationToolControllerOptions)
  @objc deinit
}
extension ImglyKit.StickerEditController : ImglyKit.VideoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objc(PESDKStickerAdjustmentModel) public enum StickerAdjustmentMode : Swift.Int {
  case brightness
  case contrast
  case saturation
  case opacity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @_Concurrency.MainActor(unsafe) open class StickerEditController : ImglyKit.SpriteEditController<ImglyKit.StickerSpriteModel, ImglyKit.StickerGestureController, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) weak open var stickerEditDelegate: (any ImglyKit.StickerEditControllerDelegate)?
  @_Concurrency.MainActor(unsafe) final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?
  @_Concurrency.MainActor(unsafe) open var adjustmentMode: ImglyKit.StickerAdjustmentMode? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override public func spriteGestureControllerPreviewZoomScale<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreFoundation.CGFloat where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @objc deinit
}
extension ImglyKit.StickerEditController : ImglyKit.SliderEditControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreFoundation.CGFloat) where SliderType : ImglyKit.Slider
  @_Concurrency.MainActor(unsafe) public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
}
extension ImglyKit.StickerEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
public protocol StickerEditControllerDelegate : AnyObject {
  func stickerEditController(_ stickerEditController: ImglyKit.StickerEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  func stickerEditControllerDidSlide(_ stickerEditController: ImglyKit.StickerEditController, toValue value: CoreFoundation.CGFloat)
  func stickerEditControllerDidEndSliding(_ stickerEditController: ImglyKit.StickerEditController)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStickerEmptyView) @_Concurrency.MainActor(unsafe) open class StickerEmptyView : ImglyKit.EmptyView {
  @_Concurrency.MainActor(unsafe) @objc override public var query: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStickerErrorView) @_Concurrency.MainActor(unsafe) open class StickerErrorView : ImglyKit.ErrorView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class StickerGestureController : ImglyKit.SpriteGestureController<ImglyKit.StickerSpriteModel, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) @objc required public init(workspaceView: UIKit.UIView)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKStickerImageView) @_Concurrency.MainActor(unsafe) open class StickerImageView : ImglyKit.SpriteImageView {
  @objc @_Concurrency.MainActor(unsafe) open var normalizedSize: CoreFoundation.CGSize
  @objc @_Concurrency.MainActor(unsafe) open var normalizedCenter: CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) open var verticallyFlipped: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var horizontallyFlipped: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required public init(uuid: Foundation.UUID)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open var tintMode: ImglyKit.StickerTintMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var colorizeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var brightness: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var contrast: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var saturation: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var backgroundMask: CoreImage.CIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ImglyKit.StickerImageView : ImglyKit.NormalizedPlaceable {
}
extension ImglyKit.StickerImageView : ImglyKit.Orientatable {
}
extension ImglyKit.StickerImageView : ImglyKit.VerticallyFlippable {
}
extension ImglyKit.StickerImageView : ImglyKit.HorizontallyFlippable {
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerMenuItem) open class StickerMenuItem : ObjectiveC.NSObject {
  @objc final public let sticker: ImglyKit.Sticker
  @objc final public let iconURL: Foundation.URL
  @objc convenience public init(sticker: ImglyKit.Sticker)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKStickerOptionListSectionController) open class StickerOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerOptionMenuItem) open class StickerOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let stickerAction: ImglyKit.StickerAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc final public let isTogglable: Swift.Bool
  @objc convenience public init(stickerAction: ImglyKit.StickerAction, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(PESDKStickerOptionsToolController) @_Concurrency.MainActor(unsafe) open class StickerOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  @_Concurrency.MainActor(unsafe) final public let stickerEditController: ImglyKit.StickerEditController
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(stickerEditController: ImglyKit.StickerEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ adjustEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func stickerEditControllerDidSlide(_ stickerEditController: ImglyKit.StickerEditController, toValue value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func stickerEditControllerDidEndSliding(_ stickerEditController: ImglyKit.StickerEditController)
  @_Concurrency.MainActor(unsafe) public func stickerEditController(_ stickerEditController: ImglyKit.StickerEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc deinit
}
extension ImglyKit.StickerOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension ImglyKit.StickerOptionsToolController : ImglyKit.StickerEditControllerDelegate {
}
extension ImglyKit.StickerOptionsToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum StickerAction : Swift.Int {
  case color
  case straighten
  case brightness
  case contrast
  case saturation
  case replace
  case opacity
  @available(iOS 15.0, *)
  case removeBackground
  case duration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StickerOverlayAction : Swift.Int {
  case add
  case delete
  case undo
  case redo
  case flip
  case bringToFront
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKStickerOptionsToolControllerOptions) open class StickerOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedStickerActions: [ImglyKit.StickerAction]
  @objc final public let stickerActionSelectedClosure: ((ImglyKit.StickerAction) -> Swift.Void)?
  @objc final public let actionButtonConfigurationClosure: ((UIKit.UICollectionViewCell, ImglyKit.StickerAction) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.StickerOverlayAction) -> Swift.Void)?
  final public let allowedStickerOverlayActions: [ImglyKit.StickerOverlayAction]
  @objc final public let stickerOverlayActionSelectedClosure: ((ImglyKit.StickerOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.StickerOptionsToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerOptionsToolControllerOptionsBuilder) open class StickerOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedStickerActions: [ImglyKit.StickerAction]
  @objc open var stickerActionSelectedClosure: ((ImglyKit.StickerAction) -> Swift.Void)?
  @objc open var actionButtonConfigurationClosure: ((UIKit.UICollectionViewCell, ImglyKit.StickerAction) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.StickerOverlayAction) -> Swift.Void)?
  open var allowedStickerOverlayActions: [ImglyKit.StickerOverlayAction]
  @objc open var stickerOverlayActionSelectedClosure: ((ImglyKit.StickerOverlayAction) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.StickerOptionsToolControllerOptionsBuilder {
  @objc(allowedStickerOverlayActions) dynamic open var _objCAllowedStickerOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedStickerActions) dynamic open var _objCAllowedStickerActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
public protocol StickerProvider : AnyObject {
  func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.StickerProviderResult, any Swift.Error>) -> Swift.Void)
  func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (Swift.Result<ImglyKit.StickerProviderResult, any Swift.Error>) -> Swift.Void)
}
@objcMembers @objc(PESDKStickerProviderResult) open class StickerProviderResult : ObjectiveC.NSObject {
  @objc final public let stickers: [ImglyKit.Sticker]
  @objc final public let hasMore: Swift.Bool
  @objc public init(stickers: [ImglyKit.Sticker], hasMore: Swift.Bool = false)
  @objc deinit
}
@objc(PESDKStickerProvider) public protocol _ObjCStickerProvider {
  @objc func trending(offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.StickerProviderResult?, (any Swift.Error)?) -> Swift.Void)
  @objc func search(query: Swift.String, offset: Swift.Int, limit: Swift.Int, completion: @escaping (ImglyKit.StickerProviderResult?, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStickerSearchBar) @_Concurrency.MainActor(unsafe) open class StickerSearchBar : ImglyKit.SearchBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKStickerSelectionController) @_Concurrency.MainActor(unsafe) open class StickerSelectionController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var gradientView: ImglyKit.GradientView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var visualEffectView: UIKit.UIVisualEffectView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var stickerPreviewSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var searchBar: ImglyKit.StickerSearchBar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var errorView: ImglyKit.StickerErrorView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var emptyView: ImglyKit.StickerEmptyView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open func handleError()
  @objc @_Concurrency.MainActor(unsafe) open var stickers: [ImglyKit.Sticker] {
    @objc get
    @objc set
  }
  @objc(stickerProvider) @_Concurrency.MainActor(unsafe) open var _objCStickerProvider: (any ImglyKit._ObjCStickerProvider)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var stickerProvider: (any ImglyKit.StickerProvider)? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.StickerSelectionControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var cellConfigurationClosure: ((ImglyKit.StickerCollectionViewCell, ImglyKit.Sticker) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var stickerAddedClosure: ((ImglyKit.Sticker) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var stickerCustomizationClosure: ((ImglyKit.StickerSelectionController, ImglyKit.Sticker, UIKit.UIImage, @escaping (ImglyKit.Sticker, UIKit.UIImage) -> Swift.Void) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var assetManager: ImglyKit.AssetManager?
  @objc @_Concurrency.MainActor(unsafe) public static var collectionViewCellType: ImglyKit.StickerCollectionViewCell.Type {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
extension ImglyKit.StickerSelectionController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
extension ImglyKit.StickerSelectionController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension ImglyKit.StickerSelectionController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension ImglyKit.StickerSelectionController : UIKit.UICollectionViewDataSourcePrefetching {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, prefetchItemsAt indexPaths: [Foundation.IndexPath])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cancelPrefetchingForItemsAt indexPaths: [Foundation.IndexPath])
}
extension ImglyKit.StickerSelectionController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
}
@objc(PESDKStickerSelectionControllerDelegate) public protocol StickerSelectionControllerDelegate {
  @objc func stickerSelectionController(_ stickerSelectionController: ImglyKit.StickerSelectionController, didSelect sticker: ImglyKit.Sticker, with image: UIKit.UIImage)
  @objc optional func stickerSelectionController(_ stickerSelectionController: ImglyKit.StickerSelectionController, didSelect sticker: ImglyKit.Sticker, with image: UIKit.UIImage, metadata: [Swift.String : Swift.String]?)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStickerSelectionView) @_Concurrency.MainActor(unsafe) open class StickerSelectionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var decrementHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var incrementHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var rotateLeftHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var rotateRightHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func alignmentRect(forFrame frame: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @objc deinit
}
public struct StickerSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public init(identifier: Swift.String)
  public init(sticker: ImglyKit.Sticker)
  public var normalizedSize: CoreFoundation.CGSize
  public var normalizedCenter: CoreFoundation.CGPoint
  public var rotation: CoreFoundation.CGFloat
  public var verticallyFlipped: Swift.Bool
  public var horizontallyFlipped: Swift.Bool
  public var startTime: CoreMedia.CMTime?
  public var endTime: CoreMedia.CMTime?
  public var tintMode: ImglyKit.StickerTintMode?
  public var tintColor: UIKit.UIColor
  public var brightness: CoreFoundation.CGFloat
  public var contrast: CoreFoundation.CGFloat
  public var saturation: CoreFoundation.CGFloat
  public var alpha: CoreFoundation.CGFloat
  public var backgroundRemoved: Swift.Bool
  public var metadata: [Swift.String : Swift.String]?
  public static func == (a: ImglyKit.StickerSpriteModel, b: ImglyKit.StickerSpriteModel) -> Swift.Bool
}
extension ImglyKit.StickerSpriteModel : ImglyKit.NormalizedPlaceable {
}
extension ImglyKit.StickerSpriteModel : ImglyKit.Rotatable {
}
extension ImglyKit.StickerSpriteModel : ImglyKit.VerticallyFlippable {
}
extension ImglyKit.StickerSpriteModel : ImglyKit.HorizontallyFlippable {
}
extension ImglyKit.StickerSpriteModel : ImglyKit.TimeBased {
}
@objcMembers @objc(PESDKStickerToolController) @_Concurrency.MainActor(unsafe) open class StickerToolController : ImglyKit.MenuToolController, ImglyKit.StickerSelectionControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let stickerSelectionController: ImglyKit.StickerSelectionController
  @_Concurrency.MainActor(unsafe) public var stickerSpriteModel: ImglyKit.StickerSpriteModel?
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(stickerSelectionController: ImglyKit.StickerSelectionController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc public func stickerSelectionController(_ stickerSelectionController: ImglyKit.StickerSelectionController, didSelect sticker: ImglyKit.Sticker, with image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) @objc public func stickerSelectionController(_ stickerSelectionController: ImglyKit.StickerSelectionController, didSelect sticker: ImglyKit.Sticker, with image: UIKit.UIImage, metadata: [Swift.String : Swift.String]?)
  @objc deinit
}
extension ImglyKit.StickerToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
extension ImglyKit.StickerToolController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension ImglyKit.StickerToolController : ImglyKit.StickerCollectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func stickerCollection(_ stickerCollection: any ImglyKit.StickerCollection, didSelect sticker: ImglyKit.Sticker)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func stickerCollection(_ stickerCollection: any ImglyKit.StickerCollection, didSelect sticker: ImglyKit.Sticker, metadata: [Swift.String : Swift.String])
}
@objcMembers @objc(PESDKStickerToolControllerOptions) open class StickerToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let addedStickerClosure: ((ImglyKit.Sticker) -> Swift.Void)?
  @objc final public let stickerCustomizationClosure: ((ImglyKit.StickerSelectionController, ImglyKit.Sticker, UIKit.UIImage, @escaping (ImglyKit.Sticker, UIKit.UIImage) -> Swift.Void) -> Swift.Void)?
  @objc final public let stickerCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.StickerCategory) -> Swift.Void)?
  @objc final public let stickerButtonConfigurationClosure: ((ImglyKit.StickerCollectionViewCell, ImglyKit.Sticker) -> Swift.Void)?
  @objc final public let stickerPreviewSize: CoreFoundation.CGSize
  @objc final public let defaultStickerCategoryIndex: Swift.Int
  @objc final public let personalStickersEnabled: Swift.Bool
  @objc final public let defaultPersonalStickerTintMode: ImglyKit.StickerTintMode
  @objc final public let weatherProvider: (any ImglyKit.WeatherProvider)?
  @objc final public let personalStickerCustomizationClosure: ((ImglyKit.StickerToolController, Foundation.URL, @escaping (Foundation.URL?) -> Swift.Void) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.StickerToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKStickerToolControllerOptionsBuilder) open class StickerToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var addedStickerClosure: ((ImglyKit.Sticker) -> Swift.Void)?
  @objc open var stickerCustomizationClosure: ((ImglyKit.StickerSelectionController, ImglyKit.Sticker, UIKit.UIImage, @escaping (ImglyKit.Sticker, UIKit.UIImage) -> Swift.Void) -> Swift.Void)?
  @objc open var stickerCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.StickerCategory) -> Swift.Void)?
  @objc open var stickerButtonConfigurationClosure: ((ImglyKit.StickerCollectionViewCell, ImglyKit.Sticker) -> Swift.Void)?
  @objc open var stickerPreviewSize: CoreFoundation.CGSize
  @objc open var defaultStickerCategoryIndex: Swift.Int
  @objc open var personalStickersEnabled: Swift.Bool
  @objc open var defaultPersonalStickerTintMode: ImglyKit.StickerTintMode
  @objc open var weatherProvider: (any ImglyKit.WeatherProvider)?
  @objc open var personalStickerCustomizationClosure: ((ImglyKit.StickerToolController, Foundation.URL, @escaping (Foundation.URL?) -> Swift.Void) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.StickerToolControllerOptions)
  @objc deinit
}
extension ImglyKit.IMGLYWrapper where Base == Swift.String {
  public func bounds(_ attributes: [Foundation.NSAttributedString.Key : Any]) -> CoreFoundation.CGRect
  public func draw(in frame: CoreFoundation.CGRect, context: CoreGraphics.CGContext, withAttributes attributes: [Foundation.NSAttributedString.Key : Any])
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSubtleLabel) @_Concurrency.MainActor(unsafe) open class SubtleLabel : ImglyKit.Label {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTemperatureFilter) open class TemperatureFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputTemperature: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKTextButton) @_Concurrency.MainActor(unsafe) open class TextButton : ImglyKit.Button {
  @objc @_Concurrency.MainActor(unsafe) open var labelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var fontName: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var displayName: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum TextColorToolControllerMode : Swift.Int {
  case foreground
  case background
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @_Concurrency.MainActor(unsafe) open class TextColorToolController : ImglyKit.ColorToolController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView> {
  @objc @_Concurrency.MainActor(unsafe) open var textColorMode: ImglyKit.TextColorToolControllerMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
@objc(PESDKTextColorToolControllerOptions) open class TextColorToolControllerOptions : ImglyKit.ColorToolControllerOptions {
  @objc final public let availableBackgroundTextColors: [ImglyKit.Color]
  @objc convenience dynamic public init()
  @objc public init(textBuilder: ImglyKit.TextColorToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(PESDKTextColorToolControllerOptionsBuilder) open class TextColorToolControllerOptionsBuilder : ImglyKit.ColorToolControllerOptionsBuilder {
  @objc open var availableBackgroundTextColors: [ImglyKit.Color]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesign) public class TextDesign : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public static var legacy: [ImglyKit.TextDesign] {
    @objc get
    @objc set
  }
  @objc public class var defaultItems: [ImglyKit.TextDesign] {
    @objc get
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.textDesigns` of your `Configuration` object instead.")
  public static var all: [ImglyKit.TextDesign] {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use `assetCatalog.textDesign(withIdentifier:)` of your `Configuration` object instead.")
  public static func textDesign(withIdentifier identifier: Swift.String) -> ImglyKit.TextDesign?
  @objc public var identifier: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignBlocks) public class TextDesignBlocks : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignBlocksCondensed) public class TextDesignBlocksCondensed : ImglyKit.TextDesignBlocks {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignBlocksLight) public class TextDesignBlocksLight : ImglyKit.TextDesignBlocks {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTextDesignBlocksLight_V3_1_0) public class TextDesignBlocksLight_V3_1_0 : ImglyKit.TextDesignBlocksLight {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignCelebrate) public class TextDesignCelebrate : ImglyKit.TextDesignBlocks {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignCelebrateSimple) public class TextDesignCelebrateSimple : ImglyKit.TextDesignCelebrate {
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class TextDesignColorToolController : ImglyKit.ColorToolController<ImglyKit.TextDesignSpriteModel, ImglyKit.TextDesignGestureController, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
@objc(PESDKTextDesignColorToolControllerOptions) open class TextDesignColorToolControllerOptions : ImglyKit.ColorToolControllerOptions {
  @objc convenience dynamic public init()
  @objc public init(textDesignBuilder: ImglyKit.TextDesignColorToolControllerOptionsBuilder)
  @objc deinit
}
@objc(PESDKTextDesignColorToolControllerOptionsBuilder) open class TextDesignColorToolControllerOptionsBuilder : ImglyKit.ColorToolControllerOptionsBuilder {
  @objc override dynamic public init()
  @objc public init(textDesignOptions: ImglyKit.TextDesignColorToolControllerOptions)
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class TextDesignDurationToolController : ImglyKit.DurationToolController<ImglyKit.TextDesignSpriteModel, ImglyKit.TextDesignGestureController, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @objc deinit
}
@objc public enum TextDesignDurationOverlayAction : Swift.Int {
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTextDesignDurationToolControllerOptions) open class TextDesignDurationToolControllerOptions : ImglyKit.DurationToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDesignDurationOverlayAction) -> Swift.Void)?
  final public let allowedTextDesignDurationOverlayActions: [ImglyKit.TextDesignDurationOverlayAction]
  @objc final public let textDesignDurationOverlayActionSelectedClosure: ((ImglyKit.TextDesignDurationOverlayAction) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDesignDurationToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignDurationToolControllerOptionsBuilder) open class TextDesignDurationToolControllerOptionsBuilder : ImglyKit.DurationToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDesignDurationOverlayAction) -> Swift.Void)?
  open var allowedTextDesignDurationOverlayActions: [ImglyKit.TextDesignDurationOverlayAction]
  @objc open var textDesignDurationOverlayActionSelectedClosure: ((ImglyKit.TextDesignDurationOverlayAction) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDesignDurationToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextDesignEditController : ImglyKit.SpriteEditController<ImglyKit.TextDesignSpriteModel, ImglyKit.TextDesignGestureController, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override public init(proxyZoomController: ImglyKit.ProxyZoomController?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignEqualWidth) public class TextDesignEqualWidth : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignEqualWidthFat) public class TextDesignEqualWidthFat : ImglyKit.TextDesignEqualWidth {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TextDesignGestureController : ImglyKit.SpriteGestureController<ImglyKit.TextDesignSpriteModel, ImglyKit.StickerSelectionView> {
  @_Concurrency.MainActor(unsafe) @objc required public init(workspaceView: UIKit.UIView)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignLayoutToolController) @_Concurrency.MainActor(unsafe) open class TextDesignLayoutToolController : ImglyKit.MenuToolController {
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.TextDesignEditController
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(spriteEditController: ImglyKit.TextDesignEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
extension ImglyKit.TextDesignLayoutToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension ImglyKit.TextDesignLayoutToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKTextDesignLayoutToolControllerOptions) open class TextDesignLayoutToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesign) -> Swift.Void)?
  @objc final public let textDesignActionSelectedClosure: ((ImglyKit.TextDesign) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDesignLayoutToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignLayoutToolControllerOptionsBuilder) open class TextDesignLayoutToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesign) -> Swift.Void)?
  @objc open var textDesignActionSelectedClosure: ((ImglyKit.TextDesign) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDesignLayoutToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKTextDesignListSectionController) open class TextDesignListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func selectItem(at index: Swift.Int)
  @objc override open func deselectItem(at index: Swift.Int)
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMasked) public class TextDesignMasked : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMaskedBadge) public class TextDesignMaskedBadge : ImglyKit.TextDesignMasked {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMaskedSpeechBubble) public class TextDesignMaskedSpeechBubble : ImglyKit.TextDesignMasked {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMaskedSpeechBubbleComic) public class TextDesignMaskedSpeechBubbleComic : ImglyKit.TextDesignMaskedSpeechBubble {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMenuItem) open class TextDesignMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let textDesign: ImglyKit.TextDesign
  @objc final public let icon: UIKit.UIImage
  @objc convenience public init(textDesign: ImglyKit.TextDesign)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMultiline) public class TextDesignMultiline : ImglyKit.TextDesignMasked {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignOptionMenuItem) open class TextDesignOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let textDesignAction: ImglyKit.TextDesignAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(textDesignAction: ImglyKit.TextDesignAction, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKTextDesignOptionListSectionController) open class TextDesignOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
extension ImglyKit.TextDesignOptionsToolController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKTextDesignOptionsToolController) @_Concurrency.MainActor(unsafe) open class TextDesignOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.TextDesignEditController
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(spriteEditController: ImglyKit.TextDesignEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc deinit
}
extension ImglyKit.TextDesignOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension ImglyKit.TextDesignOptionsToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum TextDesignAction : Swift.Int {
  case selectColor
  case selectStyle
  case duration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TextDesignOverlayAction : Swift.Int {
  case invert
  case delete
  case undo
  case redo
  case bringToFront
  case add
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTextDesignOptionsToolControllerOptions) open class TextDesignOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedTextDesignActions: [ImglyKit.TextDesignAction]
  final public let allowedTextDesignOverlayActions: [ImglyKit.TextDesignOverlayAction]
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesign) -> Swift.Void)?
  @objc final public let menuActionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesignAction) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  @objc final public let textDesignActionSelectedClosure: ((ImglyKit.TextDesign) -> Swift.Void)?
  @objc final public let actionSelectedClosure: ((ImglyKit.TextDesignAction) -> Swift.Void)?
  @objc final public let overlayActionSelectedClosure: ((ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDesignOptionsToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignOptionsToolControllerOptionsBuilder) open class TextDesignOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedTextDesignActions: [ImglyKit.TextDesignAction]
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesign) -> Swift.Void)?
  @objc open var menuActionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesignAction) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  @objc open var textDesignActionSelectedClosure: ((ImglyKit.TextDesign) -> Swift.Void)?
  @objc open var actionSelectedClosure: ((ImglyKit.TextDesignAction) -> Swift.Void)?
  @objc open var overlayActionSelectedClosure: ((ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  open var allowedTextDesignOverlayActions: [ImglyKit.TextDesignOverlayAction]
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDesignOptionsToolControllerOptions)
  @objc deinit
}
extension ImglyKit.TextDesignOptionsToolControllerOptionsBuilder {
  @objc(allowedTextDesignOverlayActions) dynamic open var _objCAllowedTextDesignOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignParticles) public class TextDesignParticles : ImglyKit.TextDesignSunshine {
  @objc dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignRotated) public class TextDesignRotated : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
public struct TextDesignSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public init(identifier: Swift.String)
  public var rotation: CoreFoundation.CGFloat
  public var verticallyFlipped: Swift.Bool
  public var horizontallyFlipped: Swift.Bool
  public var normalizedWidth: CoreFoundation.CGFloat
  public var normalizedCenter: CoreFoundation.CGPoint
  public var normalizedPadding: CoreFoundation.CGFloat
  public var startTime: CoreMedia.CMTime?
  public var endTime: CoreMedia.CMTime?
  public var text: Swift.String?
  public var tintColor: UIKit.UIColor
  public var randomizerSeed: Swift.UInt64
  public var isInverted: Swift.Bool
  public static func == (a: ImglyKit.TextDesignSpriteModel, b: ImglyKit.TextDesignSpriteModel) -> Swift.Bool
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.NormalizedCenterable {
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.NormalizedWidthSettable {
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.NormalizedPaddable {
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.Rotatable {
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.VerticallyFlippable {
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.HorizontallyFlippable {
}
extension ImglyKit.TextDesignSpriteModel : ImglyKit.TimeBased {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignSunshine) public class TextDesignSunshine : ImglyKit.TextDesign {
  @objc convenience override dynamic public init()
  @objc public init(identifier: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignSunshine_V3_1_0) public class TextDesignSunshine_V3_1_0 : ImglyKit.TextDesignSunshine {
  @objc override public init(identifier: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TextDesignToolController : ImglyKit.TextEditingToolController<ImglyKit.TextDesignSpriteModel> {
  @_Concurrency.MainActor(unsafe) open var textDesignSpriteModel: ImglyKit.TextDesignSpriteModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func loadStateFromModel()
  @_Concurrency.MainActor(unsafe) override open func createSpriteModelFromTextView() -> ImglyKit.TextDesignSpriteModel?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc override open func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignToolControllerOptions) open class TextDesignToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc final public let dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc final public let colorCollectionViewConfigurationClosure: ((ImglyKit.ColorCollectionView) -> Swift.Void)?
  @objc final public let updateTitle: Swift.String?
  @objc final public let colorPalette: ImglyKit.ColorPalette
  @objc final public let emojisEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDesignToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignToolControllerOptionsBuilder) open class TextDesignToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc open var dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc open var colorCollectionViewConfigurationClosure: ((ImglyKit.ColorCollectionView) -> Swift.Void)?
  @objc open var updateTitle: Swift.String?
  @objc open var colorPalette: ImglyKit.ColorPalette
  @objc open var emojisEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDesignToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTextDesignView) @_Concurrency.MainActor(unsafe) open class TextDesignView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var textDesign: ImglyKit.TextDesign? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var renderingScaleFactor: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var randomizerSeed: Swift.UInt64 {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isInverted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var imageView: UIKit.UIImageView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var padding: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open func render()
  @objc deinit
}
extension ImglyKit.TextDesignView : ImglyKit.Paddable {
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignWatercolor) public class TextDesignWatercolor : ImglyKit.TextDesignMaskedSpeechBubble {
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @_Concurrency.MainActor(unsafe) open class TextDurationToolController : ImglyKit.DurationToolController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView> {
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @objc deinit
}
@objc public enum TextDurationOverlayAction : Swift.Int {
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTextDurationToolControllerOptions) open class TextDurationToolControllerOptions : ImglyKit.DurationToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDurationOverlayAction) -> Swift.Void)?
  final public let allowedTextDurationOverlayActions: [ImglyKit.TextDurationOverlayAction]
  @objc final public let textDurationOverlayActionSelectedClosure: ((ImglyKit.TextDurationOverlayAction) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDurationToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDurationToolControllerOptionsBuilder) open class TextDurationToolControllerOptionsBuilder : ImglyKit.DurationToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDurationOverlayAction) -> Swift.Void)?
  open var allowedTextDurationOverlayActions: [ImglyKit.TextDurationOverlayAction]
  @objc open var textDurationOverlayActionSelectedClosure: ((ImglyKit.TextDurationOverlayAction) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDurationToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextEditingToolController<SpriteModelType> : ImglyKit.PhotoEditToolController, UIKit.UITextViewDelegate, ImglyKit.ColorCollectionViewDelegate where SpriteModelType : ImglyKit.SpriteModel {
  @objc @_Concurrency.MainActor(unsafe) open var dimmingView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var textView: UIKit.UITextView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var colorCollectionView: ImglyKit.ColorCollectionView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var spriteModel: SpriteModelType?
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func loadStateFromModel()
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) open func createSpriteModelFromTextView() -> SpriteModelType?
  @_Concurrency.MainActor(unsafe) @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc open func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
  @objc deinit
}
extension ImglyKit.TextFontToolController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKTextFontToolController) @_Concurrency.MainActor(unsafe) open class TextFontToolController : ImglyKit.MenuToolController {
  @_Concurrency.MainActor(unsafe) final public let fontSelectorViewController: ImglyKit.FontSelectorViewController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(fontSelectorViewController: ImglyKit.FontSelectorViewController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func fontSelectorViewController<SpriteModelType, GestureController, SelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SelectionView>, didPick font: ImglyKit.Font) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func fontSelectorViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func fontSelectorViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func fontSelectorViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func fontSelectorViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
extension ImglyKit.TextFontToolController : ImglyKit.FontSelectorViewControllerDelegate {
}
extension ImglyKit.TextFontToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objcMembers @objc(PESDKTextFontToolControllerOptions) open class TextFontToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Font) -> Swift.Void)?
  @objc final public let textFontActionSelectedClosure: ((Swift.String) -> Swift.Void)?
  @objc final public let fontSelectorViewConfigurationClosure: ((ImglyKit.FontSelectorView) -> Swift.Void)?
  @objc final public let handleButtonConfigurationClosure: ((ImglyKit.HandleButton) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextFontToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextFontToolControllerOptionsBuilder) open class TextFontToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Font) -> Swift.Void)?
  @objc open var textFontActionSelectedClosure: ((Swift.String) -> Swift.Void)?
  @objc open var fontSelectorViewConfigurationClosure: ((ImglyKit.FontSelectorView) -> Swift.Void)?
  @objc open var handleButtonConfigurationClosure: ((ImglyKit.HandleButton) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TextGestureController : ImglyKit.SpriteGestureController<ImglyKit.TextSpriteModel, ImglyKit.TextSelectionView> {
  @objc @_Concurrency.MainActor(unsafe) final public let leftDragGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc @_Concurrency.MainActor(unsafe) final public let rightDragGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc @_Concurrency.MainActor(unsafe) override open var spriteSelectionView: ImglyKit.TextSelectionView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required public init(workspaceView: UIKit.UIView)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKTextOptionListSectionController) open class TextOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextOptionMenuItem) open class TextOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let textAction: ImglyKit.TextAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(textAction: ImglyKit.TextAction, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.TextOptionsToolController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKTextOptionsToolController) @_Concurrency.MainActor(unsafe) open class TextOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  @_Concurrency.MainActor(unsafe) final public let spriteEditController: ImglyKit.SpriteEditController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>
  @_Concurrency.MainActor(unsafe) open var spriteView: (any UIKit.UIView & ImglyKit.Identifiable)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(spriteEditController: ImglyKit.SpriteEditController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc deinit
}
extension ImglyKit.TextOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension ImglyKit.TextOptionsToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum TextAction : Swift.Int {
  case selectFont
  case selectColor
  case selectBackgroundColor
  case selectAlignment
  case straighten
  case duration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TextOverlayAction : Swift.Int {
  case add
  case delete
  case undo
  case redo
  case flip
  case bringToFront
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(IMGLTextOptionsToolControllerOptions) open class TextOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedTextActions: [ImglyKit.TextAction]
  final public let allowedTextOverlayActions: [ImglyKit.TextOverlayAction]
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextAction) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextOverlayAction) -> Swift.Void)?
  @objc final public let textActionSelectedClosure: ((ImglyKit.TextAction) -> Swift.Void)?
  @objc final public let overlayActionSelectedClosure: ((ImglyKit.TextOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextOptionsToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextOptionsToolControllerOptionsBuilder) open class TextOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedTextActions: [ImglyKit.TextAction]
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextAction) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextOverlayAction) -> Swift.Void)?
  @objc open var textActionSelectedClosure: ((ImglyKit.TextAction) -> Swift.Void)?
  @objc open var overlayActionSelectedClosure: ((ImglyKit.TextOverlayAction) -> Swift.Void)?
  open var allowedTextOverlayActions: [ImglyKit.TextOverlayAction]
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc deinit
}
extension ImglyKit.TextOptionsToolControllerOptionsBuilder {
  @objc(allowedTextActions) dynamic open var _objCAllowedTextActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedTextOverlayActions) dynamic open var _objCAllowedTextOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTextSelectionView) @_Concurrency.MainActor(unsafe) open class TextSelectionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var rightHandle: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var leftHandle: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var decrementHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var incrementHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var rotateLeftHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var rotateRightHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var increaseBoundingBoxHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var decreaseBoundingBoxHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func alignmentRect(forFrame frame: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @objc deinit
}
public struct TextSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var normalizedWidth: CoreFoundation.CGFloat
  public var normalizedCenter: CoreFoundation.CGPoint
  public var rotation: CoreFoundation.CGFloat
  public var verticallyFlipped: Swift.Bool
  public var horizontallyFlipped: Swift.Bool
  public var normalizedFontSize: CoreFoundation.CGFloat
  public var startTime: CoreMedia.CMTime?
  public var endTime: CoreMedia.CMTime?
  public var text: Swift.String?
  public var textAlignment: UIKit.NSTextAlignment
  public var textColor: UIKit.UIColor
  public var fontIdentifier: Swift.String?
  public var backgroundColor: UIKit.UIColor
  public init()
  public static func == (a: ImglyKit.TextSpriteModel, b: ImglyKit.TextSpriteModel) -> Swift.Bool
}
extension ImglyKit.TextSpriteModel : ImglyKit.NormalizedCenterable {
}
extension ImglyKit.TextSpriteModel : ImglyKit.NormalizedWidthSettable {
}
extension ImglyKit.TextSpriteModel : ImglyKit.NormalizedFontSizable {
}
extension ImglyKit.TextSpriteModel : ImglyKit.Rotatable {
}
extension ImglyKit.TextSpriteModel : ImglyKit.VerticallyFlippable {
}
extension ImglyKit.TextSpriteModel : ImglyKit.HorizontallyFlippable {
}
extension ImglyKit.TextSpriteModel : ImglyKit.TimeBased {
}
@_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class TextToolController : ImglyKit.TextEditingToolController<ImglyKit.TextSpriteModel> {
  @_Concurrency.MainActor(unsafe) open var textSpriteModel: ImglyKit.TextSpriteModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override open func loadStateFromModel()
  @_Concurrency.MainActor(unsafe) override open func createSpriteModelFromTextView() -> ImglyKit.TextSpriteModel?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
@objcMembers @objc(PESDKTextToolControllerOptions) open class TextToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc final public let dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc final public let updateTitle: Swift.String?
  @objc final public let defaultTextColor: UIKit.UIColor
  @objc final public let defaultTextAlignment: UIKit.NSTextAlignment
  @objc final public let minimumTextSize: CoreFoundation.CGFloat
  final public let maximumTextSize: CoreFoundation.CGFloat?
  @objc final public let emojisEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextToolControllerOptionsBuilder) open class TextToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc open var dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc open var updateTitle: Swift.String?
  @objc open var defaultTextColor: UIKit.UIColor
  @objc open var defaultTextAlignment: UIKit.NSTextAlignment
  @objc open var minimumTextSize: CoreFoundation.CGFloat
  open var maximumTextSize: CoreFoundation.CGFloat?
  @objc open var emojisEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextToolControllerOptions)
  @objc deinit
}
extension ImglyKit.TextToolControllerOptions {
  @objc(maximumTextSize) dynamic open var _objCMaximumTextSize: Foundation.NSNumber? {
    @objc get
  }
}
extension ImglyKit.TextToolControllerOptionsBuilder {
  @objc(maximumTextSize) dynamic open var _objCMaximumTextSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objcMembers @objc(PESDKTexture) open class Texture : ObjectiveC.NSObject {
  @objc open var texture: any Metal.MTLTexture {
    @objc get
    @objc set
  }
  @objc open var sampler: any Metal.MTLSamplerState {
    @objc get
    @objc set
  }
  @objc public init(cgImage: CoreGraphics.CGImage, forceRGB: Swift.Bool, device: any Metal.MTLDevice)
  @objc deinit
}
public struct Theme : Swift.Equatable {
  public var backgroundColor: UIKit.UIColor
  public var menuBackgroundColor: UIKit.UIColor
  public var toolbarBackgroundColor: UIKit.UIColor
  public var primaryColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor?
  public var rotationSnapGuideColor: UIKit.UIColor?
  public var positionSnapGuideColor: UIKit.UIColor?
  public var boundingBoxSnapGuideColor: UIKit.UIColor?
  public var primaryFont: UIKit.UIFont
  public var mediumFont: UIKit.UIFont
  public var boldFont: UIKit.UIFont
  public var monospacedFont: UIKit.UIFont
  public var searchBarFont: UIKit.UIFont
  public var uppercasedToolbarTitles: Swift.Bool
  public static let dark: ImglyKit.Theme
  public static let light: ImglyKit.Theme
  public static let dynamic: ImglyKit.Theme
  public init(backgroundColor: UIKit.UIColor, menuBackgroundColor: UIKit.UIColor, toolbarBackgroundColor: UIKit.UIColor, primaryColor: UIKit.UIColor)
  public init()
  public static func == (a: ImglyKit.Theme, b: ImglyKit.Theme) -> Swift.Bool
}
extension ImglyKit.Theme : ImglyKit.ObjectiveCBridgeable {
}
extension ImglyKit._ObjCTheme {
  @objc(dark) public static var _objCDark: ImglyKit._ObjCTheme {
    @objc get
  }
  @objc(light) public static var _objCLight: ImglyKit._ObjCTheme {
    @objc get
  }
  @objc(dynamic) public static var _objCDynamic: ImglyKit._ObjCTheme {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTimelineToolController) @_Concurrency.MainActor(unsafe) open class TimelineToolController : ImglyKit.PhotoEditToolController, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) open var proxyZoomController: ImglyKit.ProxyZoomController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimViewContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimView: ImglyKit.VideoTrimView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var trimViewHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override open var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func setupForZoomAndPan()
  @_Concurrency.MainActor(unsafe) @objc override open func resetForZoomAndPan()
  @objc @_Concurrency.MainActor(unsafe) open var playPauseOverlayButton: ImglyKit.OverlayButton? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension ImglyKit.TimelineToolController : ImglyKit.VideoTrimViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
extension ImglyKit.TimelineToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
extension ImglyKit.TimelineToolController : ImglyKit.ProxyZoomControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTintFilter) open class TintFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputColor: UIKit.UIColor?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTool) open class Tool : ObjectiveC.NSObject {
  @objc open var moved: Swift.Bool {
    get
  }
  @objc open func gestureBegan(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func gestureMoved(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func gestureEnded(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func gestureCancelled(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolControllerOptions) open class ToolControllerOptions : ObjectiveC.NSObject {
  @objc final public let menuBackgroundColor: UIKit.UIColor?
  @objc final public let titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let didEnterToolClosure: ImglyKit.DidEnterToolClosure?
  @objc final public let willLeaveToolClosure: ImglyKit.WillLeaveToolClosure?
  @objc convenience override dynamic public init()
  @objc public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolControllerOptionsBuilder) open class ToolControllerOptionsBuilder : ObjectiveC.NSObject {
  @objc open var menuBackgroundColor: UIKit.UIColor?
  @objc open var titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var didEnterToolClosure: ImglyKit.DidEnterToolClosure?
  @objc open var willLeaveToolClosure: ImglyKit.WillLeaveToolClosure?
  @objc open var applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc override dynamic public init()
  @objc public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKToolListSectionController) open class ToolListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKToolMenuItem) open class ToolMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage
  @objc final public let toolControllerClass: ImglyKit.PhotoEditToolController.Type
  @objc final public let supportsPhoto: Swift.Bool
  @objc final public let supportsVideo: Swift.Bool
  @objc final public let supportsSingleToolUsage: Swift.Bool
  @objc convenience public init?(title: Swift.String, icon: UIKit.UIImage, toolControllerClass: ImglyKit.PhotoEditToolController.Type?)
  @objc convenience public init?(title: Swift.String, icon: UIKit.UIImage, toolControllerClass: ImglyKit.PhotoEditToolController.Type?, supportsPhoto: Swift.Bool, supportsVideo: Swift.Bool, supportsSingleToolUsage: Swift.Bool = false)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.ToolMenuItem {
  @objc public static func createTransformToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createFilterToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createAdjustToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createStickerToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createTextToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createTextDesignToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createLegacyTextDesignToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createOverlayToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createFrameToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createBrushToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createFocusToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createTrimToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createCompositionToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createCompositionOrTrimToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createAudioToolItem() -> ImglyKit.ToolMenuItem?
}
@_inheritsConvenienceInitializers @IBDesignable @objcMembers @objc(PESDKToolbar) @_Concurrency.MainActor(unsafe) open class Toolbar : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) open var contentView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var items: [ImglyKit.ToolbarItem] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func setItems(_ items: [ImglyKit.ToolbarItem]?, animated: Swift.Bool)
  @objc(pushToolbarItem:animated:) @_Concurrency.MainActor(unsafe) public func push(_ item: ImglyKit.ToolbarItem, animated: Swift.Bool)
  @discardableResult
  @objc(popToolbarItemAnimated:) @_Concurrency.MainActor(unsafe) public func pop(animated: Swift.Bool) -> ImglyKit.ToolbarItem?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolbarButton) @_Concurrency.MainActor(unsafe) open class ToolbarButton : ImglyKit.Button {
  @objc @_Concurrency.MainActor(unsafe) open var width: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setEnabled(_ enabled: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolbarItem) open class ToolbarItem : ObjectiveC.NSObject {
  @objc open var titleView: UIKit.UIView?
  @objc open var leadingButton: ImglyKit.ToolbarButton?
  @objc open var trailingButton: ImglyKit.ToolbarButton?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultToolbarItem) open class DefaultToolbarItem : ImglyKit.ToolbarItem {
  @objc open var titleLabel: ImglyKit.Label {
    @objc get
    @objc set
  }
  @objc open var discardButton: ImglyKit.ToolbarButton {
    @objc get
    @objc set
  }
  @objc open var applyButton: ImglyKit.ToolbarButton {
    @objc get
    @objc set
  }
  @objc override open var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc override open var leadingButton: ImglyKit.ToolbarButton? {
    @objc get
    @objc set
  }
  @objc override open var trailingButton: ImglyKit.ToolbarButton? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol ToolbarItemProviding {
  var toolbarItem: ImglyKit.ToolbarItem { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTooltipSlider) @_Concurrency.MainActor(unsafe) open class TooltipSlider : ImglyKit.Slider {
  @objc @_Concurrency.MainActor(unsafe) final public let tooltip: ImglyKit.SliderTooltip
  @objc @_Concurrency.MainActor(unsafe) dynamic open var font: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override open func beginTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open func endTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc deinit
}
public typealias TouchingGestureRecognizerBase = UIKit.UIGestureRecognizer
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTouchingGestureRecognizer) @_Concurrency.MainActor(unsafe) open class TouchingGestureRecognizer : ImglyKit.TouchingGestureRecognizerBase {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func reset()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTransformEditController) @_Concurrency.MainActor(unsafe) open class TransformEditController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var showControls: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var canRotateUsingGesture: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isModelChangeLocal: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.TransformEditControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var cropView: ImglyKit.CropAndStraightenView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropOverlayView: ImglyKit.CropOverlayView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var cropHandleViewsByHandle: [ImglyKit.CropHandle : ImglyKit.CropHandleView] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropCanvasView: UIKit.UIView {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didResignActiveTool()
  @objc @_Concurrency.MainActor(unsafe) open var rotationGestureRecognizer: UIKit.UIRotationGestureRecognizer? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scalePickerContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scalePicker: ImglyKit.ScalePicker {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var flipButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotateButton: ImglyKit.Button {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var gradientLayer: QuartzCore.CAGradientLayer {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var viewCropRect: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setViewCropRect(_ viewCropRect: CoreFoundation.CGRect, normalizedImageRect: CoreFoundation.CGRect, animated: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) open var straightenAngle: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setStraightenAngle(_ straightenAngle: CoreFoundation.CGFloat, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) open var cropAspect: ImglyKit.CropAspect? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setCropAspect(_ cropAspect: ImglyKit.CropAspect?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ImglyKit.TransformEditController : ImglyKit.ScalePickerDelegate {
  @objc(scalePicker:didChangeValue:) @_Concurrency.MainActor(unsafe) dynamic public func didChange(value: CoreFoundation.CGFloat, on scalePicker: ImglyKit.ScalePicker)
}
extension ImglyKit.TransformEditController : ImglyKit.CropAndStraightenViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func cropAndStraightenViewWillBeginTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func cropAndStraightenViewDidEndTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func cropAndStraightenViewDidTrack(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
}
extension ImglyKit.TransformEditController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension ImglyKit.TransformEditController : ImglyKit.PhotoEditModelSettable {
}
extension ImglyKit.TransformEditController : ImglyKit.PhotoPreviewControlling {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var wantsDefaultPreviewView: Swift.Bool {
    @objc get
  }
}
@objc(PESDKTransformEditControllerDelegate) public protocol TransformEditControllerDelegate {
  @objc func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @objc func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @objc func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @objc func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @objc optional func transformEditControllerDidChangeOrientation(_ transformEditController: ImglyKit.TransformEditController)
}
public struct TransformModel : Swift.Equatable {
  public var appliedOrientation: ImglyKit.Orientation
  public var normalizedCropRect: CoreFoundation.CGRect
  public var straightenAngle: Swift.Double
  public var imageInsets: UIKit.UIEdgeInsets
  public var adjustedStraightenAngle: Swift.Double {
    get
  }
  public static var identityOrientation: ImglyKit.Orientation {
    get
  }
  public static var identityNormalizedCropRect: CoreFoundation.CGRect {
    get
  }
  public var isGeometryIdentity: Swift.Bool {
    get
  }
  public init(appliedOrientation: ImglyKit.Orientation, normalizedCropRect: CoreFoundation.CGRect, straightenAngle: Swift.Double, imageInsets: UIKit.UIEdgeInsets)
  public init()
  public static func == (a: ImglyKit.TransformModel, b: ImglyKit.TransformModel) -> Swift.Bool
}
extension ImglyKit.TransformModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKTransformToolController) @_Concurrency.MainActor(unsafe) open class TransformToolController : ImglyKit.MenuToolController, ImglyKit.TransformEditControllerDelegate, ImglyKit.BrandedTool {
  @objc @_Concurrency.MainActor(unsafe) final public let transformEditController: ImglyKit.TransformEditController
  @_Concurrency.MainActor(unsafe) override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(transformEditController: ImglyKit.TransformEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) override open var photoPreviewControllingTarget: (any ImglyKit.PhotoPreviewControlling)? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @_Concurrency.MainActor(unsafe) @objc open func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @_Concurrency.MainActor(unsafe) @objc public func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @_Concurrency.MainActor(unsafe) @objc public func transformEditControllerDidChangeOrientation(_ transformEditController: ImglyKit.TransformEditController)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
}
extension ImglyKit.TransformToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
@objc public enum TransformAction : Swift.Int {
  case rotateLeft
  case flipHorizontally
  case straighten
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTransformToolControllerOptions) open class TransformToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let showResetButton: Swift.Bool
  @objc final public let allowFreeCrop: Swift.Bool
  @objc final public let outputScaling: ImglyKit.OutputScalingRule
  @objc final public let allowedCropAspects: [ImglyKit.CropAspect]
  @objc final public let cropAspectButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.CropAspect?) -> Swift.Void)?
  @objc final public let cropAspectSelectedClosure: ((ImglyKit.CropAspect?) -> Swift.Void)?
  @objc final public let transformButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.TransformAction) -> Swift.Void)?
  @objc final public let scalePickerConfigurationClosure: ((ImglyKit.ScalePicker) -> Swift.Void)?
  @objc final public let scalePickerContainerViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TransformToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTransformToolControllerOptionsBuilder) open class TransformToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var showResetButton: Swift.Bool
  @objc open var allowFreeCrop: Swift.Bool
  @objc open var allowedCropRatios: [ImglyKit.CropAspect]
  @objc open var outputScaling: ImglyKit.OutputScalingRule
  @objc open var transformButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.TransformAction) -> Swift.Void)?
  @objc open var cropAspectButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.CropAspect?) -> Swift.Void)?
  @objc open var cropAspectSelectedClosure: ((ImglyKit.CropAspect?) -> Swift.Void)?
  @objc open var scalePickerConfigurationClosure: ((ImglyKit.ScalePicker) -> Swift.Void)?
  @objc open var scalePickerContainerViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TransformToolControllerOptions)
  @objc deinit
}
public protocol TransitionAnimator {
  func preparePresentationAnimation()
  func performPresentationAnimation()
  func finishPresentationAnimation()
  func prepareDismissalAnimation()
  func performDismissalAnimation()
  func finishDismissalAnimation()
}
extension ImglyKit.TransitionAnimator {
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func finishPresentationAnimation()
  public func prepareDismissalAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
public protocol TransitionProviding {
  var transitionAnimator: (any ImglyKit.TransitionAnimator)? { get }
}
public struct TrimModel : Swift.Equatable {
  public var startTime: CoreMedia.CMTime?
  public var endTime: CoreMedia.CMTime?
  public init(startTime: CoreMedia.CMTime?, endTime: CoreMedia.CMTime?)
  public init()
  public static func == (a: ImglyKit.TrimModel, b: ImglyKit.TrimModel) -> Swift.Bool
}
extension ImglyKit.TrimModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTrimToolController) @_Concurrency.MainActor(unsafe) open class TrimToolController : ImglyKit.TimelineToolController {
  @objc @available(*, deprecated, message: "This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.")
  @_Concurrency.MainActor(unsafe) open var controlsContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @available(*, deprecated, message: "This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.")
  @_Concurrency.MainActor(unsafe) open var currentTimeLabel: ImglyKit.DimmedLabel {
    @objc get
  }
  @objc @available(*, deprecated, message: "This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.")
  @_Concurrency.MainActor(unsafe) open var durationLabel: ImglyKit.PrimaryLabel {
    @objc get
  }
  @objc @available(*, deprecated, message: "This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.")
  @_Concurrency.MainActor(unsafe) open var playPauseButton: ImglyKit.Button {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @_Concurrency.MainActor(unsafe) override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc deinit
}
@objc public enum TrimOverlayAction : Swift.Int {
  case playPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTrimToolControllerOptions) open class TrimToolControllerOptions : ImglyKit.TrimToolOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TrimOverlayAction) -> Swift.Void)?
  final public let allowedTrimOverlayActions: [ImglyKit.TrimOverlayAction]
  @objc final public let trimOverlayActionSelectedClosure: ((ImglyKit.TrimOverlayAction) -> Swift.Void)?
  @objc final public let videoTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc final public let minimumDuration: Foundation.TimeInterval
  final public let maximumDuration: Foundation.TimeInterval?
  public var durationLimits: Swift.ClosedRange<Foundation.TimeInterval> {
    get
  }
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TrimToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTrimToolControllerOptionsBuilder) open class TrimToolControllerOptionsBuilder : ImglyKit.TrimToolOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TrimOverlayAction) -> Swift.Void)?
  open var allowedTrimOverlayActions: [ImglyKit.TrimOverlayAction]
  @objc open var trimOverlayActionSelectedClosure: ((ImglyKit.TrimOverlayAction) -> Swift.Void)?
  @objc open var videoTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc open var minimumDuration: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  open var maximumDuration: Foundation.TimeInterval?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TrimToolControllerOptions)
  @objc deinit
}
extension ImglyKit.TrimToolControllerOptions {
  @objc(maximumDuration) dynamic open var _objCMaximumDuration: Foundation.NSNumber? {
    @objc get
  }
}
extension ImglyKit.TrimToolControllerOptionsBuilder {
  @objc(maximumDuration) dynamic open var _objCMaximumDuration: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(allowedTrimOverlayActions) dynamic open var _objCallowedTrimOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objcMembers @objc(PESDKTrimToolOptions) open class TrimToolOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc @available(*, deprecated, message: "This property is unused and will also be removed soon because the legacy trim controls were removed. Now, the overlay trim controls will be always used which was the default before.")
  final public let useOverlayControls: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(trimBuilder: ImglyKit.TrimToolOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTrimToolOptionsBuilder) open class TrimToolOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc @available(*, deprecated, message: "This property is unused and will also be removed soon because the legacy trim controls were removed. Now, the overlay trim controls will be always used which was the default before.")
  open var useOverlayControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(trimOptions: ImglyKit.TrimToolOptions)
  @objc deinit
}
extension UIKit.UIDevice {
  @objc(pesdk_isTooOldForLensBlurPreview) @_Concurrency.MainActor(unsafe) dynamic public var isTooOldForLensBlurPreview: Swift.Bool {
    @objc get
  }
}
extension ImglyKit.IMGLYWrapper where Base : UIKit.UIImage {
  public func downsample(withMaxDimension dimension: CoreFoundation.CGFloat) -> UIKit.UIImage
  public func resizedImage(to newSize: CoreFoundation.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public func resizedImage(to newSize: CoreFoundation.CGSize, transform: CoreFoundation.CGAffineTransform, drawTransposed transpose: Swift.Bool, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  public var normalizedImage: UIKit.UIImage {
    get
  }
  public func normalizedImage(of size: CoreFoundation.CGSize) -> UIKit.UIImage
  public func draw(in rect: CoreFoundation.CGRect, with contentMode: UIKit.UIView.ContentMode)
  public func image(withTint tint: UIKit.UIColor) -> UIKit.UIImage
}
extension UIKit.UIImage {
  @available(*, deprecated, renamed: "imgly.downsample")
  public func downsample(withMaxDimension dimension: CoreFoundation.CGFloat) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly_downsampleWithMaxDimension", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_downsampleWithMaxDimension:) dynamic public func _objC_pesdk_downsample(withMaxDimension dimension: CoreFoundation.CGFloat) -> UIKit.UIImage
  @objc(imgly_downsampleWithMaxDimension:) dynamic public func _objC_imgly_downsample(withMaxDimension dimension: CoreFoundation.CGFloat) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly.resizedImage")
  public func resizedImage(to newSize: CoreFoundation.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly_resizedImageToSize", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_resizedImageToSize:interpolationQuality:) dynamic public func _objC_pesdk_resizedImage(to newSize: CoreFoundation.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @objc(imgly_resizedImageToSize:interpolationQuality:) dynamic public func _objC_imgly_resizedImage(to newSize: CoreFoundation.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly.resizedImage")
  public func resizedImage(to newSize: CoreFoundation.CGSize, transform: CoreFoundation.CGAffineTransform, drawTransposed transpose: Swift.Bool, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly_resizedImageToSize", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_resizedImageToSize:transform:drawTransposed:interpolationQuality:) dynamic public func _objC_pesdk_resizedImage(to newSize: CoreFoundation.CGSize, transform: CoreFoundation.CGAffineTransform, drawTransposed transpose: Swift.Bool, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @objc(imgly_resizedImageToSize:transform:drawTransposed:interpolationQuality:) dynamic public func _objC_imgly_resizedImage(to newSize: CoreFoundation.CGSize, transform: CoreFoundation.CGAffineTransform, drawTransposed transpose: Swift.Bool, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly.normalizedImage")
  public var normalizedImage: UIKit.UIImage {
    get
  }
  @available(*, deprecated, renamed: "imgly_normalizedImage", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_normalizedImage) dynamic public var _objC_pesdk_normalizedImage: UIKit.UIImage {
    @objc get
  }
  @objc(imgly_normalizedImage) dynamic public var _objC_imgly_normalizedImage: UIKit.UIImage {
    @objc get
  }
  @available(*, deprecated, renamed: "imgly.normalizedImage")
  public func normalizedImage(of size: CoreFoundation.CGSize) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly_normalizedImageOfSize", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_normalizedImageOfSize:) dynamic public func _objC_pesdk_normalizedImage(of size: CoreFoundation.CGSize) -> UIKit.UIImage
  @objc(imgly_normalizedImageOfSize:) dynamic public func _objC_imgly_normalizedImage(of size: CoreFoundation.CGSize) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly.draw")
  public func draw(in rect: CoreFoundation.CGRect, with contentMode: UIKit.UIView.ContentMode)
  @available(*, deprecated, renamed: "imgly_drawInRect", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_drawInRect:withContentMode:) dynamic public func _objC_pesdk_draw(in rect: CoreFoundation.CGRect, with contentMode: UIKit.UIView.ContentMode)
  @objc(imgly_drawInRect:withContentMode:) dynamic public func _objC_imgly_draw(in rect: CoreFoundation.CGRect, with contentMode: UIKit.UIView.ContentMode)
  @available(*, deprecated, renamed: "imgly.image")
  public func image(withTint tint: UIKit.UIColor) -> UIKit.UIImage
  @available(*, deprecated, renamed: "imgly_imageWithTintColor", message: "This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.")
  @objc(pesdk_imageWithTintColor:) dynamic public func _objC_pesdk_image(withTint tint: UIKit.UIColor) -> UIKit.UIImage
  @objc(imgly_imageWithTintColor:) dynamic public func _objC_imgly_image(withTint tint: UIKit.UIColor) -> UIKit.UIImage
}
extension ImglyKit.IMGLYWrapper where Base == Foundation.NSNotification.Name {
  public static let UndoControllerWillUndoChange: Foundation.Notification.Name
  public static let UndoControllerDidUndoChange: Foundation.Notification.Name
  public static let UndoControllerWillRedoChange: Foundation.Notification.Name
  public static let UndoControllerDidRedoChange: Foundation.Notification.Name
  public static let UndoControllerDidRegisterUndoOperation: Foundation.Notification.Name
  public static let UndoControllerDidUpdate: Foundation.Notification.Name
}
extension Foundation.NSNotification.Name {
  @available(*, deprecated, renamed: "imgly.UndoControllerWillUndoChange")
  public static var UndoControllerWillUndoChange: Foundation.Notification.Name {
    get
  }
  @available(*, deprecated, renamed: "imgly.UndoControllerDidUndoChange")
  public static var UndoControllerDidUndoChange: Foundation.Notification.Name {
    get
  }
  @available(*, deprecated, renamed: "imgly.UndoControllerWillRedoChange")
  public static var UndoControllerWillRedoChange: Foundation.Notification.Name {
    get
  }
  @available(*, deprecated, renamed: "imgly.UndoControllerDidRedoChange")
  public static var UndoControllerDidRedoChange: Foundation.Notification.Name {
    get
  }
  @available(*, deprecated, renamed: "imgly.UndoControllerDidRegisterUndoOperation")
  public static var UndoControllerDidRegisterUndoOperation: Foundation.Notification.Name {
    get
  }
  @available(*, deprecated, renamed: "imgly.UndoControllerDidUpdate")
  public static var UndoControllerDidUpdate: Foundation.Notification.Name {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKUndoController) open class UndoController : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc open var isEnabled: Swift.Bool
  @objc open var isUndoing: Swift.Bool {
    @objc get
  }
  @objc open var isRedoing: Swift.Bool {
    @objc get
  }
  @objc open func beginUndoGrouping()
  @objc open func endUndoGrouping()
  open func registerUndo<TargetType>(withTarget target: TargetType, handler undoHandler: @escaping (TargetType?) -> Swift.Void) where TargetType : AnyObject
  @objc open func removeAllActions()
  @objc open func removeAllActionsInCurrentGroup()
  @objc open var canUndo: Swift.Bool {
    @objc get
  }
  @objc open var canUndoInCurrentGroup: Swift.Bool {
    @objc get
  }
  @objc open func undo()
  @objc open func undoStep()
  @objc open func undoStepInCurrentGroup()
  @objc open func undoAllInCurrentGroup()
  @objc open func undoGroup()
  @objc open var canRedo: Swift.Bool {
    @objc get
  }
  @objc open var canRedoInCurrentGroup: Swift.Bool {
    @objc get
  }
  @objc open func redo()
  @objc deinit
}
public struct UserInterfaceState : Swift.Equatable {
  public struct VideoClipInterfaceState : Swift.Equatable {
    public let videoClipCategoryIdentifier: Swift.String
    public static func == (a: ImglyKit.UserInterfaceState.VideoClipInterfaceState, b: ImglyKit.UserInterfaceState.VideoClipInterfaceState) -> Swift.Bool
  }
  public struct AudioClipInterfaceState : Swift.Equatable {
    public let audioClipCategoryIdentifier: Swift.String
    public static func == (a: ImglyKit.UserInterfaceState.AudioClipInterfaceState, b: ImglyKit.UserInterfaceState.AudioClipInterfaceState) -> Swift.Bool
  }
  public struct StickerInterfaceState : Swift.Equatable {
    public let stickerCategoryIdentifier: Swift.String
    public static func == (a: ImglyKit.UserInterfaceState.StickerInterfaceState, b: ImglyKit.UserInterfaceState.StickerInterfaceState) -> Swift.Bool
  }
  public struct TextInterfaceState : Swift.Equatable {
    public let font: ImglyKit.Font
    public let color: UIKit.UIColor
    public let backgroundColor: UIKit.UIColor
    public let alignment: UIKit.NSTextAlignment
    public static func == (a: ImglyKit.UserInterfaceState.TextInterfaceState, b: ImglyKit.UserInterfaceState.TextInterfaceState) -> Swift.Bool
  }
  public struct TextDesignInterfaceState : Swift.Equatable {
    public let identifier: Swift.String
    public let color: UIKit.UIColor
    public static func == (a: ImglyKit.UserInterfaceState.TextDesignInterfaceState, b: ImglyKit.UserInterfaceState.TextDesignInterfaceState) -> Swift.Bool
  }
  public var videoClipInterfaceState: ImglyKit.UserInterfaceState.VideoClipInterfaceState?
  public var audioClipInterfaceState: ImglyKit.UserInterfaceState.AudioClipInterfaceState?
  public var stickerInterfaceState: ImglyKit.UserInterfaceState.StickerInterfaceState?
  public var stickerColorPalette: [ImglyKit.ColorMenuItem]?
  public var textInterfaceState: ImglyKit.UserInterfaceState.TextInterfaceState?
  public var textColorPalette: [ImglyKit.ColorMenuItem]?
  public var textBackgroundColorPalette: [ImglyKit.ColorMenuItem]?
  public var textDesignInterfaceState: ImglyKit.UserInterfaceState.TextDesignInterfaceState?
  public var textDesignColorPalette: [ImglyKit.ColorMenuItem]?
  public var brushColorPalette: [ImglyKit.ColorMenuItem]?
  public var lastColorPipetteState: ImglyKit.ColorPipetteMenuItem?
  public static func == (a: ImglyKit.UserInterfaceState, b: ImglyKit.UserInterfaceState) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VESDK : ImglyKit.IMGLY {
  @objc override final public class func crashIfNeeded() throws
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideo) open class Video : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var asset: AVFoundation.AVAsset {
    @objc get
  }
  @objc public var segments: [ImglyKit.VideoSegment] {
    @objc get
  }
  @objc public var size: CoreFoundation.CGSize {
    @objc get
  }
  @objc convenience public init(size: CoreFoundation.CGSize)
  @objc(initWithURL:) convenience public init(url: Foundation.URL)
  @objc convenience public init(segment: ImglyKit.VideoSegment)
  @objc convenience public init(segment: ImglyKit.VideoSegment, size: CoreFoundation.CGSize)
  @objc convenience public init(segments: [ImglyKit.VideoSegment])
  @objc convenience public init(segments: [ImglyKit.VideoSegment], size: CoreFoundation.CGSize)
  @objc @available(*, deprecated, renamed: "init(segment:)", message: "Use VideoSegment API instead.")
  convenience public init(asset: AVFoundation.AVAsset)
  @objc @available(*, deprecated, renamed: "init(segment:size:)", message: "Use VideoSegment API instead.")
  convenience public init(asset: AVFoundation.AVAsset, size: CoreFoundation.CGSize)
  @objc @available(*, deprecated, renamed: "init(segments:)", message: "Use VideoSegment API instead.")
  convenience public init(assets: [AVFoundation.AVAsset])
  @objc @available(*, deprecated, renamed: "init(segments:size:)", message: "Use VideoSegment API instead.")
  convenience public init(assets: [AVFoundation.AVAsset], size: CoreFoundation.CGSize)
  @objc deinit
}
@objcMembers @objc(PESDKVideoClip) open class VideoClip : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let artist: Swift.String?
  @objc final public let thumbnailURL: Foundation.URL?
  @objc final public let videoURL: Foundation.URL
  @objc convenience public init(identifier: Swift.String, videoURL: Foundation.URL)
  @objc public init(identifier: Swift.String, videoURL: Foundation.URL, title: Swift.String?, artist: Swift.String?, thumbnailURL: Foundation.URL?)
  @objc @available(*, deprecated, message: "Use `assetCatalog.videoClip(withIdentifier:)` of your `Configuration` object instead.")
  public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.VideoClip?
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objcMembers @objc(PESDKVideoClipCategory) open class VideoClipCategory : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let imageURL: Foundation.URL?
  @objc final public let videoClips: [ImglyKit.VideoClip]
  @objc @available(*, deprecated, message: "Use `assetCatalog.videoClips` of your `Configuration` object instead.")
  public static var all: [ImglyKit.VideoClipCategory] {
    @objc get
    @objc set
  }
  @objc public static var defaultItems: [ImglyKit.VideoClipCategory]
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL?, videoClips: [ImglyKit.VideoClip])
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, videoClips: [ImglyKit.VideoClip])
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKVideoClipCategoryListSectionController) open class VideoClipCategoryListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipCategoryMenuItem) open class VideoClipCategoryMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let videoClipCategory: ImglyKit.VideoClipCategory
  @objc final public let title: Swift.String
  @objc final public let iconURL: Foundation.URL?
  @objc convenience public init(videoClipCategory: ImglyKit.VideoClipCategory)
  @objc public var diffIdentifier: any ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: (any ImglyKit.Diffable)?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipCategoryActionMenuItem) open class VideoClipCategoryActionMenuItem : ImglyKit.ActionMenuItem {
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoClipCollectionViewCell) @_Concurrency.MainActor(unsafe) open class VideoClipCollectionViewCell : ImglyKit.AssetCollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override open func setupImageView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct VideoClipModel : Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public var trimModel: ImglyKit.TrimModel
  public init(identifier: Swift.String)
  public static func == (a: ImglyKit.VideoClipModel, b: ImglyKit.VideoClipModel) -> Swift.Bool
}
extension ImglyKit.VideoClipModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKVideoClipSelectionController) @_Concurrency.MainActor(unsafe) open class VideoClipSelectionController : ImglyKit.ViewController {
  @objc @_Concurrency.MainActor(unsafe) open var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var gradientView: ImglyKit.GradientView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var visualEffectView: UIKit.UIVisualEffectView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var assetManager: ImglyKit.AssetManager?
  @objc @_Concurrency.MainActor(unsafe) open var videoClips: [ImglyKit.VideoClip] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.VideoClipSelectionControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var cellConfigurationClosure: ((ImglyKit.VideoClipCollectionViewCell, ImglyKit.VideoClip) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public static var collectionViewCellType: ImglyKit.VideoClipCollectionViewCell.Type {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
extension ImglyKit.VideoClipSelectionController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension ImglyKit.VideoClipSelectionController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension ImglyKit.VideoClipSelectionController : UIKit.UICollectionViewDataSourcePrefetching {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, prefetchItemsAt indexPaths: [Foundation.IndexPath])
}
@objc(PESDKVideoClipSelectionControllerDelegate) public protocol VideoClipSelectionControllerDelegate {
  @objc func videoClipSelectionController(_ videoClipSelectionController: ImglyKit.VideoClipSelectionController, didSelect videoClip: ImglyKit.VideoClip)
}
@objcMembers @objc(PESDKVideoClipToolController) @_Concurrency.MainActor(unsafe) open class VideoClipToolController : ImglyKit.MenuToolController {
  @objc @_Concurrency.MainActor(unsafe) final public let videoClipSelectionController: ImglyKit.VideoClipSelectionController
  @objc @_Concurrency.MainActor(unsafe) weak open var selectionDelegate: (any ImglyKit.VideoClipToolControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var videoPreviewController: ImglyKit.VideoEditPreviewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) public init?(videoClipSelectionController: ImglyKit.VideoClipSelectionController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override open func configureToolbarItem()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didBecomeActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willResignActiveTool()
  @_Concurrency.MainActor(unsafe) @objc override open func updateUserInterfaceState()
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: any ImglyKit.MenuItem)
  @_Concurrency.MainActor(unsafe) @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: any ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
}
extension ImglyKit.VideoClipToolController : ImglyKit.TransitionProviding {
  @_Concurrency.MainActor(unsafe) public var transitionAnimator: (any ImglyKit.TransitionAnimator)? {
    get
  }
}
extension ImglyKit.VideoClipToolController : ImglyKit.VideoClipSelectionControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoClipSelectionController(_ videoClipSelectionController: ImglyKit.VideoClipSelectionController, didSelect videoClip: ImglyKit.VideoClip)
}
extension ImglyKit.VideoClipToolController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@available(iOS 14, *)
extension ImglyKit.VideoClipToolController : PhotosUI.PHPickerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
extension ImglyKit.VideoClipToolController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func addClip(_ videoClip: ImglyKit.VideoClip)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func pausePreview()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func playPreview()
  @objc @_Concurrency.MainActor(unsafe) dynamic open var previewPlaying: Swift.Bool {
    @objc get
  }
}
@objc(PESDKVideoClipToolControllerDelegate) public protocol VideoClipToolControllerDelegate {
  @objc func videoClipToolController(_ videoClipToolController: ImglyKit.VideoClipToolController, didSelect videos: [ImglyKit.VideoClip])
}
@objcMembers @objc(PESDKVideoClipToolControllerOptions) open class VideoClipToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let videoClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.VideoClipCategory) -> Swift.Void)?
  @objc final public let videoClipButtonConfigurationClosure: ((ImglyKit.VideoClipCollectionViewCell, ImglyKit.VideoClip) -> Swift.Void)?
  @objc final public let videoClipAddButtonSelectedClosure: ((ImglyKit.VideoClipToolController) -> Swift.Void)?
  @objc final public let defaultVideoClipCategoryIndex: Swift.Int
  @objc final public let personalVideoClipsEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.VideoClipToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKVideoClipToolControllerOptionsBuilder) open class VideoClipToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var videoClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.VideoClipCategory) -> Swift.Void)?
  @objc open var videoClipButtonConfigurationClosure: ((ImglyKit.VideoClipCollectionViewCell, ImglyKit.VideoClip) -> Swift.Void)?
  @objc open var videoClipAddButtonSelectedClosure: ((ImglyKit.VideoClipToolController) -> Swift.Void)?
  @objc open var defaultVideoClipCategoryIndex: Swift.Int
  @objc open var personalVideoClipsEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.VideoClipToolControllerOptions)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipViewModel) open class VideoClipViewModel : ObjectiveC.NSObject {
  @objc final public let videoClip: ImglyKit.VideoClip
  @objc convenience public init(videoClip: ImglyKit.VideoClip)
  @objc deinit
}
@objc(PESDKVideoCodecProfileH264) public enum VideoCodecProfileH264 : Swift.Int {
  case BaselineAutoLevel
  case BaselineLevel30
  case BaselineLevel31
  case BaselineLevel41
  case MainAutoLevel
  case MainLevel30
  case MainLevel31
  case MainLevel32
  case MainLevel41
  case HighAutoLevel
  case HighLevel40
  case HighLevel41
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoCodec) open class VideoCodec : ObjectiveC.NSObject {
  @objc public static func h264(withBitRate bitRate: Foundation.NSNumber?) -> ImglyKit.VideoCodec
  public static func h264(withBitRate bitRate: Foundation.NSNumber?, profile: ImglyKit.VideoCodecProfileH264?) -> ImglyKit.VideoCodec
  @objc public static func hevc(withQuality quality: Foundation.NSNumber) -> ImglyKit.VideoCodec
  @objc deinit
}
extension ImglyKit.VideoCodec {
  @objc(h264WithBitRate:profile:) public static func _objCH264(withBitRate bitRate: Foundation.NSNumber?, profile: Foundation.NSNumber?) -> ImglyKit.VideoCodec
}
@objc(PESDKVideoContainerFormat) public enum VideoContainerFormat : Swift.Int {
  case mp4
  case mov
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoEditPreviewController) @_Concurrency.MainActor(unsafe) open class VideoEditPreviewController : ImglyKit.MediaEditPreviewController {
  @objc @_Concurrency.MainActor(unsafe) final public let video: ImglyKit.Video
  @objc @_Concurrency.MainActor(unsafe) open var timelineContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var timelineView: ImglyKit.VideoTrimView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var timelineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required convenience public init(videoAsset: ImglyKit.Video, photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override open var baseWorkUIImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open func loadBaseImage(_ completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override open func updateLayout()
  @_Concurrency.MainActor(unsafe) @objc override open func updateRenderer()
  @_Concurrency.MainActor(unsafe) override open var imageVendor: (any ImglyKit.ImageVendor)? {
    get
  }
}
extension ImglyKit.VideoEditPreviewController : ImglyKit.VideoTrimViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
extension ImglyKit.VideoEditPreviewController {
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(videoAsset: ImglyKit.Video, photoEditModel: ImglyKit._ObjCPhotoEditModel)
}
@objcMembers @objc(PESDKVideoEditViewController) @_Concurrency.MainActor(unsafe) open class VideoEditViewController : ImglyKit.MediaEditViewController, ImglyKit.BrandedView {
  @objc @_Concurrency.MainActor(unsafe) public var isPlaying: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public let branding: ImglyKit.Branding?
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ImglyKit.VideoEditViewControllerDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override public var options: ImglyKit.MediaEditViewControllerOptions {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) required public init(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public static func makeVideoEditViewController(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel()) -> ImglyKit.VideoEditViewController
  @objc @_Concurrency.MainActor(unsafe) open func play()
  @objc @_Concurrency.MainActor(unsafe) open func pause()
  @_Concurrency.MainActor(unsafe) @objc override open func renderHighResolutionVariant()
  @objc @_Concurrency.MainActor(unsafe) open var serializedSettings: Foundation.Data? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override open func didCancel()
  @_Concurrency.MainActor(unsafe) @objc override open func willPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override open func didPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override open func willDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override open func didDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mediaEditPreviewControllerPlaybackEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc deinit
}
@objc(PESDKVideoEditViewControllerDelegate) public protocol VideoEditViewControllerDelegate : ImglyKit.MediaEditViewControllerDelegate {
  @objc optional func videoEditViewControllerShouldStart(_ videoEditViewController: ImglyKit.VideoEditViewController, task: ImglyKit.VideoEditorTask) -> Swift.Bool
  @objc func videoEditViewControllerDidFinish(_ videoEditViewController: ImglyKit.VideoEditViewController, result: ImglyKit.VideoEditorResult)
  @objc func videoEditViewControllerDidFail(_ videoEditViewController: ImglyKit.VideoEditViewController, error: ImglyKit.VideoEditorError)
  @objc func videoEditViewControllerDidCancel(_ videoEditViewController: ImglyKit.VideoEditViewController)
}
extension ImglyKit.VideoEditViewController {
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel)
  @objc @_Concurrency.MainActor(unsafe) public static func videoEditViewController(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel) -> ImglyKit.VideoEditViewController
}
@objc(PESDKForceTrimMode) public enum ForceTrimMode : Swift.Int {
  case always
  case ifNeeded
  case silent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKVideoEditViewControllerOptions) open class VideoEditViewControllerOptions : ImglyKit.MediaEditViewControllerOptions {
  @objc final public let videoContainerFormat: ImglyKit.VideoContainerFormat
  @objc public var videoContainerFormatUTI: CoreFoundation.CFString {
    @objc get
  }
  @objc final public let videoCodec: ImglyKit.VideoCodec
  @objc final public let exportURL: Foundation.URL?
  @objc final public let forceTrimMode: ImglyKit.ForceTrimMode
  @objc final public let showTimelineOnMainScreen: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(videoEditBuilder: ImglyKit.VideoEditViewControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKVideoEditViewControllerOptionsBuilder) open class VideoEditViewControllerOptionsBuilder : ImglyKit.MediaEditViewControllerOptionsBuilder {
  @objc open var videoContainerFormat: ImglyKit.VideoContainerFormat
  @objc open var videoCodec: ImglyKit.VideoCodec
  @objc open var exportURL: Foundation.URL?
  @objc open var showTimelineOnMainScreen: Swift.Bool
  @objc open var forceTrimMode: ImglyKit.ForceTrimMode
  @objc override dynamic public init()
  @objc public init(videoEditOptions: ImglyKit.VideoEditViewControllerOptions)
  @objc deinit
}
public struct VideoEditor : SwiftUI.View {
  public init(video: ImglyKit.Video, configuration: ImglyKit.Configuration? = nil, photoEditModel: ImglyKit.PhotoEditModel? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8ImglyKit11VideoEditorV4bodyQrvp", 0) __
}
extension ImglyKit.VideoEditor {
  public func onShouldStart(perform action: @escaping (ImglyKit.VideoEditorTask) -> Swift.Bool) -> ImglyKit.VideoEditor
  public func onDidFail(perform action: @escaping (ImglyKit.VideoEditorError) -> Swift.Void) -> ImglyKit.VideoEditor
  public func onDidCancel(perform action: @escaping () -> Swift.Void) -> ImglyKit.VideoEditor
  public func onDidSave(perform action: @escaping (_ result: ImglyKit.VideoEditorResult) -> Swift.Void) -> ImglyKit.VideoEditor
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoEditorError) public class VideoEditorError : Foundation.NSError, Foundation.LocalizedError {
  @objc(PESDKVideoEditorErrorReason) public enum Reason : Swift.Int, Swift.CustomStringConvertible {
    case videoTooShort
    case exportFailed
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let reason: ImglyKit.VideoEditorError.Reason
  @objc final public let underlyingError: (any Swift.Error)?
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc override dynamic public var localizedDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public var underlyingErrors: [any Swift.Error] {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoEditorResult) public class VideoEditorResult : ObjectiveC.NSObject {
  @objc(VESDKVideoEditorStatus) public enum Status : Swift.Int, Swift.CustomStringConvertible {
    case passedWithoutRendering
    case renderedWithoutChanges
    case renderedWithChanges
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoEditorOutput) public class Output : ObjectiveC.NSObject {
    @objc final public let url: Foundation.URL
    @objc public var uti: Swift.String? {
      @objc get
    }
    @objc override dynamic public var description: Swift.String {
      @objc get
    }
    @objc deinit
  }
  @objc final public let output: ImglyKit.VideoEditorResult.Output
  @objc final public let status: ImglyKit.VideoEditorResult.Status
  @objc final public let task: ImglyKit.VideoEditorTask
  @objc @available(*, deprecated, message: "Use `status` instead.")
  public var hasChanges: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoEditorTask) public class VideoEditorTask : ObjectiveC.NSObject {
  @objc final public let video: ImglyKit.Video
  final public let model: ImglyKit.PhotoEditModel
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ImglyKit.VideoEditorTask {
  @objc(model) dynamic public var _objCPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
  }
}
public protocol VideoPreviewControlling {
  var wantsVideoPlayback: Swift.Bool { get }
  var videoPreviewControllingTarget: (any ImglyKit.VideoPreviewControlling)? { get }
}
extension ImglyKit.VideoPreviewControlling {
  public var wantsVideoPlayback: Swift.Bool {
    get
  }
  public var videoPreviewControllingTarget: (any ImglyKit.VideoPreviewControlling)? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoRecordButton) @_Concurrency.MainActor(unsafe) final public class VideoRecordButton : UIKit.UIControl {
  @objc @_Concurrency.MainActor(unsafe) final public var isRecording: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var outlineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func cancelTracking(with event: UIKit.UIEvent?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoScrubberView) @_Concurrency.MainActor(unsafe) open class VideoScrubberView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@objcMembers @objc(PESDKVideoSegment) public class VideoSegment : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let url: Foundation.URL
  final public let startTime: Foundation.TimeInterval?
  final public let endTime: Foundation.TimeInterval?
  public init(url: Foundation.URL, startTime: Foundation.TimeInterval? = nil, endTime: Foundation.TimeInterval? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ImglyKit.VideoSegment {
  @objc(initWithURL:) convenience dynamic public init(url: Foundation.URL)
  @objc(initWithURL:startTime:endTime:) convenience dynamic public init(url: Foundation.URL, startTime: Foundation.NSNumber?, endTime: Foundation.NSNumber?)
  @objc(startTime) dynamic public var _objCstartTime: Foundation.NSNumber? {
    @objc get
  }
  @objc(endTime) dynamic public var _objCendTime: Foundation.NSNumber? {
    @objc get
  }
}
@objc(PESDKVideoTrimSelectionViewDelegate) public protocol VideoTrimSelectionViewDelegate {
  @objc func videoTrimSelectionViewDidStartDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc func videoTrimSelectionViewDidChangeStartTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc func videoTrimSelectionViewDidChangeEndTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc func videoTrimSelectionViewDidStopDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoTrimSelectionView) @_Concurrency.MainActor(unsafe) open class VideoTrimSelectionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any ImglyKit.VideoTrimSelectionViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var asset: AVFoundation.AVAsset? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var minimumDuration: CoreMedia.CMTime
  @_Concurrency.MainActor(unsafe) public var maximumDuration: CoreMedia.CMTime?
  @_Concurrency.MainActor(unsafe) public var startTime: CoreMedia.CMTime? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var endTime: CoreMedia.CMTime? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var handleWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var inactiveColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftHandle: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var rightHandle: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let topBorder: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let bottomBorder: UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) final public let durationOverlayLabel: ImglyKit.OverlayLabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc(PESDKVideoTrimViewDelegate) public protocol VideoTrimViewDelegate {
  @objc func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @objc func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoTrimView) @_Concurrency.MainActor(unsafe) open class VideoTrimView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any ImglyKit.VideoTrimViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var video: ImglyKit.Video? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var thumbnailWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var minimumDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var maximumDuration: CoreMedia.CMTime? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var startTime: CoreMedia.CMTime? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var endTime: CoreMedia.CMTime? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentTime: CoreMedia.CMTime? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isZoomToSelectionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var trimEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func play()
  @objc @_Concurrency.MainActor(unsafe) open func pause()
  @objc deinit
}
extension ImglyKit.VideoTrimView : ImglyKit.VideoTrimSelectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimSelectionViewDidStartDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimSelectionViewDidChangeStartTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimSelectionViewDidChangeEndTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func videoTrimSelectionViewDidStopDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
}
extension ImglyKit.VideoTrimView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKViewController) @_Concurrency.MainActor(unsafe) open class ViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ImglyKit.ViewController {
  @objc(pesdk_willBecomeActiveTool) @_Concurrency.MainActor(unsafe) dynamic public func willBecomeActiveTool()
  @objc(pesdk_didBecomeActiveTool) @_Concurrency.MainActor(unsafe) dynamic public func didBecomeActiveTool()
  @objc(pesdk_willResignActiveTool) @_Concurrency.MainActor(unsafe) dynamic public func willResignActiveTool()
  @objc(pesdk_didResignActiveTool) @_Concurrency.MainActor(unsafe) dynamic public func didResignActiveTool()
}
public struct VisualEffectCollectionViewTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(view: UIKit.UIView, visualEffectView: UIKit.UIVisualEffectView, visualEffect: UIKit.UIVisualEffect, collectionView: UIKit.UICollectionView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKWatermarkOptions) open class WatermarkOptions : ObjectiveC.NSObject {
  @objc final public let imageURL: Foundation.URL?
  @objc final public let size: CoreFoundation.CGFloat
  @objc final public let inset: CoreFoundation.CGFloat
  @objc final public let alignment: UIKit.UIView.ContentMode
  @objc convenience override dynamic public init()
  @objc public init(builder: ImglyKit.WatermarkOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKWatermarkOptionsBuilder) open class WatermarkOptionsBuilder : ObjectiveC.NSObject {
  @objc open var imageURL: Foundation.URL?
  @objc open var size: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var inset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc open var alignment: UIKit.UIView.ContentMode
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.WatermarkOptions)
  @objc deinit
}
extension ImglyKit.AdjustTool : Swift.Equatable {}
extension ImglyKit.AdjustTool : Swift.Hashable {}
extension ImglyKit.AdjustTool : Swift.RawRepresentable {}
extension ImglyKit.AdjustOverlayAction : Swift.Equatable {}
extension ImglyKit.AdjustOverlayAction : Swift.Hashable {}
extension ImglyKit.AdjustOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.AudioClipModel : ImglyKit.Identifiable {}
extension ImglyKit.AudioOverlayAction : Swift.Equatable {}
extension ImglyKit.AudioOverlayAction : Swift.Hashable {}
extension ImglyKit.AudioOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.BlendMode : Swift.Equatable {}
extension ImglyKit.BlendMode : Swift.Hashable {}
extension ImglyKit.BlendMode : Swift.RawRepresentable {}
extension ImglyKit.BrushTool : Swift.Equatable {}
extension ImglyKit.BrushTool : Swift.Hashable {}
extension ImglyKit.BrushTool : Swift.RawRepresentable {}
extension ImglyKit.BrushOverlayAction : Swift.Equatable {}
extension ImglyKit.BrushOverlayAction : Swift.Hashable {}
extension ImglyKit.BrushOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.CameraControllerError : Swift.Equatable {}
extension ImglyKit.CameraControllerError : Swift.Hashable {}
extension ImglyKit.CameraControllerError : Swift.RawRepresentable {}
extension ImglyKit.ClipTrimOverlayAction : Swift.Equatable {}
extension ImglyKit.ClipTrimOverlayAction : Swift.Hashable {}
extension ImglyKit.ClipTrimOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.CompositionOverlayAction : Swift.Equatable {}
extension ImglyKit.CompositionOverlayAction : Swift.Hashable {}
extension ImglyKit.CompositionOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.VideoClipLibraryMode : Swift.Equatable {}
extension ImglyKit.VideoClipLibraryMode : Swift.Hashable {}
extension ImglyKit.VideoClipLibraryMode : Swift.RawRepresentable {}
extension ImglyKit.ConfigurationSerializationImageFormat : Swift.Equatable {}
extension ImglyKit.ConfigurationSerializationImageFormat : Swift.Hashable {}
extension ImglyKit.ConfigurationSerializationImageFormat : Swift.RawRepresentable {}
extension ImglyKit.ConfigurationSerializationVideoCodec : Swift.Equatable {}
extension ImglyKit.ConfigurationSerializationVideoCodec : Swift.Hashable {}
extension ImglyKit.ConfigurationSerializationVideoCodec : Swift.RawRepresentable {}
extension ImglyKit.ConfigurationSerializationVideoFormat : Swift.Equatable {}
extension ImglyKit.ConfigurationSerializationVideoFormat : Swift.Hashable {}
extension ImglyKit.ConfigurationSerializationVideoFormat : Swift.RawRepresentable {}
extension ImglyKit.CropHandle : Swift.Equatable {}
extension ImglyKit.CropHandle : Swift.Hashable {}
extension ImglyKit.RecordingOrientation : Swift.Equatable {}
extension ImglyKit.RecordingOrientation : Swift.Hashable {}
extension ImglyKit.RecordingOrientation : Swift.RawRepresentable {}
extension ImglyKit.FocusMode : Swift.Equatable {}
extension ImglyKit.FocusMode : Swift.Hashable {}
extension ImglyKit.FocusMode : Swift.RawRepresentable {}
extension ImglyKit.FrameBuildMode : Swift.Equatable {}
extension ImglyKit.FrameBuildMode : Swift.Hashable {}
extension ImglyKit.FrameBuildMode : Swift.RawRepresentable {}
extension ImglyKit.FrameLayoutMode : Swift.Equatable {}
extension ImglyKit.FrameLayoutMode : Swift.Hashable {}
extension ImglyKit.FrameLayoutMode : Swift.RawRepresentable {}
extension ImglyKit.FrameAction : Swift.Equatable {}
extension ImglyKit.FrameAction : Swift.Hashable {}
extension ImglyKit.FrameAction : Swift.RawRepresentable {}
extension ImglyKit.FrameTileMode : Swift.Equatable {}
extension ImglyKit.FrameTileMode : Swift.Hashable {}
extension ImglyKit.FrameTileMode : Swift.RawRepresentable {}
extension ImglyKit.ImageAsset.UserInfoKey : Swift.Equatable {}
extension ImglyKit.ImageAsset.UserInfoKey : Swift.Hashable {}
extension ImglyKit.ImageAsset.UserInfoKey : Swift.RawRepresentable {}
extension ImglyKit.ImageFileFormat : Swift.Equatable {}
extension ImglyKit.ImageFileFormat : Swift.Hashable {}
extension ImglyKit.ImageFileFormat : Swift.RawRepresentable {}
extension ImglyKit.LicenseFeature : Swift.Equatable {}
extension ImglyKit.LicenseFeature : Swift.Hashable {}
extension ImglyKit.LicenseFeature : Swift.RawRepresentable {}
extension ImglyKit.LicenseProduct : Swift.Equatable {}
extension ImglyKit.LicenseProduct : Swift.Hashable {}
extension ImglyKit.LicenseProduct : Swift.RawRepresentable {}
extension ImglyKit._ObjCLicenseProduct : Swift.Equatable {}
extension ImglyKit._ObjCLicenseProduct : Swift.Hashable {}
extension ImglyKit._ObjCLicenseProduct : Swift.RawRepresentable {}
extension ImglyKit.LogLevel : Swift.Equatable {}
extension ImglyKit.LogLevel : Swift.Hashable {}
extension ImglyKit.LogLevel : Swift.RawRepresentable {}
extension ImglyKit.MediaEditOverlayAction : Swift.Equatable {}
extension ImglyKit.MediaEditOverlayAction : Swift.Hashable {}
extension ImglyKit.MediaEditOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.NavigationControllerMode : Swift.Equatable {}
extension ImglyKit.NavigationControllerMode : Swift.Hashable {}
extension ImglyKit.NavigationControllerMode : Swift.RawRepresentable {}
extension ImglyKit.Orientation : Swift.Equatable {}
extension ImglyKit.Orientation : Swift.Hashable {}
extension ImglyKit.Orientation : Swift.RawRepresentable {}
extension ImglyKit.OutputScalingRule : Swift.Equatable {}
extension ImglyKit.OutputScalingRule : Swift.Hashable {}
extension ImglyKit.OutputScalingRule : Swift.RawRepresentable {}
extension ImglyKit.PhotoEditorError.Reason : Swift.Equatable {}
extension ImglyKit.PhotoEditorError.Reason : Swift.Hashable {}
extension ImglyKit.PhotoEditorError.Reason : Swift.RawRepresentable {}
extension ImglyKit.PhotoEditorResult.Status : Swift.Equatable {}
extension ImglyKit.PhotoEditorResult.Status : Swift.Hashable {}
extension ImglyKit.PhotoEditorResult.Status : Swift.RawRepresentable {}
extension ImglyKit.BlurQuality : Swift.Equatable {}
extension ImglyKit.BlurQuality : Swift.Hashable {}
extension ImglyKit.BlurQuality : Swift.RawRepresentable {}
extension ImglyKit.RecordingMode : Swift.Equatable {}
extension ImglyKit.RecordingMode : Swift.Hashable {}
extension ImglyKit.RecordingMode : Swift.RawRepresentable {}
extension ImglyKit.TemperatureFormat : Swift.Equatable {}
extension ImglyKit.TemperatureFormat : Swift.Hashable {}
extension ImglyKit.TemperatureFormat : Swift.RawRepresentable {}
extension ImglyKit.TemperatureUnit : Swift.Equatable {}
extension ImglyKit.TemperatureUnit : Swift.Hashable {}
extension ImglyKit.TemperatureUnit : Swift.RawRepresentable {}
extension ImglyKit.SnapGuide : Swift.Equatable {}
extension ImglyKit.SnapGuide : Swift.Hashable {}
extension ImglyKit.SnapGuide : Swift.RawRepresentable {}
extension ImglyKit.StickerTintMode : Swift.Equatable {}
extension ImglyKit.StickerTintMode : Swift.Hashable {}
extension ImglyKit.StickerTintMode : Swift.RawRepresentable {}
extension ImglyKit.StickerDurationOverlayAction : Swift.Equatable {}
extension ImglyKit.StickerDurationOverlayAction : Swift.Hashable {}
extension ImglyKit.StickerDurationOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.StickerAdjustmentMode : Swift.Equatable {}
extension ImglyKit.StickerAdjustmentMode : Swift.Hashable {}
extension ImglyKit.StickerAdjustmentMode : Swift.RawRepresentable {}
extension ImglyKit.StickerAction : Swift.Equatable {}
extension ImglyKit.StickerAction : Swift.Hashable {}
extension ImglyKit.StickerAction : Swift.RawRepresentable {}
extension ImglyKit.StickerOverlayAction : Swift.Equatable {}
extension ImglyKit.StickerOverlayAction : Swift.Hashable {}
extension ImglyKit.StickerOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TextColorToolControllerMode : Swift.Equatable {}
extension ImglyKit.TextColorToolControllerMode : Swift.Hashable {}
extension ImglyKit.TextColorToolControllerMode : Swift.RawRepresentable {}
extension ImglyKit.TextDesignDurationOverlayAction : Swift.Equatable {}
extension ImglyKit.TextDesignDurationOverlayAction : Swift.Hashable {}
extension ImglyKit.TextDesignDurationOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TextDesignAction : Swift.Equatable {}
extension ImglyKit.TextDesignAction : Swift.Hashable {}
extension ImglyKit.TextDesignAction : Swift.RawRepresentable {}
extension ImglyKit.TextDesignOverlayAction : Swift.Equatable {}
extension ImglyKit.TextDesignOverlayAction : Swift.Hashable {}
extension ImglyKit.TextDesignOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TextDurationOverlayAction : Swift.Equatable {}
extension ImglyKit.TextDurationOverlayAction : Swift.Hashable {}
extension ImglyKit.TextDurationOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TextAction : Swift.Equatable {}
extension ImglyKit.TextAction : Swift.Hashable {}
extension ImglyKit.TextAction : Swift.RawRepresentable {}
extension ImglyKit.TextOverlayAction : Swift.Equatable {}
extension ImglyKit.TextOverlayAction : Swift.Hashable {}
extension ImglyKit.TextOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TransformAction : Swift.Equatable {}
extension ImglyKit.TransformAction : Swift.Hashable {}
extension ImglyKit.TransformAction : Swift.RawRepresentable {}
extension ImglyKit.TrimOverlayAction : Swift.Equatable {}
extension ImglyKit.TrimOverlayAction : Swift.Hashable {}
extension ImglyKit.TrimOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.VideoClipModel : ImglyKit.Identifiable {}
extension ImglyKit.VideoCodecProfileH264 : Swift.Equatable {}
extension ImglyKit.VideoCodecProfileH264 : Swift.Hashable {}
extension ImglyKit.VideoCodecProfileH264 : Swift.RawRepresentable {}
extension ImglyKit.VideoContainerFormat : Swift.Equatable {}
extension ImglyKit.VideoContainerFormat : Swift.Hashable {}
extension ImglyKit.VideoContainerFormat : Swift.RawRepresentable {}
extension ImglyKit.ForceTrimMode : Swift.Equatable {}
extension ImglyKit.ForceTrimMode : Swift.Hashable {}
extension ImglyKit.ForceTrimMode : Swift.RawRepresentable {}
extension ImglyKit.VideoEditorError.Reason : Swift.Equatable {}
extension ImglyKit.VideoEditorError.Reason : Swift.Hashable {}
extension ImglyKit.VideoEditorError.Reason : Swift.RawRepresentable {}
extension ImglyKit.VideoEditorResult.Status : Swift.Equatable {}
extension ImglyKit.VideoEditorResult.Status : Swift.Hashable {}
extension ImglyKit.VideoEditorResult.Status : Swift.RawRepresentable {}
