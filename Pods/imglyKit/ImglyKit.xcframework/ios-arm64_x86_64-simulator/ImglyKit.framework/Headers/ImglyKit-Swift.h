#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef IMGLYKIT_SWIFT_H
#define IMGLYKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreGraphics;
@import CoreImage;
@import CoreLocation;
@import CoreMedia;
@import CoreVideo;
@import Dispatch;
@import Foundation;
@import MetalKit;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#import <ImglyKit/ImglyKit.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ImglyKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)







@protocol PESDKMenuListSectionControllerSelectionDelegate;
@protocol PESDKMenuListSectionControllerListDisplayDelegate;
@class UICollectionViewCell;
@class NSString;
@class UICollectionReusableView;

/// Handles a section in the menu of a <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("MenuListSectionController")
@interface PESDKMenuListSectionController : NSObject
/// An object that acts as the delegate for selections.
@property (nonatomic, weak) id <PESDKMenuListSectionControllerSelectionDelegate> _Nullable selectionDelegate;
/// An object that acts as the delegate for display related events.
@property (nonatomic, weak) id <PESDKMenuListSectionControllerListDisplayDelegate> _Nullable displayDelegate;
/// The inset of the section.
@property (nonatomic) UIEdgeInsets inset;
/// The line spacing of the section.
@property (nonatomic) CGFloat minimumLineSpacing;
/// The interitem spacing of the section.
@property (nonatomic) CGFloat minimumInteritemSpacing;
/// Whether this is the first section in the list.
@property (nonatomic, readonly) BOOL isFirstSection;
/// Whether this is the last section in the list.
@property (nonatomic, readonly) BOOL isLastSection;
/// The index of the section.
@property (nonatomic, readonly) NSInteger section;
/// Returns <code>true</code> if this section controller has any selected items.
@property (nonatomic, readonly) BOOL hasSelectedItems;
/// Returns <code>true</code> if the item at <code>index</code> is selected.
- (BOOL)hasSelectionAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Marks the item at <code>index</code> as selected. Does not call delegate methods.
- (void)selectItemAt:(NSInteger)index;
/// Marks the item at <code>index</code> as deselected. Does not call delegate methods.
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) NSInteger numberOfItems;
/// :nodoc:
- (CGSize)sizeForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didSelectItemAt:(NSInteger)index;
/// :nodoc:
- (BOOL)canMoveItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedElementKinds;
/// :nodoc:
- (UICollectionReusableView * _Nonnull)viewForSupplementaryElementOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)sizeForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>ActionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("ActionListSectionController")
@interface PESDKActionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NSObject;

/// The <code>Diffable</code> protocol provides methods needed to compare the identity and equality of two objects.
SWIFT_PROTOCOL_NAMED("Diffable")
@protocol PESDKDiffable
/// A key that can be used to uniquely identify the object.
/// note:
/// Two objects may share the same identifier, but are not equal. A common pattern is to
/// use the <code>NSObject</code> category for automatic conformance. However this means that objects will
/// be identified on their pointer value so finding updates becomes impossible.
/// warning:
/// This value should never be mutated.
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// Returns whether the receiver and a given object are equal.
/// \param object The object to be compared to the receiver.
///
///
/// returns:
/// <code>true</code> if the receiver and object are equal, otherwise <code>false</code>.
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A marker protocol for types that can be used in a <code>MenuViewController</code>.
SWIFT_PROTOCOL_NAMED("MenuItem")
@protocol PESDKMenuItem <PESDKDiffable>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
@optional
/// Flag that indicates if the menu item is a togglable action, which isn’t deselected when choosing other items.
@property (nonatomic, readonly) BOOL isTogglable;
@end

@class UIImage;

/// The menu item that is used in <code>PhotoEditViewController</code> that when selected executes a given
/// closure.
SWIFT_CLASS_NAMED("ActionMenuItem")
@interface PESDKActionMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// Whether this action supports editing photos.
@property (nonatomic, readonly) BOOL supportsPhoto;
/// Whether this action supports editing videos.
@property (nonatomic, readonly) BOOL supportsVideo;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKPhotoEditModel;

@interface PESDKActionMenuItem (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>ActionMenuItem</code> with the given title, icon, action and selected closure.
/// This initializer should only be used from Objective-C.
/// \param title The title of the menu item.
///
/// \param icon The icon of the menu item.
///
/// \param objcActionClosure A closure to execute when selecting this menu item.
///
/// \param objcSelectedClosure A closure that is used to determine whether this menu item is currently
/// active.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon objcActionClosure:(void (^ _Nonnull)(PESDKPhotoEditModel * _Nonnull))objcActionClosure objcSelectedClosure:(BOOL (^ _Nullable)(PESDKPhotoEditModel * _Nonnull))objcSelectedClosure;
@end


@interface PESDKActionMenuItem (SWIFT_EXTENSION(ImglyKit))
/// Creates a menu item for the auto enhancement tool.
///
/// returns:
/// An action menu item.
+ (PESDKActionMenuItem * _Nonnull)createMagicItem SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;
@class NSCoder;

/// A <code>ViewController</code> includes some debugging helpers to ensure that no strong reference cycles
/// exist in the controller. Those helpers are only active in <code>Debug</code> builds.
SWIFT_CLASS_NAMED("ViewController")
@interface PESDKViewController : UIViewController
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKAdjustEditControllerDelegate;
enum AdjustTool : NSInteger;

/// An <code>AdjustEditController</code> can be used to update the <code>AdjustmentModel</code> of a <code>PhotoEditModel</code>.
/// It is supposed to be contained in a tool controller and be presented above a
/// <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("AdjustEditController")
@interface PESDKAdjustEditController : PESDKViewController
/// The object that acts as this controller’s delegate.
@property (nonatomic, weak) id <PESDKAdjustEditControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// Updates the slider properties for the selected adjustment tool.
/// The slider can be accessed with <code>sliderEditController.slider</code>.
/// \param adjustTool The selected adjustment tool.
///
- (void)updateSliderFor:(enum AdjustTool)adjustTool;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKAdjustEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKAdjustEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@class UIScrollView;

/// The <code>AdjustEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>AdjustEditController</code>.
SWIFT_PROTOCOL_NAMED("AdjustEditControllerDelegate")
@protocol PESDKAdjustEditControllerDelegate
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param adjustEditController The adjust edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)adjustEditController:(PESDKAdjustEditController * _Nonnull)adjustEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Asks the delegate for the scroll view to which zoom events of the adjust edit controller should
/// be forwarded.
/// \param adjustEditController The adjust edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)adjustEditControllerTargetScrollView:(PESDKAdjustEditController * _Nonnull)adjustEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param adjustEditController The adjust edit controller that changed the photo edit model.
///
- (void)adjustEditControllerDidChangePhotoEditModel:(PESDKAdjustEditController * _Nonnull)adjustEditController;
/// Called when sliding occurred in the slider.
/// \param adjustEditController The adjust edit controller in which sliding occurred.
///
/// \param value The value to which the slider was dragged.
///
- (void)adjustEditControllerDidSlide:(PESDKAdjustEditController * _Nonnull)adjustEditController toValue:(CGFloat)value;
/// Called when sliding ended in the slider.
/// \param adjustEditController The adjust edit controller in which sliding ended.
///
- (void)adjustEditControllerDidEndSliding:(PESDKAdjustEditController * _Nonnull)adjustEditController;
@end


/// Adjustment limits for slider values.
SWIFT_CLASS_NAMED("AdjustLimits")
@interface PESDKAdjustLimits : NSObject
/// Minimum value (clamped to -1 and 1)
@property (nonatomic, readonly) CGFloat minimum;
/// Maximum value (clamped to -1 and 1)
@property (nonatomic, readonly) CGFloat maximum;
/// Creates new instance of <code>AdjustLimits</code> with given values
/// \param minimum Minimum adjustment value
///
/// \param maximum Maximum adjustment value
///
- (nonnull instancetype)initWithMinimum:(CGFloat)minimum maximum:(CGFloat)maximum OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Handles the display of <code>AdjustMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("AdjustListSectionController")
@interface PESDKAdjustListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>AdjustToolController</code>
SWIFT_CLASS_NAMED("AdjustMenuItem")
@interface PESDKAdjustMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new adjust menu item for the given adjust tool.
/// \param adjustTool The adjust tool that this menu item represents.
///
- (nullable instancetype)initWithAdjustTool:(enum AdjustTool)adjustTool;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The overlay actions that can be used in an instance of <code>AdjustToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, AdjustOverlayAction, open) {
/// Undo the latest operation.
  AdjustOverlayActionUndo = 0,
/// Redo the latest operation.
  AdjustOverlayActionRedo = 1,
};

/// The tools that can be used in an instance of <code>AdjustToolController</code>.
typedef SWIFT_ENUM(NSInteger, AdjustTool, open) {
/// Change the brightness of the image.
  AdjustToolBrightness = 0,
/// Change the contrast of the image.
  AdjustToolContrast = 1,
/// Change the saturation of the image.
  AdjustToolSaturation = 2,
/// Change the shadows of the image.
  AdjustToolShadows = 3,
/// Change the highlights of the image.
  AdjustToolHighlights = 4,
/// Change the exposure of the image.
  AdjustToolExposure = 5,
/// Change the clarity of the image.
  AdjustToolClarity = 6,
/// Change the gamma of the image.
  AdjustToolGamma = 7,
/// Change the blacks of the image.
  AdjustToolBlacks = 8,
/// Change the whites of the image.
  AdjustToolWhites = 9,
/// Change the temperature of the image.
  AdjustToolTemperature = 10,
/// Change the sharpness of the image.
  AdjustToolSharpness = 11,
};

@class PESDKMenuViewController;

/// The <code>MenuViewControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>MenuViewController</code>.
SWIFT_PROTOCOL_NAMED("MenuViewControllerDelegate")
@protocol PESDKMenuViewControllerDelegate
/// Called when a menu item was selected.
/// \param menuViewController The menu view controller that the item was selected in.
///
/// \param menuItem The menu item that was selected.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// Called when a menu item was deselected.
/// \param menuViewController The menu view controller that the item was deselected in.
///
/// \param menuItem The menu item that was deselected.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// Called when a menu item is about to be shown.
/// \param menuViewController The menu view controller that the item will be shown in.
///
/// \param menuItem The menu item that will be shown.
///
/// \param cell The cell that the menu item will be shown in.
///
/// \param index The index of this cell with its section.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// Called when a menu item should be moved as the result of interactive reordering.
/// \param menuViewController The menu view controller that the item will be moved in.
///
/// \param menuItem The menu item that was moved.
///
/// \param previousMenuItems The array of menu items prior to the move.
///
/// \param menuItems The array of menu items after the move.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
@end

@class PESDKToolbarItem;
@class PESDKConfiguration;
@protocol PESDKPhotoEditToolControllerDelegate;
@class PESDKUndoController;
@class PESDKAssetManager;
@class PESDKAssetCatalog;
@class UIColor;

/// A <code>PhotoEditToolController</code> is the base class for any tool controller. Tool controllers can be
/// presented in a <code>PhotoEditViewController</code> and are displayed above a <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("PhotoEditToolController")
@interface PESDKPhotoEditToolController : PESDKViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// The <code>ToolbarItem</code> that is displayed in the <code>Toolbar</code> of a <code>PhotoEditViewController</code> when
/// this tool is pushed onto the stack.
@property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
/// Configures the <code>toolbarItem</code>. Subclasses can override this to do any custom configuration.
- (void)configureToolbarItem;
/// Called when the apply button is tapped. This sends a <code>viewControllerDidFinish(_:)</code> message
/// to subscribers.
/// \param sender The toolbar item that called this method.
///
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// Called when the discard button is tapped. This sends a <code>viewControllerDidCancel(_:)</code> message
/// to subscribers.
/// \param sender The toolbar item that called this method.
///
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// The configuration object that configures this tool.
@property (nonatomic, readonly, strong) PESDKConfiguration * _Nonnull configuration;
/// An object that acts as a delegate.
@property (nonatomic, weak) id <PESDKPhotoEditToolControllerDelegate> _Nullable delegate;
/// The <code>UndoController</code> associated with this tool controller.
@property (nonatomic, strong) PESDKUndoController * _Nullable undoController;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Asks the tool to update its user interface state if required. By default this method does
/// nothing.
- (void)updateUserInterfaceState;
/// Notifies the tool controller that it is about to become the active tool.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_willBecomeActiveTool;
/// Notifies the tool controller that it became the active tool.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_didBecomeActiveTool;
/// Notifies the tool controller that it is about to resign being the active tool.
/// note:
/// This method will <em>not</em> be called if another tool is pushed above this tool.
/// It is only called if you pop the tool from the photo edit view controller.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_willResignActiveTool;
/// Notifies the tool controller that it resigned being the active tool.
/// note:
/// This method will <em>not</em> be called if another tool is pushed above this tool.
/// It is only called if you pop the tool from the photo edit view controller.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_didResignActiveTool;
/// Called when this tool wants zooming enabled. Override this method to setup a proxy scroll
/// view for example.
- (void)setupForZoomAndPan;
/// Called when this tool wants zooming enabled and is about to be presented. Override this
/// method to reset your zoom scale if necessary.
- (void)resetForZoomAndPan;
/// :nodoc:
@property (nonatomic, readonly) BOOL isModelChangeLocal;
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
/// :nodoc:
@property (nonatomic, readonly) PESDKRenderMode preferredRenderMode;
/// :nodoc:
@property (nonatomic, readonly, strong) UIColor * _Nullable preferredPreviewBackgroundColor;
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
@property (nonatomic, readonly) CGFloat preferredDefaultPreviewViewScale;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// A <code>MenuToolController</code> is a tool controller, that shows a menu at the bottom (via a contained
/// <code>MenuViewController</code> object) and some other view controller above that menu.
SWIFT_CLASS_NAMED("MenuToolController")
@interface PESDKMenuToolController : PESDKPhotoEditToolController <PESDKMenuViewControllerDelegate>
/// The menu view controller that is contained in this tool controller.
@property (nonatomic, readonly, strong) PESDKMenuViewController * _Nonnull menuViewController;
/// The content view controller whose view is shown above the menu.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
@end

@class PESDKOverlayButton;

/// An <code>AdjustToolController</code> is reponsible for displaying the UI for the adjustments of an image.
SWIFT_CLASS_NAMED("AdjustToolController")
@interface PESDKAdjustToolController : PESDKMenuToolController <PESDKAdjustEditControllerDelegate>
/// The <code>AdjustEditController</code> that is used within this tool to edit the adjustments.
@property (nonatomic, readonly, strong) PESDKAdjustEditController * _Nonnull adjustEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)adjustEditControllerDidChangePhotoEditModel:(PESDKAdjustEditController * _Nonnull)adjustEditController;
/// :nodoc:
- (UIScrollView * _Nullable)adjustEditControllerTargetScrollView:(PESDKAdjustEditController * _Nonnull)adjustEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)adjustEditController:(PESDKAdjustEditController * _Nonnull)adjustEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)adjustEditControllerDidSlide:(PESDKAdjustEditController * _Nonnull)adjustEditController toValue:(CGFloat)value;
/// :nodoc:
- (void)adjustEditControllerDidEndSliding:(PESDKAdjustEditController * _Nonnull)adjustEditController;
/// The undo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
/// An array that contains all overlay buttons (including <code>undoButton</code> and <code>redoButton</code>)
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end


@class UIView;
@class PESDKButton;
@class PESDKToolControllerOptionsBuilder;

/// Options for configuring a <code>PhotoEditToolController</code>.
SWIFT_CLASS_NAMED("ToolControllerOptions")
@interface PESDKToolControllerOptions : NSObject
/// The background color of the menu. Unless this is set the configuration’s global background color,
/// will be used.
@property (nonatomic, readonly, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, readonly, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// This closure will be called when a tool has been entered.
@property (nonatomic, readonly, copy) void (^ _Nullable didEnterToolClosure)(void);
/// The closure will be called when a tool is about to be left.
@property (nonatomic, readonly, copy) void (^ _Nullable willLeaveToolClosure)(void);
/// Creates a newly allocated instance of <code>ToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>ToolControllerOptions</code> using the given biulder.
/// \param editorBuilder A <code>ToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKSlider;
@class PESDKAdjustToolControllerOptionsBuilder;

/// Options for configuring an <code>AdjustToolController</code>.
SWIFT_CLASS_NAMED("AdjustToolControllerOptions")
@interface PESDKAdjustToolControllerOptions : PESDKToolControllerOptions
/// Whether to show a reset button to reset the applied adjustments.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL showResetButton;
/// This closure can be used to configure the slider that is visible when selecting an adjust tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// an adjust tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>AdjustTool</code>
/// will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum AdjustTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AdjustOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable adjustActionSelectedClosure)(enum AdjustOverlayAction);
/// This closure is called when slider requests the minimum and maximum values for each adjustment tool.
/// Adjustment options are limited to -1 and 1. If closure returns <code>nil</code> default values will be used ([-1, 1]).
@property (nonatomic, readonly, copy) PESDKAdjustLimits * _Nullable (^ _Nullable limitConfigurationClosure)(enum AdjustTool);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>AdjustToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>AdjustToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKAdjustToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>ToolControllerOptionsBuilder</code> for <code>ToolControllerOptions</code>.
SWIFT_CLASS_NAMED("ToolControllerOptionsBuilder")
@interface PESDKToolControllerOptionsBuilder : NSObject
/// The background color of the menu. Unless this is set the configuration’s global background color,
/// will be used.
@property (nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called when a tool has been entered.
@property (nonatomic, copy) void (^ _Nullable didEnterToolClosure)(void);
/// The closure will be called when a tool is about to be left.
@property (nonatomic, copy) void (^ _Nullable willLeaveToolClosure)(void);
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>ToolControllerOptionsBuilder</code> initialized with the given options.
/// \param editorOptions A <code>ToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions OBJC_DESIGNATED_INITIALIZER;
@end


/// The default <code>AdjustToolControllerOptionsBuilder</code> for <code>AdjustToolControllerOptions</code>.
SWIFT_CLASS_NAMED("AdjustToolControllerOptionsBuilder")
@interface PESDKAdjustToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Whether to show a reset button to reset the applied adjustments.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL showResetButton;
/// This closure can be used to configure the slider that is visible when selecting an adjust tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// an adjust tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>AdjustTool</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum AdjustTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AdjustOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable adjustActionSelectedClosure)(enum AdjustOverlayAction);
/// This closure is called when slider requests the minimum and maximum values for each adjustment tool.
/// Adjustment options are limited to -1 and 1. If closure returns <code>nil</code> default values will be used ([-1, 1]).
@property (nonatomic, copy) PESDKAdjustLimits * _Nullable (^ _Nullable limitConfigurationClosure)(enum AdjustTool);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

@class NSNumber;
@class PESDKMenuCollectionViewCell;

@interface PESDKAdjustToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AdjustTool</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedAdjustTools</code> with the corresponding <code>AdjustTool</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAdjustTools;
/// An array of <code>AdjustOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedAdjustOverlayActions</code> with the corresponding <code>AdjustOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAdjustOverlayActions;
/// This closure allows further configuration of the adjust tool buttons. The closure is called for
/// each adjust tool button and has the button and its corresponding adjust tool as parameters.
@property (nonatomic, copy) void (^ _Nullable adjustToolButtonConfigurationBlock)(PESDKMenuCollectionViewCell * _Nonnull, NSNumber * _Nullable);
/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable adjustToolSelectedBlock)(NSNumber * _Nullable);
@end


/// Consumers of analytics screen views and events must implement this protocol. You can then forward
/// all screen views and events to an analytics service of your choice. To receive events you must
/// register your <code>AnalyticsClient</code> instance with <code>Analytics.addAnalyticsClient(_:)</code>.
SWIFT_PROTOCOL_NAMED("AnalyticsClient")
@protocol PESDKAnalyticsClient
/// This method is called when an analytics screen view occurs.
/// \param screenView The name of the screen view.
///
- (void)logScreenView:(PESDKAnalyticsScreenViewName _Nonnull)screenView;
/// This method is called when an analytics event occurs.
/// \param event The name of the event.
///
/// \param attributes The attributes associated with the event, if any.
///
- (void)logEvent:(PESDKAnalyticsEventName _Nonnull)event attributes:(NSDictionary<PESDKAnalyticsEventAttributeName, id> * _Nullable)attributes;
@end


/// A concrete implementation of <code>AnalyticsClient</code> that dispatches events to all registered
/// clients on a background queue.
SWIFT_CLASS_NAMED("Analytics")
@interface PESDKAnalytics : NSObject <PESDKAnalyticsClient>
/// Events are only dispatched if <code>isEnabled</code> is set to <code>true</code>. Defaults to <code>false</code>.
@property (nonatomic) BOOL isEnabled;
/// Register an instance which implements the <code>AnalyticsClient</code> protocol to receiving events.
/// \param client The client that should receive events.
///
- (void)addAnalyticsClient:(id <PESDKAnalyticsClient> _Nonnull)client;
/// Unregister an instance which implements the <code>AnalyticsClient</code> protocol from receiving events.
/// \param client The client that should stop receiving events.
///
- (void)removeAnalyticsClient:(id <PESDKAnalyticsClient> _Nonnull)client;
/// :nodoc:
- (void)logScreenView:(PESDKAnalyticsScreenViewName _Nonnull)screenView;
/// :nodoc:
- (void)logEvent:(PESDKAnalyticsEventName _Nonnull)event attributes:(NSDictionary<PESDKAnalyticsEventAttributeName, id> * _Nullable)attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CAAnimation;

/// <code>AnimationDelegate</code> can be used as the delegate of a <code>CAAnimation</code> to easily specify a completion block.
SWIFT_CLASS_NAMED("AnimationDelegate")
@interface PESDKAnimationDelegate : NSObject <CAAnimationDelegate>
/// The block that should be executed after a <code>CAAnimation</code> finishes.
@property (nonatomic, readonly, copy) void (^ _Nonnull block)(BOOL);
/// :nodoc:
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKStickerCategory;
@class PESDKVideoClipCategory;
@class PESDKFrame;
@class PESDKEffect;
@class PESDKOverlay;
@class PESDKFont;
@class PESDKTextDesign;
@class PESDKAudioClipCategory;
@class PESDKSticker;
@class PESDKVideoClip;
@class PESDKAudioClip;

/// An <code>AssetCatalog</code> configures all assets that are available to an editor instance for editing tasks, such as stickers, frames, effects, overlays, fonts, and text designs.
SWIFT_CLASS_NAMED("AssetCatalog")
@interface PESDKAssetCatalog : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// This array contains all available stickers.
@property (nonatomic, copy) NSArray<PESDKStickerCategory *> * _Nonnull stickers;
/// This array contains all available video clips.
@property (nonatomic, copy) NSArray<PESDKVideoClipCategory *> * _Nonnull videoClips;
/// This array contains all available frames.
@property (nonatomic, copy) NSArray<PESDKFrame *> * _Nonnull frames;
/// This array contains all available effects.
@property (nonatomic, copy) NSArray<PESDKEffect *> * _Nonnull effects;
/// This array contains all available overlays.
@property (nonatomic, copy) NSArray<PESDKOverlay *> * _Nonnull overlays;
/// This array contains all available fonts.
@property (nonatomic, copy) NSArray<PESDKFont *> * _Nonnull fonts;
/// This array contains all available text designs.
@property (nonatomic, copy) NSArray<PESDKTextDesign *> * _Nonnull textDesigns;
/// This array contains all available audio clips.
@property (nonatomic, copy) NSArray<PESDKAudioClipCategory *> * _Nonnull audioClips;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAssetCatalog * _Nonnull shared SWIFT_DEPRECATED_MSG("Use `AssetCatalog.defaultItems` or a custom one in the `Configuration` instead. Please see the PE.SDK (https://img.ly/docs/pesdk/ios/introduction/migration/) or VE.SDK (https://img.ly/docs/vesdk/ios/introduction/migration/) version 11 migration guide for details.");)
+ (PESDKAssetCatalog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if this <code>AssetCatalog</code> instance is the <code>shared</code> singleton instance.
@property (nonatomic, readonly) BOOL isShared SWIFT_DEPRECATED_MSG("`AssetCatalog.isShared` is deprecated.");
/// Creates a new asset catalog from global assets defined by the current state of the <code>shared</code> singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAssetCatalog * _Nonnull sharedItems SWIFT_DEPRECATED_MSG("Use `AssetCatalog.defaultItems` instead.", "defaultItems");)
+ (PESDKAssetCatalog * _Nonnull)sharedItems SWIFT_WARN_UNUSED_RESULT;
/// Creates a new asset catalog from default assets defined by the <code>defaultItems</code> property of <code>StickerCategory</code>, <code>Frame</code>, <code>Effect</code>, <code>Overlay</code>, <code>FontImporter</code>, <code>TextDesign</code>, <code>VideoClipCategory</code>, and <code>AudioClipCategory</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAssetCatalog * _Nonnull defaultItems;)
+ (PESDKAssetCatalog * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// Initializes an empty asset catalog.
- (nonnull instancetype)init;
/// Initialize a new asset catalog with the given assets.
- (nonnull instancetype)initWithStickers:(NSArray<PESDKStickerCategory *> * _Nonnull)stickers frames:(NSArray<PESDKFrame *> * _Nonnull)frames effects:(NSArray<PESDKEffect *> * _Nonnull)effects overlays:(NSArray<PESDKOverlay *> * _Nonnull)overlays fonts:(NSArray<PESDKFont *> * _Nonnull)fonts textDesigns:(NSArray<PESDKTextDesign *> * _Nonnull)textDesigns;
/// Initialize a new asset catalog with the given assets.
- (nonnull instancetype)initWithStickers:(NSArray<PESDKStickerCategory *> * _Nonnull)stickers frames:(NSArray<PESDKFrame *> * _Nonnull)frames effects:(NSArray<PESDKEffect *> * _Nonnull)effects overlays:(NSArray<PESDKOverlay *> * _Nonnull)overlays fonts:(NSArray<PESDKFont *> * _Nonnull)fonts textDesigns:(NSArray<PESDKTextDesign *> * _Nonnull)textDesigns videoClips:(NSArray<PESDKVideoClipCategory *> * _Nonnull)videoClips audioClips:(NSArray<PESDKAudioClipCategory *> * _Nonnull)audioClips OBJC_DESIGNATED_INITIALIZER;
/// Removes empty categories and all temporarily created assets from this asset catalog, e.g., personal stickers by the user.
- (void)removeTemporaryItems;
/// Removes all temporarily created assets from this asset catalog, e.g., personal stickers by the user.
/// \param removeEmptyCategories If <code>true</code> empty categories, e.g., sticker categories, are removed as well.
///
- (void)removeTemporaryItemsWithRemoveEmptyCategories:(BOOL)removeEmptyCategories;
/// Returns the first sticker with the given identifier, if any.
/// \param identifier The identifier of the sticker to look for.
///
///
/// returns:
/// The sticker with the given identifier or <code>nil</code>.
- (PESDKSticker * _Nullable)stickerWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first frame with the given identifier, if any.
/// \param identifier The identifier of the frame to look for.
///
///
/// returns:
/// The frame with the given identifier or <code>nil</code>.
- (PESDKFrame * _Nullable)frameWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first effect with the given identifier, if any.
/// \param identifier The identifier of the effect to look for.
///
///
/// returns:
/// The effect with the given identifier or <code>nil</code>.
- (PESDKEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first overlay with the given identifier, if any.
/// \param identifier The identifier of the overlay to look for.
///
///
/// returns:
/// The overlay with the given identifier or <code>nil</code>.
- (PESDKOverlay * _Nullable)overlayWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first font with the given identifier, if any.
/// \param identifier The identifier of the font to look for.
///
///
/// returns:
/// The font with the given identifier or <code>nil</code>.
- (PESDKFont * _Nullable)fontWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first text design with the given identifier, if any.
/// \param identifier The identifier of the text design to look for.
///
///
/// returns:
/// The text design with the given identifier or <code>nil</code>.
- (PESDKTextDesign * _Nullable)textDesignWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first video clip with the given identifier, if any.
/// \param identifier The identifier of the video clip to look for.
///
///
/// returns:
/// The video clip with the given identifier or <code>nil</code>.
- (PESDKVideoClip * _Nullable)videoClipWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first audio clip with the given identifier, if any.
/// \param identifier The identifier of the audio clip to look for.
///
///
/// returns:
/// The audio clip with the given identifier or <code>nil</code>.
- (PESDKAudioClip * _Nullable)audioClipWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIActivityIndicatorView;

/// An <code>AssetCollectionViewCell</code> is a cell that has an image view and an activity indicator in its
/// center.
SWIFT_CLASS_NAMED("AssetCollectionViewCell")
@interface PESDKAssetCollectionViewCell : UICollectionViewCell
/// An image view that shows an icon.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// An activity indicator in the center of the cell.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Configures the image view.
- (void)setupImageView;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end

@class PESDKImageAsset;
@class PESDKVideoAsset;
@class PESDKAudioAsset;
@class NSURL;

/// An <code>AssetManager</code> can be used to cache <code>UIImage</code>, <code>CIImage</code>, and <code>AVAsset</code> instances and to download and
/// cache image assets.
SWIFT_CLASS_NAMED("AssetManager")
@interface PESDKAssetManager : NSObject
/// Caches an image asset for the given identifier.
/// \param imageAsset The image asset to store in the cache or <code>nil</code> to delete an image from the
/// cache.
///
/// \param identifier The identifier to register this image asset for.
///
/// \param metadata SmartSticker metadata from which hash is calculated and used as a part of cache key.
///
- (void)setImageAsset:(PESDKImageAsset * _Nullable)imageAsset forIdentifier:(NSString * _Nonnull)identifier metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Caches an image asset for the given identifier.
/// \param imageAsset The image asset to store in the cache or <code>nil</code> to delete an image from the
/// cache.
///
/// \param identifier The identifier to register this image asset for.
///
- (void)setImageAsset:(PESDKImageAsset * _Nullable)imageAsset forIdentifier:(NSString * _Nonnull)identifier;
/// Returns the image asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the image asset.
///
/// \param metadata SmartSticker metadata from which hash is calculated and used as a part of cache key.
///
///
/// returns:
/// The cached image asset or <code>nil</code>.
- (PESDKImageAsset * _Nullable)imageAssetForIdentifier:(NSString * _Nonnull)identifier metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Returns the image asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the image asset.
///
///
/// returns:
/// The cached image asset or <code>nil</code>.
- (PESDKImageAsset * _Nullable)imageAssetForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Caches a video asset for the given identifier.
/// \param videoAsset The video asset to store in the cache or <code>nil</code> to delete a video from the
/// cache.
///
/// \param identifier The identifier to register this video asset for.
///
- (void)setVideoAsset:(PESDKVideoAsset * _Nullable)videoAsset forIdentifier:(NSString * _Nonnull)identifier;
/// Returns the video asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the video asset.
///
///
/// returns:
/// The cached video asset or <code>nil</code>.
- (PESDKVideoAsset * _Nullable)videoAssetForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Caches an audio asset for the given identifier.
/// \param audioAsset The <code>AudioAsset</code> to cache.
///
/// \param identifier The identifier to register the source for.
///
- (void)setAudioAsset:(PESDKAudioAsset * _Nullable)audioAsset forIdentifier:(NSString * _Nonnull)identifier;
/// Returns the audio asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the audio asset.
///
///
/// returns:
/// The cached audio asset or <code>nil</code>.
- (PESDKAudioAsset * _Nullable)audioAssetForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// This is called with <code>false</code> when downloading starts and again called with <code>true</code> when
/// downloading ends.
@property (nonatomic, copy) void (^ _Nullable progressClosure)(BOOL);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Retrieves a single audio source from the cache. If the audio source
/// is not in the cache, it downloads the source and returns the local source.
/// \param url The URL of the audio source.
///
/// \param identifier The identifier the source is associated with in the cache. If this is set to <code>nil</code>, the source will not be cached.
///
/// \param withLoadingIndicator Determines whether a loading indicator is shown during processing.
///
/// \param completion A completion block that is passed the audio source on success or the error on failure.
///
- (void)getAudioAt:(NSURL * _Nonnull)url for:(NSString * _Nullable)identifier withLoadingIndicator:(BOOL)withLoadingIndicator completion:(void (^ _Nonnull)(PESDKAudioAsset * _Nullable, NSError * _Nullable))completion;
/// Retrieves multiple images from the cache and decodes them in the background. If the images
/// are not in the cache, it downloads the images, decodes them and stores them in both a disk
/// cache (if the passed <code>url</code> is not a file url) and an in-memory cache.
/// \param urls A list of URLs to images.
///
/// \param completion A completion block that is passed a list of images and errors.
///
- (void)getImagesAt:(NSArray<NSURL *> * _Nonnull)urls completion:(void (^ _Nonnull)(NSDictionary<NSURL *, UIImage *> * _Nonnull, NSArray<NSError *> * _Nonnull))completion;
/// Retrieves a single image from the cache and decodes the image in the background. If the image
/// is not in the cache, it downloads the image, decodes it and stores it in both a disk cache
/// (if the passed <code>url</code> is not a file url) and an in-memory cache.
/// \param url The URL of the image.
///
/// \param completion A completion block that is passed the image on success or the error on failure.
///
- (void)getImageAt:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end

@class PESDKPhotoEditRenderer;

@interface PESDKAssetManager (SWIFT_EXTENSION(ImglyKit))
/// Retrieves and caches all the assets required to render the given <code>PhotoEditModel</code>.
/// It can be used to populate the cache before any headless rendering operation,
/// directly using <code>PhotoEditRenderer</code>.
/// important:
/// This method should finish before issuing any rendering calls, e.g. <code>PhotoEditRenderer.generateOutputImageData</code>.
/// \param renderer The renderer to use to render the model.
///
/// \param model The <code>PhotoEditModel</code> used in rendering operation.
///
/// \param configuration The <code>Configuration</code> defines the used <code>AssetCatalog</code> and <code>WeatherProvider</code>.
///
/// \param completion A block called when retrieving assets finishes. It will be called from the main queue.
///
- (void)populateWithRenderer:(PESDKPhotoEditRenderer * _Nonnull)renderer model:(PESDKPhotoEditModel * _Nonnull)model configuration:(PESDKConfiguration * _Nonnull)configuration completion:(void (^ _Nonnull)(NSDictionary<NSURL *, UIImage *> * _Nonnull, NSArray<NSError *> * _Nonnull))completion;
@end


@protocol PESDKResolvableAsset;

/// The <code>AssetResolver</code> can be used to (de-)serialize custom assets.
SWIFT_PROTOCOL_NAMED("AssetResolver")
@protocol PESDKAssetResolver
/// Deserializes a custom asset.
/// \param data The data to deserialize the asset from.
///
- (void)deserializeFrom:(NSDictionary<NSString *, NSString *> * _Nonnull)data completion:(void (^ _Nonnull)(id <PESDKResolvableAsset> _Nullable))completion;
/// Serializes a custom asset.
/// \param asset The <code>ResolvableAsset</code> that should be serialized.
///
- (NSDictionary<NSString *, NSString *> * _Nullable)serialize:(id <PESDKResolvableAsset> _Nonnull)asset SWIFT_WARN_UNUSED_RESULT;
@end


/// An <code>AudioAsset</code> object can be used together with an <code>AssetManager</code> to cache an audio source
/// object and optional audio metadata.
SWIFT_CLASS_NAMED("AudioAsset")
@interface PESDKAudioAsset : NSObject
/// The source <code>URL</code>.
@property (nonatomic, copy) NSURL * _Nullable url;
/// Creates a new audio asset with the given url.
/// \param url The source <code>URL</code>.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An <code>AudioClip</code> represents a single audio clip in an audio clip category.
SWIFT_CLASS_NAMED("AudioClip")
@interface PESDKAudioClip : NSObject
/// A unqiue string that makes the audio clip unique identifiable.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of the audio clip.
/// If <code>nil</code> the title will be fetched from the clip’s metadata if available
/// and <code>AudioClipToolControllerOptions.useMetadata</code> is set
/// to <code>true</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The artist of the audio clip.
/// If <code>nil</code> the artist will be fetched from the clip’s metadata if available
/// and <code>AudioClipToolControllerOptions.useMetadata</code> is set
/// to <code>true</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable artist;
/// The URL for the thumbnail image of the audio clip.
/// If <code>nil</code> the artwork will be fetched from the clip’s metadata if available
/// and <code>AudioClipToolControllerOptions.useMetadata</code> is set
/// to <code>true</code>. Otherwise, the thumbnail will be replaced by a placeholder image.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// The URL for the audio clip.
/// note:
/// Audio clips from remote resources can be used in the editor but
/// their use is not optimized. Remote resources should be downloaded
/// in advance and then passed to the editor as local resources.
@property (nonatomic, readonly, copy) NSURL * _Nonnull audioURL;
/// The <code>AudioResolver</code> identifier that is responsible for (de-)serializing this audio clip.
@property (nonatomic, readonly, copy) NSString * _Nullable resolver;
/// Creates a new <code>AudioClip</code> object with the given identifier and audio URL.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param identifier The title of the audio clip.
///
/// \param audioURL The URL to the underlying audio.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier audioURL:(NSURL * _Nonnull)audioURL;
/// Creates a new <code>AudioClip</code> object with the given identifier, audio URL and an asset resolver.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param identifier The title of the audio clip.
///
/// \param audioURL The URL to the underlying audio.
///
/// \param resolver The id of the asset resolver.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier audioURL:(NSURL * _Nonnull)audioURL resolver:(NSString * _Nonnull)resolver;
/// Returns the first audio clip with the given identifier if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the audio clip to look for.
///
///
/// returns:
/// The audio clip with the given identifier or <code>nil</code>.
+ (PESDKAudioClip * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.audioClip(withIdentifier:)` of your `Configuration` object instead.");
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// An asset that can be resolved by an <code>AssetResolver.</code>
SWIFT_PROTOCOL_NAMED("ResolvableAsset")
@protocol PESDKResolvableAsset
/// The identifier of the corresponding <code>AssetResolver</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable resolver;
@end


@interface PESDKAudioClip (SWIFT_EXTENSION(ImglyKit)) <PESDKResolvableAsset>
@end



/// An <code>AudioClipCategory</code> represents one category of audio clips.
SWIFT_CLASS_NAMED("AudioClipCategory")
@interface PESDKAudioClipCategory : NSObject
/// The identifier of this category.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this category, e.g. ‘Toy Collection’.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The URL of the category’s preview image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The audio clips associated with this category.
@property (nonatomic, readonly, copy) NSArray<PESDKAudioClip *> * _Nonnull audioClips;
/// The pool of audio clips that is available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKAudioClipCategory *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.audioClips` of your `Configuration` object instead.");)
+ (NSArray<PESDKAudioClipCategory *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKAudioClipCategory *> * _Nonnull)newValue;
/// Creates the default audio clip categories that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKAudioClipCategory *> * _Nonnull defaultItems;)
+ (NSArray<PESDKAudioClipCategory *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultItems:(NSArray<PESDKAudioClipCategory *> * _Nonnull)value;
/// Creates a audio clip category with audio clips, a title and an optional image url.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param audioClips The audio clips to associate with this category.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips;
/// Creates a audio clip category with an identifier, audio clips, a title and an optional image url.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param audioClips The audio clips to associate with this category.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Handles the display of <code>AudioClipCategoryMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS("_TtC8ImglyKit38AudioClipCategoryListSectionController")
@interface AudioClipCategoryListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>AudioClipToolController</code>.
SWIFT_CLASS_NAMED("AudioClipCategoryMenuItem")
@interface PESDKAudioClipCategoryMenuItem : NSObject <PESDKMenuItem>
/// The <code>AudioClipCategory</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKAudioClipCategory * _Nonnull audioClipCategory;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the icon of the menu item.
@property (nonatomic, readonly, copy) NSURL * _Nullable iconURL;
/// Creates a new audio clip category menu item for the given audio clip category.
/// \param audioClipCategory The audio clip category that this menu item represents.
///
- (nonnull instancetype)initWithAudioClipCategory:(PESDKAudioClipCategory * _Nonnull)audioClipCategory;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITableView;
@class PESDKGradientView;
@class UIVisualEffectView;
@class PESDKAudioSearchBar;
@class PESDKAudioErrorView;
@class PESDKAudioEmptyView;
@protocol PESDKAudioProvider;
@protocol PESDKAudioClipSelectionControllerDelegate;
@class PESDKAudioClipTableViewCell;

/// A <code>AudioClipSelectionController</code> displays multiple <code>AudioClip</code>s and allows selection of an audio clip.
SWIFT_CLASS_NAMED("AudioClipSelectionController")
@interface PESDKAudioClipSelectionController : PESDKViewController
/// The table view that displays the <code>AudioClip</code>s.
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
/// The gradient view that is added to the table view for a fade effect.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull gradientView;
/// The visual effect view in the background of the table view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull visualEffectView;
/// The search bar view enabled when using <code>AudioProvider</code>.
@property (nonatomic, readonly, strong) PESDKAudioSearchBar * _Nonnull searchBar;
/// The error view used with <code>AudioProvider</code>.
@property (nonatomic, readonly, strong) PESDKAudioErrorView * _Nonnull errorView;
/// The empty collection view used with <code>AudioProvider</code>.
@property (nonatomic, readonly, strong) PESDKAudioEmptyView * _Nonnull emptyView;
/// Calls the current error handler.
- (void)handleError;
/// The async audio provider.
@property (nonatomic, strong) id <PESDKAudioProvider> _Nullable audioProvider;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AudioClip</code>s which should be displayed.
@property (nonatomic, copy) NSArray<PESDKAudioClip *> * _Nonnull audioClips;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKAudioClipSelectionControllerDelegate> _Nullable delegate;
/// A closure to configure the cell of each audio clip.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKAudioClipTableViewCell * _Nonnull, PESDKAudioClip * _Nonnull);
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKAudioClipTableViewCell) _Nonnull tableViewCellType;)
+ (SWIFT_METATYPE(PESDKAudioClipTableViewCell) _Nonnull)tableViewCellType SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSIndexPath;

@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UITableViewDataSourcePrefetching>
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView prefetchRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end

@class UITableViewCell;

@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UITableViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UISearchBar;

@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UISearchBarDelegate>
/// :nodoc:
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// :nodoc:
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UITableViewDelegate>
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView;
@end


/// The <code>AudioClipSelectionControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>AudioClipSelectionController</code>.
SWIFT_PROTOCOL_NAMED("AudioClipSelectionControllerDelegate")
@protocol PESDKAudioClipSelectionControllerDelegate
/// Tells the delegate that the given audio clip was selected.
/// \param audioClipSelectionController The audio clip selection controller where the audio clip has been selected
/// in.
///
/// \param audioClip The audio clip that was selected.
///
- (void)audioClipSelectionController:(PESDKAudioClipSelectionController * _Nonnull)audioClipSelectionController didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end

@class UIFont;
@class UILabel;

/// A <code>AudioClipTableViewCell</code> is a cell used to display an <code>AudioClip</code>.
SWIFT_CLASS_NAMED("AudioClipTableViewCell")
@interface PESDKAudioClipTableViewCell : UITableViewCell
/// The <code>AudioClip</code> contained by this table view cell.
@property (nonatomic, readonly, strong) PESDKAudioClip * _Nullable audioClip;
/// The font of the title label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// The font of the artist label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull artistFont;
/// The font of the duration label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull durationFont;
/// Indicates whether the <code>AudioClip</code> represented by this cell is
/// currently being played.
@property (nonatomic, readonly) BOOL isPlaying;
/// An image view that shows the preview image of the audio clip.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull artworkImageView;
/// An image view that shows the play/pause icon.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull playImageView;
/// A label that shows the title of the audio clip.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// A label that shows the artist of the audio clip.
@property (nonatomic, readonly, strong) UILabel * _Nonnull artistLabel;
/// A label that shows the duration of the audio clip.
@property (nonatomic, readonly, strong) UILabel * _Nonnull durationLabel;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class UITraitCollection;

/// The tool controller to add a <code>AudioClip</code> to the composition. It contains a menu with the available
/// <code>AudioClipCategory</code>s and a <code>AudioClipSelectionController</code> to display the available audio clips in that
/// category.
SWIFT_CLASS("_TtC8ImglyKit23AudioClipToolController")
@interface AudioClipToolController : PESDKMenuToolController
/// The contained <code>AudioClipSelectionController</code>.
@property (nonatomic, readonly, strong) PESDKAudioClipSelectionController * _Nonnull audioClipSelectionController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end


@interface AudioClipToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioClipSelectionControllerDelegate>
/// :nodoc:
- (void)audioClipSelectionController:(PESDKAudioClipSelectionController * _Nonnull)audioClipSelectionController didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end

@protocol PESDKAudioCollection;

/// The <code>AudioCollectionDelegate</code> protocol defines methods to handle audio clips provided by the <code>AudioCollection</code>.
SWIFT_PROTOCOL_NAMED("AudioCollectionDelegate")
@protocol PESDKAudioCollectionDelegate
/// Tells the delegate that an <code>AudioClip</code> has been selected.
/// \param audioCollection The <code>AudioCollection</code> in which the clip has been selected.
///
/// \param audioClip The <code>AudioClip</code> that has been selected.
///
- (void)audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end


@interface AudioClipToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioCollectionDelegate>
/// :nodoc:
- (void)audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end


@class PESDKAudioClipToolControllerOptionsBuilder;

/// Options for configuring an <code>AudioClipToolController</code>.
SWIFT_CLASS_NAMED("AudioClipToolControllerOptions")
@interface PESDKAudioClipToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the audio clip category buttons. The closure is called for
/// each audio clip category button and has the button and its corresponding audio clip category as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable audioClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKAudioClipCategory * _Nonnull);
/// This closure allows further configuration of the audio clip buttons. The closure is called for
/// each audio clip button and has the button and its corresponding audio clip as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable audioClipButtonConfigurationClosure)(PESDKAudioClipTableViewCell * _Nonnull, PESDKAudioClip * _Nonnull);
/// The index of the audio clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic, readonly) NSInteger defaultAudioClipCategoryIndex;
/// Determines whether the artwork, artist and duration should be fetched from the
/// metadata of an audio file in case these information are missing from the corresponding
/// <code>AudioClip</code>.
/// Default is set to <code>true</code>.
@property (nonatomic, readonly) BOOL useMetadata;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>AudioClipToolControllerOptionsBuilder</code> using the given builder.
/// \param builder An instance of <code>AudioClipToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKAudioClipToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>AudioClipToolControllerOptionsBuilder</code> for <code>AudioClipToolControllerOptions</code>.
SWIFT_CLASS_NAMED("AudioClipToolControllerOptionsBuilder")
@interface PESDKAudioClipToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the audio clip category buttons. The closure is called for
/// each audio clip category button and has the button and its corresponding audio clip category as parameters.
@property (nonatomic, copy) void (^ _Nullable audioClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKAudioClipCategory * _Nonnull);
/// This closure allows further configuration of the audio clip buttons. The closure is called for
/// each audio clip button and has the button and its corresponding audio clip as parameters.
@property (nonatomic, copy) void (^ _Nullable audioClipButtonConfigurationClosure)(PESDKAudioClipTableViewCell * _Nonnull, PESDKAudioClip * _Nonnull);
/// The index of the audio clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic) NSInteger defaultAudioClipCategoryIndex;
/// Determines whether the artwork, artist and duration should be fetched from the
/// metadata of an audio file in case these information are missing from the corresponding
/// <code>AudioClip</code>.
/// Default is set to <code>true</code>.
@property (nonatomic) BOOL useMetadata;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>AudioClipToolControllerOptions</code> initialized with the given options.
/// \param options A <code>AudioClipToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKAudioClipToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The model that is used in <code>AudioClipSelectionController</code>.
SWIFT_CLASS_NAMED("AudioClipViewModel")
@interface PESDKAudioClipViewModel : NSObject
/// The <code>AudioClip</code> that this model represents.
@property (nonatomic, readonly, strong) PESDKAudioClip * _Nonnull audioClip;
/// Creates a new audio clip view model for the given audio clip.
/// \param audioClip The audio clip that this model represents.
///
- (nonnull instancetype)initWithAudioClip:(PESDKAudioClip * _Nonnull)audioClip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Types conforming to <code>AudioCollection</code> can provide a custom <code>UIViewController</code> instance for selecting audio clips.
SWIFT_PROTOCOL_NAMED("AudioCollection")
@protocol PESDKAudioCollection
/// The delegate object that handles adding audio clips to the video.
@property (nonatomic, weak) id <PESDKAudioCollectionDelegate> _Nullable delegate;
/// The view controller responsible for presenting and loading the audio clips.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull viewController;
@end


/// An <code>AudioCollectionCategory</code> represents an empty category with a custom <code>AudioCollection</code>.
SWIFT_CLASS_NAMED("AudioCollectionCategory")
@interface PESDKAudioCollectionCategory : PESDKAudioClipCategory
/// The <code>AudioCollection</code> associated with this audio category.
@property (nonatomic, readonly, strong) id <PESDKAudioCollection> _Nonnull audioCollection;
/// Creates an audio category with with an <code>AudioCollection</code> object.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param audioCollection The <code>AudioCollection</code> that handles the loading and selection of the audio clips.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection;
/// Creates an audio category with with an <code>AudioCollection</code> object.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param audioCollection The <code>AudioCollection</code> that handles the loading and selection of the audio clips.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips SWIFT_UNAVAILABLE;
@end



/// An <code>EmptyView</code> is used as a placeholder for empty search results from asset providers.
SWIFT_CLASS_NAMED("EmptyView")
@interface PESDKEmptyView : UIStackView
/// The empty results icon.
@property (nonatomic, strong) UIImageView * _Nonnull icon;
/// The secondary label.
@property (nonatomic, strong) UILabel * _Nonnull label;
/// The search term that triggered the placeholder.
@property (nonatomic, copy) NSString * _Nonnull query;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>AudioEmptyView</code> is used as a placeholder for empty search results from an <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioEmptyView")
@interface PESDKAudioEmptyView : PESDKEmptyView
/// The search term that triggered the placeholder.
@property (nonatomic, copy) NSString * _Nonnull query;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An<code>ErrorView</code> is used to indicate download errors in asset providers.
SWIFT_CLASS_NAMED("ErrorView")
@interface PESDKErrorView : UIStackView
/// The main action button.
@property (nonatomic, strong) PESDKButton * _Nonnull retryButton;
/// The unavailable icon.
@property (nonatomic, strong) UIImageView * _Nonnull icon;
/// The secondary label.
@property (nonatomic, strong) UILabel * _Nonnull label;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>AudioErrorView</code> is used to indicate download errors in <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioErrorView")
@interface PESDKAudioErrorView : PESDKErrorView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>AudioToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, AudioOverlayAction, open) {
/// Delete the overlay audio clip of a video.
  AudioOverlayActionDelete = 0,
/// Toggle play/pause for video preview.
  AudioOverlayActionPlayPause = 1,
};


/// An <code>AudioProviderCategory</code> represents an empty category with a custom <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioProviderCategory")
@interface PESDKAudioProviderCategory : PESDKAudioClipCategory
/// The <code>AudioProvider</code> associated with this audio category.
/// This property should only be used if you are using Objective-C.
@property (nonatomic, readonly, strong) id <PESDKAudioProvider> _Nullable audioProvider;
/// Creates an audio category with with an <code>AudioProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param _objCAudioProvider The <code>_ObjCAudioProvider</code> object responsible for loading local/remote audio clips.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioProvider:(id <PESDKAudioProvider> _Nonnull)_objCAudioProvider;
/// Creates an audio category with with an <code>AudioProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param _objCAudioProvider The <code>_ObjCAudioProvider</code> object responsible for loading local/remote audio clips.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioProvider:(id <PESDKAudioProvider> _Nonnull)_objCAudioProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips SWIFT_UNAVAILABLE;
@end


/// Type representing the result of an audio provider request.
SWIFT_CLASS_NAMED("AudioProviderResult")
@interface PESDKAudioProviderResult : NSObject
/// An array of <code>AudioClip</code> models.
@property (nonatomic, readonly, copy) NSArray<PESDKAudioClip *> * _Nonnull audioClips;
/// A flag indicating whether more content is available for infinite scrolling.
@property (nonatomic, readonly) BOOL hasMore;
/// Creates a new audio result.
/// \param audioClips An array of <code>AudioClip</code> models.
///
/// \param hasMore A flag indicating that more content is available for endless scrolling.
///
- (nonnull instancetype)initWithAudioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips hasMore:(BOOL)hasMore OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A  <code>SearchBar</code> implementation used across ImglyKit with additional customizations.
SWIFT_CLASS_NAMED("SearchBar")
@interface PESDKSearchBar : UISearchBar
/// The text color of the search field.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull fieldTextColor;
/// The background color of the search field.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull fieldBackgroundColor;
/// The text color of the placeholder, tint color of the activity indicator, search and clear icons.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull fieldPlaceholderColor;
/// The font of the search text field.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nullable fieldFont;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>AudioSeachBar</code> is displayed above the audio clip table view when using an <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioSeachBar")
@interface PESDKAudioSearchBar : PESDKSearchBar
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKProxyZoomController;
@class PESDKMenuAccessoryContainerView;
@class PESDKTooltipSlider;
@class PESDKPrimaryLabel;
@class PESDKAudioTrimView;

/// The tool controller to position and configure the overlay audio track in relation to the video.
SWIFT_CLASS_NAMED("AudioToolController")
@interface PESDKAudioToolController : PESDKPhotoEditToolController
/// The contained <code>ProxyZoomZontroller</code>.
@property (nonatomic, readonly, strong) PESDKProxyZoomController * _Nonnull proxyZoomController;
/// The container view of the audio mix slider.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull sliderContainerView;
/// The container view of the audio trim view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull trimViewContainerView;
/// The container view of the audio track labels.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull labelContainerView;
/// The slider in this view controller.
@property (nonatomic, readonly, strong) PESDKTooltipSlider * _Nonnull slider;
/// The label that displays the start time of the audio track.
@property (nonatomic, readonly, strong) PESDKPrimaryLabel * _Nonnull startTimeLabel;
/// The label that displays the name of the audio track.
@property (nonatomic, readonly, strong) PESDKPrimaryLabel * _Nonnull trackNameLabel;
/// The audio trim view.
@property (nonatomic, readonly, strong) PESDKAudioTrimView * _Nonnull trimView;
/// The height of the trim container view. Default is <code>72</code>.
@property (nonatomic) CGFloat trimViewHeight;
/// :nodoc:
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// The delete  button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable deleteButton;
/// The play/pause overlay button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseButton;
/// An array of all overlay buttons that are displayed in the controller.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end



/// The <code>AudioTrimViewDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>AudioTrimView</code>.
SWIFT_PROTOCOL_NAMED("AudioTrimViewDelegate")
@protocol PESDKAudioTrimViewDelegate
/// Called when the user started scrolling the audio track.
/// \param audioTrimView The audio trim view that this event occurred in.
///
- (void)audioTrimViewDidStartScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
/// Called when the user scrolled the audio track.
/// \param audioTrimView The audio trim view that this event occurred in.
///
/// \param startTime The selected start time of the audio track.
///
- (void)audioTrimView:(PESDKAudioTrimView * _Nonnull)audioTrimView didScrollAudioTrackTo:(CMTime)startTime;
/// Called when the user stopped scrolling the audio track.
/// \param audioTrimView The audio trim view that this event occurred in.
///
- (void)audioTrimViewDidStopScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
@end


@interface PESDKAudioToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioTrimViewDelegate>
/// :nodoc:
- (void)audioTrimViewDidStartScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
/// :nodoc:
- (void)audioTrimView:(PESDKAudioTrimView * _Nonnull)audioTrimView didScrollAudioTrackTo:(CMTime)startTime;
/// :nodoc:
- (void)audioTrimViewDidStopScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
@end


/// The <code>ProxyZoomControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>ProxyZoomController</code>.
SWIFT_PROTOCOL_NAMED("ProxyZoomControllerDelegate")
@protocol PESDKProxyZoomControllerDelegate
/// Asks the delegate for the scroll view to which zoom events of the proxy zoom controller
/// should be forwarded.
/// \param proxyZoomController The proxy zoom controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// Called when scrolling occurred in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where scrolling occurred.
///
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// Called when zooming will begin in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where zooming will begin.
///
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// Called when zooming occurred in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where zooming occurred.
///
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// Called when zooming did end in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where zooming did end.
///
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end


@interface PESDKAudioToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKProxyZoomControllerDelegate>
/// :nodoc:
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end

@class PESDKAudioToolControllerOptionsBuilder;

/// Options for configuring an <code>AudioToolController</code>.
SWIFT_CLASS_NAMED("AudioToolControllerOptions")
@interface PESDKAudioToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AudioOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable audioOverlayActionSelectedClosure)(enum AudioOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>AudioToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>AudioToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKAudioToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>AudioToolControllerOptionsBuilder</code> for <code>AudioToolControllerOptions</code>.
SWIFT_CLASS_NAMED("AudioToolControllerOptionsBuilder")
@interface PESDKAudioToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AudioOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable audioOverlayActionSelectedClosure)(enum AudioOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>AudioToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A n<code>AudioToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKAudioToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKAudioToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AudioOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedAudioOverlayActions</code> with the corresponding <code>AudioOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAudioOverlayActions;
@end

@class AVAsset;

/// A view that displays the waveform and playback position of an audio track to trim its duration by defining its start position
/// in relation to a target timeline, e.g., the duration of a video where this audio track should be added as overlay audio.
SWIFT_CLASS_NAMED("AudioTrimView")
@interface PESDKAudioTrimView : UIView
/// The delegate object for this view.
@property (nonatomic, weak) id <PESDKAudioTrimViewDelegate> _Nullable delegate;
/// The asset that contains the audio track that should be trimmed.
@property (nonatomic, strong) AVAsset * _Nullable asset;
/// The current selected start time of the audio track. A negative value means that the audio track should start after the beginning
/// of the target timeline.
@property (nonatomic) CMTime audioStartTime;
/// The current time of the target timeline to highlight the playback progress.
@property (nonatomic) CMTime timelineTime;
/// The duration of the target timeline where the audio track should be positioned in.
@property (nonatomic) CMTime timelineDuration;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (void)layoutSubviews;
@end


@interface PESDKAudioTrimView (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/// Represents the type of blend that should be used for several operations such as overlay.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKBlendMode, "BlendMode", open) {
/// Standard alpha blending should be used.
  PESDKBlendModeNormal = 0,
/// Overlay blending should be used.
  PESDKBlendModeOverlay = 1,
/// Soft-light blending should be used.
  PESDKBlendModeSoftLight = 2,
/// Hard-light blending should be used.
  PESDKBlendModeHardLight = 3,
/// Multiply blending should be used.
  PESDKBlendModeMultiply = 4,
/// Darken blending should be used.
  PESDKBlendModeDarken = 5,
/// Color-burn blending should be used.
  PESDKBlendModeColorBurn = 6,
/// Screen blending should be used.
  PESDKBlendModeScreen = 7,
/// Lighten blending should be used.
  PESDKBlendModeLighten = 8,
};


/// A <code>BlendModeCollectionViewCell</code> is being used within the <code>OverlayEditController</code> to display
/// the currently selected blend mode.
SWIFT_CLASS_NAMED("BlendModeCollectionViewCell")
@interface PESDKBlendModeCollectionViewCell : UICollectionViewCell
/// The font of the label in unselected state.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The font of the label in selected state.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull selectedFont;
/// The label that displays the blend mode’s name.
@property (nonatomic, readonly, strong) UILabel * _Nonnull blendModeLabel;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end


/// The menu item that is used in <code>OverlayEditController</code>.
SWIFT_CLASS_NAMED("BlendModeMenuItem")
@interface PESDKBlendModeMenuItem : NSObject
/// The <code>BlendMode</code> that this menu item represents.
@property (nonatomic, readonly) enum PESDKBlendMode blendMode;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Creates a new blend mode menu item for the given blend mode.
/// \param blendMode The blend mode that this menu item represents.
///
- (nonnull instancetype)initWithBlendMode:(enum PESDKBlendMode)blendMode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This is used to set the quality of the blur
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKBlurQuality, "BlurQuality", open) {
/// Low is used during preview.
  PESDKBlurQualityLow = 0,
/// High is used during export.
  PESDKBlurQualityHigh = 1,
};


/// This class represents a gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("FocusGradientView")
@interface PESDKFocusGradientView : UIControl
/// The center point between both control points.
@property (nonatomic, readonly) CGPoint centerPoint;
/// The absolute fade width value. This value is between 0 and 100.
@property (nonatomic) CGFloat fadeWidth;
/// The normalized fade width.
@property (nonatomic, readonly) CGFloat normalizedFadeWidth;
/// The color of the gradient view.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The shadow color of the gradient view.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)accessibilityIncrement;
/// :nodoc:
- (void)accessibilityDecrement;
@end


/// This class represents a rectangle gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("BoxGradientView")
@interface PESDKBoxGradientView : PESDKFocusGradientView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// :nodoc:
- (void)layoutSubviews;
@end


/// A <code>Brush</code> holds all information needed to render a stroke.
SWIFT_CLASS_NAMED("Brush")
@interface PESDKBrush : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKStampGenerator;

/// The <code>GeneratorDelegate</code> protocol defines methods that allow you to respond to changes that are made to a generator.
SWIFT_PROTOCOL_NAMED("GeneratorDelegate")
@protocol PESDKGeneratorDelegate
/// Called when a generator changes any property.
/// \param generator The generator that was changed.
///
- (void)generatorDidChange:(PESDKStampGenerator * _Nonnull)generator;
@end


@interface PESDKBrush (SWIFT_EXTENSION(ImglyKit)) <PESDKGeneratorDelegate>
/// :nodoc:
- (void)generatorDidChange:(PESDKStampGenerator * _Nonnull)generator;
@end

@class PESDKColor;
@class PESDKColorCollectionViewCell;
@class PESDKColorToolControllerOptionsBuilder;

/// Options for configuring a <code>ColorToolController</code>.
SWIFT_CLASS_NAMED("ColorToolControllerOptions")
@interface PESDKColorToolControllerOptions : PESDKToolControllerOptions
/// An array of colors to present in the color tool.
@property (nonatomic, readonly, copy) NSArray<PESDKColor *> * _Nonnull availableColors;
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding color and color name as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable colorActionButtonConfigurationClosure)(PESDKColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/// This closure is called every time the user selects an action
@property (nonatomic, readonly, copy) void (^ _Nullable colorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/// Creates a newly allocated instance of <code>ColorToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>ColorToolControllerOptions</code> using the given builder.
/// \param builder A <code>ColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end

@class PESDKBrushColorToolControllerOptionsBuilder;

/// Options for configuring a <code>BrushColorToolController</code>.
SWIFT_CLASS_NAMED("BrushColorToolControllerOptions")
@interface PESDKBrushColorToolControllerOptions : PESDKColorToolControllerOptions
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>BrushColorToolControllerOptions</code> using the given builder.
/// \param brushBuilder A <code>BrushColorToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBrushBuilder:(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull)brushBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>ColorToolControllerOptionsBuilder</code> for <code>ColorToolControllerOptions</code>.
SWIFT_CLASS_NAMED("ColorToolControllerOptionsBuilder")
@interface PESDKColorToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// An array of colors to present in the color tool.
@property (nonatomic, copy) NSArray<PESDKColor *> * _Nonnull availableColors;
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding color and color name as parameters.
@property (nonatomic, copy) void (^ _Nullable colorActionButtonConfigurationClosure)(PESDKColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/// This closure is called every time the user selects an action
@property (nonatomic, copy) void (^ _Nullable colorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>ColorToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>ColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The default <code>BrushColorToolControllerOptionsBuilder</code> for <code>BrushColorToolControllerOptions</code>.
SWIFT_CLASS_NAMED("BrushColorToolControllerOptionsBuilder")
@interface PESDKBrushColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>BrushColorToolControllerOptionsBuilder</code> initialized with the given options.
/// \param brushOptions A <code>BrushColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithBrushOptions:(PESDKBrushColorToolControllerOptions * _Nonnull)brushOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

enum BrushTool : NSInteger;
@protocol PESDKBrushEditControllerDelegate;
@class PESDKBrushPreviewView;

/// A <code>BrushEditController</code> contains a <code>SliderEditController</code> and can be used to draw in a
/// <code>CanvasView</code>.
SWIFT_CLASS_NAMED("BrushEditController")
@interface PESDKBrushEditController : PESDKViewController
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>BrushTool</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum BrushTool);
/// The object that acts as a delegate.
@property (nonatomic, weak) id <PESDKBrushEditControllerDelegate> _Nullable delegate;
/// The brush preview view that previews the brush when changing any properties of it.
@property (nonatomic, readonly, strong) PESDKBrushPreviewView * _Nonnull brushPreviewView;
/// The color of the brush.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The size of the brush.
@property (nonatomic) CGFloat size;
/// The hardness of the brush.
@property (nonatomic) CGFloat hardness;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKBrushEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKBrushEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@interface PESDKBrushEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


@class PESDKSpriteViewController;

/// The <code>BrushEditControllerDelegate</code> defines methods that allow you to respond to message from
/// the <code>BrushEditController</code>.
SWIFT_PROTOCOL_NAMED("BrushEditControllerDelegate")
@protocol PESDKBrushEditControllerDelegate
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param brushEditController The brush edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param brushEditController The brush edit controller that changed the photo edit model.
///
- (void)brushEditControllerPhotoEditModelDidChange:(PESDKBrushEditController * _Nonnull)brushEditController;
/// Asks the delegate for the scroll view to which zoom events of the brush edit controller should
/// be forwarded.
/// \param brushEditController The brush edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)brushEditControllerTargetScrollView:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the <code>SpriteViewController</code>.
/// \param brushEditController The brush edit controller asking for the sprite view controller.
///
///
/// returns:
/// An instance of <code>SpriteViewController</code>.
- (PESDKSpriteViewController * _Nullable)brushEditControllerSpriteViewController:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the brush size was updated.
/// \param brushEditController The brush edit controller that updated the brush size.
///
/// \param size The new size of the brush.
///
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToSize:(CGFloat)size;
/// Tells the delegate that the brush hardness was updated.
/// \param brushEditController The brush edit controller that updated the brush hardness.
///
/// \param hardness The new hardness of the brush.
///
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToHardness:(CGFloat)hardness;
/// Tells the delegate that the slider contained in the brush edit controller did start sliding.
/// \param brushEditController The brush edit controller where sliding started.
///
- (void)brushEditControllerDidStartSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
/// Tells the delegate that the slider contained in the brush edit controller did end sliding.
/// \param brushEditController The brush edit controller where sliding ended.
///
- (void)brushEditControllerDidEndSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
@end


/// Handles the display of <code>BrushMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("BrushListSectionController")
@interface PESDKBrushListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>BrushToolController</code>
SWIFT_CLASS_NAMED("BrushMenuItem")
@interface PESDKBrushMenuItem : NSObject <PESDKMenuItem>
/// The <code>BrushTool</code> that this menu item represents.
@property (nonatomic, readonly) enum BrushTool brushTool;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new brush menu item for the given brush tool.
/// \param brushTool The brush tool that this menu item represents.
///
- (nonnull instancetype)initWithBrushTool:(enum BrushTool)brushTool icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The overlay actions that can be used in an instance of <code>BrushToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, BrushOverlayAction, open) {
/// Undo the latest stroke.
  BrushOverlayActionUndo = 0,
/// Redo the latest stroke.
  BrushOverlayActionRedo = 1,
/// Delete the drawing.
  BrushOverlayActionDelete = 2,
/// Bring the drawing to the front.
  BrushOverlayActionBringToFront = 3,
};

@class UIVisualEffect;

/// A <code>BrushPreviewView</code> displays a preview of a styled brush.
SWIFT_CLASS_NAMED("BrushPreviewView")
@interface PESDKBrushPreviewView : UIVisualEffectView
/// The image view where the brush preview is displayed in.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The color of the brush.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The size of the brush.
@property (nonatomic) CGFloat width;
/// The hardness of the brush.
@property (nonatomic) CGFloat hardness;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
- (nonnull instancetype)initWithEffect:(UIVisualEffect * _Nullable)effect SWIFT_UNAVAILABLE;
@end

/// The tools that can be used in an instance of <code>BrushToolController</code>.
typedef SWIFT_ENUM(NSInteger, BrushTool, open) {
/// Change the color of the brush.
  BrushToolColor = 0,
/// Change the size of the brush.
  BrushToolSize = 1,
/// Change the hardness of the brush.
  BrushToolHardness = 2,
};


/// A <code>BrushToolController</code> is reponsible for displaying the UI to draw a painting on top of an image.
SWIFT_CLASS_NAMED("BrushToolController")
@interface PESDKBrushToolController : PESDKMenuToolController <PESDKBrushEditControllerDelegate>
/// The brush edit controller that is associated with this tool controller
@property (nonatomic, readonly, strong) PESDKBrushEditController * _Nonnull brushEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_willBecomeActiveTool;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)brushEditControllerPhotoEditModelDidChange:(PESDKBrushEditController * _Nonnull)brushEditController;
/// :nodoc:
- (UIScrollView * _Nullable)brushEditControllerTargetScrollView:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)brushEditControllerSpriteViewController:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToSize:(CGFloat)size;
/// :nodoc:
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToHardness:(CGFloat)hardness;
/// :nodoc:
- (void)brushEditControllerDidStartSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
/// :nodoc:
- (void)brushEditControllerDidEndSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
/// The undo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
/// An array that contains all overlay buttons (including <code>undoButton</code> and <code>redoButton</code>)
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end


@class PESDKBrushToolControllerOptionsBuilder;

/// Options for configuring an <code>BrushToolController</code>.
SWIFT_CLASS_NAMED("BrushToolControllerOptions")
@interface PESDKBrushToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the brush tool buttons. The closure is called for
/// each brush tool button and has the button and its corresponding brush tool as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable brushToolButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum BrushTool);
/// This closure is called every time the user selects a tool.
@property (nonatomic, readonly, copy) void (^ _Nullable brushToolSelectedClosure)(enum BrushTool);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>BrushTool</code>
/// will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum BrushTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum BrushOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable brushActionSelectedClosure)(enum BrushOverlayAction);
/// The minimum hardness factor a brush can have.
@property (nonatomic, readonly) CGFloat minimumBrushHardness;
/// The maximum hardness factor a brush can have.
@property (nonatomic, readonly) CGFloat maximumBrushHardness;
/// The default hardness factor a brush has.
@property (nonatomic, readonly) CGFloat defaultBrushHardness;
/// The default color a brush has.
@property (nonatomic, readonly, strong) UIColor * _Nonnull defaultBrushColor;
/// <code>false</code> if the opacity of the brush should vary by the size of the brush, <code>true</code> otherwise.
/// Default is <code>false</code>.
@property (nonatomic, readonly) BOOL usesUniformHardness;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>BrushToolControllerOptions</code> using the given builder.
/// \param builder A <code>BrushToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKBrushToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>BrushToolControllerOptionsBuilder</code> for <code>BrushToolControllerOptions</code>.
SWIFT_CLASS_NAMED("BrushToolControllerOptionsBuilder")
@interface PESDKBrushToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the brush tool buttons. The closure is called for
/// each brush tool button and has the button and its corresponding brush tool as parameters.
@property (nonatomic, copy) void (^ _Nullable brushToolButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum BrushTool);
/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable brushToolSelectedClosure)(enum BrushTool);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>BrushTool</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum BrushTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum BrushOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable brushActionSelectedClosure)(enum BrushOverlayAction);
/// The minimum hardness factor a brush can have.
@property (nonatomic) CGFloat minimumBrushHardness;
/// The maximum hardness factor a brush can have.
@property (nonatomic) CGFloat maximumBrushHardness;
/// The default hardness factor a brush has.
@property (nonatomic) CGFloat defaultBrushHardness;
/// The default color a brush has.
@property (nonatomic, strong) UIColor * _Nonnull defaultBrushColor;
/// <code>false</code> if the hardness of the brush should vary by the size of the brush, <code>true</code> otherwise.
/// Default is <code>false</code>.
@property (nonatomic) BOOL usesUniformHardness;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>BrushToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>BrushToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKBrushToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

@class PESDKFloatValue;

@interface PESDKBrushToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>BrushTool</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedBrushTools</code> with the corresponding <code>BrushTool</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBrushTools;
/// An array of <code>BrushOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedBrushOverlayActions</code> with the corresponding <code>BrushOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBrushOverlayActions;
/// The minimum size that a brush can have. This can either be a value that’s relative to the
/// smaller side of the photo that the user is editing or an absolute value in pixels.
/// Default is <code>.absolute(1)</code>.
@property (nonatomic, strong) PESDKFloatValue * _Nonnull minimumBrushSize;
/// The maximum size that a brush can have. This can either be a value that’s relative to the
/// smaller side of the photo that the user is editing or an absolute value in pixels.
/// Default is <code>.relative(0.125)</code>.
@property (nonatomic, strong) PESDKFloatValue * _Nonnull maximumBrushSize;
/// The default size that a brush has. This can either be a value that’s relative to the smaller
/// side of the photo that the user is editing or an absolute value in pixels.
/// Default is <code>.relative(0.05)</code>.
@property (nonatomic, strong) PESDKFloatValue * _Nonnull defaultBrushSize;
@end



@interface NSBundle (SWIFT_EXTENSION(ImglyKit))
/// The bundle that contains all assets of ImglyKit.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull imglyBundle SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_resourceBundle");)
+ (NSBundle * _Nonnull)imglyBundle SWIFT_WARN_UNUSED_RESULT;
/// The bundle that contains all assets of ImglyKit.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull imgly_resourceBundle;)
+ (NSBundle * _Nonnull)imgly_resourceBundle SWIFT_WARN_UNUSED_RESULT;
@end

@class UIEvent;

/// A <code>Button</code> is a subclass of <code>UIButton</code>, which supports running a closure for a given control event
/// and has the ability to specify a touch area inset as well as receive appearance proxy calls
/// to change its font.
SWIFT_CLASS_NAMED("Button")
@interface PESDKButton : UIButton
/// The font of the title label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nullable titleFont;
/// Associates a closure with the control.
/// \param actionClosure The closure to associate with the control.
///
/// \param controlEvents The control-specific events for which the closure is called.
///
- (void)setActionClosure:(void (^ _Nullable)(id _Nonnull))actionClosure for:(UIControlEvents)controlEvents;
/// Associates a closure with the control for the <code>.touchUpInside</code> control event.
@property (nonatomic, copy) void (^ _Nullable actionClosure)(id _Nonnull);
/// The insets to add to the touch target.
@property (nonatomic) UIEdgeInsets touchAreaInsets;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tintColorDidChange;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@class CLLocationManager;
enum RecordingMode : NSInteger;
@class NSError;
@class AVAssetWriter;
@class NSData;

/// The <code>CameraController</code> class provides functions for several camera related tasks,
/// including setup, flash control, and such.
SWIFT_CLASS_NAMED("CameraController")
@interface PESDKCameraController : NSObject
/// When this closure is called, the SDK has determined that location access has not been granted
/// to the host app yet. Within this closure you should then request appropriate permissions from
/// the passed in <code>CLLocationManager</code> object. Location access is used to tag photos with the
/// location where they are taken.
/// attention:
/// Starting Spring 2019, all apps submitted to the App Store that access user data
/// are required to include a purpose string as soon as location permissions requests appear
/// somewhere in the binary. Since we do not want to force developers integrating the SDK into
/// their app to include a purpose string even with location tagging disabled, this closure was
/// introduced, so that developers can decide for themselves if it is appropriate to request
/// location access. Simply set this property like this:
/// \code
/// cameraController.locationAccessRequestClosure = { locationManager in
///   locationManager.requestWhenInUseAuthorization()
/// }
///
/// \endcodenote:
/// When this camera controller was instantiated by a <code>CameraViewController</code> object, this
/// property will be set automatically and forward location access requests to
/// <code>CameraViewController.locationAccessRequestClosure</code>.
@property (nonatomic, copy) void (^ _Nullable locationAccessRequestClosure)(CLLocationManager * _Nonnull);
/// An instance of a <code>UIView</code> that is used to present the preview.
@property (nonatomic, readonly, strong) UIView * _Nonnull videoPreviewView;
/// An instance of a <code>UIView</code> that hosts the <code>videoPreviewView</code> in the center.
@property (nonatomic, readonly, strong) UIView * _Nonnull videoPreviewViewContainer;
/// The currently active recording mode (i.e. <code>.Photo</code> or <code>.Video</code>). Setting this property before
/// calling <code>setupWithInitialRecordingMode(:)</code> is ignored. The setter asynchronously updates the
/// session, so the getter might not immediately represent the new value. You can observe changes
/// to the value of this property using key-value observing.
@property (nonatomic) enum RecordingMode recordingMode;
/// Called when the <code>running</code> state of the camera changes.
@property (nonatomic, copy) void (^ _Nullable runningStateChangedHandler)(BOOL);
/// Called when the camera position changes.
@property (nonatomic, copy) void (^ _Nullable cameraPositionChangedHandler)(AVCaptureDevicePosition, AVCaptureDevicePosition);
/// Called when the recording mode changes.
@property (nonatomic, copy) void (^ _Nullable recordingModeChangedHandler)(enum RecordingMode);
/// Called when the list of available camera positions was changed.
@property (nonatomic, copy) void (^ _Nullable availableCameraPositionsChangedHandler)(void);
/// Called when any aspect of the flash changes.
/// <code>hasFlash</code> is <code>true</code> if the current camera has a flash. <code>flashMode</code> represents the currently
/// active flash mode. <code>flashAvailable</code> is <code>true</code> if the flash is available for use.
@property (nonatomic, copy) void (^ _Nullable flashChangedHandler)(BOOL, AVCaptureFlashMode, BOOL);
/// Called when any aspect of the torch changes.
/// <code>hasTorch</code> is <code>true</code> if the current camera has a torch. <code>torchMMode</code> represents the currently
/// active torch mode. <code>torchAvailable</code> is <code>true</code> if the torch is available for use.
@property (nonatomic, copy) void (^ _Nullable torchChangedHandler)(BOOL, AVCaptureTorchMode, BOOL);
/// Called when a photo is currently being captured or done being captured.
@property (nonatomic, copy) void (^ _Nullable capturingStillImageHandler)(BOOL);
/// Called when the session is interrupted or the interruption ended. This can happen when
/// switching to a multi-app layout, introduced in iOS 9 for example.
@property (nonatomic, copy) void (^ _Nullable sessionInterruptionHandler)(BOOL);
/// Called when a runtime error occurs.
@property (nonatomic, copy) void (^ _Nullable sessionRuntimeErrorHandler)(NSError * _Nonnull);
/// Called when the user did not grant authorization for the camera.
@property (nonatomic, copy) void (^ _Nullable authorizationFailedHandler)(void);
/// Called when video recording starts.
@property (nonatomic, copy) void (^ _Nullable videoRecordingStartedHandler)(void);
/// Called when video recording finishes.
@property (nonatomic, copy) void (^ _Nullable videoRecordingFinishedHandler)(NSURL * _Nonnull);
/// Called when video recording fails.
@property (nonatomic, copy) void (^ _Nullable videoRecordingFailedHandler)(void);
/// Called each second while a video recording is in progress.
@property (nonatomic, copy) void (^ _Nullable videoRecordingProgressHandler)(NSInteger);
/// Called when the size of the preview image within the <code>videoPreviewView</code> changes
@property (nonatomic, copy) void (^ _Nullable previewFrameChangedHandler)(CGRect);
/// Called when the focus point changes.
@property (nonatomic, copy) void (^ _Nullable focusPointChangedHandler)(CGPoint);
/// Called when the focus mode changes.
@property (nonatomic, copy) void (^ _Nullable focusModeChangedHandler)(AVCaptureFocusMode, AVCaptureExposureMode);
/// Called when the focus gets disabled.
@property (nonatomic, copy) void (^ _Nullable focusDisabledHandler)(void);
/// The video output settings to use for video recording. If <code>nil</code>, the recommended video
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended audio
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/// The file type to use for video recording. Default is <code>AVFileTypeQuickTimeMovie</code>.
/// note:
/// If you change this, you will most likely also want to change <code>videoOutputSettings</code>
/// and <code>audioOutputSettings</code>.
@property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
/// The extension to use for video files. Default is “mov”.
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileExtension;
/// Use this closure to further configure the asset writer that is created for video recording.
@property (nonatomic, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/// Set to <code>false</code> to disable locking focus when a user taps on the live preview. Default is <code>true</code>.
@property (nonatomic) BOOL tapToFocusEnabled;
/// The effect filter that is applied to the live feed.
@property (nonatomic, strong) PESDKEffect * _Nullable effect;
/// The intensity of the filter that is applied to the live feed.
@property (nonatomic) CGFloat effectIntensity;
/// Whether the recorded video should include the applied filter or not.
@property (nonatomic) BOOL includeEffectInOutput;
/// Whether the user’s location should be included in photos. This is enabled by default.
@property (nonatomic) BOOL includeUserLocation;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the camera. This method <em>must</em> be called before calling <code>startCamera()</code>.
/// Any handlers that will be used should be set before calling this method, so that they are called
/// with their initial values.
/// \param recordingMode The initial recording mode (e.g. <code>.Photo</code> or <code>.Video</code>) to use when
/// initializing the camera.
///
///
/// throws:
/// A <code>CameraControllerError</code> or an <code>NSError</code> if setup fails.
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode error:(NSError * _Nullable * _Nullable)error;
/// Same as <code>setup(with:)</code> but with an optional completion handler. The completion handler is
/// always invoked on the main thread.
/// \param recordingMode The initial recording mode (e.g. <code>.photo</code> or <code>.video</code>) to use when
/// initializing the camera.
///
/// \param completion A block to be executed when the camera has finished initialization.
///
///
/// throws:
/// A <code>CameraControllerError</code> or an <code>NSError</code> if setup fails.
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode completion:(void (^ _Nullable)(void))completion error:(NSError * _Nullable * _Nullable)error;
/// Starts the camera. <code>setupWithInitialRecordingMode(:)</code> <em>must</em> be called before calling this method, otherwise this method does
/// nothing. You should also add the <code>videoPreviewView</code> to your view hierachy to see the camera output.
- (void)startCamera;
/// Stops the camera.
- (void)stopCamera;
/// Switches the camera to the other position (e.g. <code>.Back</code> -> <code>.Front</code> and <code>.Front</code> -> <code>.Back</code>)
- (void)toggleCameraPosition;
/// Switches the camera to the desired position (if available)
/// \param position The position to switch to.
///
- (void)switchToCameraAtPosition:(AVCaptureDevicePosition)position;
/// Takes a photo and hands it over to the completion block. The completion block always runs on
/// the main thread. This method loses the image’s metadata.
/// \param completion A completion block that has an image and an error as parameters.
/// If the image was taken sucessfully the error is nil.
///
- (void)takePhoto:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Takes a photo and hands it over to the completion block. The completion block always runs on
/// the main thread. Use this method to preserve the image’s metadata.
/// \param completion A completion block that has data and an error as parameters.
/// If the image was taken successfully the error is <code>nil</code>.
///
- (void)takePhotoAndReturnData:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/// Starts the video recording. This only works if <code>recordingMode</code> is set to .Video. You should
/// set appropriate blocks for <code>videoRecordingStartedHandler</code>, <code>videoRecordingFailedHandler</code>,
/// <code>videoRecordingFinishedHandler</code> and <code>videoRecordingProgressHandler</code>. The finished handler gets
/// passed a <code>NSURL</code> to the path of the recorded video file. Please note that you are responsible
/// for deleting that file when you no longer need it.
- (void)startVideoRecording;
/// Stops video recording. This only works if you previously started video recording.
- (void)stopVideoRecording;
/// Selects the next light mode. The order is taken from <code>flashModes</code> or <code>torchModes</code> depending on which is active.
/// If the current device does not support a light mode, the next light mode that is supported is used or <code>.off</code>.
- (void)selectNextLightMode;
/// Zooms the camera by the desired zoom factor.
/// \param zoomFactor The factor to zoom by.
///
- (void)zoomWithDesiredZoomFactor:(CGFloat)zoomFactor;
@end

@class CLLocation;

@interface PESDKCameraController (SWIFT_EXTENSION(ImglyKit)) <CLLocationManagerDelegate>
/// :nodoc:
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end



@interface PESDKCameraController (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AVCaptureDevicePosition</code> raw values wrapped in <code>NSNumber</code>s.
/// Setting this property overrides any previously set values in
/// <code>cameraPositions</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cameraPositions;
/// An array of <code>AVCaptureFlashMode</code> raw values wrapped in <code>NSNumber</code>s.
/// Setting this property overrides any previously set values in
/// <code>flashModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull flashModes;
/// An array of <code>AVCaptureTorchMode</code> raw values wrapped in <code>NSNumber</code>s.
/// Setting this property overrides any previously set values in
/// <code>torchModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull torchModes;
@end

/// This enum holds types of errors that occur while using the <code>CameraController</code>.
typedef SWIFT_ENUM(NSInteger, CameraControllerError, open) {
/// Indicates that setup is called multiple times.
  CameraControllerErrorMultipleCallsToSetup = 0,
/// Indicates that the capture device can’t be initialized.
  CameraControllerErrorUnableToInitializeCaptureDevice = 1,
};
static NSString * _Nonnull const CameraControllerErrorDomain = @"ImglyKit.CameraControllerError";


/// A <code>CameraResult</code> contains the relevant information of the recorded/selected video/image of a <code>Camera</code>.
SWIFT_CLASS_NAMED("CameraResult")
@interface PESDKCameraResult : NSObject
/// The selected or taken photo as <code>Data</code> in JPEG format with metadata if available.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The <code>URL</code> of the recorded/selected video.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKCameraResult (SWIFT_EXTENSION(ImglyKit))
/// The <code>PhotoEditModel</code> that holds the operations applied to the image/video.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull model;
@end

@class UISwipeGestureRecognizer;
@class UIPinchGestureRecognizer;
@class PESDKFilterSelectionController;
@class PESDKVideoRecordButton;

/// The <code>CameraViewController</code> class provides a dialog to perform serveral tasks regarding the camera.
/// These include taking photos, switching on the flash, and such.
SWIFT_CLASS_NAMED("CameraViewController")
@interface PESDKCameraViewController : UIViewController
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a camera view controller using the given parameters.
/// note:
/// If you use the standard <code>init()</code> method or <code>init?(coder:)</code> to initialize a
/// <code>CameraViewController</code> object, a camera view controller with all supported recording modes and
/// the default configuration is created.
/// \param configuration A <code>Configuration</code> object.
///
- (nonnull instancetype)initWithConfiguration:(PESDKConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The view that contains the background views.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundContainerView;
/// The view that contains all view positioned at the top of the screen.
@property (nonatomic, readonly, strong) UIView * _Nonnull topControlsView;
/// The view that serves as container for the actual preview.
@property (nonatomic, readonly, strong) UIView * _Nonnull cameraPreviewContainer;
/// The view that contains all view positioned at the bottom of the screen.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomControlsView;
/// The view that spans from the bottom of the screen to the bottom of the safeAreaLayoutGuide.
/// This is only visible on an iPhone X.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomSafeAreaHidingView;
/// The cancel button.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull cancelButton;
/// The flash button.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull flashButton;
/// The camera switch button.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull switchCameraButton;
/// The camera roll button
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull cameraRollButton;
/// The view that contains actions button that is used to initiate the photo capturing process.
@property (nonatomic, readonly, strong) UIView * _Nonnull actionButtonContainer;
/// The label that is used to display the current recording time.
@property (nonatomic, readonly, strong) UILabel * _Nonnull recordingTimeLabel;
/// The button that is used to initiate the photo capturing process.
@property (nonatomic, readonly, strong) UIControl * _Nullable actionButton;
/// The view that is used to select the current filter that is applied to the preview.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull filterSelectionButton;
/// The slider that is used to control the inensity of the previewed filter.
@property (nonatomic, readonly, strong) PESDKSlider * _Nonnull filterIntensitySlider;
/// The recognizer that detects a swipe gesture to the right.
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeRightGestureRecognizer;
/// The recognizer that detects a swipe gesture to the left.
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeLeftGestureRecognizer;
/// The recognizer that detects a pinch gesture.
@property (nonatomic, readonly, strong) UIPinchGestureRecognizer * _Nonnull pinchGestureRecognizer;
/// The instance of a <code>FilterSelectionController</code> that is used to select the current preview filter.
@property (nonatomic, readonly, strong) PESDKFilterSelectionController * _Nonnull filterSelectionController;
/// The camera controller that is used by the controller.
@property (nonatomic, readonly, strong) PESDKCameraController * _Nullable cameraController;
/// The block that is called when the user taps the cancel button. See
/// <code>CameraViewControllerOptions.showCancelButton</code>.
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
/// The block that is called once the capture process has finished. It is passed a Data instance, containing
/// a JPEG image with metadata.
@property (nonatomic, copy) void (^ _Nullable completionBlock)(PESDKCameraResult * _Nonnull);
/// When this closure is called, the SDK has determined that location access has not been granted
/// to the host app yet. Within this closure you should then request appropriate permissions from
/// the passed in <code>CLLocationManager</code> object. Location access is used to tag photos with the
/// location where they are taken.
/// attention:
/// Starting Spring 2019, all apps submitted to the App Store that access user data
/// are required to include a purpose string as soon as location permissions requests appear
/// somewhere in the binary. Since we do not want to force developers integrating the SDK into
/// their app to include a purpose string even with location tagging disabled, this closure was
/// introduced, so that developers can decide for themselves if it is appropriate to request
/// location access. Simply set this property like this:
/// \code
/// cameraViewController.locationAccessRequestClosure = { locationManager in
///   locationManager.requestWhenInUseAuthorization()
/// }
///
/// \endcode
@property (nonatomic, copy) void (^ _Nullable locationAccessRequestClosure)(CLLocationManager * _Nonnull);
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutorotate;
/// :nodoc:
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
/// This function gets the most recent image form the camera roll, and sets it as preview image for the according button.
- (void)setLastImageFromRollAsPreview;
/// Takes a photo.
/// \param sender The object that initiated the request.
///
- (void)takePhoto:(PESDKButton * _Nullable)sender;
/// Toggles video recording.
/// \param sender Sender of the event.
///
- (void)recordVideo:(PESDKVideoRecordButton * _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface PESDKCameraViewController (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKCameraViewController (SWIFT_EXTENSION(ImglyKit))
/// Generate a photo edit model from the current camera settings.
/// This model can be passed to a <code>PhotoEditViewController</code> in order to have the
/// edited image look like the preview image in the camera’s viewfinder.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull photoEditModel;
@end

@class UIImagePickerController;

@interface PESDKCameraViewController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


/// Options for configuring a <code>CameraViewController</code>.
SWIFT_CLASS_NAMED("CameraViewControllerOptions")
@interface PESDKCameraViewControllerOptions : NSObject
/// The views background color. In video mode the colors alpha value is reduced to 0.3.
/// Defaults to the global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Use this closure to configure the cancel button.
@property (nonatomic, readonly, copy) void (^ _Nullable cancelButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the flash button.
@property (nonatomic, readonly, copy) void (^ _Nullable flashButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the switch camera button.
@property (nonatomic, readonly, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the camera roll button.
@property (nonatomic, readonly, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the action button in photo mode.
@property (nonatomic, readonly, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the filter selector button.
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the timelabel.
@property (nonatomic, readonly, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);
/// Use this closure to configure the filter intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// Use this closure to configure the given recording mode button. By default the buttons
/// light up in yellow, when selected.
@property (nonatomic, readonly, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(PESDKButton * _Nonnull, enum RecordingMode);
/// Enable/Disable permanent crop to square. Disabled by default.
@property (nonatomic, readonly) BOOL cropToSquare;
/// The maximum length of a video. If set to 0 the length is unlimited.
@property (nonatomic, readonly) NSInteger maximumVideoLength;
/// Enable/Disable tap to focus on the camera preview image. Enabled by default.
@property (nonatomic, readonly) BOOL tapToFocusEnabled;
/// Show/hide the cancel button. Disabled by default. In addition you have to set
/// <code>CameraViewController.cancelBlock</code> and add custom code to dismiss your view controller when
/// the user taps the cancel button.
@property (nonatomic, readonly) BOOL showCancelButton;
/// Show/Hide the camera roll button. Enabled by default.
@property (nonatomic, readonly) BOOL showCameraRoll;
/// Enable/Disable filter bottom drawer. Enabled by default.
@property (nonatomic, readonly) BOOL showFilters;
/// Enable/Disable filter intensity slider.
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;
/// The initial intensity of the filters.
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended video
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended audio
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/// The file type to use for video recording. Default is <code>AVFileTypeQuickTimeMovie</code>.
/// note:
/// If you change this, you will most likely also want to change <code>videoOutputSettings</code>
/// and <code>audioOutputSettings</code>.
@property (nonatomic, readonly) AVFileType _Nonnull videoRecordingFileType;
/// The extension to use for video files. Default is “mov”.
@property (nonatomic, readonly, copy) NSString * _Nonnull videoRecordingFileExtension;
/// Use this closure to further configure the asset writer that is created for video recording.
@property (nonatomic, readonly, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/// Whether the user’s location should be included in photos. This is enabled by default.
/// attention:
/// When this is set to <code>true</code>, you must either request location access within your
/// host app or set <code>CameraViewController.locationAccessRequestClosure</code>.
@property (nonatomic, readonly) BOOL includeUserLocation;
/// Whether the recorded video should include the applied filter or not. This is disabled by
/// default.
@property (nonatomic, readonly) BOOL writeVideoWithFilterApplied;
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The default <code>CameraViewControllerOptionsBuilder</code> for <code>CameraViewControllerOptions</code>.
SWIFT_CLASS_NAMED("CameraViewControllerOptionsBuilder")
@interface PESDKCameraViewControllerOptionsBuilder : NSObject
/// The views background color. In video mode the colors alpha value is reduced to 0.3.
/// Defaults to the global background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Use this closure to configure the cancel button.
@property (nonatomic, copy) void (^ _Nullable cancelButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the flash button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable flashButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the switch camera button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the camera roll button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the action button in photo mode. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the filter selector button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the timelabel. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);
/// Use this closure to configure the filter intensity slider. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// Use this closure to configure the given recording mode button. By default the buttons
/// light up in yellow, when selected.
@property (nonatomic, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(PESDKButton * _Nonnull, enum RecordingMode);
/// Enable/Disable permanent crop to square. Disabled by default.
@property (nonatomic) BOOL cropToSquare;
/// The maximum length of a video. If set to 0 the length is unlimited.
@property (nonatomic) NSInteger maximumVideoLength;
/// Enable/Disable tap to focus on the camera preview image. Enabled by default.
@property (nonatomic) BOOL tapToFocusEnabled;
/// Show/hide the cancel button. Disabled by default. In addition you have to set
/// <code>CameraViewController.cancelBlock</code> and add custom code to dismiss your view controller when
/// the user taps the cancel button.
@property (nonatomic) BOOL showCancelButton;
/// Show/Hide the camera roll button. Enabled by default.
@property (nonatomic) BOOL showCameraRoll;
/// Enable/Disable filter bottom drawer. Enabled by default.
@property (nonatomic) BOOL showFilters;
/// Enable/Disable filter intensity slider.
@property (nonatomic) BOOL showFilterIntensitySlider;
/// The initial intensity of the filters.
@property (nonatomic) CGFloat initialFilterIntensity;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended video
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended audio
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/// The file type to use for video recording. Default is <code>AVFileTypeQuickTimeMovie</code>.
/// note:
/// If you change this, you will most likely also want to change <code>videoOutputSettings</code>
/// and <code>audioOutputSettings</code>.
@property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
/// The extension to use for video files. Default is “mov”.
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileExtension;
/// Use this closure to further configure the asset writer that is created for video recording.
@property (nonatomic, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/// Whether the user’s location should be included in photos. This is enabled by default.
/// attention:
/// When this is set to <code>true</code>, you must either request location access within your
/// host app or set <code>CameraViewController.locationAccessRequestClosure</code>.
@property (nonatomic) BOOL includeUserLocation;
/// Whether the recorded video should include the applied filter or not. This is disabled by
/// default.
@property (nonatomic) BOOL writeVideoWithFilterApplied;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PESDKCameraViewControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AVCaptureDevicePosition</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedCameraPositions</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedCameraPositions;
/// An array of <code>AVCaptureFlashMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedFlashModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFlashModes;
/// An array of <code>AVCaptureTorchMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedFlashModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTorchModes;
/// An array of <code>RecordingMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedRecordingModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedRecordingModes;
/// An array of <code>RecordingOrientation</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>RecordingOrientation</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedRecordingOrientations;
@end


/// A <code>CancelButton</code> is a subclass of <code>Button</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("CancelButton")
@interface PESDKCancelButton : PESDKButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPainting;
@class PESDKTool;
@protocol PESDKCanvasViewDataSource;
@class NSUUID;
@protocol MTLDevice;

/// The <code>CanvasViewMetal</code> is responsible for presenting a painting and handling touch events related to paintings.
SWIFT_CLASS_NAMED("CanvasView")
@interface PESDKCanvasView : MTKView
/// The painting that is managed by this canvas view.
@property (nonatomic, readonly, strong) PESDKPainting * _Nonnull painting;
/// The tool that is currently active. Currently only an instance of <code>FreehandTool</code> is supported.
@property (nonatomic, strong) PESDKTool * _Nonnull activeTool;
/// The object that acts as the data source for the canvas view.
@property (nonatomic, weak) id <PESDKCanvasViewDataSource> _Nullable dataSource;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// <code>true</code> if a user is currently painting, <code>false</code> otherwise.
@property (nonatomic, readonly) BOOL currentlyPainting;
/// Creates a canvas view for the given painting, with the given tool and the given frame.
/// \param painting The painting that is managed by this canvas view.
///
/// \param activeTool The tool that should be used for the painting. Currently only an instance
/// of <code>FreehandTool</code> is supported.
///
/// \param uuid The UUID that matches this instance with its <code>BrushSpriteModel</code>.
///
/// \param frame The frame of the view.
///
- (nonnull instancetype)initWithPainting:(PESDKPainting * _Nonnull)painting activeTool:(PESDKTool * _Nonnull)activeTool uuid:(NSUUID * _Nonnull)uuid frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// Called by a pan gesture recognizer to handle touches.
/// \param gestureRecognizer The recognizer that called this method.
///
- (void)handlePan:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
/// Converts a given point from view coordinates to painting coordinates.
/// \param pt The point that should be converted.
///
///
/// returns:
/// The converted point.
- (CGPoint)convertPointToDocument:(CGPoint)pt SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frameRect device:(id <MTLDevice> _Nullable)device SWIFT_UNAVAILABLE;
@end


enum PESDKOrientation : NSInteger;

/// The <code>CanvasViewMetalDataSource</code> protocol defines methods that allow you to pass needed information to the canvas view.
SWIFT_PROTOCOL_NAMED("CanvasViewDataSource")
@protocol PESDKCanvasViewDataSource
/// Called to ask for the normalized crop rect that is currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The normalized crop rect.
- (CGRect)canvasViewNormalizedCropRect:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the image orientation that is currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The applied image orienation.
- (enum PESDKOrientation)canvasViewAppliedOrientation:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the straighten angle that is currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The applied straighten angle.
- (CGFloat)canvasViewStraightenAngle:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the image insets that are currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The applied image insets.
- (UIEdgeInsets)canvasViewImageInsets:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the size of the output image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The output image size.
- (CGSize)canvasViewOutputImageSize:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
@end


/// This class represents a circle gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("CircleGradientView")
@interface PESDKCircleGradientView : PESDKFocusGradientView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// :nodoc:
- (void)layoutSubviews;
@end

@class CIImage;

/// This filter adds or takes away clarity of an image.
SWIFT_CLASS_NAMED("ClarityFilter")
@interface PESDKClarityFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The intensity of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>ClipTrimToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, ClipTrimOverlayAction, open) {
/// Delete the video clip of a video composition.
  ClipTrimOverlayActionDelete = 0,
/// Toggle play/pause for video preview.
  ClipTrimOverlayActionPlayPause = 1,
};

@class PESDKVideoTrimView;
@protocol UIViewControllerTransitionCoordinator;

/// The tool controller to trim the length of a video.
SWIFT_CLASS_NAMED("TimelineToolController")
@interface PESDKTimelineToolController : PESDKPhotoEditToolController
/// The contained <code>ProxyZoomZontroller</code>.
@property (nonatomic, readonly, strong) PESDKProxyZoomController * _Nonnull proxyZoomController;
/// The container view of the trim view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull trimViewContainerView;
/// The trim view.
@property (nonatomic, readonly, strong) PESDKVideoTrimView * _Nonnull trimView;
/// The height of the trim container view. Default is <code>88</code>.
@property (nonatomic) CGFloat trimViewHeight;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// The play/pause overlay button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseOverlayButton;
/// An array of all overlay buttons that are displayed in the controller.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end

@class PESDKDimmedLabel;

/// The tool controller to trim the length of a video.
SWIFT_CLASS_NAMED("TrimToolController")
@interface PESDKTrimToolController : PESDKTimelineToolController
/// The container view of the playback controls.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull controlsContainerView SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// The label that displays the current playback time.
@property (nonatomic, readonly, strong) PESDKDimmedLabel * _Nonnull currentTimeLabel SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// The label that displays the duration of the video.
@property (nonatomic, readonly, strong) PESDKPrimaryLabel * _Nonnull durationLabel SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// The button to play and pause the video.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull playPauseButton SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end


/// The tool controller to trim the length of a video clip contained in a video composition.
SWIFT_CLASS_NAMED("ClipTrimToolController")
@interface PESDKClipTrimToolController : PESDKTrimToolController
/// The delete overlay button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable deleteOverlayButton;
@end

@class PESDKTrimToolOptionsBuilder;

/// Options for configuring a <code>TrimTool</code>.
SWIFT_CLASS_NAMED("TrimToolOptions")
@interface PESDKTrimToolOptions : PESDKToolControllerOptions
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// Defaults to <code>true</code>. If disabled the legacy controls are displayed instead of the tooltips and overlay button controls.
@property (nonatomic, readonly) BOOL useOverlayControls SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because the legacy trim controls were removed. Now, the overlay trim controls will be always used which was the default before.");
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TrimToolOptions</code> using the given builder.
/// \param trimBuilder An instance of <code>TrimToolOptionsBuilder</code>.
///
- (nonnull instancetype)initWithTrimBuilder:(PESDKTrimToolOptionsBuilder * _Nonnull)trimBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end

@class PESDKClipTrimToolControllerOptionsBuilder;

/// Options for configuring a <code>ClipTrimToolController</code>.
SWIFT_CLASS_NAMED("ClipTrimToolControllerOptions")
@interface PESDKClipTrimToolControllerOptions : PESDKTrimToolOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum ClipTrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable clipTrimOverlayActionSelectedClosure)(enum ClipTrimOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>ClipTrimToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>ClipTrimToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKClipTrimToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimBuilder:(PESDKTrimToolOptionsBuilder * _Nonnull)trimBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TrimToolOptionsBuilder</code> for <code>TrimToolOptions</code>.
SWIFT_CLASS_NAMED("TrimToolOptionsBuilder")
@interface PESDKTrimToolOptionsBuilder : PESDKToolControllerOptionsBuilder
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// Defaults to <code>true</code>. If disabled the legacy controls are displayed instead of the tooltips and overlay button controls.
@property (nonatomic) BOOL useOverlayControls SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because the legacy trim controls were removed. Now, the overlay trim controls will be always used which was the default before.");
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TrimToolOptionsBuilder</code> initialized with the given options.
/// \param trimOptions A <code>TrimToolOptions</code> instance.
///
- (nonnull instancetype)initWithTrimOptions:(PESDKTrimToolOptions * _Nonnull)trimOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The default <code>ClipTrimToolControllerOptionsBuilder</code> for <code>ClipTrimToolControllerOptions</code>.
SWIFT_CLASS_NAMED("ClipTrimToolControllerOptionsBuilder")
@interface PESDKClipTrimToolControllerOptionsBuilder : PESDKTrimToolOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum ClipTrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable clipTrimOverlayActionSelectedClosure)(enum ClipTrimOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>ClipTrimToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>ClipTrimToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKClipTrimToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimOptions:(PESDKTrimToolOptions * _Nonnull)trimOptions SWIFT_UNAVAILABLE;
@end


/// Represents a color and a matching name for accessibility.
SWIFT_CLASS_NAMED("Color")
@interface PESDKColor : NSObject
/// The actual color that this object represents.
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// A name for <code>color</code>, used for accessibility.
@property (nonatomic, readonly, copy) NSString * _Nonnull colorName;
/// Creates a new <code>Color</code> object.
/// \param color The actual color that this object represents.
///
/// \param colorName The name for <code>color</code>, used for accessibility.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKColorPalette;
@protocol PESDKColorCollectionViewDelegate;

/// A view that displays a <code>ColorPalette</code> within a collection view.
SWIFT_CLASS_NAMED("ColorCollectionView")
@interface PESDKColorCollectionView : UIView
/// The color palette to display.
@property (nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
/// The object that acts as the delegate.
@property (nonatomic, weak) id <PESDKColorCollectionViewDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The currently selected color.
@property (nonatomic, readonly, strong) PESDKColor * _Nullable selectedColor;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new <code>ColorCollectionView</code> for the given color palette.
/// \param colorPalette The color palette to display.
///
- (nonnull instancetype)initWithColorPalette:(PESDKColorPalette * _Nonnull)colorPalette OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Selects the color at the given index.
/// \param index The index of the color to select.
///
/// \param animated Whether to animated the change.
///
- (void)selectColorAtIndex:(NSInteger)index animated:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewLayout;

@interface PESDKColorCollectionView (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface PESDKColorCollectionView (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>ColorCollectionViewCell</code> is a cell that shows a solid color and an image view on top of that color when the cell
/// is selected. It also has a <code>selectionIndicator</code> to show whether or not the cell is currently selected.
SWIFT_CLASS_NAMED("ColorCollectionViewCell")
@interface PESDKColorCollectionViewCell : UICollectionViewCell
/// Whether this cell is currently active or not. This behaves similar to <code>isSelected</code>, however
/// we don’t use <code>isSelected</code> on purpose to have better control over a cell’s selection state.
@property (nonatomic) BOOL isActive;
/// A view that represents a solid color.
@property (nonatomic, readonly, strong) UIView * _Nonnull colorView;
/// An image view that is above the solid color and always visible.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconView;
/// An image view that is above the solid color and only visible when the cell is selected.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The shadow color of the <code>contentView.layer</code>, the <code>iconView.layer</code>, and <code>imageView.layer</code>.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end


/// The <code>ColorCollectionViewDelegate</code> defines methods that allow you to respond to messages from
/// the <code>ColorCollectionView</code>.
SWIFT_PROTOCOL_NAMED("ColorCollectionViewDelegate")
@protocol PESDKColorCollectionViewDelegate
/// Tells the delegate that a color was selected.
/// \param colorCollectionView The color collection view the color was selected in.
///
/// \param color The color that was selected.
///
- (void)colorCollectionView:(PESDKColorCollectionView * _Nonnull)colorCollectionView didSelectColor:(PESDKColor * _Nonnull)color;
@end


/// Handles the display of <code>ColorMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("ColorListSectionController")
@interface PESDKColorListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (CGSize)sizeForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>ColorToolController</code>.
SWIFT_CLASS_NAMED("ColorMenuItem")
@interface PESDKColorMenuItem : NSObject <PESDKMenuItem>
/// The color of this menu item.
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// The name of the color of this menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull colorName;
/// Creates a new menu item for the given color and color name.
/// \param color The color of this menu item.
///
/// \param colorName The name of the color of this menu item.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a collection of colors.
SWIFT_CLASS_NAMED("ColorPalette")
@interface PESDKColorPalette : NSObject
/// The colors that this palette contains.
@property (nonatomic, readonly, copy) NSArray<PESDKColor *> * _Nonnull colors;
/// Creates a new <code>ColorPalette</code> object with a given color palette.
/// \param colors The colors in this palette.
///
- (nonnull instancetype)initWithColors:(NSArray<PESDKColor *> * _Nonnull)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ColorPickerView</code> provides a way to pick colors.
/// It contains three elements - a hue picker, a brightness and saturation picker and an alpha
/// picker. It has full support for wide colors.
SWIFT_CLASS_NAMED("ColorPickerView")
@interface PESDKColorPickerView : UIControl
/// The currently selected color
@property (nonatomic, strong) UIColor * _Nonnull color;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A special menu item for the <code>ColorToolController</code> that allows to use a color pipette to pick a color value from the edited image.
SWIFT_CLASS_NAMED("ColorPipetteMenuItem")
@interface PESDKColorPipetteMenuItem : PESDKColorMenuItem
@end


/// A <code>ColorPipetteOverlayView</code> is responsible to draw the UI of a <code>ColorPipetteView</code>. This overlay consists of a circular border that highlights the selected color and a crosshair in the middle to facilitate precise color selection.
SWIFT_CLASS_NAMED("ColorPipetteOverlayView")
@interface PESDKColorPipetteOverlayView : UIView
/// The selected color.
@property (nonatomic, strong) UIColor * _Nonnull pickedColor;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKColorPipetteViewDelegate;
@class PESDKMediaEditPreviewController;

/// A <code>ColorPipetteView</code> can be used to pick a color from a preview image. It hosts an <code>ColorPipetteOverlayView</code> and a view that magnifies the preview image for precise color selection.
SWIFT_CLASS_NAMED("ColorPipetteView")
@interface PESDKColorPipetteView : UIView
/// The object that acts as a delegate.
@property (nonatomic, weak) id <PESDKColorPipetteViewDelegate> _Nullable delegate;
/// Scale factor of the magnified preview image.
@property (nonatomic) CGFloat magnificationScale;
/// The UI that is drawn over the <code>magnificationView</code>.
@property (nonatomic, readonly, strong) PESDKColorPipetteOverlayView * _Nonnull overlayView;
/// The view that shows the magnification of the edited image.
@property (nonatomic, readonly, strong) UIView * _Nonnull magnificationView;
/// The <code>PhotoEditPreviewController</code> that hosts the image where this pipette operates on.
@property (nonatomic, strong) PESDKMediaEditPreviewController * _Nullable previewController;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)setNeedsDisplay;
@end


@interface PESDKColorPipetteView (SWIFT_EXTENSION(ImglyKit)) <MTKViewDelegate>
/// :nodoc:
- (void)drawInMTKView:(MTKView * _Nonnull)view;
/// :nodoc:
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
@end


/// The <code>ColorPipetteViewDelegate</code> defines methods that allow you to respond to messages from
/// the <code>ColorPipetteView</code>.
SWIFT_PROTOCOL_NAMED("ColorPipetteViewDelegate")
@protocol PESDKColorPipetteViewDelegate
/// Called when the pipette changed its position or the selected color did change.
/// \param colorPipetteView The color pipette view that picked a new color or changed its position.
///
/// \param newColor Indicates whether the picked <code>color</code> is different from the last picked color.
///
/// \param color The picked color.
///
/// \param normalizedPosition The normalized position of the picked <code>color</code> in the untransformed image.
///
- (void)colorPipetteView:(PESDKColorPipetteView * _Nonnull)colorPipetteView didPick:(BOOL)newColor :(UIColor * _Nonnull)color at:(CGPoint)normalizedPosition;
@end




/// This filter is used to colorize stickers.
SWIFT_CLASS_NAMED("ColorizeFilter")
@interface PESDKColorizeFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The color of this filter.
@property (nonatomic, strong) UIColor * _Nullable inputColor;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The footer view for a <code>CompositionActionMenuItem</code> in a <code>CompositionActionListSectionController</code>.
SWIFT_CLASS_NAMED("CompositionActionFooterView")
@interface PESDKCompositionActionFooterView : UICollectionViewCell
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)updateConstraints;
/// :nodoc:
- (void)prepareForReuse;
@end


/// Handles the display of <code>CompositionActionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("CompositionActionListSectionController")
@interface PESDKCompositionActionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedElementKinds;
/// :nodoc:
- (UICollectionReusableView * _Nonnull)viewForSupplementaryElementOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)sizeForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The action menu item that is used in <code>CompositionToolController</code>
SWIFT_CLASS_NAMED("CompositionActionMenuItem")
@interface PESDKCompositionActionMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// The supplementary text of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nullable supplementaryText;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKCompositionEditControllerDelegate;

/// An <code>CompositionEditController</code> can be used to update the <code>TrimModel</code> of a <code>PhotoEditModel</code>.
/// It is supposed to be contained in a tool controller and be presented above a
/// <code>VideoEditPreviewController</code>.
SWIFT_CLASS_NAMED("CompositionEditController")
@interface PESDKCompositionEditController : PESDKViewController
/// The contained <code>ProxyZoomZontroller</code>.
@property (nonatomic, readonly, strong) PESDKProxyZoomController * _Nonnull proxyZoomController;
/// The container view of the trim view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull trimViewContainerView;
/// The trim view.
@property (nonatomic, readonly, strong) PESDKVideoTrimView * _Nonnull trimView;
/// The height of the trim view. Default is <code>88</code>.
@property (nonatomic) CGFloat trimViewHeight;
/// The object that acts as this controller’s delegate.
@property (nonatomic, weak) id <PESDKCompositionEditControllerDelegate> _Nullable delegate;
/// Creates a new <code>CompositionEditController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKProxyZoomControllerDelegate>
/// :nodoc:
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end


/// The <code>VideoTrimViewDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>VideoTrimView</code>.
SWIFT_PROTOCOL_NAMED("VideoTrimViewDelegate")
@protocol PESDKVideoTrimViewDelegate
/// Called when the user started dragging the scrubber.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the user dragged the scrubber.
/// \param videoTrimView The video trim view that this event occurred in.
///
/// \param time The time that the scrubber was dragged to.
///
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
/// Called when the user stopped dragging the scrubber.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the user started dragging the start or end time.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the start time was changed.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the end time was changed.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the user stopped dragging the start or end time.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end


@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimViewDelegate>
/// :nodoc:
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end

@class PESDKVideoEditPreviewController;

/// The <code>CompositionEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>CompositionEditController</code>.
SWIFT_PROTOCOL_NAMED("CompositionEditControllerDelegate")
@protocol PESDKCompositionEditControllerDelegate
/// Asks the delegate for the video edit preview controller.
/// \param compositionEditController The composition edit controller asking.
///
///
/// returns:
/// The video edit preview controller.
- (PESDKVideoEditPreviewController * _Nullable)compositionEditControllerPreviewController:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param compositionEditController The composition edit controller that changed the photo edit model.
///
- (void)compositionEditControllerDidChangePhotoEditModel:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// Called when the user started dragging the scrubber or trim handles.
/// \param compositionEditController The composition edit controller that this event occurred in.
///
- (void)compositionEditControllerDidStartDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// Called when the user stopped dragging the scrubber or trim handles.
/// \param compositionEditController The composition edit controller that this event occurred in.
///
- (void)compositionEditControllerDidStopDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// Asks the delegate for the scroll view to which zoom events of the composition edit controller
/// should be forwarded.
/// \param compositionEditController The composition edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)compositionEditControllerTargetScrollView:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>CompositionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("CompositionListSectionController")
@interface PESDKCompositionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
/// :nodoc:
- (BOOL)canMoveItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>CompositionToolController</code>
SWIFT_CLASS_NAMED("CompositionMenuItem")
@interface PESDKCompositionMenuItem : NSObject <PESDKMenuItem>
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:`
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The overlay actions that can be used in an instance of <code>CompositionToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, CompositionOverlayAction, open) {
/// Toggle play/pause for video preview.
  CompositionOverlayActionPlayPause = 0,
};


/// The tool controller to create a composition of multiple videos clips and to trim the lengths of the individual clips as well as the length of the resulting video composition.
SWIFT_CLASS_NAMED("CompositionToolController")
@interface PESDKCompositionToolController : PESDKMenuToolController <PESDKCompositionEditControllerDelegate>
/// The <code>CompositionEditController</code> that is used within this tool to edit the composition.
@property (nonatomic, readonly, strong) PESDKCompositionEditController * _Nonnull compositionEditController;
/// :nodoc:
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
/// :nodoc:
- (PESDKVideoEditPreviewController * _Nullable)compositionEditControllerPreviewController:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)compositionEditControllerDidChangePhotoEditModel:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// :nodoc:
- (void)compositionEditControllerDidStartDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// :nodoc:
- (void)compositionEditControllerDidStopDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// :nodoc:
- (UIScrollView * _Nullable)compositionEditControllerTargetScrollView:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
/// The play/pause button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseButton;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>playPauseButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end


@class PESDKVideoClipToolController;

/// The <code>VideoClipToolControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>VideoClipToolController</code>.
SWIFT_PROTOCOL_NAMED("VideoClipToolControllerDelegate")
@protocol PESDKVideoClipToolControllerDelegate
/// Tells the delegate that the given video clips were selected.
/// \param videoClipToolController The video clip tool controller where the video clips have been selected
/// in.
///
/// \param videos The video clips that have been selected.
///
- (void)videoClipToolController:(PESDKVideoClipToolController * _Nonnull)videoClipToolController didSelect:(NSArray<PESDKVideoClip *> * _Nonnull)videos;
@end


@interface PESDKCompositionToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoClipToolControllerDelegate>
/// :nodoc:
- (void)videoClipToolController:(PESDKVideoClipToolController * _Nonnull)videoClipToolController didSelect:(NSArray<PESDKVideoClip *> * _Nonnull)videos;
@end


@interface PESDKCompositionToolController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (NSIndexPath * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView targetIndexPathForMoveFromItemAtIndexPath:(NSIndexPath * _Nonnull)originalIndexPath toProposedIndexPath:(NSIndexPath * _Nonnull)proposedIndexPath SWIFT_WARN_UNUSED_RESULT;
@end



@interface PESDKCompositionToolController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end

@class PESDKVideoEditViewController;
enum PESDKVideoClipLibraryMode : NSInteger;
@class PESDKCompositionToolControllerOptionsBuilder;

/// Options for configuring a <code>CompositionToolController</code>.
SWIFT_CLASS_NAMED("CompositionToolControllerOptions")
@interface PESDKCompositionToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum CompositionOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable compositionOverlayActionSelectedClosure)(enum CompositionOverlayAction);
/// If set this closure is called when the user trys to export a video composition which is too short to meet the <code>TrimToolControllerOptions.minimumDuration</code> limit but
/// the composition could be adjusted by adding or trimming video clips to fulfill this requirement.
/// You can for example use this to present an alert view informing the user that the video composition is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will open the composition tool automatically.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, readonly, copy) void (^ _Nullable compositionTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// The mode determines which library type should be displayed when the user wants
/// to add a <code>VideoClip</code> within the <code>CompositionToolController</code>.
/// Default is set to <code>.personal</code>.
@property (nonatomic, readonly) enum PESDKVideoClipLibraryMode videoClipLibraryMode;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>CompositionToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>CompositionToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKCompositionToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>CompositionToolControllerOptionsBuilder</code> for <code>CompositionToolControllerOptions</code>.
SWIFT_CLASS_NAMED("CompositionToolControllerOptionsBuilder")
@interface PESDKCompositionToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum CompositionOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable compositionOverlayActionSelectedClosure)(enum CompositionOverlayAction);
/// If set this closure is called when the user trys to export a video composition which is too short to meet the <code>TrimToolControllerOptions.minimumDuration</code> limit but
/// the composition could be adjusted by adding or trimming video clips to fulfill this requirement.
/// You can for example use this to present an alert view informing the user that the video composition is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will open the composition tool automatically.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, copy) void (^ _Nullable compositionTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// The mode determines which library type should be displayed when the user wants
/// to add a <code>VideoClip</code> within the <code>CompositionToolController</code>.
/// Default is set to <code>.personal</code>.
@property (nonatomic) enum PESDKVideoClipLibraryMode videoClipLibraryMode;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>CompositionToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>CompositionToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKCompositionToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKCompositionToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>CompositionOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedCompositionOverlayActions</code> with the corresponding <code>CompositionOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedCompositionOverlayActions;
@end

@class PESDKFilterToolControllerOptions;
@class PESDKOverlayToolControllerOptions;
@class PESDKStickerToolControllerOptions;
@class PESDKStickerOptionsToolControllerOptions;
@class PESDKTransformToolControllerOptions;
@class PESDKFocusToolControllerOptions;
@class PESDKTextToolControllerOptions;
@class IMGLTextOptionsToolControllerOptions;
@class PESDKTextFontToolControllerOptions;
@class PESDKTextColorToolControllerOptions;
@class PESDKFrameToolControllerOptions;
@class PESDKFrameOptionsToolControllerOptions;
@class PESDKTextDesignToolControllerOptions;
@class PESDKTextDesignOptionsToolControllerOptions;
@class PESDKTextDesignColorToolControllerOptions;
@class PESDKTextDesignLayoutToolControllerOptions;
@class PESDKSnappingOptions;
@class PESDKWatermarkOptions;
@class PESDKConfigurationBuilder;

/// An Configuration defines behaviour and look of all view controllers
/// provided by the PhotoEditorSDK. It uses the builder pattern to create an
/// immutable object via a closure. To configure the different editors and
/// viewControllers contained in the SDK, edit their options in the corresponding
/// <code>configure*ViewController</code> method of the <code>ConfigurationBuilder</code>.
SWIFT_CLASS_NAMED("Configuration")
@interface PESDKConfiguration : NSObject
/// The asset catalog which configures all assets that are available for editing tasks, such as stickers, frames, effects, overlays, fonts, and text designs. Defaults to <code>AssetCatalog.shared</code>.
@property (nonatomic, readonly, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Options for the <code>CameraViewController</code>.
@property (nonatomic, readonly, strong) PESDKCameraViewControllerOptions * _Nonnull cameraViewControllerOptions;
/// Options for the <code>FilterToolController</code>.
@property (nonatomic, readonly, strong) PESDKFilterToolControllerOptions * _Nonnull filterToolControllerOptions;
/// Options for the <code>OverlayToolController</code>.
@property (nonatomic, readonly, strong) PESDKOverlayToolControllerOptions * _Nonnull overlayToolControllerOptions;
/// Options for the <code>StickerToolController</code>.
@property (nonatomic, readonly, strong) PESDKStickerToolControllerOptions * _Nonnull stickerToolControllerOptions;
/// Options for the <code>StickerOptionsToolController</code>.
@property (nonatomic, readonly, strong) PESDKStickerOptionsToolControllerOptions * _Nonnull stickerOptionsToolControllerOptions;
/// Options for the <code>StickerColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKColorToolControllerOptions * _Nonnull stickerColorToolControllerOptions;
/// Options for the <code>TransformToolController</code>.
@property (nonatomic, readonly, strong) PESDKTransformToolControllerOptions * _Nonnull transformToolControllerOptions;
/// Options for the <code>FocusToolController</code>.
@property (nonatomic, readonly, strong) PESDKFocusToolControllerOptions * _Nonnull focusToolControllerOptions;
/// Options for the <code>TextToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextToolControllerOptions * _Nonnull textToolControllerOptions;
/// Options for the <code>TextOptionsToolController</code>.
@property (nonatomic, readonly, strong) IMGLTextOptionsToolControllerOptions * _Nonnull textOptionsToolControllerOptions;
/// Options for the <code>TextFontToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextFontToolControllerOptions * _Nonnull textFontToolControllerOptions;
/// Options for the <code>TextColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextColorToolControllerOptions * _Nonnull textColorToolControllerOptions;
/// Options for the <code>AdjustToolController</code>.
@property (nonatomic, readonly, strong) PESDKAdjustToolControllerOptions * _Nonnull adjustToolControllerOptions;
/// Options for the <code>BrushToolController</code>.
@property (nonatomic, readonly, strong) PESDKBrushToolControllerOptions * _Nonnull brushToolControllerOptions;
/// Options for the <code>BrushColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKBrushColorToolControllerOptions * _Nonnull brushColorToolControllerOptions;
/// Options for the <code>FrameToolController</code>.
@property (nonatomic, readonly, strong) PESDKFrameToolControllerOptions * _Nonnull frameToolControllerOptions;
/// Options for the <code>FrameOptionsToolController</code>.
@property (nonatomic, readonly, strong) PESDKFrameOptionsToolControllerOptions * _Nonnull frameOptionsToolControllerOptions;
/// Options for the <code>TextDesignToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignToolControllerOptions * _Nonnull textDesignToolControllerOptions;
/// Options for the <code>TextDesignOptionsToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignOptionsToolControllerOptions * _Nonnull textDesignOptionsToolControllerOptions;
/// Options for the <code>TextDesignColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignColorToolControllerOptions * _Nonnull textDesignColorToolControllerOptions;
/// Options for the <code>TextDesignLayoutToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignLayoutToolControllerOptions * _Nonnull textDesignLayoutToolControllerOptions;
/// Global snapping options for all sprites, e.g., stickers, texts, and text designs.
@property (nonatomic, readonly, strong) PESDKSnappingOptions * _Nonnull snappingOptions;
/// Global watermark options.
@property (nonatomic, readonly, strong) PESDKWatermarkOptions * _Nonnull watermarkOptions;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>Configuration</code> using the given builder.
/// \param builder An instance of <code>ConfigurationBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKConfigurationBuilder * _Nonnull))builder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPhotoEditViewControllerOptions;

@interface PESDKConfiguration (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>PhotoEditViewController</code>.
@property (nonatomic, readonly, strong) PESDKPhotoEditViewControllerOptions * _Nonnull photoEditViewControllerOptions;
@end

@class PESDKVideoEditViewControllerOptions;
@class PESDKTrimToolControllerOptions;
@class PESDKVideoClipToolControllerOptions;
@class PESDKStickerDurationToolControllerOptions;
@class PESDKTextDurationToolControllerOptions;
@class PESDKTextDesignDurationToolControllerOptions;

@interface PESDKConfiguration (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>VideoEditViewController</code>.
@property (nonatomic, readonly, strong) PESDKVideoEditViewControllerOptions * _Nonnull videoEditViewControllerOptions;
/// Options for the <code>TrimToolController</code>.
@property (nonatomic, readonly, strong) PESDKTrimToolControllerOptions * _Nonnull trimToolControllerOptions;
/// Options for the <code>CompositionToolController</code>.
@property (nonatomic, readonly, strong) PESDKCompositionToolControllerOptions * _Nonnull compositionToolControllerOptions;
/// Options for the <code>ClipTrimToolController</code>.
@property (nonatomic, readonly, strong) PESDKClipTrimToolControllerOptions * _Nonnull clipTrimToolControllerOptions;
/// Options for the <code>VideoClipToolController</code>.
@property (nonatomic, readonly, strong) PESDKVideoClipToolControllerOptions * _Nonnull videoClipToolControllerOptions;
/// Options for the <code>AudioClipToolController</code>.
@property (nonatomic, readonly, strong) PESDKAudioClipToolControllerOptions * _Nonnull audioClipToolControllerOptions;
/// Options for the <code>AudioToolController</code>.
@property (nonatomic, readonly, strong) PESDKAudioToolControllerOptions * _Nonnull audioToolControllerOptions;
/// Options for the <code>StickerDurationToolController</code>.
@property (nonatomic, readonly, strong) PESDKStickerDurationToolControllerOptions * _Nonnull stickerDurationToolControllerOptions;
/// Options for the <code>TextDurationToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDurationToolControllerOptions * _Nonnull textDurationToolControllerOptions;
/// Options for the <code>TextDesignDurationToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignDurationToolControllerOptions * _Nonnull textDesignDurationToolControllerOptions;
@end

@class PESDKTheme;
@class PESDKFilterToolControllerOptionsBuilder;
@class PESDKOverlayToolControllerOptionsBuilder;
@class PESDKStickerToolControllerOptionsBuilder;
@class PESDKStickerOptionsToolControllerOptionsBuilder;
@class PESDKFocusToolControllerOptionsBuilder;
@class PESDKTextToolControllerOptionsBuilder;
@class PESDKTextOptionsToolControllerOptionsBuilder;
@class PESDKTextFontToolControllerOptionsBuilder;
@class PESDKTextColorToolControllerOptionsBuilder;
@class PESDKTransformToolControllerOptionsBuilder;
@class PESDKFrameToolControllerOptionsBuilder;
@class PESDKFrameOptionsToolControllerOptionsBuilder;
@class PESDKTextDesignToolControllerOptionsBuilder;
@class PESDKTextDesignOptionsToolControllerOptionsBuilder;
@class PESDKTextDesignColorToolControllerOptionsBuilder;
@class PESDKTextDesignLayoutToolControllerOptionsBuilder;
@class PESDKSnappingOptionsOptionsBuilder;
@class PESDKWatermarkOptionsBuilder;

/// The configuration builder object offers all properties of <code>Configuration</code> in
/// a mutable version, in order to build an immutable <code>Configuration</code> object. To
/// further configure the different viewcontrollers, use the <code>configureXYZViewController</code>
/// methods to edit the given options.
SWIFT_CLASS_NAMED("ConfigurationBuilder")
@interface PESDKConfigurationBuilder : NSObject
/// The overall theme used to configure colors of the UI elements. Defaults to <code>PESDKTheme.dark</code>.
/// This property should only be used if you are using Objective-C.
@property (nonatomic, strong) PESDKTheme * _Nonnull theme;
/// This closure is called after the theme was applied via <code>UIAppearance</code> proxies during the initialization of a <code>CameraViewController</code> or a <code>MediaEditViewController</code>.
/// It is intended to run custom calls to <code>UIAppearance</code> proxies. The immutable active theme is passed to this closure.
/// This property should only be used if you are using Objective-C and it will only be called if the corresponding Swift closure <code>appearanceProxyConfigurationClosure</code> is <code>nil</code>.
@property (nonatomic, copy) void (^ _Nullable appearanceProxyConfigurationClosure)(PESDKTheme * _Nonnull);
/// The asset catalog which configures all assets that are available for editing tasks, such as stickers, frames, effects, overlays, fonts, and text designs. Defaults to <code>AssetCatalog.shared</code>.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Adds an options object to this builder.
/// \param options The options object to add.
///
- (void)addOptions:(id _Nonnull)options;
/// Options for the <code>CameraViewController</code>.
- (void)configureCameraViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKCameraViewControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FilterToolController</code>.
- (void)configureFilterToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFilterToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>OverlayToolController</code>.
- (void)configureOverlayToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKOverlayToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerToolController</code>.
- (void)configureStickerToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKStickerToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerOptionsToolController</code>.
- (void)configureStickerOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerColorToolController</code>.
- (void)configureStickerColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FocusToolController</code>.
- (void)configureFocusToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFocusToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextToolController</code>.
- (void)configureTextToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextOptionsToolController</code>.
- (void)configureTextOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextFontToolController</code>.
- (void)configureTextFontToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextFontToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextColorToolController</code>.
- (void)configureTextColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>AdjustToolController</code>.
- (void)configureAdjustToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKAdjustToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>BrushToolController</code>.
- (void)configureBrushToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKBrushToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>BrushToolController</code>.
- (void)configureBrushColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TransformToolController</code>.
- (void)configureTransformToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTransformToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FrameToolController</code>.
- (void)configureFrameToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFrameToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FrameOptionsToolController</code>.
- (void)configureFrameOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFrameOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignToolController</code>.
- (void)configureTextDesignToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignOptionsToolController</code>.
- (void)configureTextDesignOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignColorToolController</code>.
- (void)configureTextDesignColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignLayoutToolController</code>.
- (void)configureTextDesignLayoutToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignLayoutToolControllerOptionsBuilder * _Nonnull))builder;
/// Global snapping options for all sprites, e.g., stickers, texts, and text designs.
- (void)configureSnapping:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKSnappingOptionsOptionsBuilder * _Nonnull))builder;
/// Global watermark options.
- (void)configureWatermark:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKWatermarkOptionsBuilder * _Nonnull))builder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPhotoEditViewControllerOptionsBuilder;

@interface PESDKConfigurationBuilder (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>PhotoEditViewController</code>.
- (void)configurePhotoEditViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull))builder;
@end


@interface PESDKConfigurationBuilder (SWIFT_EXTENSION(ImglyKit))
/// Read configuration from a dictionary. This process will modify the current <code>assetCatalog</code> associated with this builder if the given <code>dictionary</code> configures any assets.
/// \param dictionary A valid JSON object.
///
- (BOOL)configureFromDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error;
/// Read configuration from data. This process will modify the current <code>assetCatalog</code> associated with this builder if the given <code>data</code> configures any assets.
/// \param data A serialized JSON object.
///
- (BOOL)configureFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end

@class PESDKTrimToolControllerOptionsBuilder;
@class PESDKVideoClipToolControllerOptionsBuilder;
@class PESDKStickerDurationToolControllerOptionsBuilder;
@class PESDKTextDurationToolControllerOptionsBuilder;
@class PESDKTextDesignDurationToolControllerOptionsBuilder;
@class PESDKVideoEditViewControllerOptionsBuilder;

@interface PESDKConfigurationBuilder (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>TrimToolController</code>.
- (void)configureTrimToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTrimToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>CompositionToolController</code>.
- (void)configureCompositionToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKCompositionToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>VideoClipToolController</code>.
- (void)configureVideoClipToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKVideoClipToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>ClipTrimToolController</code>.
- (void)configureClipTrimToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKClipTrimToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>AudioToolController</code>.
- (void)configureAudioToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKAudioToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>AudioClipToolController</code>.
- (void)configureAudioClipToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKAudioClipToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerDurationToolController</code>.
- (void)configureStickerDurationToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKStickerDurationToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDurationToolController</code>.
- (void)configureTextDurationToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDurationToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignDurationToolController</code>.
- (void)configureTextDesignDurationToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignDurationToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>VideoEditViewController</code>.
- (void)configureVideoEditViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKVideoEditViewControllerOptionsBuilder * _Nonnull))builder;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ConfigurationSerializationConfiguration")
@interface PESDKConfigurationSerializationConfiguration : NSObject
@end


/// The base class for effects that can be applied to a photo. It is meant to be subclassed.
SWIFT_CLASS_NAMED("Effect")
@interface PESDKEffect : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The identifier of the effect.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The name that is displayed to the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Returns a new <code>CIFilter</code> object that implements the actual effect.
/// Subclasses need to override this method.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
/// Initializes the base class <code>Effect</code>. Use this initilizer in subclasses only and make sure
/// to override <code>newEffectFilter</code>.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param displayName The name that is displayed to the user.
///
///
/// returns:
/// A newly initialized <code>Effect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/// Creates a no-op effect.
///
/// returns:
/// A newly initialized <code>Effect</code> object that behaves like a <code>NoEffect</code> object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates the default effects that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKEffect *> * _Nonnull defaultItems;)
+ (NSArray<PESDKEffect *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// Change this array to only support a subset of all available filters or to include custom
/// filters. By default this array includes all available filters.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKEffect *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.effects` of your `Configuration` object instead.");)
+ (NSArray<PESDKEffect *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKEffect *> * _Nonnull)newValue;
/// This method returns the effect with the given identifier if such an effect exists.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the effect.
///
///
/// returns:
/// A <code>Effect</code> object.
+ (PESDKEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.effect(withIdentifier:)` of your `Configuration` object instead.");
@end


/// A concrete <code>Effect</code> that uses a registered Core Image filter.
SWIFT_CLASS_NAMED("CoreImageEffect")
@interface PESDKCoreImageEffect : PESDKEffect
/// The name of the <code>CIFilter</code> that should be used to apply this effect.
@property (nonatomic, readonly, copy) NSString * _Nullable ciFilterName;
/// Additional options that should be passed to the <code>CIFilter</code> object that will be created when applying this effect.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable options;
/// Creates an effect based on a registered Core Image filter.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param filterName The name of the <code>CIFilter</code> that should be used to apply this effect.
///
/// \param displayName The name that is displayed to the user.
///
/// \param options Additional options that should be passed to the <code>CIFilter</code> object that will be created when applying this effect.
///
///
/// returns:
/// A newly initialized <code>CoreImageEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier ciFilterName:(NSString * _Nullable)filterName displayName:(NSString * _Nonnull)displayName options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>CIFilter</code> object with the given name and options.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKSpriteContainerView;
@protocol PESDKCropAndStraightenViewDelegate;

/// The <code>CropAndStraightenView</code> class provides support for displaying, zooming, rotating and
/// cropping an image.
SWIFT_CLASS_NAMED("CropAndStraightenView")
@interface PESDKCropAndStraightenView : UIView
/// A <code>SpriteContainerView</code> which contains all sprites that have been added.
@property (nonatomic, strong) PESDKSpriteContainerView * _Nullable spriteContainerView;
/// The delegate of the <code>CropAndStraightenView</code> object.
@property (nonatomic, weak) id <PESDKCropAndStraightenViewDelegate> _Nullable delegate;
/// The image that is to be displayed.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The straighten angle to apply to the image in radians.
@property (nonatomic) CGFloat straightenAngle;
/// The crop rect to fit the image into. This rect should be relative to the view.
@property (nonatomic) CGRect cropRect;
/// The orientation to apply to the image.
@property (nonatomic) enum PESDKOrientation orientation;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)layoutSubviews;
/// The crop rect in image dimensions.
@property (nonatomic, readonly) CGRect imageCropRect;
/// Converts a view rect to image dimensions.
/// \param viewRect The view rect to convert.
///
///
/// returns:
/// The crop rect in image dimensions.
- (CGRect)imageCropRectForViewRect:(CGRect)viewRect SWIFT_WARN_UNUSED_RESULT;
/// Updates the scroll view’s zoom scale and content offset, such that the image region fits
/// into the crop rect.
/// \param imageRegion The image region to fit into the crop rect.
///
/// \param animated Whether or not to animate the change.
///
- (void)fitImageRegion:(CGRect)imageRegion inCropRectAnimated:(BOOL)animated;
/// Returns whether the user has touched the content to initiate scrolling.
/// note:
/// The value of this property is <code>true</code> if the user has touched the image but might
/// not have yet have started dragging it.
@property (nonatomic, readonly) BOOL isTracking;
/// Returns whether the content is moving in the view after the user lifted their finger.
/// note:
/// The returned value is <code>true</code> if user isn’t dragging the content but scrolling
/// is still occurring.
@property (nonatomic, readonly) BOOL isDecelerating;
/// The frame of the crop canvas. This can be smaller than the bounds of the view so that a padding
/// can be added to the view. If this is set to an empty rect, <code>bounds</code> will be returned.
@property (nonatomic) CGRect canvasFrame;
@end


@interface PESDKCropAndStraightenView (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKCropAndStraightenView (SWIFT_EXTENSION(ImglyKit)) <MTKViewDelegate>
/// :nodoc:
- (void)drawInMTKView:(MTKView * _Nonnull)view;
/// :nodoc:
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
@end


@interface PESDKCropAndStraightenView (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


/// The methods declared by the <code>CropAndStraightenViewDelegate</code> protocol allow the adopting
/// delegate to respond to message from the <code>CropAndStraightenView</code> class and thus respond to
/// operations such as tracking.
SWIFT_PROTOCOL_NAMED("CropAndStraightenViewDelegate")
@protocol PESDKCropAndStraightenViewDelegate
/// Called just before the crop and straighten view begins tracking.
/// \param cropAndStraightenView The view that is about to begin tracking.
///
- (void)cropAndStraightenViewWillBeginTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// Called just after the crop and straighten view finished tracking.
/// \param cropAndStraightenView The view that finished tracking.
///
- (void)cropAndStraightenViewDidEndTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// Called when the crop and straighten view tracked user interaction.
/// \param cropAndStraightenView The view that tracked user interaction.
///
- (void)cropAndStraightenViewDidTrack:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
@end


/// The <code>CropAspect</code> class is used to specify the available crop aspect ratios for the
/// <code>TransformToolController</code>.
SWIFT_CLASS_NAMED("CropAspect")
@interface PESDKCropAspect : NSObject
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>CropAspect</code>. The aspect ratio is <code>width</code> divided by <code>height</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;
/// Creates a new instance of <code>CropAspect</code>. The aspect ratio is <code>width</code> divided by <code>height</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param rotatable Whether this crop aspect can be rotated by tapping on it in the transform tool.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height rotatable:(BOOL)rotatable;
/// Creates a new instance of <code>CropAspect</code> with a custom localized name. Usually the aspect
/// ratio will be used as the name, but with this initializer it is possible to use a different
/// name such as <code>Square</code> instead of <code>1.0</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param localizedName The custom localized name for this aspect ratio.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName;
/// Creates a new instance of <code>CropAspect</code> with a custom localized name. Usually the aspect
/// ratio will be used as the name, but with this initializer it is possible to use a different
/// name such as <code>Square</code> instead of <code>1.0</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param localizedName The custom localized name for this aspect ratio.
///
/// \param rotatable Whether this crop aspect can be rotated by tapping on it in the transform tool.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName rotatable:(BOOL)rotatable OBJC_DESIGNATED_INITIALIZER;
/// The width of the aspect ratio.
@property (nonatomic, readonly) CGFloat width;
/// The height of the aspect ratio.
@property (nonatomic, readonly) CGFloat height;
/// The localized name of the aspect ratio.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedName;
/// Whether this crop aspect can be rotated by tapping on it in the transform tool.
@property (nonatomic, readonly) BOOL isRotatable;
/// The calculated ratio (i.e. <code>width / height</code>).
@property (nonatomic, readonly) CGFloat ratio;
/// Whether this crop aspect is same as inverse one.
@property (nonatomic, readonly) BOOL isSquare;
/// Calculates the width for a given height.
/// \param height The height to calculate the matching width for.
///
///
/// returns:
/// The width for the given height.
- (CGFloat)widthForHeight:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
/// Calculates the height for a given width.
/// \param width The width to calculate the matching height for.
///
///
/// returns:
/// The height for the given width.
- (CGFloat)heightForWidth:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
/// Creates the reversed aspect ratio.
@property (nonatomic, readonly, strong) PESDKCropAspect * _Nonnull inversed;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Handles the display of <code>CropAspectMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("CropAspectListSectionController")
@interface PESDKCropAspectListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (void)selectItemAt:(NSInteger)index;
/// :nodoc:
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TransformToolController</code>.
SWIFT_CLASS_NAMED("CropAspectMenuItem")
@interface PESDKCropAspectMenuItem : NSObject <PESDKMenuItem>
/// The <code>CropAspect</code> that this menu item represents or <code>nil</code> if it represents the <code>Free</code> crop.
@property (nonatomic, readonly, strong) PESDKCropAspect * _Nullable cropAspect;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Whether this crop aspect can be rotated.
@property (nonatomic, readonly) BOOL rotatable;
/// When <code>true</code>, tapping this menu item causes the transform to be reset.
@property (nonatomic, readonly) BOOL resetsTransform;
/// Creates a new crop aspect menu item for the given crop aspect.
/// \param cropAspect The crop aspect that this menu item represents.
///
- (nonnull instancetype)initWithCropAspect:(PESDKCropAspect * _Nonnull)cropAspect OBJC_DESIGNATED_INITIALIZER;
/// Creates a new crop aspect menu item with the given title and no associated crop aspect.
/// \param title The title of this menu item.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title;
/// Creates the reset item.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCropAspectMenuItem * _Nonnull resetItem;)
+ (PESDKCropAspectMenuItem * _Nonnull)resetItem SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>CropHandleView</code> represents the interactive, draggable part of a crop rect.
SWIFT_CLASS_NAMED("CropHandleView")
@interface PESDKCropHandleView : UIView
/// Whether the handle view is at the top.
@property (nonatomic, readonly) BOOL isTop;
/// Whether the handle view is on the left.
@property (nonatomic, readonly) BOOL isLeft;
/// Whether the handle view is on the right.
@property (nonatomic, readonly) BOOL isRight;
/// Whether the handle view is at the bottom.
@property (nonatomic, readonly) BOOL isBottom;
/// Whether the handle view is a corner.
@property (nonatomic, readonly) BOOL isCorner;
/// Whether the handle view is lateral.
@property (nonatomic, readonly) BOOL isLateral;
/// Whether the line weight for the handle is heavy to visualize interaction.
@property (nonatomic) BOOL isLineWeightHeavy;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>CropMaskView</code> is a view that blurs the content behind it.
SWIFT_CLASS_NAMED("CropMaskView")
@interface PESDKCropMaskView : UIView
/// The underlying <code>UIVisualEffectView</code>.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull effectView;
/// The <code>UIVisualEffect</code> that will be applied to the <code>effectView</code>.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIVisualEffect * _Nullable effect;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>CropOverlayView</code> is added above the <code>CropAndStraightenView</code> to display the UI elements to
/// adjust the crop rect and hosts the mask views to dim the content that is outside the crop rect.
SWIFT_CLASS_NAMED("CropOverlayView")
@interface PESDKCropOverlayView : UIView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Whether the masked content is currently visible.
@property (nonatomic) BOOL isMaskedContentVisible;
/// Hides or shows the masked content.
/// \param visible Whether the masked content should be visible.
///
/// \param animated Whether to animate the change.
///
- (void)setMaskedContentVisible:(BOOL)visible animated:(BOOL)animated;
/// The frame of the crop rect.
@property (nonatomic) CGRect cropRect;
/// Whether the crop grid is currently visible.
@property (nonatomic) BOOL isCropGridVisible;
/// Hides or shows the crop grid.
/// \param visible Whether the crop grid should be visible.
///
/// \param animated Whether to animate the change.
///
- (void)setCropGridVisible:(BOOL)visible animated:(BOOL)animated;
/// Whether the straighten grid is currently visible.
@property (nonatomic) BOOL isStraightenGridVisible;
/// Hides or shows the straighten grid.
/// \param visible Whether the straighten grid should be visible.
///
/// \param animated Whether to animate the change.
///
- (void)setStraightenGridVisible:(BOOL)visible animated:(BOOL)animated;
@end


/// This class provides our own implementation of adjustment filters.
/// Using these we get more consistant results across the several platforms.
SWIFT_CLASS_NAMED("CustomAdjustmentsFilter")
@interface PESDKCustomAdjustmentsFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The brightness value.
@property (nonatomic, strong) NSNumber * _Nullable inputBrightness;
/// The contrast value.
@property (nonatomic, strong) NSNumber * _Nullable inputContrast;
/// The saturation value.
@property (nonatomic, strong) NSNumber * _Nullable inputSaturation;
/// The shadows value.
@property (nonatomic, strong) NSNumber * _Nullable inputShadows;
/// The highlights value.
@property (nonatomic, strong) NSNumber * _Nullable inputHighlights;
/// The exposure value.
@property (nonatomic, strong) NSNumber * _Nullable inputExposure;
/// The gamma value.
@property (nonatomic, strong) NSNumber * _Nullable inputGamma;
/// The blacks value.
@property (nonatomic, strong) NSNumber * _Nullable inputBlacks;
/// The whites value.
@property (nonatomic, strong) NSNumber * _Nullable inputWhites;
/// Returns an image with the applied changes.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKFrameImageGroup;
enum FrameLayoutMode : NSInteger;

/// The configuration for the build engine.
SWIFT_CLASS_NAMED("CustomPatchConfiguration")
@interface PESDKCustomPatchConfiguration : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The top image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable topImageGroup;
/// The left image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable leftImageGroup;
/// The bottom image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable bottomImageGroup;
/// The right image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable rightImageGroup;
/// The layout mode.
@property (nonatomic) enum FrameLayoutMode layoutMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Every frame builder must implement this protocol.
SWIFT_PROTOCOL_NAMED("FrameBuilder")
@protocol PESDKFrameBuilderProtocol
/// Builds an asset following the configuration settings, for the chosen size.
/// \param size The desired size of the output image.
///
/// \param relativeScale The scale of the frame, relative the minimum of width and height.
///
/// \param completion A completion block that gets the resulting image as parameter.
///
- (void)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
@end


/// A framebuilder for custom patches.
/// Each patch consists of four groups. There are two basic layouts.
/// The first one places the top and bottom group above the full width of the image,
/// and the left and right group in between. The second layout works the other way around.
SWIFT_CLASS_NAMED("CustomPatchFrameBuilder")
@interface PESDKCustomPatchFrameBuilder : NSObject <PESDKFrameBuilderProtocol>
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns a newly allocated instance of <code>CustomPatchFrameBuilder</code>.
/// \param configuration The configutation to use.
///
- (nonnull instancetype)initWithConfiguration:(PESDKCustomPatchConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Builds an asset following the configuration settings, for the chosen size.
/// \param size The desired size of the output image.
///
/// \param relativeScale The scale of the frame, relative the minimum of width and height.
///
///
/// returns:
/// The resulting asset.
- (void)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides the methods to generate the dynamic frame-builders provided by the SDK.
SWIFT_CLASS_NAMED("DefaultDynamicFrames")
@interface PESDKDefaultDynamicFrames : NSObject
/// Returns the builder for the ‘imgly_frame_art_decor’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull artDecorFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)artDecorFrameBuilder SWIFT_WARN_UNUSED_RESULT;
/// Returns the builder for the ‘imgly_frame_wood_passepartout’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull woodPassepartoutFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)woodPassepartoutFrameBuilder SWIFT_WARN_UNUSED_RESULT;
/// Returns the builder for the ‘imgly_frame_black_passepartout’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull blackPassepartoutFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)blackPassepartoutFrameBuilder SWIFT_WARN_UNUSED_RESULT;
/// Returns the builder for the ‘imgly_frame_dia’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull diaFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)diaFrameBuilder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The logger is used by the SDK, to promote import informations.
/// A client could use his own logger to log the messages to a server or
/// something alike.
SWIFT_PROTOCOL_NAMED("LoggerProtocol")
@protocol PESDKLoggerProtocol
/// Logs an error.
/// \param message A message.
///
- (void)error:(NSString * _Nonnull)message;
/// Logs a warning.
/// \param message A message.
///
- (void)warn:(NSString * _Nonnull)message;
/// Logs an info level message.
/// \param message A message.
///
- (void)info:(NSString * _Nonnull)message;
/// Logs a debug level message.
/// \param message A message.
///
- (void)debug:(NSString * _Nonnull)message;
@end


/// The default logger provided by the SDK. It will log into the Xcode console. It will use
/// <code>print</code> for iOS < 10.0 and os_log for iOS >= 10.0.
SWIFT_CLASS_NAMED("DefaultLogger")
@interface PESDKDefaultLogger : NSObject <PESDKLoggerProtocol>
/// Logs an error.
/// \param message A message.
///
- (void)error:(NSString * _Nonnull)message;
/// Logs a warning.
/// \param message A message.
///
- (void)warn:(NSString * _Nonnull)message;
/// Logs an info level message.
/// \param message A message.
///
- (void)info:(NSString * _Nonnull)message;
/// Logs a debug level message.
/// \param message A message.
///
- (void)debug:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// To use a custom progress HUD when saving a photo or while downloading stickers etc., your
/// progress view must implement this protocol. Please note that your custom progress view should
/// disable user interaction in all parts of the editor. Changing state while the progress view
/// is visible can cause unexpected behavior.
SWIFT_PROTOCOL_NAMED("ProgressView")
@protocol PESDKProgressView
/// Displays the progress HUD with the given message.
/// \param message The message to display in the progress HUD.
///
- (void)showWithMessage:(NSString * _Nonnull)message;
/// Hides the progress HUD.
- (void)hide;
@optional
/// Changes the progress on the HUD.
/// \param value Progress from 0 to 1.
///
- (void)setProgress:(double)value;
/// Displays the progress HUD with the given message, cancel text, and cancel handler.
/// \param message The message to display in the progress HUD.
///
/// \param cancelText Title of the cancel button.
///
/// \param cancelHandler Cancel handler that cancels the current action in progress.
///
- (void)showWithMessage:(NSString * _Nonnull)message cancelText:(NSString * _Nonnull)cancelText cancelHandler:(void (^ _Nonnull)(void))cancelHandler;
@end


/// A <code>ProgressView</code> is an activity indicator that is shown on top of all other views in a HUD style
/// and temporarily blocks all user interaction with other views.
SWIFT_CLASS_NAMED("DefaultProgressView")
@interface PESDKDefaultProgressView : NSObject <PESDKProgressView>
/// The main container view of the progress view.
@property (nonatomic, readonly, strong) UIView * _Nonnull overlayView;
/// The background view that is being animated in.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundView;
/// The image view that holds the spinner.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The label that contains the loading message.
@property (nonatomic, readonly, strong) UILabel * _Nonnull label;
/// The cancel button that is only shown in case of showing with cancel callback.
@property (nonatomic, readonly, strong) PESDKCancelButton * _Nonnull cancelButton;
/// The duration of one rotation of the spinner.
@property (nonatomic) double animationDuration;
/// A shared instance for convenience.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKDefaultProgressView * _Nonnull sharedView;)
+ (PESDKDefaultProgressView * _Nonnull)sharedView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Presents the activity indicator with the given message.
/// \param message The message to present.
///
- (void)showWithMessage:(NSString * _Nonnull)message;
/// Presents a cancelable activity indicator with the given message.
/// \param message The message to present.
///
/// \param cancelText Cancel button title.
///
/// \param cancelHandler Cancel button callback that triggers on button press.
///
- (void)showWithMessage:(NSString * _Nonnull)message cancelText:(NSString * _Nonnull)cancelText cancelHandler:(void (^ _Nonnull)(void))cancelHandler;
/// Sets the percentage on the ProgressView.
/// \param value Progress to be shown from 0 to 1.
///
- (void)setProgress:(double)value;
/// Hides the activity indicator.
- (void)hide;
@end

@class PESDKToolbarButton;

/// A <code>ToolbarItem</code> hosts views which are displayed in the <code>toolbar</code> of a <code>ToolbarController</code>.
/// If the toolbar controller is embedded into an <code>UINavigationController</code>, those views are added
/// to the navigation controller’s navigation bar.
SWIFT_CLASS_NAMED("ToolbarItem")
@interface PESDKToolbarItem : NSObject
/// The title view is displayed in the center of the toolbar or navigation bar.
@property (nonatomic, strong) UIView * _Nullable titleView;
/// The leading button is displayed on the left side of the toolbar or navigation bar in a LTR
/// environment and on the right side of the toolbar or navigation bar in a RTL environment.
@property (nonatomic, strong) PESDKToolbarButton * _Nullable leadingButton;
/// The trailing button is displayed on the right side of the toolbar or navigation bar in a LTR
/// environment and on the left side of the toolbar or navigation bar in a RTL environment.
@property (nonatomic, strong) PESDKToolbarButton * _Nullable trailingButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKLabel;

/// A <code>DefaultToolbarItem</code> is a toolbar item with a label in the center and a default discard
/// button on the left and apply button on the right. It is used in most tool controllers.
SWIFT_CLASS_NAMED("DefaultToolbarItem")
@interface PESDKDefaultToolbarItem : PESDKToolbarItem
/// The title label of the item.
@property (nonatomic, strong) PESDKLabel * _Nonnull titleLabel;
/// The default discard button on the leading side.
@property (nonatomic, strong) PESDKToolbarButton * _Nonnull discardButton;
/// The default apply button on the trailing side.
@property (nonatomic, strong) PESDKToolbarButton * _Nonnull applyButton;
/// :nodoc:
@property (nonatomic, strong) UIView * _Nullable titleView;
/// :nodoc:
@property (nonatomic, strong) PESDKToolbarButton * _Nullable leadingButton;
/// :nodoc:
@property (nonatomic, strong) PESDKToolbarButton * _Nullable trailingButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKPhotoRepresentation;

/// Contains the results of a deserialization.
SWIFT_CLASS_NAMED("DeserializationResult")
@interface PESDKDeserializationResult : NSObject
/// A photo that may have been serialized within the settings file.
@property (nonatomic, readonly, strong) id <PESDKPhotoRepresentation> _Nullable photo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKDeserializationResult (SWIFT_EXTENSION(ImglyKit))
/// The deserialized model or nil, if deserialization failed.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nullable model;
@end


/// Wrapper class that manages deserialization of settings files and delegates
/// work to the different implementations for each major version.
SWIFT_CLASS_NAMED("Deserializer")
@interface PESDKDeserializer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface PESDKDeserializer (SWIFT_EXTENSION(ImglyKit))
/// Deserializes the settings file contained in the given data.
/// If the deserialized data contains embedded personal assets they will be added to <code>AssetCatalog.shared</code>.
/// \param data The JSON settings.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `deserializeWithData:assetCatalog:` instead.");
/// Deserializes the settings file contained in the given data.
/// \param data The JSON settings.
///
/// \param assetCatalog If the deserialized data contains embedded personal assets they will be added to this <code>AssetCatalog</code>.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog SWIFT_WARN_UNUSED_RESULT;
/// Deserializes the settings file contained in the given data.
/// If the deserialized data contains embedded personal assets they will be added to <code>AssetCatalog.shared</code>.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `deserializeWithData:imageDimensions:assetCatalog:` instead.");
/// Deserializes the settings file contained in the given data.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
/// \param assetCatalog If the deserialized data contains embedded personal assets they will be added to this <code>AssetCatalog</code>.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog SWIFT_WARN_UNUSED_RESULT;
/// Deserializes the settings file contained in the given data.
/// If the deserialized data contains embedded personal assets they will be added to <code>AssetCatalog.shared</code>.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
/// \param existingModel If an existing model is given, only values present in the serialized settings
/// will be updated. This allows applying templates during editing.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions existingModel:(PESDKPhotoEditModel * _Nonnull)existingModel SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `deserializeWithData:imageDimensions:existingModel:assetCatalog:` instead.");
/// Deserializes the settings file contained in the given data.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
/// \param existingModel If an existing model is given, only values present in the serialized settings
/// will be updated. This allows applying templates during editing.
///
/// \param assetCatalog If the deserialized data contains embedded personal assets they will be added to this <code>AssetCatalog</code>.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions existingModel:(PESDKPhotoEditModel * _Nonnull)existingModel assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog SWIFT_WARN_UNUSED_RESULT;
@end


/// Used to determine device orientation even if orientation lock is active.
SWIFT_CLASS_NAMED("DeviceOrientationController")
@interface PESDKDeviceOrientationController : NSObject
/// Starts to observe the accelerometer to update the capture video orientation.
/// This needs to be done, to capture with the correct device orientation.
- (void)start;
/// Stops observing the acceleronmenter.
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>Label</code> is a subclass of <code>UILabel</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("Label")
@interface PESDKLabel : UILabel
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// This property wraps <code>textColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
@end


/// A <code>DimmedLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("DimmedLabel")
@interface PESDKDimmedLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>DimmingView</code> is a subclass of <code>UIView</code>, which allows to restrict appearance proxy calls
/// to a subset of all views that are instances of this class.
SWIFT_CLASS_NAMED("DimmingView")
@interface PESDKDimmingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A concrete <code>Effect</code> that creates a duotone look based on a two-color gradient map applied to the
/// input after grayscale conversion.
SWIFT_CLASS_NAMED("DuoToneEffect")
@interface PESDKDuoToneEffect : PESDKEffect
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The color that is mapped to light colors.
@property (nonatomic, readonly, strong) UIColor * _Nullable lightColor;
/// The color that is mapped to dark colors.
@property (nonatomic, readonly, strong) UIColor * _Nullable darkColor;
/// Creates an effect for duotone looks.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lightColor The color that is mapped to light colors.
///
/// \param darkColor The color that is mapped to dark colors.
///
/// \param displayName The name that is displayed to the user.
///
///
/// returns:
/// A newly initialized <code>DuoToneEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lightColor:(UIColor * _Nullable)lightColor darkColor:(UIColor * _Nullable)darkColor displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>CIFilter</code> object.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides a general duotone filter.
SWIFT_CLASS_NAMED("DuoToneFilter")
@interface PESDKDuoToneFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The effect intensity in range.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The light duotone color.
@property (nonatomic, strong) UIColor * _Nullable inputLightColor;
/// The dark duotone color.
@property (nonatomic, strong) UIColor * _Nullable inputDarkColor;
/// Returns an image with the applied changes.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKDurationToolControllerOptionsBuilder;

/// Options for configuring a <code>DurationToolController</code>.
SWIFT_CLASS_NAMED("DurationToolControllerOptions")
@interface PESDKDurationToolControllerOptions : PESDKToolControllerOptions
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>DurationToolControllerOptions</code> using the given builder.
/// \param durationBuilder An instance of <code>DurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>DurationToolControllerOptionsBuilder</code> for <code>DurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("DurationToolControllerOptionsBuilder")
@interface PESDKDurationToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>DurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param durationOptions A <code>DurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end




/// Handles the display of <code>EffectMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("EffectListSectionController")
@interface PESDKEffectListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FilterToolController</code>.
SWIFT_CLASS_NAMED("EffectMenuItem")
@interface PESDKEffectMenuItem : NSObject <PESDKMenuItem>
/// The <code>Effect</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKEffect * _Nonnull effect;
/// The thumbnail of the effect.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// Creates a new <code>EffectMenuItem</code> for the given effect.
/// \param effect The <code>Effect</code> that this menu item represents.
///
/// \param thumbnail A thumbnail representing this effect.
///
- (nonnull instancetype)initWithEffect:(PESDKEffect * _Nonnull)effect thumbnail:(UIImage * _Nullable)thumbnail OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>EffectThumbnailRenderer</code> can be used to generate thumbnails of a given input image for
/// multiple effects.
SWIFT_CLASS_NAMED("EffectThumbnailRenderer")
@interface PESDKEffectThumbnailRenderer : NSObject
/// The input image that will be used to generate the thumbnails.
@property (nonatomic, readonly, strong) UIImage * _Nonnull inputImage;
/// Creates a effect thumbnail renderer with the given input image.
/// \param inputImage The input image that will be used to generate the thumbnails.
///
///
/// returns:
/// A newly initialized <code>EffectThumbnailRenderer</code> object.
- (nonnull instancetype)initWithInputImage:(UIImage * _Nonnull)inputImage OBJC_DESIGNATED_INITIALIZER;
/// Generates thumbnails for multiple effects of the given size.
/// \param effects The effects that should be used to generate thumbnails.
///
/// \param size The size of the thumbnails.
///
/// \param singleCompletion This handler will be called for each thumbnail that has been created successfully.
///
- (void)generateThumbnailsForEffects:(NSArray<PESDKEffect *> * _Nonnull)effects ofSize:(CGSize)size singleCompletion:(void (^ _Nonnull)(UIImage * _Nonnull, PESDKEffect * _Nonnull))singleCompletion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol PESDKFilterEditControllerDelegate;

/// A <code>FilterEditController</code> can update the applied filter and the filter’s intensity using a
/// contained <code>SliderEditController</code>. It is supposed to be contained in a tool controller and is
/// added above a <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("FilterEditController")
@interface PESDKFilterEditController : PESDKViewController
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKFilterEditControllerDelegate> _Nullable delegate;
/// The <code>Effect</code> that is currently applied.
@property (nonatomic, strong) PESDKEffect * _Nullable effect;
/// Whether to show the filter intensity slider.
@property (nonatomic) BOOL showFilterIntensitySlider;
/// The initial filter intensity to apply when setting a new effect.
@property (nonatomic) CGFloat initialFilterIntensity;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// Updates the currently set effect. If <code>nil</code> is passed, the slider is hidden, otherwise
/// it is shown.
/// \param effect The effect to apply, if any.
///
/// \param animated Whether to animate the showing or hiding of the slider.
///
- (void)setEffect:(PESDKEffect * _Nullable)effect animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKFilterEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKFilterEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end



/// The <code>FilterEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>FilterEditController</code>.
SWIFT_PROTOCOL_NAMED("FilterEditControllerDelegate")
@protocol PESDKFilterEditControllerDelegate
/// Asks the delegate for the scroll view to which zoom events of the filter edit controller should
/// be forwarded.
/// \param filterEditController The filter edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)filterEditControllerTargetScrollView:(PESDKFilterEditController * _Nonnull)filterEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param filterEditController The filter edit controller that changed the photo edit model.
///
- (void)filterEditControllerDidChangePhotoEditModel:(PESDKFilterEditController * _Nonnull)filterEditController;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param filterEditController The filter edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)filterEditController:(PESDKFilterEditController * _Nonnull)filterEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end


/// A <code>FilterSelectionController</code> contains everything that is needed to display a list of available filters.
SWIFT_CLASS_NAMED("FilterSelectionController")
@interface PESDKFilterSelectionController : NSObject
/// The collection view that presents all available filters.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/// This block is called when a new effect is selected.
@property (nonatomic, copy) void (^ _Nullable selectedBlock)(PESDKEffect * _Nonnull);
/// This block is used to determine the currently applied effect.
@property (nonatomic, copy) PESDKEffect * _Nullable (^ _Nullable activeEffectBlock)(void);
/// This block is used to configure the filter collection view cell.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKEffect * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nonnull instancetype)initWithConfiguration:(PESDKConfiguration * _Nonnull)configuration;
/// Creates a new instance of a <code>FilterSelectionController</code> using the given input image.
/// \param inputImage The input image that should be used to preview the filters.
///
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage;
/// Creates a new instance of a <code>FilterSelectionController</code> using the given input image and cell class.
/// \param inputImage The input image that should be used to preview the filters.
///
/// \param cellClass The type of cell that should be used.
///
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage cellClass:(SWIFT_METATYPE(PESDKMenuCollectionViewCell) _Nonnull)cellClass;
/// Creates a new instance of a <code>FilterSelectionController</code> using the given input image and cell class.
/// \param inputImage The input image that should be used to preview the filters.
///
/// \param cellClass The type of cell that should be used.
///
/// \param configuration A <code>Configuration</code> object.
///
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage cellClass:(SWIFT_METATYPE(PESDKMenuCollectionViewCell) _Nonnull)cellClass configuration:(PESDKConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Updates the cell selection based on the <code>activeEffectBlock</code>.
/// \param animated If <code>true</code> the selection will be animated.
///
- (void)updateSelectionWithAnimated:(BOOL)animated;
@end


@interface PESDKFilterSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKFilterSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface PESDKFilterSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>FilterToolController</code> is reponsible for displaying the UI to apply an effect filter to an image.
SWIFT_CLASS_NAMED("FilterToolController")
@interface PESDKFilterToolController : PESDKMenuToolController <PESDKFilterEditControllerDelegate>
/// The <code>FilterEditController</code> that is contained by this tool.
@property (nonatomic, readonly, strong) PESDKFilterEditController * _Nonnull filterEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)filterEditControllerDidChangePhotoEditModel:(PESDKFilterEditController * _Nonnull)filterEditController;
/// :nodoc:
- (UIScrollView * _Nullable)filterEditControllerTargetScrollView:(PESDKFilterEditController * _Nonnull)filterEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)filterEditController:(PESDKFilterEditController * _Nonnull)filterEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end


@class PESDKGroup;

/// Options for configuring a <code>FilterToolController</code>.
SWIFT_CLASS_NAMED("FilterToolControllerOptions")
@interface PESDKFilterToolControllerOptions : PESDKToolControllerOptions
/// This closure can be used to configure the filter intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the filter intensity slider’s container view.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the filter intensity slider. Defaults to true.
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;
/// The intensity that should be initialy applied to a filter when selecting it. Defaults to 100 %.
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
/// This closure is called every time the user selects a filter.
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectedClosure)(PESDKEffect * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Effect</code> will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the filter cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Effect</code> as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable filterCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the folder cells. The closure is called for
/// each folder cell and has the cell as a parameter.
@property (nonatomic, readonly, copy) void (^ _Nullable folderCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull);
/// This array represents the groups that filters are grouped in. A group can contain any filter
/// that is defined in <code>Effect.all</code>. Any filters that are not part of a group but defined in
/// <code>Effect.all</code> will appear as a top-level effect in front of any groups. If you do not want
/// to group any filters, simply set this to an empty array.
@property (nonatomic, readonly, copy) NSArray<PESDKGroup *> * _Nonnull filterGroups;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new <code>FilterToolControllerOptions</code> using the given builder.
/// \param builder A <code>FilterToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKFilterToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FilterToolControllerOptionsBuilder</code> for <code>FilterToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FilterToolControllerOptionsBuilder")
@interface PESDKFilterToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure can be used to configure the filter intensity slider.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the filter intensity slider’s container view.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the filter intensity slider. Defaults to true.
@property (nonatomic) BOOL showFilterIntensitySlider;
/// The intensity that should be initialy applied to a filter when selecting it. Defaults to 100 %.
@property (nonatomic) CGFloat initialFilterIntensity;
/// This closure is called every time the user selects a filter.
@property (nonatomic, copy) void (^ _Nullable filterSelectedClosure)(PESDKEffect * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Effect</code> will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable filterIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the filter cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Effect</code> as parameters.
@property (nonatomic, copy) void (^ _Nullable filterCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the folder cells. The closure is called for
/// each folder cell and has the cell as a parameter.
@property (nonatomic, copy) void (^ _Nullable folderCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull);
/// This array represents the groups that filters are grouped in. A group can contain any filter
/// that is defined in <code>Effect.all</code>. Any filters that are not part of a group but defined in
/// <code>Effect.all</code> will appear as a top-level effect in front of any groups. If you do not want
/// to group any filters, simply set this to an empty array.
@property (nonatomic, copy) NSArray<PESDKGroup *> * _Nonnull filterGroups;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>FilterToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>FilterToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKFilterToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

@class PESDKLinearGradientView;
enum PESDKFocusMode : NSInteger;
@protocol PESDKFocusEditControllerDelegate;

/// A <code>FocusEditController</code> displays controls to update a linear or radial blur. It is supposed to
/// be contained in a tool controller and be presented above a <code>PhotoEditPreviewController</code>. It
/// can also contain a <code>SliderEditController</code> to present a slider to control the blur intensity.
SWIFT_CLASS_NAMED("FocusEditController")
@interface PESDKFocusEditController : PESDKViewController
/// The <code>BoxGradientView</code> to update the linear blur.
@property (nonatomic, readonly, strong) PESDKBoxGradientView * _Nonnull boxGradientView;
/// The <code>CircleGradientView</code> to update the radial blur.
@property (nonatomic, readonly, strong) PESDKCircleGradientView * _Nonnull circleGradientView;
/// The <code>LinearGradientView</code> to update the linear blur.
@property (nonatomic, readonly, strong) PESDKLinearGradientView * _Nonnull linearGradientView;
/// The currently active <code>FocusMode</code>. Based on this the correct gradient view is shown.
@property (nonatomic) enum PESDKFocusMode focusMode;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKFocusEditControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// Changes the active focus mode and displays the correct gradient view.
/// \param focusMode The focus mode to use.
///
/// \param animated Whether to animate the layout change.
///
- (void)setFocusMode:(enum PESDKFocusMode)focusMode animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKFocusEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKFocusEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end



/// The <code>FocusEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>FocusEditControllerDelegate</code>.
SWIFT_PROTOCOL_NAMED("FocusEditControllerDelegate")
@protocol PESDKFocusEditControllerDelegate
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param focusEditController The focus edit controller that changed the photo edit model.
///
- (void)focusEditControllerDidChangePhotoEditModel:(PESDKFocusEditController * _Nonnull)focusEditController;
/// Asks the delegate for the preview view.
/// \param focusEditController The focus edit controller asking for the preview view.
///
///
/// returns:
/// The preview view.
- (UIView * _Nullable)focusEditControllerPreviewView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the scroll view to which zoom events of the focus edit controller should
/// be forwarded.
/// \param focusEditController The focus edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)focusEditControllerTargetScrollView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the untransformed image size.
/// \param focusEditController The foucs edit controller asking for the size.
///
///
/// returns:
/// The untransformed image size.
- (CGSize)focusEditControllerUntransformedImageSize:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param focusEditController The focus edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)focusEditController:(PESDKFocusEditController * _Nonnull)focusEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end



@interface PESDKFocusGradientView (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>FocusMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FocusListSectionController")
@interface PESDKFocusListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FocusToolController</code>.
SWIFT_CLASS_NAMED("FocusMenuItem")
@interface PESDKFocusMenuItem : NSObject <PESDKMenuItem>
/// The <code>FocusMode</code> that this menu item represents.
@property (nonatomic, readonly) enum PESDKFocusMode focusMode;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new focus menu item for the given focus mode.
/// \param focusMode The focus mode that this menu item represents.
///
- (nullable instancetype)initWithFocusMode:(enum PESDKFocusMode)focusMode;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the mode of focus that should be used in an image.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKFocusMode, "FocusMode", open) {
/// Focus should be disabled.
  PESDKFocusModeOff = 0,
/// A radial focus should be used.
  PESDKFocusModeRadial = 1,
/// A mirrored focus should be used.
  PESDKFocusModeMirrored = 2,
/// A linear focus should be used.
  PESDKFocusModeLinear = 3,
/// A gaussian focus should be used.
  PESDKFocusModeGaussian = 4,
};


/// The tool controller to edit the focus. It contains a menu with options to select the type of
/// blur and a <code>FocusEditController</code> to update the blur.
SWIFT_CLASS_NAMED("FocusToolController")
@interface PESDKFocusToolController : PESDKMenuToolController <PESDKFocusEditControllerDelegate>
/// The contained <code>FocusEditController</code>.
@property (nonatomic, readonly, strong) PESDKFocusEditController * _Nonnull focusEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)focusEditControllerDidChangePhotoEditModel:(PESDKFocusEditController * _Nonnull)focusEditController;
/// :nodoc:
- (UIView * _Nullable)focusEditControllerPreviewView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)focusEditControllerPreviewContainer:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)focusEditControllerDidSlide:(PESDKFocusEditController * _Nonnull)focusEditController toValue:(CGFloat)value;
/// :nodoc:
- (UIScrollView * _Nullable)focusEditControllerTargetScrollView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
- (CGSize)focusEditControllerUntransformedImageSize:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)focusEditController:(PESDKFocusEditController * _Nonnull)focusEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end



/// Options for configuring a <code>FocusToolController</code>.
SWIFT_CLASS_NAMED("FocusToolControllerOptions")
@interface PESDKFocusToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the focus mode buttons. The closure is called for
/// each focus mode button and has the button and its corresponding focus mode as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable focusModeButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum PESDKFocusMode);
/// This closure is called when the user selects a focus mode.
@property (nonatomic, readonly, copy) void (^ _Nullable focusModeSelectedClosure)(enum PESDKFocusMode);
/// This closure can be used to configure the slider.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure is called whenever the slider changes its value. The instance of <code>Slider</code> and
/// the active focus mode are passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderUpdatedValueClosure)(PESDKSlider * _Nonnull, enum PESDKFocusMode);
/// This closure can be used to configure the circle gradient view.
@property (nonatomic, readonly, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(PESDKCircleGradientView * _Nonnull);
/// This closure can be used to configure the box gradient view.
@property (nonatomic, readonly, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(PESDKBoxGradientView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>FocusToolControllerOptions</code> using the given builder.
/// \param builder A <code>FocusToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKFocusToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FocusToolControllerOptionsBuilder</code> for <code>FocusToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FocusToolControllerOptionsBuilder")
@interface PESDKFocusToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the focus mode buttons. The closure is called for
/// each focus mode button and has the button and its corresponding focus mode as parameters.
@property (nonatomic, copy) void (^ _Nullable focusModeButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum PESDKFocusMode);
/// This closure is called when the user selects a focus mode.
@property (nonatomic, copy) void (^ _Nullable focusModeSelectedClosure)(enum PESDKFocusMode);
/// This closure can be used to configure the slider.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure is called whenever the slider changes its value. The instance of <code>Slider</code> and
/// the active focus mode are passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderUpdatedValueClosure)(PESDKSlider * _Nonnull, enum PESDKFocusMode);
/// This closure can be used to configure the circle gradient view.
@property (nonatomic, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(PESDKCircleGradientView * _Nonnull);
/// This closure can be used to configure the box gradient view.
@property (nonatomic, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(PESDKBoxGradientView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKFocusToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>PESDKFocusMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedFocusModes</code> with the corresponding <code>PESDKFocusMode</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFocusModes;
@end


/// Handles the display of <code>FolderMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FolderListSectionController")
@interface PESDKFolderListSectionController : PESDKMenuListSectionController
/// :nodoc:
@property (nonatomic, readonly) NSInteger numberOfItems;
/// :nodoc:
- (CGSize)sizeForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didSelectItemAt:(NSInteger)index;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used to group multiple assets.
SWIFT_CLASS_NAMED("FolderMenuItem")
@interface PESDKFolderMenuItem : NSObject <PESDKMenuItem>
/// The identifier that this menu item represents.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The thumbnail image of this menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// The accessibility identifier of this menu item.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityIdentifier;
/// The child menu items that this group contains.
@property (nonatomic, readonly, copy) NSArray<id <PESDKMenuItem>> * _Nonnull items;
/// Creates a new <code>FolderMenuItem</code> object.
/// \param identifier The identifier that this menu item represents.
///
/// \param title The title of this menu item.
///
/// \param thumbnail The thumbnail image of this menu item.
///
/// \param accessibilityIdentifier The accessibility identifier of this menu item.
///
/// \param items The child menu items that this group contains.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title thumbnail:(UIImage * _Nullable)thumbnail accessibilityIdentifier:(NSString * _Nullable)accessibilityIdentifier items:(NSArray<id <PESDKMenuItem>> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Font</code> represents meta information about a font, that should be loaded into the SDK.
/// If a font has a long name, the <code>displayName</code> can be used to substitude it within the UI.
/// The font name is used by iOS to identify the font. This is usualy the filename of the font.
/// But it can be different. To be sure use the font in a sandbox project, and get its ‘fontName’ attribute.
SWIFT_CLASS_NAMED("Font")
@interface PESDKFont : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL to the font, e.g. URL within a bundle. This is not needed when using
/// system fonts.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Some font names are long and rather ugly. In that case it is possible to change the displayed
/// name of the font with this property.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// The name of the font as registered in the font manager.
@property (nonatomic, copy) NSString * _Nonnull fontName;
/// A unique identifier, that is used during (de)serialization to identify a font between platforms.
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// Creates a font from the given font url, with the display name.
/// The font name will be used as argument for the <code>UIFont</code> initializer,
/// therefor the name does not necessarily need to equal the filename,
/// but rather the font family. Please refer to the official Apple documentation for details.
/// If you have trouble loading a font, please set up a test project,
/// and try to load the font using <code>UIFont</code>, or use the interface builder to load the font,
/// and print out the <code>fontName</code>.
/// \param url The URL to the font, e.g. URL within a bundle.
///
/// \param displayName The name for the font that is used within the UI.
///
/// \param fontName The actual name of the font.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url displayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Creates a font with the given name and display name.
/// This initializer should be used when adding system fonts.
/// The font name will be used as argument for the UIFont initializer.
/// \param displayName The name for the font that is used within the UI.
///
/// \param fontName The actual name of the font.
///
- (nonnull instancetype)initWithDisplayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Provides functions to import fonts added as resources. It also registers them,
/// so that the application can load them like any other pre-installed font.
SWIFT_CLASS_NAMED("FontImporter")
@interface PESDKFontImporter : NSObject
/// This array contains all available fonts.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKFont *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.fonts` of your `Configuration` object instead.");)
+ (NSArray<PESDKFont *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKFont *> * _Nonnull)newValue;
/// Returns the first font with the given identifier, if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the font to look for.
///
///
/// returns:
/// The font with the given identifier or <code>nil</code>.
+ (PESDKFont * _Nullable)fontWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.font(withIdentifier:)` of your `Configuration` object instead.");
/// Creates the default fonts that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKFont *> * _Nonnull defaultItems;)
+ (NSArray<PESDKFont *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Handles the display of <code>FontMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FontListSectionController")
@interface PESDKFontListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextFontToolController</code>.
SWIFT_CLASS_NAMED("FontMenuItem")
@interface PESDKFontMenuItem : NSObject <PESDKMenuItem>
/// The <code>Font</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKFont * _Nonnull font;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Creates a new font menu item for the given font.
/// \param font The font that this menu item represents.
///
- (nonnull instancetype)initWithFont:(PESDKFont * _Nonnull)font;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKFontSelectorViewDelegate;

/// The <code>FontSelectorView</code> is a subclass of <code>UIScrollView</code> that presents a scrollable list of fonts.
SWIFT_CLASS_NAMED("FontSelectorView")
@interface PESDKFontSelectorView : UIScrollView
/// The receiver’s delegate.
/// <ul>
///   <li>
///     See: <code>FontSelectorViewDelegate</code>.
///   </li>
/// </ul>
@property (nonatomic, weak) id <PESDKFontSelectorViewDelegate> _Nullable selectorDelegate;
/// The text color for the fonts.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The text color for the font’s label.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/// The name of the currently selected font.
@property (nonatomic, copy) NSString * _Nullable selectedFontName;
/// The preview text.
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
- (void)layoutSubviews;
@end


/// The <code>FontSelectorViewDelegate</code> protocol defines methods that allow you to respond to the events
/// of an instance of <code>FontSelectorView</code>.
SWIFT_PROTOCOL_NAMED("FontSelectorViewDelegate")
@protocol PESDKFontSelectorViewDelegate
/// Called when a font was selected in the font selector view.
/// \param fontSelectorView The font selector view that the font was selected in.
///
/// \param fontName The name of the font that was selected.
///
- (void)fontSelectorView:(PESDKFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
@end

/// A force trim mode.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKForceTrimMode, "ForceTrimMode", open) {
/// Will always automatically present the composition tool or the trim tool
/// after opening the editor and force your users to change the length of the video(s).
/// The composition tool will only be used if it is included in your subscription and if it is included in the menu items
/// or if both the composition and trim tool are not included as menu items.
/// Otherwise, the trim tool is used if it is included in your subscription.
  PESDKForceTrimModeAlways = 0,
/// Will automatically present the composition or trim tool if needed.
/// Will only present:
/// <ul>
///   <li>
///     the composition tool, if your initial composition is longer than <code>TrimToolControllerOptions.maximumDuration</code> or shorter than <code>TrimToolControllerOptions.minimumDuration</code>, or
///   </li>
///   <li>
///     the trim tool, if your initial video is longer than <code>TrimToolControllerOptions.maximumDuration</code>. If the video is shorter than <code>TrimToolControllerOptions.minimumDuration</code> an alert
///     (see <code>TrimToolControllerOptions.videoTooShortConfirmationClosure</code>) is displayed as soon as the editor is opened and after dismissing the alert, the editor is closed.
///   </li>
/// </ul>
/// The composition tool will only be used if it is included in your subscription and if it is included in the menu items
/// or if both the composition and trim tool are not included as menu items.
/// Otherwise, the trim tool is used if it is included in your subscription.
  PESDKForceTrimModeIfNeeded = 1,
/// Will automatically trim the video to <code>TrimToolControllerOptions.maximumDuration</code> without opening any tool.
/// If the length of the initially loaded video(s) is shorter than <code>TrimToolControllerOptions.minimumDuration</code> and the user has the option to add more videos (because of composition),
/// an alert (see <code>CompositionToolControllerOptions.compositionTooShortConfirmationClosure</code>) will be shown when tapping the export button and after dismissing the alert, the composition tool will automatically open.
/// If no additional videos can be added, an alert (see <code>TrimToolControllerOptions.videoTooShortConfirmationClosure</code>) is displayed as soon as the editor is opened and after dismissing the alert, the editor is closed.
  PESDKForceTrimModeSilent = 2,
};


/// A <code>Frame</code> represents a unique frame, which can have multiple images for different aspect ratios.
/// The matching image for the current aspect ratio will be used automatically. Each frame neeeds at
/// least one image and one thumbnail image. If no thumbnail is provide, it is automatically generated.
SWIFT_CLASS_NAMED("Frame")
@interface PESDKFrame : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The amount by which the image should be inset when this frame is applied. The inset is
/// specified as a value relative to the smaller side of the image.
@property (nonatomic) UIEdgeInsets imageInsets;
/// The default scale of the frame. This specifies the frame’s width and is relative to the
/// shorter side of the untransformed image.
@property (nonatomic, readonly) CGFloat relativeScale;
/// The tolerance that is used to check if this frame
/// is a good match for a certain ratio.
@property (nonatomic, readonly) CGFloat tolerance;
/// This string is used to identify this frame. It must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// This indicates if a Frame is dynamic. A dynamic frame is composed of other images,
/// and therefore it can be adjusted to fit every ratio.
@property (nonatomic, readonly) BOOL isDynamic;
/// Instantiates a new <code>Frame</code>, built using the given frame builder.
/// Use this initializer for dynamic frames.
/// \param frameBuilder The builder that will build the frame.
///
/// \param relativeScale The relative scale of the frame. Relative to the shorter side of an image.
///
/// \param thumbnailURL A <code>URL</code> for the thumbnail asset.
///
- (nonnull instancetype)initWithFrameBuilder:(id <PESDKFrameBuilderProtocol> _Nonnull)frameBuilder relativeScale:(CGFloat)relativeScale thumbnailURL:(NSURL * _Nonnull)thumbnailURL identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>Frame</code>. Use this initializer for static frames.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier tolerance:(CGFloat)tolerance OBJC_DESIGNATED_INITIALIZER;
/// Adds an image for a given ratio to this frame.
/// \param imageURL The url for the frame’s full size image. This can be a file url or a remote
/// /    url.
///
/// \param thumbnailURL The url for the frame’s thumbnail image. This can be a file url or a
/// remote url.
///
/// \param ratio The ratio that this image should be used for.
///
- (void)addImage:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL forRatio:(CGFloat)ratio;
/// The image url for a given ratio.
/// \param ratio The ratio to get the image url for.
///
///
/// returns:
/// An image url or <code>nil</code>.
- (NSURL * _Nullable)imageURLForRatio:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// The mask image url for a given ratio.
/// \param ratio The ratio to get the image url for.
///
/// \param tolerance The tolerance that is used to pick the correct image based on the
/// aspect ratio.
///
///
/// returns:
/// An image url or <code>nil</code>.
- (NSURL * _Nullable)maskImageURLForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance SWIFT_WARN_UNUSED_RESULT;
/// Generates a frame asset for the given size, using a <code>FrameBuilder</code>.
/// \param size The desired size.
///
/// \param completion A completion block that is called with the generated asset.
///
- (void)imageForSize:(CGSize)size completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// Generates a frame asset for the given size and scale, using a <code>FrameBuilder</code>.
/// \param size The desired size.
///
/// \param relativeScale The width of the frame, relative to the shortest side of the untransformed
/// image.
///
/// \param completion A completion block that is called with the generated asset.
///
- (void)imageForSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// Generates a frame asset for the given ratio for a static (<code>isDynamic == false</code>) frame.
/// \param ratio The desired ratio.
///
/// \param completion A closure that is executed after the image has been generated.
///
- (void)staticImageForRatio:(CGFloat)ratio completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// This method generates a thumbnail of a dynamic frame.
/// After generation, the image is saved to the photo album.
/// \param size The desired size.
///
- (void)saveThumbnailToCameraRollForSize:(CGSize)size;
/// The thumbnail url for a given ratio.
/// \param ratio The ratio to get the thumbnail url for.
///
///
/// returns:
/// A thumbnail url or <code>nil</code>.
- (NSURL * _Nullable)thumbnailURLForRatio:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// Checks whether a frame has an image added for a given ratio.
/// \param ratio The ratio to check.
///
///
/// returns:
/// <code>true</code> if an image for this ratio was added, <code>false</code> otherwise.
- (BOOL)hasImageForRatio:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// The pool of frames that is available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKFrame *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.frames` of your `Configuration` object instead.");)
+ (NSArray<PESDKFrame *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKFrame *> * _Nonnull)newValue;
/// Returns the first frame with the given identifier if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the frame to look for.
///
///
/// returns:
/// The frame with the given identifier or <code>nil</code>.
+ (PESDKFrame * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.frame(withIdentifier:)` of your `Configuration` object instead.");
/// Creates the default frames that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKFrame *> * _Nonnull defaultItems;)
+ (NSArray<PESDKFrame *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The actions that can be used in an instance of <code>FrameOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, FrameAction, open) {
/// Replace the frame
  FrameActionReplace = 0,
/// Change the width of the frame
  FrameActionWidth = 1,
/// Change the opacity of the frame
  FrameActionOpacity = 2,
};

/// This enum is used during the builder to detmin the current phase.
typedef SWIFT_ENUM(NSInteger, FrameBuildMode, open) {
/// Used to indicate the horizontal phase.
  FrameBuildModeHorizontal = 0,
/// Used to indicate the vertical phase.
  FrameBuildModeVertical = 1,
};


@protocol PESDKTransformEditControllerDelegate;
@class UIRotationGestureRecognizer;
@class PESDKScalePicker;
@class CAGradientLayer;

/// A <code>TransformEditController</code> displays controls and provides gestures to edit the straighten
/// angle, crop rectangle and orientation of an image.
SWIFT_CLASS_NAMED("TransformEditController")
@interface PESDKTransformEditController : PESDKViewController
/// Whether or not controls (e.g. straighten angle picker, flip button, rotate button, crop handles)
/// should be shown. Default is <code>true</code>. This must be set before the view is loaded or it won’t
/// have any effect.
@property (nonatomic) BOOL showControls;
/// Whether or not the straighten angle can be set using a rotation gesture. Default is <code>false</code>.
/// This must be set before the view is loaded or it won’t have any effect.
@property (nonatomic) BOOL canRotateUsingGesture;
/// :nodoc:
@property (nonatomic, readonly) BOOL isModelChangeLocal;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKTransformEditControllerDelegate> _Nullable delegate;
/// The view that displays the image.
@property (nonatomic, readonly, strong) PESDKCropAndStraightenView * _Nonnull cropView;
/// The view that dims the content that is outside the crop rectangle.
@property (nonatomic, readonly, strong) PESDKCropOverlayView * _Nonnull cropOverlayView;
/// The canvas for the crop.
@property (nonatomic, readonly, strong) UIView * _Nonnull cropCanvasView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (void)pesdk_willBecomeActiveTool;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)pesdk_didResignActiveTool;
/// The rotation recognizer that updates the straighten angle based on rotation gestures.
@property (nonatomic, readonly, strong) UIRotationGestureRecognizer * _Nullable rotationGestureRecognizer;
/// The container view for the scale picker.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull scalePickerContainerView;
/// The scale picker view.
@property (nonatomic, readonly, strong) PESDKScalePicker * _Nonnull scalePicker;
/// The button to flip the image.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull flipButton;
/// The button to rotate the image.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull rotateButton;
/// The gradient layer that is added above the scale picker.
@property (nonatomic, readonly, strong) CAGradientLayer * _Nonnull gradientLayer;
/// The currently active crop rectangle in view coordinates.
@property (nonatomic) CGRect viewCropRect;
/// Updates the crop rectangle in view and normalized image dimensions.
/// \param viewCropRect The crop rectangle in view dimensions.
///
/// \param normalizedImageRect The crop rectangle in normalized image dimensions.
///
/// \param animated Whether to animate this change.
///
- (void)setViewCropRect:(CGRect)viewCropRect normalizedImageRect:(CGRect)normalizedImageRect animated:(BOOL)animated;
/// The currently set straighten angle.
@property (nonatomic) CGFloat straightenAngle;
/// Updates the straighten angle.
/// \param straightenAngle The straighten angle.
///
/// \param animated Whether to animate this change.
///
/// \param completion A closure to execute after the angle changed.
///
- (void)setStraightenAngle:(CGFloat)straightenAngle animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// The currently set <code>CropAspect</code>.
@property (nonatomic, strong) PESDKCropAspect * _Nullable cropAspect;
/// Sets the crop aspect.
/// \param cropAspect The crop aspect or <code>nil</code> for a free transform.
///
/// \param animated Whether to animate this change.
///
- (void)setCropAspect:(PESDKCropAspect * _Nullable)cropAspect animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>FrameEditController</code> displays a <code>Frame</code> above the edited image and provides manipulation
/// options using rotate, pinch and pan gestures. It is supposed to be contained in a tool controller
/// and be presented above a <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("FrameEditController")
@interface PESDKFrameEditController : PESDKTransformEditController
/// Whether rotation is enabled. <code>true</code> by default.
@property (nonatomic) BOOL rotationEnabled;
/// The image view that displays the frame.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull frameImageView;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets the frame with the given image.
/// \param frame The frame to display.
///
/// \param image The image that belongs to the frame.
///
- (void)setFrame:(PESDKFrame * _Nullable)frame with:(UIImage * _Nullable)image;
/// :nodoc:
- (void)viewDidLoad;
@end

enum FrameTileMode : NSInteger;

/// This class represents a group of the images.
SWIFT_CLASS_NAMED("FrameImageGroup")
@interface PESDKFrameImageGroup : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The image placed at the start.
@property (nonatomic, strong) UIImage * _Nullable startImage;
/// The image placed in the middle.
@property (nonatomic, strong) UIImage * _Nullable midImage;
/// The image placed at the end.
@property (nonatomic, strong) UIImage * _Nullable endImage;
/// The url of the image placed at the start.
@property (nonatomic, readonly, copy) NSURL * _Nullable startImageURL;
/// The url of the image placed in the middle.
@property (nonatomic, readonly, copy) NSURL * _Nullable midImageURL;
/// The url of the image placed at the end.
@property (nonatomic, readonly, copy) NSURL * _Nullable endImageURL;
/// The tiling mode for the image in the middle.
@property (nonatomic) enum FrameTileMode midImageMode;
/// Creates a new instance of <code>FrameImageGroup</code> for the images at the given urls.
/// \param startImageURL The url of the image placed at the start.
///
/// \param midImageURL The url of the image placed in the middle.
///
/// \param endImageURL The url of the image placed at the end.
///
- (nonnull instancetype)initWithStartImageURL:(NSURL * _Nullable)startImageURL midImageURL:(NSURL * _Nonnull)midImageURL endImageURL:(NSURL * _Nullable)endImageURL OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>FrameImageGroup</code> with no images.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SpriteImageView</code> is used to display an image in a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("SpriteImageView")
@interface PESDKSpriteImageView : UIView
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// The image displayed in the image view.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Creates a new <code>SpriteImageView</code> that is identified by the given <code>UUID</code>.
/// \param uuid The <code>UUID</code> that identifies this view.
///
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)sizeToFit;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A <code>FrameImageView</code> is used to display a <code>Frame</code> within a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("FrameImageView")
@interface PESDKFrameImageView : PESDKSpriteImageView
/// :nodoc:
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// Each patch consists of four groups. There are two basic layouts.
/// The first one places the top and bottom group above the full width of the image,
/// and the left and right group in between. The second layout works the other way around.
/// This enum determins, what groups will be placed ‘inside’.
typedef SWIFT_ENUM(NSInteger, FrameLayoutMode, open) {
/// Sets the horizontal groups inside.
  FrameLayoutModeHorizontalInside = 0,
/// Sets the vertical group inside.
  FrameLayoutModeVerticalInside = 1,
};


/// Handles the display of <code>FrameMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FrameListSectionController")
@interface PESDKFrameListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FrameToolController</code>.
SWIFT_CLASS_NAMED("FrameMenuItem")
@interface PESDKFrameMenuItem : NSObject <PESDKMenuItem>
/// The <code>Frame</code> that this menu item represents or <code>nil</code> if it represents the no frame option.
@property (nonatomic, readonly, strong) PESDKFrame * _Nullable frame;
/// The url to the thumbnail image of the frame.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// Creates a new frame menu item for the given frame.
/// \param frame The frame that this menu item represents.
///
/// \param ratio The ratio to create the thumbnail url for.
///
- (nonnull instancetype)initWithFrame:(PESDKFrame * _Nonnull)frame ratio:(CGFloat)ratio;
/// Creates a frame menu item for the no frame option.
- (nonnull instancetype)init;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>FrameOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FrameOptionListSectionController")
@interface PESDKFrameOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FrameOptionToolController</code>.
SWIFT_CLASS_NAMED("FrameOptionMenuItem")
@interface PESDKFrameOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>FrameAction</code> that this menu item represents.
@property (nonatomic, readonly) enum FrameAction frameAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new frame option menu item for the given frame action.
/// \param frameAction The frame action that this menu item represents.
///
- (nonnull instancetype)initWithFrameAction:(enum FrameAction)frameAction;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>TransformEditControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>TransformEditController</code>.
SWIFT_PROTOCOL_NAMED("TransformEditControllerDelegate")
@protocol PESDKTransformEditControllerDelegate
/// Asks the delegate for the preview’s base <code>UIImage</code>.
/// \param transformEditController The transform edit controller asking.
///
///
/// returns:
/// The preview’s base image.
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview’s base <code>CIImage</code>.
/// \param transformEditController The transform edit controller asking.
///
///
/// returns:
/// The preview’s base image.
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the sprite view controller.
/// \param transformEditController The transform edit controller asking.
///
///
/// returns:
/// The sprite view controller.
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param transformEditController The transform edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Tells the delegate that the transform edit controller changed whether it wants the default
/// preview enabled or not.
/// \param transformEditController The transform edit controller that changed its state.
///
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
@optional
/// Tells the delegate that the transform edit controller changed the applied orientation.
/// \param transformEditController The transform edit controller that changed its state.
///
- (void)transformEditControllerDidChangeOrientation:(PESDKTransformEditController * _Nonnull)transformEditController;
@end


/// The tool controller to edit frame options. It contains a menu with options to change attributes
/// of a frame.
SWIFT_CLASS_NAMED("FrameOptionsToolController")
@interface PESDKFrameOptionsToolController : PESDKMenuToolController <PESDKTransformEditControllerDelegate>
/// The contained <code>FrameEditController</code>.
@property (nonatomic, readonly, strong) PESDKFrameEditController * _Nonnull frameEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
@end



/// Options for configuring a <code>FrameOptionsToolController</code>.
SWIFT_CLASS_NAMED("FrameOptionsToolControllerOptions")
@interface PESDKFrameOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure is called every time the user selects a tool.
@property (nonatomic, readonly, copy) void (^ _Nullable frameActionSelectedClosure)(enum FrameAction);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>FrameAction</code>
/// will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum FrameAction);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic, readonly) BOOL rotationEnabled;
/// Creates a newly allocated instance of <code>FrameToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>FrameOptionsToolControllerOptions</code> using the given builder.
/// \param builder A <code>FrameOptionsToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKFrameOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FrameOptionsToolControllerOptionsBuilder</code> for <code>FrameOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FrameOptionsToolControllerOptionsBuilder")
@interface PESDKFrameOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable frameActionSelectedClosure)(enum FrameAction);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>FrameAction</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum FrameAction);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic) BOOL rotationEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>FrameOptionsToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>FrameOptionsToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKFrameOptionsToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKFrameOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>FrameAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in <code>allowedFrameActions</code> with the corresponding <code>FrameAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFrameActions;
@end

/// This enum is used to set the the tiling mode to strech or repeat.
typedef SWIFT_ENUM(NSInteger, FrameTileMode, open) {
/// When this mode is set, the tile is stretched to fit its rect.
  FrameTileModeStretch = 0,
/// When this mode is set, the tile is repeated to fit its rect.
  FrameTileModeRepeat = 1,
};


/// The tool controller to edit the frame. It contains a menu with the available frames for the
/// image’s current aspect ratio and a <code>FrameEditController</code> to display the frame.
SWIFT_CLASS_NAMED("FrameToolController")
@interface PESDKFrameToolController : PESDKMenuToolController <PESDKTransformEditControllerDelegate>
/// The currently selected frame.
@property (nonatomic, strong) PESDKFrame * _Nullable selectedFrame;
/// The contained <code>FrameEditController</code>.
@property (nonatomic, readonly, strong) PESDKFrameEditController * _Nonnull frameEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)pesdk_willBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



/// Options for configuring a <code>FrameToolController</code>.
SWIFT_CLASS_NAMED("FrameToolControllerOptions")
@interface PESDKFrameToolControllerOptions : PESDKToolControllerOptions
/// This closure is called when the user selects a frame. The closure is passed <code>nil</code> when no frame
/// was selected.
@property (nonatomic, readonly, copy) void (^ _Nullable selectedFrameClosure)(PESDKFrame * _Nullable);
/// This closure allows further customization of the cells of a frame.
@property (nonatomic, readonly, copy) void (^ _Nullable cellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFrame * _Nullable);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic, readonly) BOOL rotationEnabled;
/// Creates a newly allocated instance of <code>FrameToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>FrameToolControllerOptions</code> using the given builder.
/// \param builder A <code>FrameToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKFrameToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FrameToolControllerOptionsBuilder</code> for <code>FrameToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FrameToolControllerOptionsBuilder")
@interface PESDKFrameToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called when the user selects a frame. The closure is passed <code>nil</code> when no frame
/// was selected.
@property (nonatomic, copy) void (^ _Nullable selectedFrameClosure)(PESDKFrame * _Nullable);
/// This closure allows further customization of the cells of a frame.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFrame * _Nullable);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic) BOOL rotationEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// A <code>Tool</code> is an abstract base class. Currently <code>FreehandTool</code> is the only concrete subclass and
/// it is used to handle touch events and draw primitives.
SWIFT_CLASS_NAMED("Tool")
@interface PESDKTool : NSObject
/// <code>true</code> if touch events occurred, <code>false</code> otherwise.
@property (nonatomic, readonly) BOOL moved;
/// Called at the beginning of a touch event.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// Called multiple times during a touch event.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// Called when a touch event ended.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// Called when a touch event was cancelled.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureCancelled:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>FreehandTool</code> is responsible for creating vertices for a freehand drawing.
SWIFT_CLASS_NAMED("FreehandTool")
@interface PESDKFreehandTool : PESDKTool
/// The color that should be used for this drawing.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The hardness that should be used for this drawing. This value is just used to store the value within
/// the drawn paths. The actual stamp setting is done via brush generator. Since that is a fire and forget thing,
/// and we create the brush somewhere else, we use this to keep the information.
@property (nonatomic) CGFloat hardness;
/// The brush that should be used for this drawing.
@property (nonatomic, strong) PESDKBrush * _Nullable brush;
/// :nodoc:
- (void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// This method starts a path. It is used during the deserialization process to
/// recreate the brushes.
/// \param location The starting location.
///
/// \param force The used force
///
- (void)beginPathWithLocation:(CGPoint)location force:(CGFloat)force;
/// :nodoc:
- (void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// This method continues a path. It is used during the deserialization process to
/// recreate the brushes.
/// \param location The starting location.
///
/// \param canvas A canvas view.
///
/// \param force The used force
///
- (void)continuePathWithLocation:(CGPoint)location canvas:(PESDKCanvasView * _Nonnull)canvas force:(CGFloat)force;
/// :nodoc:
- (void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// This method ends a path. It is used during the deserialization process to
/// recreate the brushes.
/// \param location The starting location.
///
/// \param canvas A canvas view.
///
/// \param didMove When this is set to false, the path consists of a single point only.
///
- (void)endPathWithLocation:(CGPoint)location canvas:(PESDKCanvasView * _Nonnull)canvas didMove:(BOOL)didMove;
/// :nodoc:
- (void)gestureCancelled:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Applies a gaussian focus to an instance of <code>CIImage</code>.
SWIFT_CLASS_NAMED("GaussianFocusFilter")
@interface PESDKGaussianFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>StickerCategory</code> represents one category of stickers. Each category has a preview image and
/// multiple stickers associated with it. To support accessibility you should also set its
/// <code>accessibilityLabel</code>.
SWIFT_CLASS_NAMED("StickerCategory")
@interface PESDKStickerCategory : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The identifier of this category.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this category, e.g. ‘Toy Collection’.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The URL of the category’s preview image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The stickers associated with this category.
@property (nonatomic, readonly, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// Creates a sticker category with an image url. The associated image is automatically loaded
/// when needed.
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param stickers The stickers to associate with this category.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers;
/// Creates a sticker category with an image url. The associated image is automatically loaded
/// when needed.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param stickers The stickers to associate with this category.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers OBJC_DESIGNATED_INITIALIZER;
/// The pool of categories available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKStickerCategory *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.stickers` of your `Configuration` object instead.");)
+ (NSArray<PESDKStickerCategory *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKStickerCategory *> * _Nonnull)newValue;
/// Creates the default sticker categories that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKStickerCategory *> * _Nonnull defaultItems;)
+ (NSArray<PESDKStickerCategory *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKStickerProvider;

/// A <code>StickerProviderCategory</code> represents an empty category with a custom <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerProviderCategory")
@interface PESDKStickerProviderCategory : PESDKStickerCategory
/// The <code>StickerProvider</code> associated with this sticker category.
/// This property should only be used if you are using Objective-C.
@property (nonatomic, readonly, strong) id <PESDKStickerProvider> _Nullable stickerProvider;
/// Creates a sticker category with a <code>StickerProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param _objCStickerProvider The associated <code>StickerProvider</code> object responsible for loading local/remote stickers.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerProvider:(id <PESDKStickerProvider> _Nonnull)_objCStickerProvider;
/// Creates a sticker category with a <code>StickerProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param _objCStickerProvider The associated <code>StickerProvider</code> object responsible for loading local/remote stickers.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerProvider:(id <PESDKStickerProvider> _Nonnull)_objCStickerProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers SWIFT_UNAVAILABLE;
@end


/// A <code>GiphyStickerCategory</code> is a preconfigured category providing an easy access to the GIPHY Stickers API.
SWIFT_CLASS_NAMED("GiphyStickerCategory")
@interface PESDKGiphyStickerCategory : PESDKStickerProviderCategory
/// Creates a sticker category with GIPHY as <code>StickerProvider</code>.
/// \param apiKey The key used to authorize API requests obtained from GIPHY.
///
/// \param language The default language for regional content in 2-letter ISO 639-1 language code. Default value is the bundle preferred localization or <code>en</code> if unavailable.
///
/// \param rating The audience category used for content filtering. Available values are <code>g, pg, pg-13, r</code>. Default value is <code>g</code>.
///
- (nonnull instancetype)initWithAPIKey:(NSString * _Nonnull)apiKey language:(NSString * _Nonnull)language rating:(NSString * _Nonnull)rating OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerProvider:(id <PESDKStickerProvider> _Nonnull)_objCStickerProvider SWIFT_UNAVAILABLE;
@end


/// A <code>GiphyStickerProvider</code> represents an entry point to the GIPHY Stickers API.
/// <ul>
///   <li>
///     See: <a href="https://developers.giphy.com/docs/api#quick-start-guide">API Quickstart Guide</a>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("GiphyStickerProvider")
@interface PESDKGiphyStickerProvider : NSObject
/// Creates a sticker provider consuming GIPHY Stickers API.
/// note:
/// While creating custom sticker categories with the <code>GiphyStickerProvider</code> please follow official GIPHY attribution policy.
/// <ul>
///   <li>
///     See: <a href="https://developers.giphy.com/docs/sdk/#design-guidelines">Design Guidelines</a>
///   </li>
/// </ul>
/// \param apiKey The key used to authorize API requests obtained from GIPHY.
///
/// \param language The default language for regional content in 2-letter ISO 639-1 language code. Default value is the bundle preferred localization or <code>en</code> if unavailable.
///
/// \param rating The audience category used for content filtering. Available values are <code>g, pg, pg-13, r</code>. Default value is <code>g</code>.
///
- (nonnull instancetype)initWithAPIKey:(NSString * _Nonnull)apiKey language:(NSString * _Nonnull)language rating:(NSString * _Nonnull)rating OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKStickerProviderResult;

/// Types conforming to <code>PESDKStickerProvider</code> can implement a custom service to load stickers from local/network sources.
SWIFT_PROTOCOL_NAMED("_ObjCStickerProvider")
@protocol PESDKStickerProvider
/// Loads initial search page with the default set of stickers.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
/// Loads search results for the given query.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param query The query string.
///
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
@end


@interface PESDKGiphyStickerProvider (SWIFT_EXTENSION(ImglyKit)) <PESDKStickerProvider>
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
@end


@class NSValue;

/// Applies a gradient focus to an instance of <code>CIImage</code>.
/// important:
/// This gradient focus filter is actually the ‘linear’ focus in the serialization, but
/// for legacy reasons the old name was kept. This will most likely be subject to change in a
/// future major version update of the PhotoEditor SDK.
SWIFT_CLASS_NAMED("GradientFocusFilter")
@interface PESDKGradientFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The first normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>. This point
/// describes the unblurred part of the image.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/// The second normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>. This point
/// describes the blurred part of the image.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>GradientView</code> shows a linear gradient from its top to its bottom.
SWIFT_CLASS_NAMED("GradientView")
@interface PESDKGradientView : UIView
/// The top color of the gradient.
@property (nonatomic, strong) UIColor * _Nonnull topColor;
/// The bottom color of the gradient.
@property (nonatomic, strong) UIColor * _Nonnull bottomColor;
/// Creates a new gradient view.
/// \param topColor The color at the top of the view.
///
/// \param bottomColor The color at the bottom of the view.
///
- (nonnull instancetype)initWithTopColor:(UIColor * _Nonnull)topColor bottomColor:(UIColor * _Nonnull)bottomColor;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// This class can be used to group multiple assets together in the user interace. Currently only
/// filters are supported. For more details see <code>FilterToolControllerOptions.filterGroups</code>.
SWIFT_CLASS_NAMED("Group")
@interface PESDKGroup : NSObject
/// The identifier of this group. This must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The display name of this group.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// A thumbnail image representing this group.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// The identifiers of this group’s members.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull memberIdentifiers;
/// Creates a new group to group multiple assets together.
/// \param identifier The identifier of this group. This must be unique.
///
/// \param displayName The display name of this group.
///
/// \param thumbnail A thumbnail image representing this group.
///
/// \param memberIdentifiers The identifiers of this group’s members.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName thumbnail:(UIImage * _Nullable)thumbnail memberIdentifiers:(NSArray<NSString *> * _Nonnull)memberIdentifiers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>HandleButton</code> is used in the <code>TextFontToolController</code> to expand the <code>FontSelectorView</code>.
/// It is a standard <code>Button</code> that uses its <code>tintColor</code> as its <code>backgroundColor</code>. It contains
/// a <code>SpriteEditController</code> to enable sprite geometry manipulations.
SWIFT_CLASS_NAMED("HandleButton")
@interface PESDKHandleButton : PESDKButton
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)tintColorDidChange;
@end


/// <code>IMGLY</code> provides methods to unlock and customize the SDK.
SWIFT_CLASS("_TtC8ImglyKit5IMGLY")
@interface IMGLY : NSObject
/// Force extended sRGB color space on export.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL forceExtendedSRGBColorSpace;)
+ (BOOL)forceExtendedSRGBColorSpace SWIFT_WARN_UNUSED_RESULT;
+ (void)setForceExtendedSRGBColorSpace:(BOOL)value;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param url The file url where the license file is located.
///
+ (void)unlockWithLicenseAt:(NSURL * _Nonnull)url;
/// :nodoc:
+ (BOOL)crashIfNeededAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param url The file url where the license file is located.
///
///
/// throws:
/// Throws a license error if there are issues with the given license.
+ (BOOL)unlockWithLicenseFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param string The license string in JSON format.
///
///
/// throws:
/// Throws a license error if there are issues with the given license.
+ (BOOL)unlockWithLicenseFromString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param dictionary The license dictionary which can be encoded in JSON format.
///
///
/// throws:
/// Throws a license error if there are issues with the given license.
+ (BOOL)unlockWithLicenseFromDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error;
/// PhotoEditor SDK analytics instance. All screen views and events are logged with this instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAnalytics * _Nonnull analytics;)
+ (PESDKAnalytics * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
/// The progress view that is being used to display progress. You can provide your own progress
/// view as long as it adopts the <code>ProgressView</code> protocol.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <PESDKProgressView> _Nonnull progressView;)
+ (id <PESDKProgressView> _Nonnull)progressView SWIFT_WARN_UNUSED_RESULT;
+ (void)setProgressView:(id <PESDKProgressView> _Nonnull)value;
/// Allows to set a custom dictionary that contains dictionaries with language locales.
/// Will override localization found in the bundle, if a value is found.
/// Falls back to “en” if localization key is not found in dictionary.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable)value;
/// Register a custom block that handles translation.
/// If this block is <code>nil</code>, the <code>ImglyKit.bundle</code> and  <code>localizationDictionary</code> will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable (^ _Nullable localizationBlock)(NSString * _Nonnull);)
+ (NSString * _Nullable (^ _Nullable)(NSString * _Nonnull))localizationBlock SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationBlock:(NSString * _Nullable (^ _Nullable)(NSString * _Nonnull))value;
/// Register a custom block that returns custom images for the given image name.
/// If this block is <code>nil</code>, the image from the <code>ImglyKit.bundle</code> will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) UIImage * _Nullable (^ _Nullable bundleImageBlock)(NSString * _Nonnull);)
+ (UIImage * _Nullable (^ _Nullable)(NSString * _Nonnull))bundleImageBlock SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundleImageBlock:(UIImage * _Nullable (^ _Nullable)(NSString * _Nonnull))value;
/// Register a custom block that returns a <code>ToolbarItem</code> for a view controller. Both the view
/// controller as well as the default <code>ToolbarItem</code> are passed as arguments. If you return <code>nil</code>,
/// no <code>ToolbarItem</code> is pushed onto the toolbar and thus the previous toolbar item remains visible.
/// If this block is <code>nil</code>, the default toolbar item for each view controller will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) PESDKToolbarItem * _Nullable (^ _Nullable toolbarItemBlock)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable);)
+ (PESDKToolbarItem * _Nullable (^ _Nullable)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable))toolbarItemBlock SWIFT_WARN_UNUSED_RESULT;
+ (void)setToolbarItemBlock:(PESDKToolbarItem * _Nullable (^ _Nullable)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable))value;
/// Register a custom <code>AssetResolver</code> that handles (de-)serialization of custom assets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id <PESDKAssetResolver>> * _Nullable assetResolvers;)
+ (NSDictionary<NSString *, id <PESDKAssetResolver>> * _Nullable)assetResolvers SWIFT_WARN_UNUSED_RESULT;
+ (void)setAssetResolvers:(NSDictionary<NSString *, id <PESDKAssetResolver>> * _Nullable)value;
/// Allows you to use a specific subclass instead of the default PhotoEditor SDK classes. This works
/// across the whole framework with any public class.
/// note:
/// Only set from the main thread, before you first use the object. Set up your class overrides before calling any other methods.
/// \param builtinClass The class that should be replaced, e.g. <code>PhotoEditViewController.self</code>.
///
/// \param replacingClass The class that should be used instead (must be a subclass of <code>builtinClass</code>).
///
///
/// throws:
/// Throws an error if the replacing class is not a subclass of the builting class.
+ (BOOL)replaceClass:(SWIFT_METATYPE(NSObject) _Nonnull)builtinClass with:(SWIFT_METATYPE(NSObject) _Nonnull)replacingClass error:(NSError * _Nullable * _Nullable)error;
/// Removes any replacement classes set with <code>replaceClass(_:with:)</code>. This can be useful if you want to present multiple instances of the editor with different customizations.
/// note:
/// Only set from the main thread, before you first use the object. Set up your class overrides before calling any other methods.
+ (void)resetClassReplacements;
/// Resets all static options, such as <code>localizationBlock</code>, set on this class to their default value.
+ (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An icon generator can be used to generate various icons.
SWIFT_CLASS_NAMED("IconGenerator")
@interface PESDKIconGenerator : NSObject
/// Generates the icon used to display a crop aspect ratio.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param size The size of the generated icon.
///
/// \param dottedBorder Whether to draw a dotted border or a solid border. If the border is drawn
/// dotted, the background won’t be filled.
///
///
/// returns:
/// An image for the given crop aspect ratio.
+ (UIImage * _Nullable)generateCropAspectImageWithWidth:(CGFloat)width height:(CGFloat)height ofSize:(CGSize)size dottedBorder:(BOOL)dottedBorder showSwitchIcon:(BOOL)showSwapIcon SWIFT_WARN_UNUSED_RESULT;
/// Generates the icon used to display a string.
/// \param font The font that should be used in the icon.
///
/// \param size The size of the icon that is generated.
///
/// \param text The text in the icon.
///
///
/// returns:
/// An image of the given string with the given size.
+ (UIImage * _Nullable)generateTextImageWithFont:(UIFont * _Nonnull)font ofSize:(CGSize)size text:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Generates the icon used to display a color in the menu.
/// \param color The color that should be displayed.
///
/// \param borderColor The color of the border.
///
/// \param size The size of the generated image.
///
///
/// returns:
/// An icon that can be used to display a color in the menu.
+ (UIImage * _Nullable)generateColorImageWithColor:(UIColor * _Nonnull)color borderColor:(UIColor * _Nonnull)borderColor ofSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>ImageAsset</code> object can be used together with an <code>AssetManager</code> to cache an <code>UIImage</code> or a
/// <code>CIImage</code> object and an optional user info dictionary.
SWIFT_CLASS_NAMED("ImageAsset")
@interface PESDKImageAsset : NSObject
/// An <code>UIImage</code> object.
@property (nonatomic, strong) UIImage * _Nullable image;
/// An optional user info dictionary to associate any metadata with this <code>ImageAsset</code>.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// An <code>CIImage</code> object. If an <code>UIImage</code> was provided when initializing this <code>ImageAsset</code>
/// instance, it will be generated from the given <code>UIImage</code>.
@property (nonatomic, readonly, strong) CIImage * _Nullable ciImage;
/// An oriented <code>CIImage</code> object. If an <code>UIImage</code> was provided when initializing this <code>ImageAsset</code>
/// instance, it will be generated from the given <code>UIImage</code>.
@property (nonatomic, readonly, strong) CIImage * _Nullable orientedCIImage;
/// <code>true</code> if the loaded asset is animated (animated GIFs) or <code>false</code> if it is static (JPGs, PNGs).
@property (nonatomic) BOOL isAnimated;
/// Creates a new image asset for the given image and an associated user info dictionary.
/// \param ciImage A <code>CIImage</code> object.
///
/// \param userInfo An optional user info dictionary.
///
- (nonnull instancetype)initWithCiImage:(CIImage * _Nonnull)ciImage userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo;
/// Creates a new image asset for the given image and an associated user info dictionary.
/// \param image An <code>UIImage</code> object.
///
/// \param userInfo An optional user info dictionary.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different image file formats.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKImageFileFormat, "ImageFileFormat", open) {
/// The JPEG image file format.
  PESDKImageFileFormatJpeg = 0,
/// The PNG image file format.
  PESDKImageFileFormatPng = 1,
/// The HEIF image file format.
  PESDKImageFileFormatHeif = 2,
/// The TIFF image file format.
  PESDKImageFileFormatTiff = 3,
};


/// A concrete <code>Effect</code> that uses an image-based lookup table (LUT) to alter colors.
SWIFT_CLASS_NAMED("LUTEffect")
@interface PESDKLUTEffect : PESDKEffect
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL of the lut image that should be used to generate a color cube.
@property (nonatomic, readonly, copy) NSURL * _Nullable lutURL;
/// The number of horizontal tiles in the LUT image.
@property (nonatomic, readonly) NSUInteger horizontalTileCount;
/// The number of vertical tiles in the LUT image.
@property (nonatomic, readonly) NSUInteger verticalTileCount;
/// Creates an effect that uses the LUT at url <code>lutURL</code> to generate the color cube data for
/// the filter.
/// The tile configuration is parsed from the <code>lutURL</code> filename that matches the scheme:
/// <code>*_horizontalTileCount_verticalTileCount_resolution*</code>, e.g. a
/// filename that contains <code>_5_5_128</code> would create a LUT configuration with 5x5
/// tiles and expect a image resolution of 128^2 pixels. If the tile configuration cannot be parsed
/// it defaults to a 8x8 512^2 LUT configuration.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lutURL The URL of the lut image that should be used to generate a color cube.
///
/// \param displayName The name that is displayed to the user.
///
///
/// returns:
/// A newly initialized <code>LUTEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/// Creates an effect that uses the LUT at url <code>lutURL</code> to generate the color cube data for
/// the filter.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lutURL The URL of the lut image that should be used to generate a color cube.
///
/// \param displayName The name that is displayed to the user.
///
/// \param horizontalTileCount The number of horizontal tiles in the LUT image.
///
/// \param verticalTileCount The number of vertical tiles in the LUT image.
///
///
/// returns:
/// A newly initialized <code>LUTEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName horizontalTileCount:(NSUInteger)horizontalTileCount verticalTileCount:(NSUInteger)verticalTileCount OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>CIFilter</code> object.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This filter applies a color lookup image to an image.
SWIFT_CLASS_NAMED("LUTFilter")
@interface PESDKLUTFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The LUT that should be applied.
@property (nonatomic, strong) CIImage * _Nullable inputLUT;
/// The number of tiles on the LUT image, in horizontal direction.
@property (nonatomic, strong) NSNumber * _Nullable inputHorizontalTileCount;
/// The number of tiles on the LUT image, in vertical direction.
@property (nonatomic, strong) NSNumber * _Nullable inputVerticalTileCount;
/// The effect intensity.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// The tool controller to edit text designs. It contains a menu with all available text designs and
/// a <code>SpriteEditController</code> to change a layout’s geometry.
SWIFT_CLASS_NAMED("LegacyTextDesignOptionsToolController")
@interface PESDKLegacyTextDesignOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end




/// A <code>LineView</code> is a subclass of <code>UIView</code>, which allows to restrict appearance proxy calls
/// to a subset of all views that are instances of this class.
SWIFT_CLASS_NAMED("LineView")
@interface PESDKLineView : UIView
/// This property wraps <code>layer.shadowColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Applies a linear focus to an instance of <code>CIImage</code>.
/// important:
/// This linear focus filter is actually the ‘mirrored’ focus in the serialization, but
/// for legacy reasons the old name was kept. This will most likely be subject to change in a
/// future major version update of the PhotoEditor SDK.
SWIFT_CLASS_NAMED("LinearFocusFilter")
@interface PESDKLinearFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The first normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/// The second normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The fade width to use for focus. Default is 0.
@property (nonatomic, strong) NSNumber * _Nullable inputFadeWidth;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents a linear gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("LinearGradientView")
@interface PESDKLinearGradientView : PESDKFocusGradientView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
@end

/// The log level determins what messages should be logged. For example
/// if the log level is set to <code>warn</code>, messages classified as <code>info</code> wont be logged.
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// Nothing should be logged.
  LogLevelNone = 0,
/// Only errors should be logged.
  LogLevelError = 1,
/// Warnings and errors should be logged.
  LogLevelWarn = 2,
/// Infos, warnings, and errors should be logged.
  LogLevelInfo = 3,
/// Debug messages, infos, warnings and errors should be logged.
  LogLevelDebug = 4,
};


@class PESDKMediaEditViewController;

/// The <code>MainFlowController</code> is the <code>EventSubscriber</code> of the <code>MediaEditViewController</code> and all
/// subclasses of <code>PhotoEditToolController</code>. It is responsible for presenting and dismissing tools
/// and forwards updated <code>PhotoEditModel</code>s to each active controller. It also keeps track of the
/// unedited photo edit model, to check for changes.
SWIFT_CLASS_NAMED("MainFlowController")
@interface PESDKMainFlowController : NSObject
/// The configuration object that configures this editor.
@property (nonatomic, readonly, strong) PESDKConfiguration * _Nonnull configuration;
/// The <code>MediaEditViewController</code> that this flow controller manages.
@property (nonatomic, readonly, weak) PESDKMediaEditViewController * _Nullable mediaEditViewController;
/// Creates a new flow controller for the given photo edit view controller and configuration.
/// \param mediaEditViewController The media edit view controller that this flow controller manages.
///
/// \param configuration The <code>Configuration</code> object to configure all tools with.
///
- (nonnull instancetype)initWithMediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController configuration:(PESDKConfiguration * _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKMainFlowController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
- (void)viewControllerDidFinish:(UIViewController * _Nonnull)viewController;
/// :nodoc:
- (void)viewControllerDidCancel:(UIViewController * _Nonnull)viewController;
/// :nodoc:
- (void)viewController:(UIViewController * _Nonnull)viewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)photoEditToolController:(UIViewController * _Nonnull)photoEditToolController wantsToPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
@end


/// A <code>MarkerView</code> is a subclass of <code>UIView</code>, which allows to restrict appearance proxy calls
/// to a subset of all views that are instances of this class.
SWIFT_CLASS_NAMED("MarkerView")
@interface PESDKMarkerView : UIView
/// This property wraps <code>layer.shadowColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// This property wraps <code>layer.borderColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>MasterLogger</code> manages and deploys loggers. That means it holds all instances of loggers, and delegates incoming log messages to each of them.
/// Also it takes case of threading, to keep logging efficient. More loggers can be added using the <code>add</code> method.
/// All child loggers must implement the <code>LoggerProtocol</code>.
SWIFT_CLASS_NAMED("MasterLogger")
@interface PESDKLogger : NSObject
/// The log level determins what kind of logs will be performed. See <code>LogLevel</code> for details.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LogLevel logLevel;)
+ (enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum LogLevel)value;
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Use this function to add your own logger.
/// \param logger A logger.
///
+ (void)addWithLogger:(id <PESDKLoggerProtocol> _Nonnull)logger;
/// Remove a logger.
/// \param logger The logger that should be removed.
///
+ (void)removeWithLogger:(id <PESDKLoggerProtocol> _Nonnull)logger;
/// Removed all loggers.
+ (void)removeAll;
/// Logs an error.
/// \param message A message.
///
+ (void)error:(NSString * _Nonnull)message;
/// Logs a warning.
/// \param message A message.
///
+ (void)warn:(NSString * _Nonnull)message;
/// Logs an info level message.
/// \param message A message.
///
+ (void)info:(NSString * _Nonnull)message;
/// Logs a debug level message.
/// \param message A message.
///
+ (void)debug:(NSString * _Nonnull)message;
@end

/// The overlay actions that can be used in an instance of <code>MediaEditViewControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, MediaEditOverlayAction, open) {
/// Undo the latest operation.
  MediaEditOverlayActionUndo = 0,
/// Redo the latest operation.
  MediaEditOverlayActionRedo = 1,
/// Toggle sound on/off for video preview and export.
  MediaEditOverlayActionSoundOnOff = 2,
/// Toggle play/pause for video preview.
  MediaEditOverlayActionPlayPause = 3,
/// Toggle background removal.
/// attention:
/// This option does not work properly on a simulator.
/// To see background properly removed, please test on physical device.
  MediaEditOverlayActionRemoveBackground = 4,
};

@protocol PESDKMediaEditPreviewControllerDelegate;
@class UIScreen;

/// The <code>MediaEditPreviewController</code> is responsible for previewing changes to visual media and
/// displaying the asset in a scrollable container. It’s an abstract base class used by
/// <code>PhotoEditPreviewController</code> and <code>VideoEditPreviewController</code>. You should not instantiate this
/// class directly.
SWIFT_CLASS_NAMED("MediaEditPreviewController")
@interface PESDKMediaEditPreviewController : PESDKViewController
/// The scroll view that hosts the preview view.
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull previewViewScrollingContainer;
/// The preview view that renders the preview image.
@property (nonatomic, readonly, strong) UIView * _Nonnull previewView;
/// Whether zooming should be enabled.
@property (nonatomic) BOOL allowsPreviewImageZoom;
/// An object that acts as a delegate.
@property (nonatomic, weak) id <PESDKMediaEditPreviewControllerDelegate> _Nullable delegate;
/// The <code>UIImage</code> object used in the preview. This is the resized version of the original photo.
/// Setting this also generates the matching <code>CIImage</code> object, see <code>baseWorkCIImage</code>.
@property (nonatomic, strong) UIImage * _Nullable baseWorkUIImage;
/// The <code>CIImage</code> object used in the preview. This is the resized version of the original photo.
@property (nonatomic, readonly, strong) CIImage * _Nullable baseWorkCIImage;
/// The renderer that is being used to render the image.
@property (nonatomic, readonly, strong) PESDKPhotoEditRenderer * _Nonnull renderer;
/// The <code>SpriteViewController</code> that is displayed above the preview to manage sprites.
@property (nonatomic, readonly, strong) PESDKSpriteViewController * _Nonnull spriteViewController;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// The <code>UndoController</code> that handles undo/redo for this controller.
@property (nonatomic, strong) PESDKUndoController * _Nullable undoController;
/// This closure is called with <code>false</code> when the view controller starts loading its base image
/// and is called again with <code>true</code> when loading has finished. This should be used to display
/// a progress indicator and disable user interaction.
@property (nonatomic, copy) void (^ _Nullable loadingProgressClosure)(BOOL);
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
- (void)updateViewConstraints;
/// Loads a still base image to display in the preview.
/// \param completion A closure to execute when loading is finished.
///
- (void)loadBaseImage:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// Updates the state of the renderer and triggers a rerender if necessary.
- (void)updateRenderer;
/// Updates the attached asset manager’s image of the drawn brush.
/// \param onlyIfMissing If <code>false</code> the image will only be added if it doesn’t exist
/// in the asset manager yet.
///
- (void)updateBrushWithOnlyIfMissing:(BOOL)onlyIfMissing;
/// Updates the layout of the preview. This must be called whenever a new tool is presented above
/// the preview.
- (void)updateLayout;
/// Updates the insets of the preview. This must be called whenever a new tool is presented above
/// the preview.
/// \param animated Whether this change should be animated or not.
///
- (void)updateInsetsWithAnimated:(BOOL)animated;
/// Triggers a rerender of the preview.
- (void)updatePreview;
/// Calculates the maximum size of the preview image for the given screen. It is the longer side
/// of the given screen multiplied with the screen’s scale factor.
/// \param screen The screen to calculate the size for.
///
///
/// returns:
/// The maximum size of the preview image.
- (CGSize)workImageSizeFor:(UIScreen * _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKMediaEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <MTKViewDelegate>
/// :nodoc:
- (void)drawInMTKView:(MTKView * _Nonnull)view;
/// :nodoc:
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
@end


/// The <code>SpriteViewControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>SpriteViewController</code>.
SWIFT_PROTOCOL_NAMED("SpriteViewControllerDelegate")
@protocol PESDKSpriteViewControllerDelegate
/// Called when the photo edit model was changed.
/// \param spriteViewController The sprite view controller that changed the model.
///
- (void)spriteViewControllerDidChangePhotoEditModel:(PESDKSpriteViewController * _Nonnull)spriteViewController;
/// Asks the delegate for the <code>UndoController</code>.
/// \param spriteViewController The sprite view controller asking.
///
///
/// returns:
/// An <code>UndoController</code> object.
- (PESDKUndoController * _Nullable)spriteViewControllerUndoController:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the configuration.
/// \param spriteViewController The sprite view controller asking.
///
///
/// returns:
/// The configuration.
- (PESDKConfiguration * _Nullable)spriteViewControllerConfiguration:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKMediaEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <PESDKSpriteViewControllerDelegate>
/// :nodoc:
- (void)spriteViewControllerDidChangePhotoEditModel:(PESDKSpriteViewController * _Nonnull)spriteViewController;
/// :nodoc:
- (PESDKUndoController * _Nullable)spriteViewControllerUndoController:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKConfiguration * _Nullable)spriteViewControllerConfiguration:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKMediaEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>MediaEditPreviewControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>MediaEditPreviewController</code>.
SWIFT_PROTOCOL_NAMED("MediaEditPreviewControllerDelegate")
@protocol PESDKMediaEditPreviewControllerDelegate
/// Asks the delegate whether the preview should be enabled.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// Whether the preview should be enabled.
- (BOOL)mediaEditPreviewControllerPreviewEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the render modes to render in the preview.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The render modes to render.
- (PESDKRenderMode)mediaEditPreviewControllerRenderMode:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the background color in the preview.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The background color in the preview.
- (UIColor * _Nonnull)mediaEditPreviewControllerBackgroundColor:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview insets.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The preview insets.
- (UIEdgeInsets)mediaEditPreviewControllerPreviewInsets:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview scale factor.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The preview scale factor.
- (CGFloat)mediaEditPreviewControllerPreviewScale:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether proxy zooming should be active.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// Whether proxy zooming should be enabled.
- (BOOL)mediaEditPreviewControllerProxyZoomingActive:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to reset proxy zooming.
/// \param mediaEditPreviewController The media edit preview controller askign.
///
- (void)mediaEditPreviewControllerResetProxyZooming:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// Asks the delegate whether video playback should be active.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// Whether video playback should be enabled.
- (BOOL)mediaEditPreviewControllerPlaybackEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Called when the photo edit model did change.
/// \param mediaEditPreviewController The media edit preview controller that changed the model.
///
- (void)mediaEditPreviewControllerDidChangePhotoEditModel:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// Asks the delegate for the configuration.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The configuration.
- (PESDKConfiguration * _Nonnull)mediaEditPreviewControllerConfiguration:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when all of the preview views are setup (sprites, brushes, …).
/// \param mediaEditPreviewController The media edit preview that finished with initialization.
///
- (void)mediaEditPreviewControllerDidInitialize:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
@end

@class PESDKToolbar;
@class PESDKToolMenuItem;
@class PESDKMediaEditViewControllerOptions;

/// A <code>MediaEditViewController</code> is the main starting point for the core SDK. It displays the rendered
/// photo and a menu. It can present <code>PhotoEditToolController</code> objects and react to changes. It
/// can be presented on its own (thus displaying a toolbar for navigation at the bottom) or be
/// embedded into a <code>UINavigationController</code> (thus using the navigation controller’s navigation bar
/// for navigation).
/// attention:
/// Do not initialize this class of the core SDK directly. Use a derived class of the product SDKs instead.
SWIFT_CLASS_NAMED("MediaEditViewController")
@interface PESDKMediaEditViewController : PESDKViewController
/// The associated flow controller for this photo edit view controller.
@property (nonatomic, readonly, strong) PESDKMainFlowController * _Null_unspecified flowController;
/// The contained <code>MenuViewController</code> that displays the menu at the bottom.
@property (nonatomic, readonly, strong) PESDKMenuViewController * _Nonnull menuViewController;
/// The contained <code>MediaEditPreviewController</code> that displays the preview.
@property (nonatomic, readonly, strong) PESDKMediaEditPreviewController * _Nonnull mediaEditPreviewController;
/// The container view that the <code>MenuViewController</code>’s view is added to. It does not include the
/// <code>toolbar</code>.
@property (nonatomic, readonly, strong) UIView * _Nonnull containerView;
/// The toolbar of this view controller.
@property (nonatomic, readonly, strong) PESDKToolbar * _Nonnull toolbar;
/// The <code>ToolbarItem</code> for this view controller.
@property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
/// The configuration object that configures this editor.
@property (nonatomic, readonly, strong) PESDKConfiguration * _Nonnull configuration;
/// The <code>UndoController</code> associated with this photo edit view controller. This instance is
/// automatically passed to the tool controllers.
@property (nonatomic, strong) PESDKUndoController * _Nonnull undoController;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, readonly, strong) PESDKAssetManager * _Nonnull assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, readonly, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Whether the user made any changes to the photo.
@property (nonatomic, readonly) BOOL hasChanges;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/// :nodoc:
@property (nonatomic, readonly) UIRectEdge preferredScreenEdgesDeferringSystemGestures;
/// The sound on/off button that is displayed in the editor when editing videos.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable soundOnOffButton;
/// The play/pause button that is displayed in the editor when editing videos.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseButton;
/// The undo button that is displayed in the editor.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the editor.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
/// The remove background button that is displayed in the editor.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable removeBackgroundButton;
/// All overlay buttons that are displayed in the editor. This includes <code>undoButton</code> and
/// <code>redoButtton</code> and for videos additionally <code>soundOnOffButton</code> and <code>playPauseButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// Presents the tool that is represented by the given <code>ToolMenuItem</code>. You must only call this
/// when the editor is already on-screen.
/// \param toolMenuItem The tool menu item whose represented tool should be presented.
///
- (void)presentToolFor:(PESDKToolMenuItem * _Nonnull)toolMenuItem;
/// Called when the user wants to dismiss the editor.
- (void)didCancel;
/// Called when a new tool controller will be pushed onto the tool stack.
/// \param toolController The tool being presented.
///
- (void)willPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a new tool controller was pushed onto the tool stack.
/// \param toolController The tool that was presented.
///
- (void)didPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller will be popped from the tool stack.
/// \param toolController The tool being dismissed.
///
- (void)willDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller was popped from the tool stack.
/// \param toolController The tool that was dismissed.
///
- (void)didDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Applies all changes to the high resolution variant of this media edit view controller’s asset.
- (void)renderHighResolutionVariant;
/// The tools that are currently on the stack.
@property (nonatomic, readonly, copy) NSArray<PESDKPhotoEditToolController *> * _Nonnull viewControllers;
/// Pushes a new tool onto the tool stack and presents its view.
/// \param viewController The tool controller to present.
///
/// \param animated Whether to show this tool animated or not.
///
/// \param completion A closure that is executed after the presentation animation is finished.
///
- (void)pushViewController:(PESDKPhotoEditToolController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Pops the top view controller from the stack and removes its view.
/// \param animated Whether to animate the transition or not.
///
/// \param completion A closure that is executed after the dismissal animation.
///
///
/// returns:
/// The tool that was popped from the stack, if any.
- (PESDKPhotoEditToolController * _Nullable)popViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// The configuration options.
@property (nonatomic, readonly, strong) PESDKMediaEditViewControllerOptions * _Nonnull options;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end





@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMenuViewControllerDelegate>
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
@end


/// The <code>PhotoEditToolControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>PhotoEditToolController</code>.
SWIFT_PROTOCOL_NAMED("PhotoEditToolControllerDelegate")
@protocol PESDKPhotoEditToolControllerDelegate
/// Asks the delegate for the media edit view controller.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The media edit view controller.
- (PESDKMediaEditViewController * _Nullable)photoEditToolControllerViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the media edit preview controller.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The media edit preview controller.
- (PESDKMediaEditPreviewController * _Nullable)photoEditToolControllerPreviewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the base image.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The base image, which is displayed in the preview.
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the base <code>CIImage</code>.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The base <code>CIImage</code>, which is displayed in the preview.
- (CIImage * _Nullable)photoEditToolControllerBaseCIImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview view.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The preview view.
- (UIView * _Nullable)photoEditToolControllerPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview’s scroll view.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The scroll view that hosts the preview.
- (UIScrollView * _Nullable)photoEditToolControllerPreviewScrollView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the <code>SpriteViewController</code>.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The sprite view controller.
- (PESDKSpriteViewController * _Nullable)photoEditToolControllerSpriteViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Called when a tool changed its preferred preview view insets.
/// \param photoEditToolController The tool controller that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)photoEditToolController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Called when a tool changed whether it wants the preview enabled.
/// \param photoEditToolController The tool controller that changed whether it wants a preview.
///
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController;
@end


@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKPhotoEditToolControllerDelegate>
/// :nodoc:
- (PESDKMediaEditViewController * _Nullable)photoEditToolControllerViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKMediaEditPreviewController * _Nullable)photoEditToolControllerPreviewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)photoEditToolControllerBaseCIImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)photoEditToolControllerPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIScrollView * _Nullable)photoEditToolControllerPreviewScrollView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)photoEditToolController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)photoEditToolControllerSpriteViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMediaEditPreviewControllerDelegate>
/// :nodoc:
- (BOOL)mediaEditPreviewControllerPreviewEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKRenderMode)mediaEditPreviewControllerRenderMode:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIColor * _Nonnull)mediaEditPreviewControllerBackgroundColor:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIEdgeInsets)mediaEditPreviewControllerPreviewInsets:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)mediaEditPreviewControllerPreviewScale:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)mediaEditPreviewControllerProxyZoomingActive:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)mediaEditPreviewControllerResetProxyZooming:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// :nodoc:
- (BOOL)mediaEditPreviewControllerPlaybackEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)mediaEditPreviewControllerDidChangePhotoEditModel:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// :nodoc:
- (PESDKConfiguration * _Nonnull)mediaEditPreviewControllerConfiguration:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)mediaEditPreviewControllerDidInitialize:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
@end


/// The <code>MediaEditViewControllerDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>MediaEditViewController</code>.
SWIFT_PROTOCOL_NAMED("MediaEditViewControllerDelegate")
@protocol PESDKMediaEditViewControllerDelegate
@optional
/// Called when a new tool controller will be pushed onto the tool stack.
/// \param mediaEditViewController The media edit view controller presenting the tool.
///
/// \param toolController The tool being presented.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController willPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a new tool controller was pushed onto the tool stack.
/// \param mediaEditViewController The media edit view controller presenting the tool.
///
/// \param toolController The tool that was presented.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController didPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller will be popped from the tool stack.
/// \param mediaEditViewController The media edit view controller dismissing the tool.
///
/// \param toolController The tool being dismissed.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController willDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller was popped from the tool stack.
/// \param mediaEditViewController The media edit view controller dismissing the tool.
///
/// \param toolController The tool that was dismissed.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController didDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
@end

enum PESDKNavigationControllerMode : NSInteger;
@class PESDKMediaEditViewControllerOptionsBuilder;

/// Options for configuring a <code>MediaEditViewController</code>.
SWIFT_CLASS_NAMED("MediaEditViewControllerOptions")
@interface PESDKMediaEditViewControllerOptions : NSObject
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, readonly, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// The main view’s background color. Defaults to the configuration’s global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// The background color of the menu. Defaults to the configuration’s global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Controls if the user can zoom the preview image. Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL allowsPreviewImageZoom;
/// When set to <code>true</code>, the user is forced to crop the asset to one of the allowed crop aspects
/// in <code>TransformToolControllerOptions.allowedCropAspects</code> before being able to use other
/// features of the editor. The transform tool will only be presented if the image does not
/// already fit one of those allowed aspect ratios. It will be presented automatically, if the
/// user changes the orientation of the asset and the result does not match an allowed
/// aspect ratio. If set to <code>false</code> while the image does not fit one of the allowed crop aspects,
/// the image will be silently cropped using the best fitting allowed crop aspect.
/// Default is set to <code>false</code>.
/// attention:
/// This property has no effect unless <code>TransformToolControllerOptions.allowFreeCrop</code>
/// is set to <code>false</code>.
@property (nonatomic, readonly) BOOL forceCropMode;
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum MediaEditOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable mediaEditOverlayActionSelectedClosure)(enum MediaEditOverlayAction);
/// The undo/redo buttons in the <code>MediaEditViewController</code> have two different modes of operation:
/// If this property is <code>true</code> (the default) each operation will be undone individually. So for
/// example if you draw 3 strokes in the brush tool and move a sticker around twice in the
/// sticker options tools, you’d have to tap ‘undo’ 5 times to undo everything.
/// If this property is <code>false</code> all modifications that have been made within a single tool will
/// be grouped together and undone in one step. In the above example that means that you’d only
/// have to tap ‘undo’ 2 times to undo everything (once for the changes within the sticker
/// options tool and once for the changes within the brush tool).
@property (nonatomic, readonly) BOOL undoStepByStep;
/// If set this closure is called when the user taps the discard button while changes to the
/// image are applied. You can for example use this to present an alert view informing the user
/// that he is about to lose his changes. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution. By default it is set to present
/// an <code>UIAlertController</code>.
@property (nonatomic, readonly, copy) void (^ _Nullable discardConfirmationClosure)(PESDKMediaEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// This option defines the behavior if a <code>MediaEditViewController</code>or one of its ancestors is a child
/// of a <code>UINavigationController</code>. Default is <code>NavigationControllerMode.useNavigationBar</code>.
@property (nonatomic, readonly) enum PESDKNavigationControllerMode navigationControllerMode;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// If enabled, the editor will render and export the asset in the defined output format even if no changes
/// have been applied. Otherwise, the input asset will be passed through and might not match the defined
/// output format.
/// Default is set to <code>false</code>.
@property (nonatomic, readonly) BOOL forceExport;
/// If enabled and you only have one item in the tools menu, menu step will be skipped and single tool
/// will be shown. Dismissing the tool will be redirecred to dismissing the editor.
/// Default is set to <code>true</code>.
@property (nonatomic, readonly) BOOL singleToolUsage;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>MediaEditViewControllerOptions</code> using the given builder.
/// \param builder A <code>MediaEditViewControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKMediaEditViewControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


/// The default <code>MediaEditViewControllerOptionsBuilder</code> for <code>MediaEditViewControllerOptions</code>.
SWIFT_CLASS_NAMED("MediaEditViewControllerOptionsBuilder")
@interface PESDKMediaEditViewControllerOptionsBuilder : NSObject
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// The main view’s background color. Defaults to the configuration’s global background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The background color of the menu. Defaults to the configuration’s global background color.
@property (nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// When set to <code>true</code>, the user is forced to crop the asset to one of the allowed crop aspects
/// in <code>TransformToolControllerOptions.allowedCropAspects</code> before being able to use other
/// features of the editor. The transform tool will only be presented if the image does not
/// already fit one of those allowed aspect ratios. It will be presented automatically, if the
/// user changes the orientation of the asset and the result does not match an allowed
/// aspect ratio. If set to <code>false</code> while the image does not fit one of the allowed crop aspects,
/// the image will be silently cropped using the best fitting allowed crop aspect.
/// Default is set to <code>false</code>.
/// attention:
/// This property has no effect unless <code>TransformToolControllerOptions.allowFreeCrop</code>
/// is set to <code>false</code>.
@property (nonatomic) BOOL forceCropMode;
/// Controls if the user can zoom the preview image. Defaults to <code>true</code>.
@property (nonatomic) BOOL allowsPreviewImageZoom;
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum MediaEditOverlayAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, copy) void (^ _Nullable mediaEditOverlayActionSelectedClosure)(enum MediaEditOverlayAction);
/// The undo/redo buttons in the <code>MediaEditViewController</code> have two different modes of operation:
/// If this property is <code>true</code> (the default) each operation will be undone individually. So for
/// example if you draw 3 strokes in the brush tool and move a sticker around twice in the
/// sticker options tools, you’d have to tap ‘undo’ 5 times to undo everything.
/// If this property is <code>false</code> all modifications that have been made within a single tool will
/// be grouped together and undone in one step. In the above example that means that you’d only
/// have to tap ‘undo’ 2 times to undo everything (once for the changes within the sticker
/// options tool and once for the changes within the brush tool).
@property (nonatomic) BOOL undoStepByStep;
/// If set this closure is called when the user taps the discard button while changes to the
/// image are applied. You can for example use this to present an alert view informing the user
/// that he is about to lose his changes. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution. By default it is set to present
/// an <code>UIAlertController</code>.
@property (nonatomic, copy) void (^ _Nullable discardConfirmationClosure)(PESDKMediaEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// This option defines the behavior if a <code>MediaEditViewController</code>or one of its ancestors is a child
/// of a <code>UINavigationController</code>. Default is <code>NavigationControllerMode.useNavigationBar</code>.
@property (nonatomic) enum PESDKNavigationControllerMode navigationControllerMode;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// If enabled, the editor will render and export the asset in the defined output format even if no changes
/// have been applied. Otherwise, the input asset will be passed through and might not match the defined
/// output format.
/// Default is set to <code>false</code>.
@property (nonatomic) BOOL forceExport;
/// If enabled and you only have one item in the tools menu, menu step will be skipped and single tool
/// will be shown. Dismissing the tool will be redirecred to dismissing the editor.
/// Default is set to <code>true</code>.
@property (nonatomic) BOOL singleToolUsage;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>MediaEditViewControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>MediaEditViewControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKMediaEditViewControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@end


@class PESDKPhotoEditMenuItem;

@interface PESDKMediaEditViewControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationBlock)(PESDKMenuCollectionViewCell * _Nonnull, PESDKPhotoEditMenuItem * _Nonnull);
/// This closure is called every time the user selects a menu item.
@property (nonatomic, copy) void (^ _Nullable photoEditorActionSelectedBlock)(PESDKPhotoEditMenuItem * _Nonnull);
/// An array of <code>MediaEditOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedMediaEditOverlayActions</code> with the corresponding <code>MediaEditOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedMediaEditOverlayActions;
/// The menu items (or tools) to display in the main menu. Default is
/// <code>PhotoEditMenuItem.defaultItems</code>.
@property (nonatomic, copy) NSArray<PESDKPhotoEditMenuItem *> * _Nonnull menuItems;
@end


/// A view that hosts accessory UI elements above or below a <code>MenuCollectionView</code>.
/// It is used to define the accessory’s <code>backgroundColor</code> and to configure UI elements that depend on it.
SWIFT_CLASS_NAMED("MenuAccessoryContainerView")
@interface PESDKMenuAccessoryContainerView : UIView
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// This closure is executed when the <code>backgroundColor</code> changes.
@property (nonatomic, copy) void (^ _Nullable backgroundColorDidChange)(UIColor * _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewFlowLayout;

/// A <code>MenuCollectionView</code> is a subclass of <code>UICollectionView</code> configured to be used as the menu
/// of a tool controller.
SWIFT_CLASS_NAMED("MenuCollectionView")
@interface PESDKMenuCollectionView : UICollectionView
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// The flow layout of the collection view.
@property (nonatomic, readonly, strong) UICollectionViewFlowLayout * _Nonnull flowLayout;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
@end


/// The cell that is used in the menu.
SWIFT_CLASS_NAMED("MenuCollectionViewCell")
@interface PESDKMenuCollectionViewCell : UICollectionViewCell
/// Whether this cell is currently active or not. This behaves similar to <code>isSelected</code>, however
/// we don’t use <code>isSelected</code> on purpose to have better control over a cell’s selection state.
@property (nonatomic) BOOL isActive;
/// The icon image view displays an icon close to the center of the cell.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconImageView;
/// The caption text label displays text close to the bottom of the cell.
@property (nonatomic, readonly, strong) PESDKLabel * _Nonnull captionTextLabel;
/// A gradient view that is displayed behind the <code>captionTextLabel</code>.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull captionGradientView;
/// The background image view displays an image below the other views and across the whole size
/// of the cell.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull backgroundImageView;
/// The background dimming view will be visible when the cell is selected and
/// <code>dimBackgroundImageWhenSelected</code> is <code>true</code> to dim the content of <code>backgroundImageView</code>.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundDimmingView;
/// When set to <code>true</code> the <code>backgroundImageView</code>’s content will be dimmed when the cell is
/// selected. This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL dimsBackgroundImageWhenSelected;
/// When set to <code>true</code> the <code>iconImageView</code>’s and <code>captionTextLabel</code> content will be slightly
/// dimmed when the cell is not selected. This property supports being set via a <code>UIAppearance</code>
/// proxy.
@property (nonatomic) BOOL dimsContentWhenNotSelected;
/// When set to <code>true</code> the <code>captionGradientView</code> will be visible. This property supports being
/// set via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL showsGradientBehindCaptionTextLabel;
/// An activity indicator that is close to the center of the cell.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/// The color of the cell’s content (i.e. the <code>iconImageView</code> and <code>captionTextLabel</code>). While the
/// cell is not selected this color will be slightly dimmed by lowering the alpha value, when the
/// cell is selected the value will be displayed with an alpha value of <code>1</code>. This property
/// supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull contentTintColor;
/// The color that the <code>backgroundImageView</code> is dimmed with if <code>dimBackgroundImageWhenSelected</code>
/// is <code>true</code>. This property suppports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull backgroundDimmingColor;
/// When set to <code>false</code> the <code>captionTextLabel</code> won’t be shown. This property supports being set
/// via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL showsCaptionTextLabel;
/// The border width of the selection indicator.
/// This property suppports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat selectionBorderWidth;
/// The corner radius of the <code>contentView</code>.
/// This property suppports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat cornerRadius;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)updateConstraints;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end




/// The <code>MenuListSectionControllerListDisplayDelegate</code> protocol defines methods that allow you to
/// respond to the display events of an instance of <code>MenuListSectionController</code>.
SWIFT_PROTOCOL_NAMED("MenuListSectionControllerListDisplayDelegate")
@protocol PESDKMenuListSectionControllerListDisplayDelegate
/// Called just before a cell will be displayed.
/// \param sectionController The section controller that handles the cell.
///
/// \param cell The cell that will be displayed.
///
/// \param index The index of the cell within the section.
///
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController willDisplay:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end


/// The <code>MenuListSectionControllerSelectionDelegate</code> protocol defines methods that allow you to
/// respond to the selection events of an instance of <code>MenuListSectionController</code>.
SWIFT_PROTOCOL_NAMED("MenuListSectionControllerSelectionDelegate")
@protocol PESDKMenuListSectionControllerSelectionDelegate
/// Called when an item is selected.
/// \param sectionController The section controller that handles the item.
///
/// \param index The index of the item that was selected within the section.
///
/// \param object The object that was selected.
///
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController didSelectItemAt:(NSInteger)index object:(id _Nonnull)object;
@end



/// A <code>MenuViewController</code> displays a menu at the bottom of its view and the view of an arbitrary
/// contained <code>UIViewController</code> above that menu.
SWIFT_CLASS_NAMED("MenuViewController")
@interface PESDKMenuViewController : PESDKViewController
/// The view controller whose view should be displayed above the menu.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/// When selecting an item in the menu, the item can either remain selected until manually
/// deselected (<code>true</code>) or be immediately deselected automatically (<code>false</code>). The default is <code>false</code>.
@property (nonatomic) BOOL keepsSelection;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKMenuViewControllerDelegate> _Nullable delegate;
/// The collection view which displays the menu.
@property (nonatomic, readonly, strong) PESDKMenuCollectionView * _Nonnull collectionView;
/// The view above the menu, where the <code>contentViewController</code>’s view is added to.
@property (nonatomic, readonly, strong) UIView * _Nonnull workspaceView;
/// The view that hosts the <code>collectionView</code>. It extends below the bottom <code>safeAreaLayoutGuide</code>
/// if needed.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull accessoryView;
/// The menu items that this menu view controller displays.
@property (nonatomic, copy) NSArray<id <PESDKMenuItem>> * _Nonnull menuItems;
/// The height of the menu. Default is <code>88</code>.
@property (nonatomic) CGFloat menuHeight;
/// Whether the menu is currently hidden or not.
@property (nonatomic, readonly) BOOL isMenuHidden;
/// Creates a new <code>MenuViewController</code> with the given content view controller.
/// \param contentViewController The content view controller to show above the menu.
///
- (nonnull instancetype)initWithContentViewController:(UIViewController * _Nonnull)contentViewController OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillLayoutSubviews;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
/// :nodoc:
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
/// Shows the menu.
/// \param animated Whether this change should be animated or not.
///
- (void)showMenuWithAnimated:(BOOL)animated;
/// Hides the menu.
/// \param animated Whether this change should be animated or not.
///
- (void)hideMenuWithAnimated:(BOOL)animated;
/// Performs an immediate reload of the menu.
/// attention:
/// If possible you should use <code>performUpdates(animated:completion:)</code> instead because
/// it is less expensive.
/// \param completion The block to execute when the reload completes. The passed <code>Bool</code>
/// variable specifies whether or not the update animations completed successfully.
///
- (void)reloadDataWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Performs an update from the previous state of the menu.
/// \param animated A flag indicating if the transition should be animated.
///
/// \param completion The block to edecuted when the updates complete.
///
- (void)performUpdatesWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Reloads the menu for only the specified menu items.
/// \param menuItems The menu items to reload.
///
- (void)reloadMenuItems:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKMenuViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMenuListSectionControllerSelectionDelegate>
/// :nodoc:
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController didSelectItemAt:(NSInteger)index object:(id _Nonnull)object;
@end


@interface PESDKMenuViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMenuListSectionControllerListDisplayDelegate>
/// :nodoc:
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController willDisplay:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



enum PESDKStickerTintMode : NSInteger;

/// A <code>Sticker</code> represents a single sticker in a sticker category. Each sticker needs an image and a
/// thumbnail image. If no thumbnail is provided, it is automatically generated.
SWIFT_CLASS_NAMED("Sticker")
@interface PESDKSticker : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL for the sticker’s full size image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The thumbnail URL of the sticker. If this is <code>nil</code>, it will be generated
/// automatically from the full size image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// The tint mode that this sticker supports. Default is <code>.none</code>.
@property (nonatomic) enum PESDKStickerTintMode tintMode;
/// This string is used to identify the sticker. It must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Whether brightness for this sticker can be adjusted. Default is <code>false</code>.
@property (nonatomic) BOOL allowBrightnessAdjustment;
/// Whether contrast for this sticker can be adjusted. Default is <code>false</code>.
@property (nonatomic) BOOL allowContrastAdjustment;
/// Whether saturation for this sticker can be adjusted. Default is <code>false</code>.
@property (nonatomic) BOOL allowSaturationAdjustment;
/// Creates a sticker with an image url and optionally a thumbnail url.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param imageURL The url for the sticker’s full size image.
///
/// \param thumbnailURL The url for the sticker’s thumbnail image.
///
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL identifier:(NSString * _Nonnull)identifier;
/// Creates a sticker with an image url and optionally a thumbnail url.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param imageURL The url for the sticker’s full size image.
///
/// \param thumbnailURL The url for the sticker’s thumbnail image.
///
/// \param tintMode The tint mode that this sticker supports.
///
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Returns the first sticker with the given identifier, if any.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the sticker to look for.
///
///
/// returns:
/// The sticker with the given identifier or <code>nil</code>.
+ (PESDKSticker * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.sticker(withIdentifier:)` of your `Configuration` object instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>MultiImageSticker</code> allows to provide multiple variants for a sticker. The variants are cycled when the sticker is already selected and tapped again on the canvas.
SWIFT_CLASS_NAMED("MultiImageSticker")
@interface PESDKMultiImageSticker : PESDKSticker
/// The array of sticker variants provided for this multi image sticker.
@property (nonatomic, readonly, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// Creates a multi image sticker with an image url for the thumbnail and the sticker variants it should be composed of.
/// \param imageURL The url for the thumbnail image. If <code>nil</code> the first sticker of the given <code>stickers</code> array will be used to create the thumbnail.
///
/// \param stickers The sticker variants to associate with this multi image sticker.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier imageURL:(NSURL * _Nullable)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier SWIFT_UNAVAILABLE;
@end





/// This mode defines the behavior if a <code>MediaEditViewController</code>or one of its ancestors is a child
/// of a <code>UINavigationController</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKNavigationControllerMode, "NavigationControllerMode", open) {
/// If there’s a <code>UINavigationController</code> use its <code>UINavigationBar</code> at the top of the screen
/// to display the <code>MediaEditViewController</code>‘s <code>Toolbar</code> which is normally displayed at the bottom
/// of the screen if there’s no <code>UINavigationController</code> present.
  PESDKNavigationControllerModeUseNavigationBar = 0,
/// If there’s a <code>UINavigationController</code> keep the <code>MediaEditViewController</code>’s <code>Toolbar</code>
/// at the bottom of the screen.
  PESDKNavigationControllerModeUseToolbar = 1,
/// When a <code>MediaEditViewController</code> is part of a custom container view controller, which is
/// presented in an <code>UINavigationController</code>, the <code>MediaEditViewController</code> will not be able to
/// update the navigation controller’s navigation bar by default because that is the job of the
/// immediate child of the navigation controller. This mode is identical to the <code>useNavigationBar</code> mode except
/// that the parent view controller’s <code>UINavigationItem</code> will be altered instead of the <code>MediaEditViewController</code>’s
/// own navigation item so that the <code>UINavigationBar</code> can be used to display the <code>Toolbar</code> even when embedded in
/// a custom container view controller.
  PESDKNavigationControllerModeUseNavigationBarAndParentNavigationItem = 2,
};


/// A concrete <code>Effect</code> that does nothing.
SWIFT_CLASS_NAMED("NoEffect")
@interface PESDKNoEffect : PESDKEffect
/// Creates a no-op effect.
///
/// returns:
/// A newly initialized <code>NoEffect</code> object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
@end


enum PESDKTemperatureFormat : NSInteger;
@class PESDKTemperature;

/// The <code>WeatherProvider</code> protocol represents weather data independent of its source.
SWIFT_PROTOCOL_NAMED("WeatherProvider")
@protocol PESDKWeatherProvider
/// The temperature format that should be used for displaying temperature measurements to the user.
@property (nonatomic, readonly) enum PESDKTemperatureFormat temperatureFormat;
/// The temperature measurement.
@property (nonatomic, readonly, strong) PESDKTemperature * _Nullable temperature;
/// Request to update the weather data.
- (void)updateData;
@end


/// A <code>WeatherProvider</code> for the https://openweathermap.org service.
SWIFT_CLASS_NAMED("OpenWeatherProvider")
@interface PESDKOpenWeatherProvider : NSObject <CLLocationManagerDelegate, PESDKWeatherProvider>
/// The used API key. If <code>nil</code> or empty the sample API is used.
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// The minimum update interval to request new data from the service. It defaults to one hour.
@property (nonatomic) NSTimeInterval updateInterval;
/// Create a new <code>OpenWeatherProvider</code>.
/// \param apiKey The used API key. If <code>nil</code> or empty the sample API is used.
///
/// \param unit The temperature format that should be used for displaying temperature measurements to the user.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nullable)apiKey unit:(enum PESDKTemperatureFormat)unit OBJC_DESIGNATED_INITIALIZER;
/// The temperature format that should be used for displaying temperature measurements to the user.
@property (nonatomic) enum PESDKTemperatureFormat temperatureFormat;
/// The temperature measurement.
@property (nonatomic, readonly, strong) PESDKTemperature * _Nullable temperature;
/// Request to update the weather data.
- (void)updateData;
/// When this closure is called, the SDK has determined that location access has not been granted
/// to the host app yet. Within this closure you should then request appropriate permissions from
/// the passed in <code>CLLocationManager</code> object. Location access is used to request weather data
/// for the current location for weather stickers.
/// attention:
/// Starting Spring 2019, all apps submitted to the App Store that access user data
/// are required to include a purpose string as soon as location permissions requests appear
/// somewhere in the binary. Since we do not want to force developers integrating the SDK into
/// their app to include a purpose string even with weather stickers disabled, this closure was
/// introduced, so that developers can decide for themselves if it is appropriate to request
/// location access. Simply set this property like this:
/// \code
/// openWeatherProvider.locationAccessRequestClosure = { locationManager in
///   locationManager.requestWhenInUseAuthorization()
/// }
///
/// \endcode
@property (nonatomic, copy) void (^ _Nullable locationAccessRequestClosure)(CLLocationManager * _Nonnull);
/// :nodoc:
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the orientation of an image and has the same meaning as the corresponding EXIF value.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKOrientation, "Orientation", open) {
/// Row 0 is at the top, column 0 is on the left.
  PESDKOrientationNormal = 1,
/// Row 0 is at the top, column 0 is on the right.
  PESDKOrientationFlipX = 2,
/// Row 0 is at the bottom, column 0 is on the right.
  PESDKOrientationRotate180 = 3,
/// Row 0 is at the bottom, column 0 is on the left.
  PESDKOrientationFlipY = 4,
/// Row 0 is on the left, column 0 is at the top.
  PESDKOrientationTransverse = 5,
/// Row 0 is on the right, column 0 is at the top.
  PESDKOrientationRotate90 = 6,
/// Row 0 is on the right, column 0 is at the bottom.
  PESDKOrientationTranspose = 7,
/// Row 0 is on the left, column 0 is at the bottom.
  PESDKOrientationRotate270 = 8,
};

/// Represents how will editor handle output resolution in case where desired
/// crop ratio can’t be represented with current dimensions.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKOutputScalingRule, "OutputScalingRule", open) {
/// No output scaling will be performed. This means that output resolution
/// aspect ratio isnt guaranteed to be exactly the same as selected in editor.
  PESDKOutputScalingRuleNone = 0,
/// Image will be scaled down to the closest dimensions that represent the
/// selected aspect ratio.
  PESDKOutputScalingRuleScaleDown = 1,
/// Image will be scaled up to the closest dimensions that represent the
/// selected aspect ratio.
  PESDKOutputScalingRuleScaleUp = 2,
/// Image will be scaled down or up to the closest dimensions (depending
/// what is closer), that represent the selected aspect ratio.
  PESDKOutputScalingRuleScaleUpOrDown = 3,
/// Image will have the exact resolution as aspect ratio width and height.
/// Example: If aspect ratio is set to 16×9, output resolution will have width
/// of 16px and height of 9px.
  PESDKOutputScalingRuleExactResolution = 4,
};


/// An <code>Overlay</code> represents a unique overlay that can be added to a photo.
SWIFT_CLASS_NAMED("Overlay")
@interface PESDKOverlay : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// This string is used to identify the overlay. It must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The URL of the image.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The URL of the thumbnail for this overlay. If none is provided,
/// the <code>url</code> will be used.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// This string will be used within the UI.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// This mode will be set when the overlay is selected in the UI.
@property (nonatomic, readonly) enum PESDKBlendMode initialBlendMode;
/// Initialize a new Overlay
/// \param identifier An identifier.
///
/// \param displayName This will be used within the UI.
///
/// \param url The URL of the image.
///
/// \param thumbnailURL The URL of the thumbnail for this overlay. If none is provided,
/// the <code>url</code> will be used.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName url:(NSURL * _Nullable)url thumbnailURL:(NSURL * _Nullable)thumbnailURL initialBlendMode:(enum PESDKBlendMode)initialBlendMode OBJC_DESIGNATED_INITIALIZER;
/// Get the overlay from the pool with the given identifier.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier An identifier.
///
///
/// returns:
/// The overlay that matches the identifier, <code>nil</code> otherwise.
+ (PESDKOverlay * _Nullable)overlayWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.overlay(withIdentifier:)` of your `Configuration` object instead.");
/// This is a special case of an overlay. It means, apply no overlay at all.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKOverlay * _Nonnull none;)
+ (PESDKOverlay * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Creates the default overlays that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKOverlay *> * _Nonnull defaultItems;)
+ (NSArray<PESDKOverlay *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// This array represents the pool of overlays available to the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKOverlay *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.overlays` of your `Configuration` object instead.");)
+ (NSArray<PESDKOverlay *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKOverlay *> * _Nonnull)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An <code>OverlayButton</code> is used inside the <code>workspaceView</code> of a <code>StackLayoutToolController</code>. It is
/// a regular button with a translucent black background.
SWIFT_CLASS_NAMED("OverlayButton")
@interface PESDKOverlayButton : PESDKButton
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Sets the images for the <code>UIControl.State</code> <code>normal</code> and <code>disabled</code> based on the given templated image.
/// The alpha value of the image is reduced for the <code>disabled</code> state.
/// \param image The image for the <code>UIControl.State</code> <code>normal</code> and <code>disabled</code>.
///
- (void)setImage:(UIImage * _Nullable)image;
/// Creates the default add button.
///
/// returns:
/// The default add button.
+ (PESDKOverlayButton * _Nonnull)makeAddButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default delete button.
///
/// returns:
/// The default delete button.
+ (PESDKOverlayButton * _Nonnull)makeDeleteButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default flip button.
///
/// returns:
/// The default flip button.
+ (PESDKOverlayButton * _Nonnull)makeFlipButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default straighten button.
///
/// returns:
/// The default straighten button.
+ (PESDKOverlayButton * _Nonnull)makeStraightenButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default bring to front button.
///
/// returns:
/// The default bring to front button.
+ (PESDKOverlayButton * _Nonnull)makeToFrontButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default undo button.
///
/// returns:
/// The default undo button.
+ (PESDKOverlayButton * _Nonnull)makeUndoButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default redo button.
///
/// returns:
/// The default redo button.
+ (PESDKOverlayButton * _Nonnull)makeRedoButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default alignment button.
///
/// returns:
/// The default alignment button.
+ (PESDKOverlayButton * _Nonnull)makeAlignmentButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default invert button.
///
/// returns:
/// The default invert button.
+ (PESDKOverlayButton * _Nonnull)makeInvertButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default disable invert button.
///
/// returns:
/// The default disable invert button.
+ (PESDKOverlayButton * _Nonnull)makeDisableInvertButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default play button.
///
/// returns:
/// The default play button.
+ (PESDKOverlayButton * _Nonnull)makePlayButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default pause button.
///
/// returns:
/// The default pause button.
+ (PESDKOverlayButton * _Nonnull)makePauseButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default sound on button.
///
/// returns:
/// The default sound on button.
+ (PESDKOverlayButton * _Nonnull)makeSoundOnButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default sound off button.
///
/// returns:
/// The default sound off button.
+ (PESDKOverlayButton * _Nonnull)makeSoundOffButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default background removal button.
///
/// returns:
/// The default background removal button.
+ (PESDKOverlayButton * _Nonnull)makeRemoveBackgroundButton SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=15.0);
@end

@protocol PESDKOverlayEditControllerDelegate;

/// A <code>OverlayEditController</code> displays controls to update the blend mode and intensity of an
/// overlay. It is supposed to be contained in a tool controller and be presented above a
/// <code>PhotoEditPreviewController</code>. It contains a <code>SliderEditController</code> to present a slider to
/// control the overlay intensity.
SWIFT_CLASS_NAMED("OverlayEditController")
@interface PESDKOverlayEditController : PESDKViewController
/// The container for the blend mode collection view. This view displays a light gradient.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull blendModeContainerView;
/// The collection view that displays the currently selected blend mode.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull blendModeCollectionView;
/// The currently active overlay.
@property (nonatomic, strong) PESDKOverlay * _Nullable overlay;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKOverlayEditControllerDelegate> _Nullable delegate;
/// Whether to show the intensity slider, <code>true</code> by default.
@property (nonatomic) BOOL showOverlayIntensitySlider;
/// Whether to show the blend mode selection view, <code>true</code> by default.
@property (nonatomic) BOOL showBlendModeCollectionView;
/// The default initial intensity when selecting a new overlay, <code>1</code> by default.
@property (nonatomic) CGFloat initialOverlayIntensity;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Changes the currently active blend mode.
/// \param blendMode The new blend mode.
///
/// \param animated Whether to animate this change.
///
- (void)selectBlendMode:(enum PESDKBlendMode)blendMode animated:(BOOL)animated;
/// Selects the next available blend mode.
/// \param animated Whether to animate this change.
///
- (void)selectNextBlendModeWithAnimated:(BOOL)animated;
/// Shows the intensity slider based on <code>showOverlayIntensitySlider</code>.
/// \param animated Whether to animate this change.
///
- (void)showControlsWithAnimated:(BOOL)animated;
/// Hides the intensity slider.
/// \param animated Whether to animate this change.
///
- (void)hideControlsWithAnimated:(BOOL)animated;
/// Shows the blend mode collection view.
/// \param animated Whether to animate this change.
///
- (void)showBlendModesWithAnimated:(BOOL)animated;
/// Hides the blend mode collection view.
/// \param animated Whether to animate this change.
///
- (void)hideBlendModesWithAnimated:(BOOL)animated;
/// Whether the blend mode collection view is currently hidden or not.
@property (nonatomic, readonly) BOOL isBlendModeViewHidden;
/// The time it takes until the blend mode collection view will fade out after switching blend
/// modes. Default is two seconds.
@property (nonatomic) NSTimeInterval blendModeHideTimeInterval;
/// Changes the currently set overlay.
/// \param overlay The new overlay or <code>nil</code> to disable the overlay.
///
/// \param animated Whether to animate this change.
///
- (void)setOverlay:(PESDKOverlay * _Nullable)overlay animated:(BOOL)animated;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKBlendModeCollectionViewCell) _Nonnull collectionViewCellType;)
+ (SWIFT_METATYPE(PESDKBlendModeCollectionViewCell) _Nonnull)collectionViewCellType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// The <code>OverlayEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>OverlayEditControllerDelegate</code>.
SWIFT_PROTOCOL_NAMED("OverlayEditControllerDelegate")
@protocol PESDKOverlayEditControllerDelegate
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param overlayEditController The overlay edit controller that changed the photo edit model.
///
- (void)overlayEditControllerDidChangePhotoEditModel:(PESDKOverlayEditController * _Nonnull)overlayEditController;
/// Asks the delegate for the scroll view to which zoom events of the overlay edit controller should
/// be forwarded.
/// \param overlayEditController The overlay edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)overlayEditControllerTargetScrollView:(PESDKOverlayEditController * _Nonnull)overlayEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller is about to display the given blend mode in the given
/// cell.
/// \param overlayEditController The overlay edit controller that is about to diplay the blend mode.
///
/// \param blendMode The blend mode that is about to be displayed.
///
/// \param cell The cell in which the blend mode is displayed.
///
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController willDisplay:(enum PESDKBlendMode)blendMode in:(PESDKBlendModeCollectionViewCell * _Nonnull)cell;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param overlayEditController The overlay edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end


/// This filter applies an overlay to an image.
SWIFT_CLASS_NAMED("OverlayFilter")
@interface PESDKOverlayFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The overlay image image.
@property (nonatomic, strong) CIImage * _Nullable inputOverlayImage;
/// The effect intensity.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The blend mode that should be used
@property (nonatomic, strong) NSNumber * _Nullable inputBlendMode;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>OverlayLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("OverlayLabel")
@interface PESDKOverlayLabel : PESDKLabel
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// Handles the display of <code>OverlayMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("OverlayListSectionController")
@interface PESDKOverlayListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (void)selectItemAt:(NSInteger)index;
/// :nodoc:
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>OverlayToolController</code>.
SWIFT_CLASS_NAMED("OverlayMenuItem")
@interface PESDKOverlayMenuItem : NSObject <PESDKMenuItem>
/// The <code>Overlay</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKOverlay * _Nonnull overlay;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the thumbnail image of this overlay.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// An optional thumbnail image. If this is set, <code>thumbnailURL</code> won’t be used.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// Creates a new overlay menu item for the given overlay.
/// \param overlay The overlay that this menu item represents.
///
- (nonnull instancetype)initWithOverlay:(PESDKOverlay * _Nonnull)overlay thumbnail:(UIImage * _Nullable)thumbnail;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit the overlay. It contains a menu with options to select the overlay
/// and a <code>OverlayEditController</code> to update the blend mode and overlay intensity.
SWIFT_CLASS_NAMED("OverlayToolController")
@interface PESDKOverlayToolController : PESDKMenuToolController <PESDKOverlayEditControllerDelegate>
/// The contained <code>OverlayEditController</code>.
@property (nonatomic, readonly, strong) PESDKOverlayEditController * _Nonnull overlayEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)overlayEditControllerDidChangePhotoEditModel:(PESDKOverlayEditController * _Nonnull)overlayEditController;
/// :nodoc:
- (UIScrollView * _Nullable)overlayEditControllerTargetScrollView:(PESDKOverlayEditController * _Nonnull)overlayEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController willDisplay:(enum PESDKBlendMode)blendMode in:(PESDKBlendModeCollectionViewCell * _Nonnull)cell;
/// :nodoc:
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end



/// Options for configuring a <code>OverlayToolController</code>.
SWIFT_CLASS_NAMED("OverlayToolControllerOptions")
@interface PESDKOverlayToolControllerOptions : PESDKToolControllerOptions
/// This closure can be used to configure the overlay intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the overlay intensity slider’s container view.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the overlay intensity slider. Defaults to true.
@property (nonatomic, readonly) BOOL showOverlayIntensitySlider;
/// Enable/Disable the overlay blend mode collection view. Defaults to true.
@property (nonatomic, readonly) BOOL showBlendModeCollectionView;
/// This closure is called every time the user selects a overlay.
@property (nonatomic, readonly, copy) void (^ _Nullable overlaySelectedClosure)(PESDKOverlay * _Nonnull);
/// This closure is called every time the user selects a new blend mode.
@property (nonatomic, readonly, copy) void (^ _Nullable blendModeSelectedClosure)(enum PESDKBlendMode);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Overlay</code> will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKOverlay * _Nonnull);
/// This closure allows further configuration of the overlay cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Overlay</code> as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKOverlay * _Nonnull);
/// The initial intensity that should be set when selecting an overlay.
@property (nonatomic, readonly) CGFloat initialOverlayIntensity;
/// This closure allows further configuration of the blend mode collection view.
@property (nonatomic, readonly, copy) void (^ _Nullable blendModeCollectionViewConfigurationClosure)(UICollectionView * _Nonnull);
/// This closure allows further configuration of the blend mode collection view cell.
@property (nonatomic, readonly, copy) void (^ _Nullable blendModeCollectionViewCellConfigurationClosure)(PESDKBlendModeCollectionViewCell * _Nonnull, enum PESDKBlendMode);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>OverlayToolControllerOptions</code> using the given builder.
/// \param builder A <code>OverlayToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKOverlayToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>OverlayToolControllerOptionsBuilder</code> for <code>OverlayToolControllerOptions</code>.
SWIFT_CLASS_NAMED("OverlayToolControllerOptionsBuilder")
@interface PESDKOverlayToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure can be used to configure the overlay intensity slider.
@property (nonatomic, copy) void (^ _Nullable overlayIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the overlay intensity slider’s container view.
@property (nonatomic, copy) void (^ _Nullable overlayIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the overlay intensity slider. Defaults to true.
@property (nonatomic) BOOL showOverlayIntensitySlider;
/// This closure is called every time the user selects a overlay.
@property (nonatomic, copy) void (^ _Nullable overlaySelectedClosure)(PESDKOverlay * _Nonnull);
/// This closure is called every time the user selects a new blend mode.
@property (nonatomic, copy) void (^ _Nullable blendModeSelectedClosure)(enum PESDKBlendMode);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Overlay</code> will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKOverlay * _Nonnull);
/// Enable/Disable the overlay blend mode collection view. Defaults to true.
@property (nonatomic) BOOL showBlendModeCollectionView;
/// This closure allows further configuration of the overlay cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Overlay</code> as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKOverlay * _Nonnull);
/// The initial intensity that should be set when selecting an overlay.
@property (nonatomic) CGFloat initialOverlayIntensity;
/// This closure allows further configuration of the blend mode collection view.
@property (nonatomic, copy) void (^ _Nullable blendModeCollectionViewConfigurationClosure)(UICollectionView * _Nonnull);
/// This closure allows further configuration of the blend mode collection view cell.
@property (nonatomic, copy) void (^ _Nullable blendModeCollectionViewCellConfigurationClosure)(PESDKBlendModeCollectionViewCell * _Nonnull, enum PESDKBlendMode);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>OverlayToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>OverlayToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKOverlayToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKOverlayToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>BlendMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedBlendModes</code> with the corresponding <code>BlendMode</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBlendModes;
@end


/// <code>PESDK</code> provides methods to unlock and customize the SDK.
SWIFT_CLASS("_TtC8ImglyKit5PESDK")
@interface PESDK : IMGLY
/// :nodoc:
+ (BOOL)crashIfNeededAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKTexture;

/// A <code>Painting</code> manages the shaders, textures, vertices and framebuffers involved in a single painting.
SWIFT_CLASS_NAMED("Painting")
@interface PESDKPainting : NSObject
/// The canvas view that displays this painting.
@property (nonatomic, weak) PESDKCanvasView * _Nullable canvas;
/// The size of the painting.
@property (nonatomic, readonly) CGSize dimensions;
/// The bounds of the painting.
@property (nonatomic, readonly) CGRect bounds;
/// The brush texture that will be used to paint strokes.
@property (nonatomic, strong) PESDKTexture * _Nullable brushTexture;
/// Creates a new painting of the given size for a specific Metal device.
/// \param size The size of the painting.
///
/// \param device The Metal device to use for drawing.
///
- (nonnull instancetype)initWithSize:(CGSize)size device:(id <MTLDevice> _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
/// Creates a new painting of the given size using the default Metal device.
/// \param size The size of the painting.
///
- (nullable instancetype)initWithSize:(CGSize)size;
/// Clears the painting of any drawings.
- (void)clear;
/// Preloads the texture that will be used to render drawings into.
- (void)preloadPaintTexture;
/// Generates an <code>UIImage</code> of the painting of the given size and with the given background color.
/// \param size The size of the requested image.
///
/// \param color The background color of the image.
///
///
/// returns:
/// An image of the painting.
- (UIImage * _Nullable)imageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Generates a <code>CIImage</code> of the painting of the given size and with the given background color.
/// \param size The size of the requested image.
///
/// \param color The background color of the image.
///
///
/// returns:
/// An image of the painting.
- (CIImage * _Nullable)ciImageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>PaintingFragment</code> holds the data to redraw a certain part of a <code>Painting</code>. This is mainly
/// used for fast and efficient undo and redo.
SWIFT_CLASS_NAMED("PaintingFragment")
@interface PESDKPaintingFragment : NSObject
/// The rectangle of the painting that this fragment represents.
@property (nonatomic, readonly) CGRect bounds;
/// The size of the saved data.
@property (nonatomic, readonly) NSInteger dataLength;
/// The bitmap data that belongs to this fragment. This is stored on disk and retrieved when needed.
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Creates a new <code>PaintingFragment</code> with the given data and for the given bounds.
/// \param data The bitmap data that belongs to this fragment.
///
/// \param bounds The rectangle of the painting that this fragment represents.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data bounds:(CGRect)bounds OBJC_DESIGNATED_INITIALIZER;
/// Applies the bitmap data of this fragment in the given painting.
/// \param painting The painting to apply this fragment in.
///
- (void)applyIn:(PESDKPainting * _Nonnull)painting;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that wraps different types of image data.
/// The <code>Photo</code> class currently supports <code>URL</code>, <code>Data</code> and <code>UIImage</code> as sources for photos.
/// The image type to choose depends on where the image comes from:
/// <ul>
///   <li>
///     Use <code>URL</code> for image files on disk.
///   </li>
///   <li>
///     Use <code>Data</code> for images from the web.
///   </li>
///   <li>
///     Use <code>UIImage</code> only if the image was already used in the UI.
///   </li>
/// </ul>
/// Using <code>URL</code> or <code>Data</code> will have the least amount of memory footprint because we will do
/// the image scaling without reading the full image if possible. We also try to do this with
/// <code>UIImage</code>, however if the instance of <code>UIImage</code> represents a wide-color image we will have to
/// read the full image which can lead to memory pressure for large images.
/// If memory is still an issue when using <code>Data</code> objects, it is recommended that you write the data
/// to disk and initialize a <code>Photo</code> with a file url instead.
/// When <code>URL</code> or <code>Data</code> is used we are also able to keep any associated EXIF data, which <code>UIImage</code>
/// does not support.
/// The data format can be any image format that can be read by iOS, for example PNG, JPEG or HEIF.
/// note:
/// You don’t have to pre-scale your image because we’re already doing any work that is
/// necessary.
SWIFT_CLASS_NAMED("Photo")
@interface PESDKPhoto : NSObject
/// The url that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The data object that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The image object that this photo was initialized with if any.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The <code>UIImage</code> representation of this <code>Photo</code>.
@property (nonatomic, strong) UIImage * _Nullable uiImage;
/// The size of the photo.
@property (nonatomic, readonly) CGSize size;
/// Get the underlying <code>Photo</code> from a <code>PhotoRepresentation</code> if it is a <code>Photo</code> or create a new photo if necessary.
+ (PESDKPhoto * _Nullable)photoFromPhotoRepresentation:(id <PESDKPhotoRepresentation> _Nonnull)photoRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Creates a new photo from the given url.
/// \param url The url to the image on disk.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Creates a new photo from the given data.
/// \param data The data of the image.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
/// Creates a new photo from the given <code>UIImage</code> object.
/// \param image The <code>UIImage</code> instance.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>PhotoRepresentation</code> protocol represents a photo of some form.
SWIFT_PROTOCOL_NAMED("PhotoRepresentation")
@protocol PESDKPhotoRepresentation
/// The url that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The data object that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The image object that this photo was initialized with if any.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The <code>UIImage</code> representation of this <code>PhotoRepresentation</code>.
@property (nonatomic, readonly, strong) UIImage * _Nullable uiImage;
/// The size of the photo.
@property (nonatomic, readonly) CGSize size;
/// Creates a new photo representation with the given data.
/// \param data The data of the image.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// Creates a new photo representatino with the given url.
/// \param url The url of the image on disk.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
@end


@interface PESDKPhoto (SWIFT_EXTENSION(ImglyKit)) <PESDKPhotoRepresentation>
@end


/// The <code>PhotoEditPreviewController</code> is responsible for previewing changes to a photo and displaying
/// the image in a scrollable container. It is passed a full resolution <code>UIImage</code> object and handles
/// downscaling automatically.
SWIFT_CLASS_NAMED("PhotoEditPreviewController")
@interface PESDKPhotoEditPreviewController : PESDKMediaEditPreviewController
/// The photo that is being previewed.
@property (nonatomic, readonly, strong) PESDKPhoto * _Nonnull photo;
/// Generates a resized version of the high resolution photo such that it fits within the bounds
/// of <code>workImageSize(for:)</code> while maintaining the original aspect ratio.
- (void)loadBaseImage:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// :nodoc:
- (void)updateRenderer;
@end


@interface PESDKPhotoEditPreviewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a newly initialized photo edit preview controller for the given photo and the given
/// photo edit model.
/// \param photoAsset The photo to preview.
///
/// \param photoEditModel The photo edit model to render.
///
- (nonnull instancetype)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
@end

enum PESDKLicenseProduct : NSInteger;
@class CIContext;
@protocol CAMetalDrawable;
@protocol MTLCommandQueue;
@class PESDKDrawReturnValue;

/// A <code>PhotoEditRenderer</code> takes a <code>CIImage</code> and a <code>PhotoEditModel</code> as input and takes care of
/// applying all necessary effects and filters to the image. The output image can then be rendered
/// into an <code>EAGLContext</code> or converted into a <code>CGImage</code> instance.
SWIFT_CLASS_NAMED("PhotoEditRenderer")
@interface PESDKPhotoEditRenderer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a new <code>PhotoEditRenderer</code> object.
/// note:
/// This initializer should only be used with Objective-C.
/// \param _objCProductType The product this renderer is used in.
///
- (nonnull instancetype)initWithProductType:(enum PESDKLicenseProduct)_objCProductType;
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable originalImage;
/// The render mode describes which effects should be applied to the input image.
@property (nonatomic) PESDKRenderMode renderMode;
/// The asset manager that is associated with this renderer. It is used to fetch the resources
/// for sprites like stickers, brush and frames.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The asset catalog that is associated with this renderer.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// The queue on which rendering is perfomed.
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull renderingQueue;
/// A <code>CIImage</code> instance with all effects and filters applied to it.
@property (nonatomic, readonly, strong) CIImage * _Nonnull outputImage;
/// :nodoc:
- (CIImage * _Nonnull)watermarkedImageFrom:(CIImage * _Nonnull)inputImage SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nonnull)customWatermarkedImageFrom:(CIImage * _Nonnull)inputImage SWIFT_WARN_UNUSED_RESULT;
/// The size of the output image.
@property (nonatomic, readonly) CGSize outputImageSize;
/// Invalidates the cache. You can call this prior to rendering to force a complete rerender.
- (void)invalidateCache;
/// The <code>CIContext</code> that is used to generate images.
@property (nonatomic, readonly, strong) CIContext * _Nonnull generatingCIContext;
/// Applies all necessary filters and effects to the input image and converts it to an instance
/// of <code>CGImage</code>.
///
/// returns:
/// A newly created instance of <code>CGImage</code>.
- (CGImageRef _Nonnull)newOutputImage SWIFT_WARN_UNUSED_RESULT;
/// Renders the final output image into a pixel buffer.
/// \param pixelBuffer The pixel buffer to render the output image into.
///
- (void)renderOutputImageInto:(CVPixelBufferRef _Nonnull)pixelBuffer;
/// Same as <code>newOutputImage()</code> but asynchronously.
/// \param completion A completion handler that receives the newly created instance of
/// <code>CGImage</code> once rendering is complete.
///
- (void)createOutputImageWithCompletion:(void (^ _Nonnull)(CGImageRef _Nonnull))completion;
/// Draws the output image into the given <code>CAMetalDrawable</code>.
/// \param device The <code>MTLDevice</code> to use.
///
/// \param drawable The drawable to draw into.
///
/// \param rect The rectangle to draw into.
///
/// \param commandQueue The <code>MTLCommandQueue</code> to use.
///
///
/// returns:
/// A tuple containing the created <code>MTLCommandBuffer</code> and the target <code>CGColorSpace</code> that was used to render the image.
- (PESDKDrawReturnValue * _Nullable)drawOutputImageFor:(id <MTLDevice> _Nonnull)device in:(id <CAMetalDrawable> _Nonnull)drawable to:(CGRect)rect commandQueue:(id <MTLCommandQueue> _Nonnull)commandQueue;
@end

@protocol MTLCommandBuffer;

/// A class containing the created <code>MTLCommandBuffer</code> and the target <code>CGColorSpace</code> that were used to draw the image with a Metal context.
SWIFT_CLASS_NAMED("DrawReturnValue")
@interface PESDKDrawReturnValue : NSObject
/// The command buffer used to render the image.
@property (nonatomic, readonly, strong) id <MTLCommandBuffer> _Nonnull commandBuffer;
/// The target color space used to render the image.
@property (nonatomic, readonly) CGColorSpaceRef _Nullable colorSpace;
/// Creates a new return value object.
/// \param commandBuffer The command buffer used to render the image.
///
/// \param colorSpace The target color space used to render the image.
///
- (nonnull instancetype)initWithCommandBuffer:(id <MTLCommandBuffer> _Nonnull)commandBuffer colorSpace:(CGColorSpaceRef _Nullable)colorSpace OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface PESDKPhotoEditRenderer (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKPhotoEditRenderer (SWIFT_EXTENSION(ImglyKit))
/// Applies all necessary filters and effects to the input image and converts it to a <code>Data</code>
/// object containing the specified image file format and the given compressoin quality
/// (if applicable).
/// \param imageFormat The image file format to generate.
///
/// \param compressionQuality The compression quality to apply. This will only be used for lossy
/// image formats.
///
/// \param metadataSourcePhoto The photo of which the metadata should be copied to the new image. If
/// <code>nil</code> it uses the metadata of the original image, if available.
///
/// \param completionHandler A completion handler that receives the newly created
/// instance of <code>Data</code> once rendering is complete.
///
- (void)generateOutputImageDataWithFormat:(enum PESDKImageFileFormat)imageFormat compressionQuality:(CGFloat)compressionQuality metadataSourcePhoto:(PESDKPhoto * _Nullable)metadataSourcePhoto completionHandler:(void (^ _Nonnull)(NSData * _Nullable, CGFloat, CGFloat))completionHandler;
@end








@interface PESDKPhotoEditToolController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKPhotoEditToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


@protocol PESDKPhotoEditViewControllerDelegate;

/// A <code>PhotoEditViewController</code> is the main starting point for the SDK. It displays the rendered
/// photo and a menu. It can present <code>PhotoEditToolController</code> objects and react to changes. It
/// can be presented on its own (thus displaying a toolbar for navigation at the bottom) or be
/// embedded into a <code>UINavigationController</code> (thus using the navigation controller’s navigation bar
/// for navigation).
SWIFT_CLASS_NAMED("PhotoEditViewController")
@interface PESDKPhotoEditViewController : PESDKMediaEditViewController
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKPhotoEditViewControllerDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, readonly, strong) PESDKMediaEditViewControllerOptions * _Nonnull options;
/// Applies all changes to the high resolution image and calls the delegate methods.
- (void)renderHighResolutionVariant;
/// Serializes all currently applied operations into a single file, which may be restored on other
/// platforms to continue editing.
/// \param includeImageData Whether or not to include the base64 encoded JPEG image within
/// the generated image.
///
///
/// returns:
/// The serialized settings.
- (NSData * _Nullable)serializedSettingsWithImageData:(BOOL)includeImageData SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didCancel;
/// :nodoc:
- (void)willPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)willDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
@end


@interface PESDKPhotoEditViewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>PhotoEditViewController</code> for the given <code>Photo</code> and the given configuration,
/// using the default photo edit model.
/// \param photoAsset The photo to edit.
///
/// \param configuration The configuration options to apply.
///
- (nonnull instancetype)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration;
/// Creates a new <code>PhotoEditViewController</code> for the given <code>Photo</code>, the given configuration and
/// photo edit model.
/// attention:
/// This initializer should only be used with Objective-C.
/// \param photoAsset The photo to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
- (nonnull instancetype)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
/// Creates a new <code>PhotoEditViewController</code> or subclass if there is a replacing class defined by <code>PESDK.replaceClass</code> in Swift.
/// \param photoAsset The photo to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
+ (PESDKPhotoEditViewController * _Nonnull)photoEditViewControllerWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel SWIFT_WARN_UNUSED_RESULT;
@end

@class PESDKPhotoEditorTask;
@class PESDKPhotoEditorResult;
@class PESDKPhotoEditorError;

/// The <code>PhotoEditViewControllerDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>PhotoEditViewController</code>.
SWIFT_PROTOCOL_NAMED("PhotoEditViewControllerDelegate")
@protocol PESDKPhotoEditViewControllerDelegate <PESDKMediaEditViewControllerDelegate>
@optional
/// Called before the output image is generated.
/// \param photoEditViewController The photo edit view controller that will create the output image.
///
/// \param task The input data, containing the input image and <code>PhotoEditModel</code>.
///
- (BOOL)photoEditViewControllerShouldStart:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController task:(PESDKPhotoEditorTask * _Nonnull)task SWIFT_WARN_UNUSED_RESULT;
@required
/// Called when the output image was generated.
/// \param photoEditViewController The photo edit view controller that created the output image.
///
/// \param result The result of the processing, containing output image data and the export status.
///
- (void)photoEditViewControllerDidFinish:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController result:(PESDKPhotoEditorResult * _Nonnull)result;
/// Called when the output image could not be generated.
/// \param photoEditViewController The photo edit view controller that was unable to create the output image.
///
/// \param error The occurred error.
///
- (void)photoEditViewControllerDidFail:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController error:(PESDKPhotoEditorError * _Nonnull)error;
/// Called when the user wants to dismiss the editor.
/// \param photoEditViewController The photo edit view controller that is asking to be cancelled.
///
- (void)photoEditViewControllerDidCancel:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
@end


/// Options for configuring a <code>PhotoEditViewController</code>.
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptions")
@interface PESDKPhotoEditViewControllerOptions : PESDKMediaEditViewControllerOptions
/// The image file format of the generated high resolution image. Default is <code>.jpeg</code>.
@property (nonatomic, readonly) enum PESDKImageFileFormat outputImageFileFormat;
/// The Uniform Type Identifier (UTI) of the output image as <code>UTType</code>.
@property (nonatomic, readonly) CFStringRef _Nonnull outputImageFileFormatUTI;
/// The compression quality to use when creating the output image. Default is <code>0.9</code>. This will
/// only be used if a lossy image file format was specified in <code>outputImageFileFormat</code>.
@property (nonatomic, readonly) CGFloat compressionQuality;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>PhotoEditViewControllerOptions</code> using the given builder.
/// \param photoEditBuilder A <code>PhotoEditViewControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithPhotoEditBuilder:(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull)photoEditBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKMediaEditViewControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>PhotoEditViewControllerOptionsBuilder</code> for <code>PhotoEditViewControllerOptions</code>.
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptionsBuilder")
@interface PESDKPhotoEditViewControllerOptionsBuilder : PESDKMediaEditViewControllerOptionsBuilder
/// The image file format of the generated high resolution image. Default is <code>.jpeg</code>.
@property (nonatomic) enum PESDKImageFileFormat outputImageFileFormat;
/// The compression quality to use when creating the output image. Default is <code>0.9</code>. This will
/// only be used if a lossy image file format was specified in <code>outputImageFileFormat</code>.
@property (nonatomic) CGFloat compressionQuality;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>PhotoEditViewControllerOptionsBuilder</code> initialized with the given options.
/// \param photoEditOptions A <code>PhotoEditViewControllerOptions</code> instance.
///
- (nonnull instancetype)initWithPhotoEditOptions:(PESDKPhotoEditViewControllerOptions * _Nonnull)photoEditOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKMediaEditViewControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

enum PESDKPhotoEditorErrorReason : NSInteger;

/// Possible errors that could be returned by PhotoEditor SDK.
SWIFT_CLASS_NAMED("PhotoEditorError")
@interface PESDKPhotoEditorError : NSError
/// The error reason.
@property (nonatomic, readonly) enum PESDKPhotoEditorErrorReason reason;
/// The underlying error.
@property (nonatomic, readonly) NSError * _Nullable underlyingError;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSError *> * _Nonnull underlyingErrors;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// The error reason.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKPhotoEditorErrorReason, "Reason", open) {
/// Unable to load underlying image from the input image.
  PESDKPhotoEditorErrorReasonInputImageNotFound = 0,
/// <code>PhotoEditRenderer</code> failed to generate the output image.
  PESDKPhotoEditorErrorReasonRenderingFailed = 1,
/// Input image size is <code>.zero</code>.
  PESDKPhotoEditorErrorReasonImageSizeZero = 2,
};

@class PESDKPhotoEditorOutput;
enum PESDKPhotoEditorStatus : NSInteger;

/// A <code>PhotoEditorResult</code> contains the relevant information from a successful export of PhotoEditor SDK.
SWIFT_CLASS_NAMED("PhotoEditorResult")
@interface PESDKPhotoEditorResult : NSObject
/// The output image object.
@property (nonatomic, readonly, strong) PESDKPhotoEditorOutput * _Nonnull output;
/// An enum indicating whether any changes have been applied to the image.
@property (nonatomic, readonly) enum PESDKPhotoEditorStatus status;
/// The <code>PhotoEditorTask</code> that initialized the export.
@property (nonatomic, readonly, strong) PESDKPhotoEditorTask * _Nonnull task;
/// A flag indicating whether any changes have been applied to the image.
@property (nonatomic, readonly) BOOL hasChanges SWIFT_DEPRECATED_MSG("Use `status` instead.");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The export status.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKPhotoEditorStatus, "Status", open) {
/// Input image was not modified.
/// note:
/// To process the unedited image with the rendering pipeline, enable <code>PhotoEditViewControllerOptions.forceExport</code>.
  PESDKPhotoEditorStatusPassedWithoutRendering = 0,
/// Input image was processed by the rendering pipeline, without any edits.
/// note:
/// To avoid processing the unedited image with the rendering pipeline, disable <code>PhotoEditViewControllerOptions.forceExport</code>.
  PESDKPhotoEditorStatusRenderedWithoutChanges = 1,
/// Input image was rendered with edits described in the <code>PhotoEditModel</code>.
  PESDKPhotoEditorStatusRenderedWithChanges = 2,
};


/// A <code>PhotoEditor.Output</code> contains output image data and format.
SWIFT_CLASS_NAMED("Output")
@interface PESDKPhotoEditorOutput : NSObject
/// The output image encoded <code>Data</code>.
/// important:
/// This property can contain data in different formats, depending on the use case:
/// <ul>
///   <li>
///     If the editor was initialized with <code>Photo(data:)</code> or <code>Photo(url:)</code> and <em>no modifications</em> have been made to the image - it will contain the input data in the same format.
///   </li>
///   <li>
///     If any modifications have been made to the image or <code>PhotoEditViewControllerOptions.forceExport</code> is enabled - it will use <code>PhotoEditViewControllerOptions.outputImageFileFormat</code>.
///   </li>
/// </ul>
/// note:
/// This property can be used to create a new <code>UIImage</code> with <code>UIImage(data:)</code>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// The type identifier of the generated image data if available. See <code>data</code> for possible cases.
/// note:
/// This property can be used to save the generated data to a file with proper extension, see <code>UTType</code> class.
///
/// returns:
/// <code>nil</code> if the image format cannot be recognized.
@property (nonatomic, readonly, copy) NSString * _Nullable uti;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>PhotoEditorTask</code> contains all the data that is necessary to start rendering.
SWIFT_CLASS_NAMED("PhotoEditorTask")
@interface PESDKPhotoEditorTask : NSObject
/// The <code>Photo</code> that was passed to the editor.
@property (nonatomic, readonly, strong) PESDKPhoto * _Nonnull photo;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKPhotoEditorTask (SWIFT_EXTENSION(ImglyKit))
/// The <code>PhotoEditModel</code> that holds the operations applied to the image.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull model;
@end



/// Represents a color that can be changed with the color pipette.
SWIFT_CLASS_NAMED("PipettableColor")
@interface PESDKColorPipette : PESDKColor
/// Creates a new <code>PipetteableColor</code> object.
/// \param color The initial color that this object represents.
///
/// \param colorName The name for <code>color</code>, used for accessibility.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>PrimaryLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("PrimaryLabel")
@interface PESDKPrimaryLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>ProgressLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("ProgressLabel")
@interface PESDKProgressLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>ProxyZoomController</code> is supposed to be contained in a tool controller. It is added above
/// a <code>PhotoEditPreviewController</code> and can forward scroll view events to the preview, to enabled
/// zooming and scrolling within a tool.
SWIFT_CLASS_NAMED("ProxyZoomController")
@interface PESDKProxyZoomController : PESDKViewController
/// If <code>wantsScrollingInDefaultPreviewViewEnabled</code> is true, this is the scroll view
/// that acts as a proxy scroll view for the underlying image scroll view.
@property (nonatomic, strong) UIScrollView * _Nullable proxyScrollView;
/// If <code>wantsScrollingInDefaultPreviewViewEnabled</code> is true, this acts as the content view of
/// the <code>toolControllerScrollView</code>.
@property (nonatomic, strong) UIView * _Nullable proxyContentView;
/// An object that acts as a delegate. This is usually the tool controller that contains this
/// view controller.
@property (nonatomic, weak) id <PESDKProxyZoomControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Creates the views necessary to enabled proxy scrolling and zooming.
- (void)setupProxyScrolling;
/// Resets the proxy scroll view’s properties to match the target scroll view’s properties.
- (void)resetProxyScrolling;
@end


@interface PESDKProxyZoomController (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end



/// Applies a radial focus to an instance of <code>CIImage</code>.
SWIFT_CLASS_NAMED("RadialFocusFilter")
@interface PESDKRadialFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The first normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/// The second normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The fade width to use for focus. Default is 0.
@property (nonatomic, strong) NSNumber * _Nullable inputFadeWidth;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The <code>RecordingMode</code> determines if a photo or a video should be recorded.
typedef SWIFT_ENUM(NSInteger, RecordingMode, open) {
/// Take a photo.
  RecordingModePhoto = 0,
/// Record a video.
  RecordingModeVideo = 1,
};

/// The <code>RecordingOrientation</code> determines the orientation used by the camera for
/// taking a photo or recording a video.
typedef SWIFT_ENUM(NSInteger, RecordingOrientation, open) {
/// The default vertical orientation with the bottom of the device pointing down.
  RecordingOrientationPortrait = 0,
/// The vertical orientation with the bottom of the device pointing up.
  RecordingOrientationPortraitBottomUp = 1,
/// The horizontal orientation with the bottom of the device pointing left.
  RecordingOrientationLandscapeBottomLeft = 2,
/// The horizontal orientation with the bottom of the device pointing right.
  RecordingOrientationLandscapeBottomRight = 3,
};



/// A <code>StampGenerator</code> is responsible for generating a stamp image that is used by a brush to draw a stroke.
SWIFT_CLASS_NAMED("StampGenerator")
@interface PESDKStampGenerator : NSObject
/// The size of the generated stamp.
@property (nonatomic) CGSize size;
/// The stamp image.
@property (nonatomic, readonly, strong) UIImage * _Nonnull stamp;
/// A lower resolution version of the stamp image. This is used for the brush preview.
@property (nonatomic, readonly, strong) UIImage * _Nonnull smallStamp;
/// The base dimension of the generated stamp image.
@property (nonatomic, readonly) CGFloat baseDimension;
/// The bounds of the generated stamp image.
@property (nonatomic, readonly) CGRect baseBounds;
/// The scale of the stamp image in respect to its base dimension.
@property (nonatomic, readonly) CGFloat scale;
/// The object that acts as the delegate of the stamp generator.
@property (nonatomic, weak) id <PESDKGeneratorDelegate> _Nullable delegate;
/// This method should be override by subclasses. This is where the actual stamp image should be
/// generated using Core Graphics.
/// \param context The context to render into.
///
- (void)renderStampInContext:(CGContextRef _Nonnull)context;
/// A helper method to generate a radial gradient image from white to black.
/// \param hardness The hardness of the gradient.
///
///
/// returns:
/// A radial gradient image from white to black.
- (CGImageRef _Nonnull)radialFadeWithHardness:(CGFloat)hardness SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>RoundGenerator</code> generates a round stamp image with a given hardness.
SWIFT_CLASS_NAMED("RoundGenerator")
@interface PESDKRoundGenerator : PESDKStampGenerator
/// The hardness of the stamp image that is being generated.
@property (nonatomic) CGFloat hardness;
/// :nodoc:
- (void)renderStampInContext:(CGContextRef _Nonnull)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKScalePickerDelegate;

/// A <code>ScalePicker</code> provides an UI element to pick values.
SWIFT_CLASS_NAMED("ScalePicker")
@interface PESDKScalePicker : UIView
/// The current value of the scale picker.
@property (nonatomic) CGFloat currentValue;
/// The smallest pickable value.
@property (nonatomic) NSInteger minValue;
/// The biggest pickable value.
@property (nonatomic) NSInteger maxValue;
/// The dimensions of a tick.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGSize tickSize;
/// The dimensions of the main tick. That is the tick the marks the zero-value.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGSize mainTickSize;
/// The spacing between the ticks.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat spaceBetweenTicks;
/// The color of the ticks.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull tickColor;
/// The color of the value label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of a view that lies behind the value label. That should be the background with an alpha value.
/// This view is used to improve the readability of the value label.
@property (nonatomic, strong) UIColor * _Nonnull valueLabelBackgroundColor;
/// A delegate that informs the receiver about changes of the value.
@property (nonatomic, weak) id <PESDKScalePickerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// This method will move the scale to the given value.
- (void)scrollToValue:(CGFloat)value;
/// :nodoc:
- (void)accessibilityIncrement;
/// :nodoc:
- (void)accessibilityDecrement;
@end



@interface PESDKScalePicker (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/// The <code>ScalePickerDelegate</code> protocol defines a set of methods you can use to receive value-change
/// messages for <code>ScalePicker</code> objects.
SWIFT_PROTOCOL_NAMED("ScalePickerDelegate")
@protocol PESDKScalePickerDelegate
/// Called when the scale picker’s value changes.
/// \param value The new value of the scale picker.
///
/// \param scalePicker The scale picker that called this method.
///
- (void)scalePicker:(CGFloat)value didChangeValue:(PESDKScalePicker * _Nonnull)scalePicker;
@end



/// This filter changes the sharpness of an image.
SWIFT_CLASS_NAMED("SharpnessFilter")
@interface PESDKSharpnessFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The sharpness of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputSharpness;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPanGestureRecognizer;

/// A Slider object is a visual control used to select a single value from a continuous range of
/// values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the
/// current value of the slider and can be moved by the user to change the setting.
/// A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
IB_DESIGNABLE
SWIFT_CLASS_NAMED("Slider")
@interface PESDKSlider : UIControl
/// The color used to tint the thumb image. If no color is set, the default <code>tintColor</code> will be used.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable thumbTintColor;
/// The color used to tint the background color of the thumb.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull thumbBackgroundColor;
/// The color used to tint the filled track. If no color is set, the default <code>tintColor</code> will be used.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable filledTrackColor;
/// The color used to tint the unfilled track.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull unfilledTrackColor;
/// The height of the unfilled and filled track.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat trackHeight;
/// The corner radius of the unfilled and filled track.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat trackCornerRadius;
/// The size of the <code>thumbView</code>.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGSize thumbSize;
/// Contains the minimum value of the receiver.
@property (nonatomic) IBInspectable CGFloat minimumValue;
/// Contains the maximum value of the receiver.
@property (nonatomic) IBInspectable CGFloat maximumValue;
/// Contains the neutral value of the receiver.
@property (nonatomic) IBInspectable CGFloat neutralValue;
/// The pan gesture recognizer that is used to recognize user interaction in the slider.
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Nonnull panGestureRecognizer;
/// Contains the receiver’s current value.
@property (nonatomic) IBInspectable CGFloat value;
/// :nodoc:
@property (nonatomic) CGRect frame;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)accessibilityIncrement;
/// :nodoc:
- (void)accessibilityDecrement;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (void)tintColorDidChange;
/// Returns the drawing rectangle for the slider’s thumb image.
/// \param bounds The bounding rectangle of the receiver.
///
/// \param value The current value of the slider.
///
///
/// returns:
/// The computed drawing rectangle for the thumb image.
- (CGRect)thumbRectFor:(CGRect)bounds value:(CGFloat)value SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The view that is displaying the thumb.
@property (nonatomic, strong) UIImageView * _Nullable thumbView;
/// The left track for unfilled state.
@property (nonatomic, strong) UIView * _Nullable leftUnfilledTrackView;
/// The right track for unfilled state.
@property (nonatomic, strong) UIView * _Nullable rightUnfilledTrackView;
/// The track for the filled state.
@property (nonatomic, strong) UIView * _Nullable filledTrackView;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Called by the gesture recognizer detecting the pan gesture. You should not call this method
/// directly.
/// \param panGestureRecognizer The pan gesture recognizer which began tracking.
///
///
/// returns:
/// Whether to continue tracking or not.
- (BOOL)beginTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// Called by the gesture recognizer detecting the pan gesture. You should not call this method
/// directly.
/// \param panGestureRecognizer The pan gesture recognizer that continues tracking.
///
- (void)continueTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
/// Called by the gesture recognizer detecting the pan gesture. You should not call this method
/// directly.
/// \param panGestureRecognizer The pan gesture recognizer that ended tracking.
///
- (void)endTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
@end


@class NSAttributedString;

/// A SliderTooltip object is a visual element that displays a Slider’s current value above the
/// thumb image while dragging.
SWIFT_CLASS_NAMED("SliderTooltip")
@interface PESDKSliderTooltip : UIView
/// The background color of the tooltip.
@property (nonatomic, strong) UIColor * _Nonnull tooltipColor;
/// The string to display in the tooltip.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedString;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class PESDKSmartStickerPromptViewController;

/// A <code>SmartSticker</code> is a sticker with dynamically generated content. It is updated when added to the canvas or when changed as part of a <code>MultiImageSticker</code> variant.
SWIFT_CLASS_NAMED("SmartSticker")
@interface PESDKSmartSticker : PESDKSticker
/// Creates a <code>SmartSticker</code> with unique identifier.
/// \param identifier Sticker identifier.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Creates the default smart stickers that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKSticker *> * _Nonnull defaultItems;)
+ (NSArray<PESDKSticker *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// <code>UIViewController</code> that will be presented when this sticker is selected in
/// sticker selection menu, so it can be used for configuration of the smart sticker.
@property (nonatomic, readonly, strong) PESDKSmartStickerPromptViewController * _Nullable prompt;
/// This method returns the size that sticker is requesting to draw on.
/// \param metadata Metadata dictionary that contains sticker data. If <code>nil</code> is passed it means we are rendering the preview.
///
///
/// returns:
/// Size of the sticker. Make sure to return size greater than 0.
- (CGSize)sizeFor:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Method that is being called when sticker is being rendered.
/// \param metadata Metadata dictionary that contains sticker data. If <code>nil</code> is passed it means we are rendering the preview.
///
/// \param context CoreGraphics contect that you will be drawing in.
///
/// \param size Size on screen that is available for rendering. Make sure you scale the context according to the <code>self.size(...)</code> ratio.
///
/// \param scale The natural scale factor associated with the screen.
///
- (void)drawWith:(NSDictionary<NSString *, NSString *> * _Nullable)metadata context:(CGContextRef _Nonnull)context size:(CGSize)size scale:(CGFloat)scale;
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier SWIFT_UNAVAILABLE;
@end


/// A <code>PromptViewController</code> is a UIViewController that can be presented when <code>SmartSticker</code> is presented.
SWIFT_CLASS_NAMED("PromptViewController")
@interface PESDKSmartStickerPromptViewController : UIViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// The type of snapping guide visualization for a <code>SnapGuideView</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKSnapGuide, "SnapGuide", open) {
/// The corresponding <code>SnapGuideView</code> displays a horizontal line through its center in its local coordinate system.
  PESDKSnapGuideHorizontalLine = 0,
/// The corresponding <code>SnapGuideView</code> displays a vertical line through its center in its local coordinate system.
  PESDKSnapGuideVerticalLine = 1,
/// The corresponding <code>SnapGuideView</code> displays a rectangle at its <code>bounds</code>.
  PESDKSnapGuideRectangle = 2,
};


/// A <code>SnapGuideView</code> is meant to visualize snapping guides.
SWIFT_CLASS_NAMED("SnapGuideView")
@interface PESDKSnapGuideView : UIView
/// The snap guide visualization mode.
@property (nonatomic) enum PESDKSnapGuide guideMode;
/// The color of the snap guide.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull guideColor;
/// The line width of the snap guide.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat lineWidth;
/// The line dash pattern of the snap guide.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull lineDash;
/// Whether this snap guide is in the snapped state or not. If this value transitions from <code>false</code> to <code>true</code> the <code>didSnapHandler</code> is executed.
/// <code>isHidden</code> is automatically set to the opposing state of this value.
@property (nonatomic) BOOL isSnapped;
/// This closure is executed when <code>isSnapped</code> changes from <code>false</code> to <code>true</code>.
@property (nonatomic, copy) void (^ _Nullable didSnapHandler)(void);
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
@end


/// Options for configuring snapping behavior.
SWIFT_CLASS_NAMED("SnappingOptions")
@interface PESDKSnappingOptions : NSObject
/// Whether sprites, e.g., stickers, texts, or text designs, should snap to specific positions and/or
/// orientations during pan or rotation interactions. This switch enables or disables any snapping at
/// all. The detailed snapping behavior can be configured with the <code>snapTo*</code> configuration options.
/// Snapping is enabled by default.
@property (nonatomic, readonly) BOOL snappingEnabled;
/// Whether user interface objects should snap to specific orientations during rotation interactions.
/// This switch enables or disables rotation snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL rotationSnappingEnabled;
/// This threshold defines the arc length of a rotation gesture where snapping at a snap angle occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic, readonly) CGFloat rotationSnappingThreshold;
/// Whether user interface objects should snap to specific positions during pan interactions.
/// This switch enables or disables position snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL positionSnappingEnabled;
/// This threshold defines the distance of a pan gesture where snapping at a snap point occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic, readonly) CGFloat positionSnappingThreshold;
/// Enabled snapping angles in degrees for rotating a sprite. The rotation angle is defined clockwise.
/// The default value is [0, 45, 90, 135, 180, 225, 270, 315].
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull snapToAngles;
/// If enabled a sprite’s center snaps to the horizontal line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL snapToHorizontalCenterLine;
/// If enabled a sprite’s center snaps to the vertical line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL snapToVerticalCenterLine;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>SnappingOptions</code> using the given builder.
/// \param builder A <code>SnappingOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKSnappingOptionsOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


@interface PESDKSnappingOptions (SWIFT_EXTENSION(ImglyKit))
/// If not <code>nil</code> the left side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the left side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToLeft;
/// If not <code>nil</code> the right side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the right side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToRight;
/// If not <code>nil</code> the top side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the top side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToTop;
/// If not <code>nil</code> the bottom side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the bottom side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToBottom;
@end


/// The default <code>SnappingOptionsBuilder</code> for <code>SnappingOptions</code>.
SWIFT_CLASS_NAMED("SnappingOptionsBuilder")
@interface PESDKSnappingOptionsOptionsBuilder : NSObject
/// Whether user interface objects should snap to specific positions and/or
/// orientations during pan or rotation interactions. This switch enables or disables any snapping at
/// all. The detailed snapping behavior can be configured with the <code>snapTo*</code> configuration options.
/// Snapping is enabled by default.
@property (nonatomic) BOOL snappingEnabled;
/// Whether user interface objects should snap to specific orientations during rotation interactions.
/// This switch enables or disables rotation snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL rotationSnappingEnabled;
/// This threshold defines the arc length of a rotation gesture where snapping at a snap angle occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic) CGFloat rotationSnappingThreshold;
/// Whether user interface objects should snap to specific positions during pan interactions.
/// This switch enables or disables position snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL positionSnappingEnabled;
/// This threshold defines the distance of a pan gesture where snapping at a snap point occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic) CGFloat positionSnappingThreshold;
/// Enabled snapping angles in degrees for rotating a sprite. The rotation angle is defined clockwise.
/// The default value is [0, 45, 90, 135, 180, 225, 270, 315].
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull snapToAngles;
/// If enabled a sprite’s center snaps to the horizontal line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL snapToHorizontalCenterLine;
/// If enabled a sprite’s center snaps to the vertical line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL snapToVerticalCenterLine;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PESDKSnappingOptionsOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// If not <code>nil</code> the left side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the left side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToLeft;
/// If not <code>nil</code> the right side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the right side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToRight;
/// If not <code>nil</code> the top side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the top side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToTop;
/// If not <code>nil</code> the bottom side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the bottom side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToBottom;
@end

@class PESDKSoundstripeAudioProvider;

/// An <code>AssetResolver</code> for Soundstripe.
SWIFT_CLASS_NAMED("SoundstripeAssetResolver")
@interface PESDKSoundstripeAssetResolver : NSObject <PESDKAssetResolver>
/// The identifier of this resolver.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// The <code>SoundstripeAudioProvider</code> responsible for fetching the song for deserialization.
@property (nonatomic, readonly, strong) PESDKSoundstripeAudioProvider * _Nonnull provider;
/// Initializes a new <code>SoundstripeAssetResolver</code> from a provider.
/// \param provider The <code>SoundstripeAudioProvider</code> responsible for fetching the song for deserialization.
///
- (nonnull instancetype)initWithProvider:(PESDKSoundstripeAudioProvider * _Nonnull)provider OBJC_DESIGNATED_INITIALIZER;
/// Deserializes the custom asset.
/// \param data The data to deserialize the asset from.
///
- (void)deserializeFrom:(NSDictionary<NSString *, NSString *> * _Nonnull)data completion:(void (^ _Nonnull)(id <PESDKResolvableAsset> _Nullable))completion;
/// Serializes a custom asset.
/// \param asset The <code>ResolvableAsset</code> that should be serialized.
///
- (NSDictionary<NSString *, NSString *> * _Nullable)serialize:(id <PESDKResolvableAsset> _Nonnull)asset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SoundstripeAudioClipCategory</code> is a preconfigured category providing an easy access to the Soundstripe API.
SWIFT_CLASS_NAMED("SoundstripeAudioClipCategory")
@interface PESDKSoundstripeAudioCategory : PESDKAudioProviderCategory
/// Creates an audio clip category with Soundstripe as <code>AudioProvider</code>.
- (nonnull instancetype)init;
+ (nonnull instancetype)new;
/// Creates an audio clip category with Soundstripe as <code>AudioProvider</code>.
/// \param provider The <code>SoundstripeAudioProvider</code>.
///
- (nonnull instancetype)initWithProvider:(PESDKSoundstripeAudioProvider * _Nonnull)provider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioProvider:(id <PESDKAudioProvider> _Nonnull)_objCAudioProvider SWIFT_UNAVAILABLE;
@end


/// A <code>SoundstripeAudioProvider</code> represents an entry point to the Soundstripe Audio API.
SWIFT_CLASS_NAMED("SoundstripeAudioProvider")
@interface PESDKSoundstripeAudioProvider : NSObject
/// Creates an audio provider consuming Soundstripe Audio API.
/// note:
/// The <code>SoundstripeAudioProvider</code> assumes that your endpoint is mirroring the official <a href="https://docs.soundstripe.com">Soundstripe API</a>.
/// \param baseURL The base URL of your endpoint.
///
/// \param headers The headers for the URL request.
///
- (nonnull instancetype)initWithBaseURL:(NSString * _Nonnull)baseURL headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Types conforming to <code>PESDKAudioProvider</code> can implement a custom service to load audio clips from local/network sources.
SWIFT_PROTOCOL_NAMED("_ObjCAudioProvider")
@protocol PESDKAudioProvider
/// Loads initial search page with the default set of audio clips.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
/// Loads search results for the given query.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param query The query string.
///
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
/// Loads a specific audio clip.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param identifier The identifier of the audio clip.
///
/// \param completion The completion handler.
///
- (void)getWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
@end


@interface PESDKSoundstripeAudioProvider (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioProvider>
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
- (void)getWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
@end



/// This class provides our own implementation of adjustment filters.
/// Using these we get more consistant results across the several platforms.
SWIFT_CLASS_NAMED("SpriteAdjustmentsFilter")
@interface PESDKSpriteAdjustmentsFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The brightness value.
@property (nonatomic, strong) NSNumber * _Nullable inputBrightness;
/// The contrast value.
@property (nonatomic, strong) NSNumber * _Nullable inputContrast;
/// The saturation value.
@property (nonatomic, strong) NSNumber * _Nullable inputSaturation;
/// Returns an image with the applied changes.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>SpriteContainerView</code> is the parent view of <code>SpriteView</code>s. It is responsible for updating their
/// position and size based on their normalized position and size and the size of the input image.
SWIFT_CLASS_NAMED("SpriteContainerView")
@interface PESDKSpriteContainerView : UIView
/// The size of the untransformed preview image. This is used to denormalize the normalized values.
@property (nonatomic) CGSize referenceSize;
/// The size of the transformed preview image. This is used to calculate the position within the
/// view.
@property (nonatomic) CGSize currentSize;
/// The scale factor that is needed to fit the transformed preview image into the view.
@property (nonatomic, readonly) CGFloat imageToViewScaleFactor;
/// :nodoc:
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface PESDKSpriteContainerView (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end





/// A <code>SpriteLabel</code> is used to display text in a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("SpriteLabel")
@interface PESDKSpriteLabel : UILabel
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat normalizedFontSize;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// Creates a new <code>SpriteLabel</code> that is identified by the given <code>UUID</code>.
/// \param uuid The <code>UUID</code> that identifies this view.
///
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end










/// A view that renders and displays a certain <code>TextDesign</code>.
SWIFT_CLASS_NAMED("TextDesignView")
@interface PESDKTextDesignView : UIView
/// The text design that this view should display.
@property (nonatomic, strong) PESDKTextDesign * _Nullable textDesign;
/// The scale factor to apply to the generated image. Default is <code>0</code> which means that the main
/// screen’s scale is used.
@property (nonatomic) CGFloat renderingScaleFactor;
/// The text that should be displayed.
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// The seed used for the randomizer.
@property (nonatomic) uint64_t randomizerSeed;
/// Whether the text design should be drawn inverted.
@property (nonatomic) BOOL isInverted;
/// :nodoc:
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// Padding that is added to each side of the view. This is used when <code>isInverted</code> is <code>true</code>.
@property (nonatomic) CGFloat padding;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// Renders the text design into an image and sets that image as <code>imageView</code>’s <code>image</code>.
- (void)render;
@end


/// A <code>SpriteTextDesignView</code> is used to display a text design in a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("SpriteTextDesignView")
@interface PESDKSpriteTextDesignView : PESDKTextDesignView
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat normalizedPadding;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// Creates a new <code>SpriteTextDesignView</code> that is identified by the given <code>UUID</code>.
/// \param uuid The <code>UUID</code> that identifies this view.
///
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end









@class UITapGestureRecognizer;

/// A <code>SpriteViewController</code> is supposed to be added above a <code>PhotoEditPreviewController</code>.
/// It uses the <code>PhotoEditModel</code> to display <code>SpriteView</code>s corresponding to <code>SpriteModel</code>s and it
/// reacts to changes in the <code>PhotoEditModel</code> by adding, changing or deleting <code>SpriteView</code>s.
SWIFT_CLASS_NAMED("SpriteViewController")
@interface PESDKSpriteViewController : PESDKViewController
/// An object that acts as a delegate.
@property (nonatomic, weak) id <PESDKSpriteViewControllerDelegate> _Nullable delegate;
/// The <code>SpriteContainerView</code> that this view controller uses.
@property (nonatomic, readonly, strong) PESDKSpriteContainerView * _Nonnull spriteContainerView;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// The size of the untransformed preview image. This is used to denormalize the normalized values.
@property (nonatomic) CGSize referenceSize;
/// The size of the transformed preview image. This is used to calculate the position within the
/// view.
@property (nonatomic) CGSize currentSize;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)loadView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// Called by a <code>UITapGestureRecognizer</code> to select a sprite. You shouldn’t need to call this
/// method directly.
- (void)tapped:(UITapGestureRecognizer * _Nonnull)gestureRecognizer;
/// The custom watermark view.
@property (nonatomic, strong) UIImageView * _Nullable customWatermarkView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKSpriteViewController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end



@interface PESDKSpriteViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKCanvasViewDataSource>
/// :nodoc:
- (CGRect)canvasViewNormalizedCropRect:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (enum PESDKOrientation)canvasViewAppliedOrientation:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)canvasViewStraightenAngle:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIEdgeInsets)canvasViewImageInsets:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)canvasViewOutputImageSize:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
@end








/// The actions that can be used in an instance of <code>StickerOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, StickerAction, open) {
/// Change the color of the sticker. Only works if the sticker’s <code>tintMode</code> is not <code>.none</code>.
  StickerActionColor = 0,
/// Straighten the sticker.
  StickerActionStraighten = 1,
/// Change the brightness of the sticker. Only works if <code>allowBrightnessAdjustment</code> of the sticker
/// is <code>true</code>.
  StickerActionBrightness = 2,
/// Change the contrast of the sticker. Only works if <code>allowContrastAdjustment</code> of the sticker
/// is <code>true</code>.
  StickerActionContrast = 3,
/// Change the saturation of the sticker. Only works if <code>allowSaturationAdjustment</code> of the sticker
/// is <code>true</code>.
  StickerActionSaturation = 4,
/// Replace the sticker with a different sticker.
  StickerActionReplace = 5,
/// Change the opacity of the sticker.
  StickerActionOpacity = 6,
/// Remove background on a sticker if a face or a person is detected.
/// attention:
/// This option does not work properly on a simulator.
/// To see background properly removed, please test on physical device.
  StickerActionRemoveBackground = 7,
/// Change the duration of the sticker when editing a video.
  StickerActionDuration = 8,
};

/// The sticker adjustment mode that is currently active in a <code>StickerEditController</code> object.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKStickerAdjustmentModel, "StickerAdjustmentMode", open) {
/// Change the brightness of a sticker.
  PESDKStickerAdjustmentModelBrightness = 0,
/// Change the contrast of a sticker.
  PESDKStickerAdjustmentModelContrast = 1,
/// Change the saturation of a sticker.
  PESDKStickerAdjustmentModelSaturation = 2,
/// Change the opacity of a sticker.
  PESDKStickerAdjustmentModelOpacity = 3,
};



/// The menu item that is used in <code>StickerToolController</code> for action menu items, e.g. custom sticker upload button.
SWIFT_CLASS_NAMED("StickerCategoryActionMenuItem")
@interface PESDKStickerCategoryActionMenuItem : PESDKActionMenuItem
@end


/// Handles the display of <code>StickerCategoryMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("StickerCategoryListSectionController")
@interface PESDKStickerCategoryListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>StickerToolController</code>.
SWIFT_CLASS_NAMED("StickerCategoryMenuItem")
@interface PESDKStickerCategoryMenuItem : NSObject <PESDKMenuItem>
/// The <code>StickerCategory</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKStickerCategory * _Nonnull stickerCategory;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the icon of the menu item.
@property (nonatomic, readonly, copy) NSURL * _Nonnull iconURL;
/// Creates a new sticker category menu item for the given sticker category.
/// \param stickerCategory The sticker category that this menu item represents.
///
- (nonnull instancetype)initWithStickerCategory:(PESDKStickerCategory * _Nonnull)stickerCategory;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKStickerCollectionDelegate;

/// Types conforming to <code>StickerCollection</code> can provide a custom <code>UIViewController</code> instance for selecting stickers.
SWIFT_PROTOCOL_NAMED("StickerCollection")
@protocol PESDKStickerCollection
/// The delegate object that handles inserting stickers into the canvas.
@property (nonatomic, weak) id <PESDKStickerCollectionDelegate> _Nullable delegate;
/// The view controller responsible for presenting and loading the stickers.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull viewController;
@end


/// A <code>StickerCollectionCategory</code> represents an empty category with a custom <code>StickerCollection</code>.
SWIFT_CLASS_NAMED("StickerCollectionCategory")
@interface PESDKStickerCollectionCategory : PESDKStickerCategory
/// The <code>StickerCollection</code> associated with this sticker category.
@property (nonatomic, readonly, strong) id <PESDKStickerCollection> _Nonnull stickerCollection;
/// Creates a sticker category with a <code>StickerCollection</code> object.
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param stickerCollection The associated <code>StickerCollection</code> object responsible for displaying the selection view.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection;
/// Creates a sticker category with a <code>StickerCollection</code> object.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param stickerCollection The associated <code>StickerCollection</code> object responsible for displaying the selection view.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers SWIFT_UNAVAILABLE;
@end


/// The <code>StickerCollectionDelegate</code> protocol defines methods to handle stickers provided by <code>StickerCollection</code>.
SWIFT_PROTOCOL_NAMED("StickerCollectionDelegate")
@protocol PESDKStickerCollectionDelegate
/// Tells the delegate when a new sticker is selected and that it should be added to the canvas.
/// important:
/// This method can be called on a background thread.
/// UI updates will be dispatched to the main thread internally.
/// \param stickerCollection The sticker collection object that initiated the loading.
///
/// \param sticker The sticker to be inserted.
///
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker;
@optional
/// Tells the delegate when a new sticker with metadata is selected and that it should be added to the canvas.
/// \param stickerCollection The sticker collection object that initiated the loading.
///
/// \param sticker The sticker to be inserted.
///
/// \param metadata Metadata that is passed to the <code>SmartSticker</code>.
///
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata;
@end


/// A <code>StickerCollectionViewCell</code> is a cell that has an image view and an activity indicator in its
/// center.
SWIFT_CLASS_NAMED("StickerCollectionViewCell")
@interface PESDKIconCollectionViewCell : PESDKAssetCollectionViewCell
/// :nodoc:
- (void)setupImageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>StickerDurationToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, StickerDurationOverlayAction, open) {
/// Toggle play/pause for video preview.
  StickerDurationOverlayActionPlayPause = 0,
};


/// Options for configuring a <code>StickerDurationToolController</code>.
SWIFT_CLASS_NAMED("StickerDurationToolControllerOptions")
@interface PESDKStickerDurationToolControllerOptions : PESDKDurationToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerDurationOverlayActionSelectedClosure)(enum StickerDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>StickerDurationToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>StickerDurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKStickerDurationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>StickerDurationToolControllerOptionsBuilder</code> for <code>StickerDurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("StickerDurationToolControllerOptionsBuilder")
@interface PESDKStickerDurationToolControllerOptionsBuilder : PESDKDurationToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerDurationOverlayActionSelectedClosure)(enum StickerDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>StickerDurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>StickerDurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKStickerDurationToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions SWIFT_UNAVAILABLE;
@end


/// A <code>StickerEmptyView</code> is used as a placeholder for empty search results from a <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerEmptyView")
@interface PESDKStickerEmptyView : PESDKEmptyView
/// The search term that triggered the placeholder.
@property (nonatomic, copy) NSString * _Nonnull query;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>StickerErrorView</code> is used to indicate download errors in <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerErrorView")
@interface PESDKStickerErrorView : PESDKErrorView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>StickerImageView</code> is used to display a <code>Sticker</code> within a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("StickerImageView")
@interface PESDKStickerImageView : PESDKSpriteImageView
/// :nodoc:
@property (nonatomic) CGSize normalizedSize;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// The tint mode to apply to this sticker’s image.
@property (nonatomic) enum PESDKStickerTintMode tintMode;
/// The color used to colorize the image according to the <code>tintMode</code>.
@property (nonatomic, strong) UIColor * _Nonnull colorizeColor;
/// The brightness of the image, between -1 and 1.
@property (nonatomic) CGFloat brightness;
/// The contrast of the image, between -1 and 1.
@property (nonatomic) CGFloat contrast;
/// The saturation of the image, between -1 and 1.
@property (nonatomic) CGFloat saturation;
/// Background mask for the image. If set to nil, background will not be removed.
@property (nonatomic, strong) CIImage * _Nullable backgroundMask;
/// :nodoc:
@property (nonatomic, strong) UIImage * _Nullable image;
@end






/// The menu item that is used in <code>StickerSelectionController</code>.
SWIFT_CLASS_NAMED("StickerMenuItem")
@interface PESDKStickerMenuItem : NSObject
/// The <code>Sticker</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKSticker * _Nonnull sticker;
/// The url to the icon of this menu item.
@property (nonatomic, readonly, copy) NSURL * _Nonnull iconURL;
/// Creates a new sticker menu item for the given sticker.
/// \param sticker The sticker that this menu item represents.
///
- (nonnull instancetype)initWithSticker:(PESDKSticker * _Nonnull)sticker;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Handles the display of <code>StickerOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("StickerOptionListSectionController")
@interface PESDKStickerOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>StickerOptionsToolController</code>.
SWIFT_CLASS_NAMED("StickerOptionMenuItem")
@interface PESDKStickerOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>StickerAction</code> that this menu item represents.
@property (nonatomic, readonly) enum StickerAction stickerAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Flag that indicates if the menu item is a togglable action, which isn’t deselected when choosing other items.
@property (nonatomic, readonly) BOOL isTogglable;
/// Creates a new sticker option menu item for the given sticker action.
/// \param stickerAction The sticker action that this menu item represents.
///
- (nonnull instancetype)initWithStickerAction:(enum StickerAction)stickerAction icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit stickers. It contains a menu with options to change attributes of
/// the sticker and a <code>SpriteEditController</code> to change a sticker’s geometry.
SWIFT_CLASS_NAMED("StickerOptionsToolController")
@interface PESDKStickerOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end




enum StickerOverlayAction : NSInteger;

/// Options for configuring a <code>StickerOptionsToolController</code>.
SWIFT_CLASS_NAMED("StickerOptionsToolControllerOptions")
@interface PESDKStickerOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerAction);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum StickerAction);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerOverlayActionSelectedClosure)(enum StickerOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// Creates an instance of <code>StickerOptionsToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates an instance of <code>StickerOptionsToolControllerOptions</code> using the given builder.
/// \param builder A builder to create the options.
///
- (nonnull instancetype)initWithBuilder:(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>StickerOptionsToolControllerOptionsBuilder</code> for <code>StickerOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("StickerOptionsToolControllerOptionsBuilder")
@interface PESDKStickerOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerAction);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum StickerAction);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerOverlayActionSelectedClosure)(enum StickerOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKStickerOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>StickerOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedStickerOverlayActions</code> with the corresponding <code>StickerOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedStickerOverlayActions;
/// An array of <code>StickerAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedStickerActions</code> with the corresponding <code>StickerAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedStickerActions;
@end

/// The overlay actions that can be used in an instance of <code>StickerToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, StickerOverlayAction, open) {
/// Switch to the add sticker UI.
  StickerOverlayActionAdd = 0,
/// Delete the sticker.
  StickerOverlayActionDelete = 1,
/// Undo
  StickerOverlayActionUndo = 2,
/// Redo
  StickerOverlayActionRedo = 3,
/// Flip the s ticker
  StickerOverlayActionFlip = 4,
/// Bring the sticker to the front
  StickerOverlayActionBringToFront = 5,
};



/// Type representing the result of a sticker query.
SWIFT_CLASS_NAMED("StickerProviderResult")
@interface PESDKStickerProviderResult : NSObject
/// An array of <code>Sticker</code> models.
@property (nonatomic, readonly, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// A flag indicating that more content is available for endless scrolling.
@property (nonatomic, readonly) BOOL hasMore;
/// Creates a new sticker result.
/// \param stickers An array of <code>Sticker</code> models.
///
/// \param hasMore A flag indicating that more content is available for endless scrolling.
///
- (nonnull instancetype)initWithStickers:(NSArray<PESDKSticker *> * _Nonnull)stickers hasMore:(BOOL)hasMore OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A <code>StickerSearchBar</code> is displayed above the sticker collection view when using <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerSearchBar")
@interface PESDKStickerSearchBar : PESDKSearchBar
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKStickerSelectionControllerDelegate;

/// A <code>StickerSelectionController</code> displays multiple <code>Sticker</code>s and allows selection of a sticker.
SWIFT_CLASS_NAMED("StickerSelectionController")
@interface PESDKStickerSelectionController : PESDKViewController
/// The collection view that displays the <code>Sticker</code>s.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/// The gradient view that is added to the collection view for a fade effect.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull gradientView;
/// The visual effect view in the background of the collection view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull visualEffectView;
/// The size of the stickers in the collection view.
@property (nonatomic) CGSize stickerPreviewSize;
/// The search bar view enabled when using <code>StickerProvider</code>.
@property (nonatomic, readonly, strong) PESDKStickerSearchBar * _Nonnull searchBar;
/// The error view used with <code>StickerProvider</code>.
@property (nonatomic, readonly, strong) PESDKStickerErrorView * _Nonnull errorView;
/// The empty collection view used with <code>StickerProvider</code>.
@property (nonatomic, readonly, strong) PESDKStickerEmptyView * _Nonnull emptyView;
/// Calls the current error handler.
- (void)handleError;
/// The stickers which should be displayed.
@property (nonatomic, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// The async sticker provider.
@property (nonatomic, strong) id <PESDKStickerProvider> _Nullable stickerProvider;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKStickerSelectionControllerDelegate> _Nullable delegate;
/// A closure to configure the cell of each sticker.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull);
/// A closure that is called when a sticker was selected.
@property (nonatomic, copy) void (^ _Nullable stickerAddedClosure)(PESDKSticker * _Nonnull);
/// A closure that is called when the sticker image is retrieved from a local/network source.
@property (nonatomic, copy) void (^ _Nullable stickerCustomizationClosure)(PESDKStickerSelectionController * _Nonnull, PESDKSticker * _Nonnull, UIImage * _Nonnull, void (^ _Nonnull)(PESDKSticker * _Nonnull, UIImage * _Nonnull));
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKIconCollectionViewCell) _Nonnull collectionViewCellType;)
+ (SWIFT_METATYPE(PESDKIconCollectionViewCell) _Nonnull)collectionViewCellType SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSourcePrefetching>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end



@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UISearchBarDelegate>
/// :nodoc:
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// :nodoc:
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView;
@end


/// The <code>StickerSelectionControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>StickerSelectionController</code>.
SWIFT_PROTOCOL_NAMED("StickerSelectionControllerDelegate")
@protocol PESDKStickerSelectionControllerDelegate
/// Tells the delegate that the given sticker with the given image was selected.
/// \param stickerSelectionController The sticker selection controller where the sticker was selected
/// in.
///
/// \param sticker The sticker that was selected.
///
/// \param image The image that belongs to the sticker that was selected.
///
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image;
@optional
/// Tells the delegate that the given sticker with the given image was selected.
/// \param stickerSelectionController The sticker selection controller where the sticker was selected
/// in.
///
/// \param sticker The sticker that was selected.
///
/// \param image The image that belongs to the sticker that was selected.
///
/// \param metadata Metadata dictionary passed to the renderer.
///
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
@end


/// A <code>StickerSelectionView</code> is displayed above a sticker image view to indicate that this sticker
/// is selected.
SWIFT_CLASS_NAMED("StickerSelectionView")
@interface PESDKStickerSelectionView : UIView
/// Called by accessibility to make the selection smaller.
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);
/// Called by accessibility to make the selection bigger.
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);
/// Called by accessibility to rotate the selection to the left.
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);
/// Called by accessibility to rotate the selection to the right.
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGRect)alignmentRectForFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)accessibilityDecrement;
/// :nodoc:
- (void)accessibilityIncrement;
@end

/// The tinting mode a sticker supports.
/// <ul>
///   <li>
///     none:         The sticker’s color cannot be changed.
///   </li>
///   <li>
///     solid:        The sticker’s color is changed completely (i.e. <code>tintColor</code> is used).
///   </li>
///   <li>
///     colorized:    The sticker is converted to a gray scale image and the selected tint color is then
///     applied by the amount of the gray scale value.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKStickerTintMode, "StickerTintMode", open) {
/// The sticker’s color cannot be changed.
  PESDKStickerTintModeNone = 0,
/// The sticker’s color is changed completely (i.e. <code>tintColor</code> is used).
  PESDKStickerTintModeSolid = 1,
/// The sticker is converted to a gray scale image and the selected tint color is then applied
/// by the amount of the gray scale value.
  PESDKStickerTintModeColorized = 2,
};


/// The tool controller to add a <code>Sticker</code> to the image. It contains a menu with the available
/// <code>StickerCategory</code>s and a <code>StickerSelectionController</code> to display the available stickers in that
/// category.
SWIFT_CLASS_NAMED("StickerToolController")
@interface PESDKStickerToolController : PESDKMenuToolController <PESDKStickerSelectionControllerDelegate>
/// The contained <code>StickerSelectionController</code>.
@property (nonatomic, readonly, strong) PESDKStickerSelectionController * _Nonnull stickerSelectionController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image;
/// :nodoc:
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
@end


@interface PESDKStickerToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKStickerCollectionDelegate>
/// :nodoc:
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker;
/// :nodoc:
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata;
@end



@interface PESDKStickerToolController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


/// Options for configuring a <code>StickerToolController</code>.
SWIFT_CLASS_NAMED("StickerToolControllerOptions")
@interface PESDKStickerToolControllerOptions : PESDKToolControllerOptions
/// This closure is called when the user adds a sticker.
@property (nonatomic, readonly, copy) void (^ _Nullable addedStickerClosure)(PESDKSticker * _Nonnull);
/// This closure allows for customization of any sticker from a local/network source. When it is set it will be called after the image data is retrieved.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo or apply any other processing. It is passed a reference to the instance of <code>StickerSelectionController</code>
/// that calls this closure, the original <code>Sticker</code> object, the retrieved image data as <code>UIImage</code> and a completion handler, that you <em>must</em> call
/// with the modified <code>Sticker</code> and <code>UIImage</code> after you’re done with your customizations.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerCustomizationClosure)(PESDKStickerSelectionController * _Nonnull, PESDKSticker * _Nonnull, UIImage * _Nonnull, void (^ _Nonnull)(PESDKSticker * _Nonnull, UIImage * _Nonnull));
/// This closure allows further configuration of the sticker category buttons. The closure is called for
/// each sticker category button and has the button and its corresponding sticker category as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull);
/// This closure allows further configuration of the sticker buttons. The closure is called for
/// each sticker button and has the button and its corresponding sticker as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerButtonConfigurationClosure)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull);
/// The size of the stickers in the preview. Default is <code>(44, 44)</code>.
@property (nonatomic, readonly) CGSize stickerPreviewSize;
/// The index of the sticker category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic, readonly) NSInteger defaultStickerCategoryIndex;
/// Whether the user can create personal stickers from the device’s photo library. If <code>true</code> an action button is added as first item in the menu in front of the sticker categories which modally presents an <code>UIImagePickerController</code>
/// for personal sticker creation. Personal stickers will be added to a personal sticker category which will be added between the action button and the regular sticker categories if it does not exist.
/// Default is <code>false</code>.
@property (nonatomic, readonly) BOOL personalStickersEnabled;
/// The default tint mode for personal stickers. Default is <code>StickerTintMode.none</code>.
@property (nonatomic, readonly) enum PESDKStickerTintMode defaultPersonalStickerTintMode;
/// The weather provider used for all smart weather stickers. The default is <code>nil</code> which will hide all smart weather stickers or <code>MultiImageSticker</code>s that contain smart weather stickers from the <code>StickerSelectionController</code>.
@property (nonatomic, readonly, strong) id <PESDKWeatherProvider> _Nullable weatherProvider;
/// This closure allows for further customization of personal stickers. When it is set it will be called after a user selected a sticker from their photo roll.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo. It is passed a reference to the instance of <code>StickerToolController</code> that calls this closure, an instance of <code>URL</code>
/// pointing to the user’s selected sticker and a completion handler, that you <em>must</em> call with the <code>URL</code> to your modified sticker after you’re done
/// with your customizations.
@property (nonatomic, readonly, copy) void (^ _Nullable personalStickerCustomizationClosure)(PESDKStickerToolController * _Nonnull, NSURL * _Nonnull, void (^ _Nonnull)(NSURL * _Nullable));
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>StickerToolControllerOptions</code> using the given builder.
/// \param builder A <code>StickerToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKStickerToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>StickerToolControllerOptionsBuilder</code> for <code>StickerToolControllerOptions</code>.
SWIFT_CLASS_NAMED("StickerToolControllerOptionsBuilder")
@interface PESDKStickerToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called when the user adds a sticker.
@property (nonatomic, copy) void (^ _Nullable addedStickerClosure)(PESDKSticker * _Nonnull);
/// This closure allows for customization of any sticker from a local/network source. When it is set it will be called after the image data is retrieved.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo or apply any other processing. It is passed a reference to the instance of <code>StickerSelectionController</code>
/// that calls this closure, the original <code>Sticker</code> object, the retrieved image data as <code>UIImage</code> and a completion handler, that you <em>must</em> call
/// with the modified <code>Sticker</code> and <code>UIImage</code> after you’re done with your customizations.
@property (nonatomic, copy) void (^ _Nullable stickerCustomizationClosure)(PESDKStickerSelectionController * _Nonnull, PESDKSticker * _Nonnull, UIImage * _Nonnull, void (^ _Nonnull)(PESDKSticker * _Nonnull, UIImage * _Nonnull));
/// This closure allows further configuration of the sticker category buttons. The closure is called for
/// each sticker category button and has the button and its corresponding sticker category as parameters.
@property (nonatomic, copy) void (^ _Nullable stickerCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull);
/// This closure allows further configuration of the sticker buttons. The closure is called for
/// each sticker button and has the button and its corresponding sticker as parameters.
@property (nonatomic, copy) void (^ _Nullable stickerButtonConfigurationClosure)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull);
/// The size of the stickers in the preview. Default is <code>(44, 44)</code>.
@property (nonatomic) CGSize stickerPreviewSize;
/// The index of the sticker category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic) NSInteger defaultStickerCategoryIndex;
/// Whether the user can create personal stickers from the device’s photo library. If <code>true</code> an action button is added as first item in the menu in front of the sticker categories which modally presents an <code>UIImagePickerController</code>
/// for personal sticker creation. Personal stickers will be added to a personal sticker category which will be added between the action button and the regular sticker categories if it does not exist.
/// Default is <code>false</code>.
@property (nonatomic) BOOL personalStickersEnabled;
/// The default tint mode for personal stickers. Default is <code>StickerTintMode.none</code>.
@property (nonatomic) enum PESDKStickerTintMode defaultPersonalStickerTintMode;
/// The weather provider used for all smart weather stickers. The default is <code>nil</code> which will hide all smart weather stickers or <code>MultiImageSticker</code>s that contain smart weather stickers from the <code>StickerSelectionController</code>.
@property (nonatomic, strong) id <PESDKWeatherProvider> _Nullable weatherProvider;
/// This closure allows for further customization of personal stickers. When it is set it will be called after a user selected a sticker from their photo roll.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo. It is passed a reference to the instance of <code>StickerToolController</code> that calls this closure, an instance of <code>URL</code>
/// pointing to the user’s selected sticker and a completion handler, that you <em>must</em> call with the <code>URL</code> to your modified sticker after you’re done
/// with your customizations.
@property (nonatomic, copy) void (^ _Nullable personalStickerCustomizationClosure)(PESDKStickerToolController * _Nonnull, NSURL * _Nonnull, void (^ _Nonnull)(NSURL * _Nullable));
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>StickerToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>StickerToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKStickerToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// A <code>SubtleLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("SubtleLabel")
@interface PESDKSubtleLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

enum PESDKTemperatureUnit : NSInteger;

/// A temperature measurement that stores a temperature value and its corresponding unit.
SWIFT_CLASS_NAMED("Temperature")
@interface PESDKTemperature : NSObject
/// The temperature value.
@property (nonatomic, readonly) double value;
/// The temperature unit for the <code>value</code>.
@property (nonatomic, readonly) enum PESDKTemperatureUnit unit;
/// Creates a temperature measurement.
/// \param value The temperature value.
///
/// \param unit The temperature unit for the given <code>value</code>.
///
- (nonnull instancetype)initWithValue:(double)value unit:(enum PESDKTemperatureUnit)unit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This filter changes the temperature of an image.
SWIFT_CLASS_NAMED("TemperatureFilter")
@interface PESDKTemperatureFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The temperature of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputTemperature;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// A temperature format that should be used for displaying temperature measurements to the user.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKTemperatureFormat, "TemperatureFormat", open) {
/// Temperature values will always be formatted to use “°F” as unit.
  PESDKTemperatureFormatFahrenheit = 0,
/// Temperature values will always be formatted to use “°C” as unit.
  PESDKTemperatureFormatCelsius = 1,
/// Temperature values will always be formatted to use “°K” as unit.
  PESDKTemperatureFormatKelvin = 2,
/// Temperature values will be formatted according to <code>Locale.current</code>.
  PESDKTemperatureFormatLocale = 3,
};

/// A unit of measure for temperature.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKTemperatureUnit, "TemperatureUnit", open) {
/// The degree Fahrenheit unit of temperature.
  PESDKTemperatureUnitFahrenheit = 0,
/// The degree Celsius unit of temperature.
  PESDKTemperatureUnitCelsius = 1,
/// The kelvin unit of temperature.
  PESDKTemperatureUnitKelvin = 2,
};

/// The actions that can be used in an instance of <code>TextOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextAction, open) {
/// Change the font of the text.
  TextActionSelectFont = 0,
/// Change the color of the text.
  TextActionSelectColor = 1,
/// Change the color of the text’s bounding box.
  TextActionSelectBackgroundColor = 2,
/// Change the alignment of the text.
  TextActionSelectAlignment = 3,
/// Straighten the label
  TextActionStraighten = 4,
/// Change the duration of the text when editing a video.
  TextActionDuration = 5,
};


/// A <code>TextButton</code> is used within a <code>FontSelectorView</code> to present different fonts and their names.
SWIFT_CLASS_NAMED("TextButton")
@interface PESDKTextButton : PESDKButton
/// The color of the label.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/// The name of the font.
@property (nonatomic, copy) NSString * _Nonnull fontName;
/// :nodoc:
@property (nonatomic) CGRect frame;
/// The name that is shown to the user.
@property (nonatomic, copy) NSString * _Nonnull displayName;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The different modes that an instance of <code>TextColorToolController</code> can handle.
typedef SWIFT_ENUM(NSInteger, TextColorToolControllerMode, open) {
/// The mode to handle the foreground appearance of the text.
  TextColorToolControllerModeForeground = 0,
/// The mode to handle the background appearance of the text.
  TextColorToolControllerModeBackground = 1,
};


/// Options for configuring a <code>TextColorToolController</code>.
SWIFT_CLASS_NAMED("TextColorToolControllerOptions")
@interface PESDKTextColorToolControllerOptions : PESDKColorToolControllerOptions
/// An array of colors to present in the color tool when the <code>textColorMode</code> of
/// <code>TextColorToolController</code> is <code>.background</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKColor *> * _Nonnull availableBackgroundTextColors;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextColorToolControllerOptions</code> using the given builder.
/// \param textBuilder A <code>TextColorToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithTextBuilder:(PESDKTextColorToolControllerOptionsBuilder * _Nonnull)textBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextColorToolControllerOptionsBuilder</code> for <code>TextColorToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextColorToolControllerOptionsBuilder")
@interface PESDKTextColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
/// An array of colors to present in the color tool when the <code>textColorMode</code> of
/// <code>TextColorToolController</code> is <code>.background</code>.
@property (nonatomic, copy) NSArray<PESDKColor *> * _Nonnull availableBackgroundTextColors;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end


/// The base class for all text designs.
SWIFT_CLASS_NAMED("TextDesign")
@interface PESDKTextDesign : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// When a specific text design’s layout is changed or contains bugs, a legacy, backwards
/// compatible version of it is created and added to this array. This ensures that older
/// serializations can still be loaded with the same look. If you do not want to support backwards
/// compatibility, just set this to an empty array.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKTextDesign *> * _Nonnull legacy;)
+ (NSArray<PESDKTextDesign *> * _Nonnull)legacy SWIFT_WARN_UNUSED_RESULT;
+ (void)setLegacy:(NSArray<PESDKTextDesign *> * _Nonnull)value;
/// Creates the default text designs that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKTextDesign *> * _Nonnull defaultItems;)
+ (NSArray<PESDKTextDesign *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// The pool of text designs available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKTextDesign *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.textDesigns` of your `Configuration` object instead.");)
+ (NSArray<PESDKTextDesign *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKTextDesign *> * _Nonnull)newValue;
/// Get the text design from the pool with the given identifier.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier An identifier.
///
///
/// returns:
/// The text design that matches the identifier, <code>nil</code> otherwise.
+ (PESDKTextDesign * _Nullable)textDesignWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.textDesign(withIdentifier:)` of your `Configuration` object instead.");
/// The identifier of the layout.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Do not use this initializer!
/// attention:
/// It should not be public but it is currently required to workaround issues with generated <code>.swiftinterface</code> files.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The actions that can be used in an instance of <code>TextDesignOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextDesignAction, open) {
/// Change the color of the text design.
  TextDesignActionSelectColor = 0,
/// Change the style of the text design.
  TextDesignActionSelectStyle = 1,
/// Change the duration of the text design when editing a video.
  TextDesignActionDuration = 2,
};


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignBlocks")
@interface PESDKTextDesignBlocks : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignBlocksCondensed")
@interface PESDKTextDesignBlocksCondensed : PESDKTextDesignBlocks
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignBlocksLight")
@interface PESDKTextDesignBlocksLight : PESDKTextDesignBlocks
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This layout is included for compatibility of TextDesign serialization v3.0.0 ..< v3.1.1
/// Please do not use directly.
SWIFT_CLASS_NAMED("TextDesignBlocksLight_V3_1_0")
@interface PESDKTextDesignBlocksLight_V3_1_0 : PESDKTextDesignBlocksLight
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignCelebrate")
@interface PESDKTextDesignCelebrate : PESDKTextDesignBlocks
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignCelebrateSimple")
@interface PESDKTextDesignCelebrateSimple : PESDKTextDesignCelebrate
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Options for configuring a <code>TextDesignColorToolController</code>.
SWIFT_CLASS_NAMED("TextDesignColorToolControllerOptions")
@interface PESDKTextDesignColorToolControllerOptions : PESDKColorToolControllerOptions
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignColorToolControllerOptions</code> using the given builder.
/// \param textDesignBuilder A <code>TextDesignColorToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithTextDesignBuilder:(PESDKTextDesignColorToolControllerOptionsBuilder * _Nonnull)textDesignBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignColorToolControllerOptionsBuilder</code> for <code>TextDesignColorToolController</code>.
SWIFT_CLASS_NAMED("TextDesignColorToolControllerOptionsBuilder")
@interface PESDKTextDesignColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignColorToolControllerOptionsBuilder</code> initialized with the given options.
/// \param textDesignOptions A <code>TextDesignColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithTextDesignOptions:(PESDKTextDesignColorToolControllerOptions * _Nonnull)textDesignOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

/// The overlay actions that can be used in an instance of <code>TextDesignDurationToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, TextDesignDurationOverlayAction, open) {
/// Toggle play/pause for video preview.
  TextDesignDurationOverlayActionPlayPause = 0,
};


/// Options for configuring a <code>TextDesignDurationToolController</code>.
SWIFT_CLASS_NAMED("TextDesignDurationToolControllerOptions")
@interface PESDKTextDesignDurationToolControllerOptions : PESDKDurationToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textDesignDurationOverlayActionSelectedClosure)(enum TextDesignDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignDurationToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>TextDesignDurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignDurationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignDurationToolControllerOptionsBuilder</code> for <code>TextDesignDurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignDurationToolControllerOptionsBuilder")
@interface PESDKTextDesignDurationToolControllerOptionsBuilder : PESDKDurationToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textDesignDurationOverlayActionSelectedClosure)(enum TextDesignDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignDurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignDurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignDurationToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions SWIFT_UNAVAILABLE;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignEqualWidth")
@interface PESDKTextDesignEqualWidth : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignEqualWidthFat")
@interface PESDKTextDesignEqualWidthFat : PESDKTextDesignEqualWidth
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The tool controller to change the layout of a text design.
SWIFT_CLASS_NAMED("TextDesignLayoutToolController")
@interface PESDKTextDesignLayoutToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end




/// Options for configuring a <code>TextDesignLayoutToolController</code>.
SWIFT_CLASS_NAMED("TextDesignLayoutToolControllerOptions")
@interface PESDKTextDesignLayoutToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignLayoutToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextDesignLayoutToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignLayoutToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignLayoutToolControllerOptionsBuilder</code> for <code>TextDesignLayoutToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignLayoutToolControllerOptionsBuilder")
@interface PESDKTextDesignLayoutToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignLayoutToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignLayoutToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignLayoutToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// Handles the display of <code>TextDesignMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("TextDesignListSectionController")
@interface PESDKTextDesignListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (void)selectItemAt:(NSInteger)index;
/// :nodoc:
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMasked")
@interface PESDKTextDesignMasked : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMaskedBadge")
@interface PESDKTextDesignMaskedBadge : PESDKTextDesignMasked
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMaskedSpeechBubble")
@interface PESDKTextDesignMaskedSpeechBubble : PESDKTextDesignMasked
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMaskedSpeechBubbleComic")
@interface PESDKTextDesignMaskedSpeechBubbleComic : PESDKTextDesignMaskedSpeechBubble
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextDesignOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextDesignMenuItem")
@interface PESDKTextDesignMenuItem : NSObject <PESDKMenuItem>
/// The <code>TextDesign</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKTextDesign * _Nonnull textDesign;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// Creates a new text design menu item for the given text design.
/// \param textDesign The text design that this menu item represents.
///
- (nonnull instancetype)initWithTextDesign:(PESDKTextDesign * _Nonnull)textDesign;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMultiline")
@interface PESDKTextDesignMultiline : PESDKTextDesignMasked
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Handles the display of <code>TextDesignOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("TextDesignOptionListSectionController")
@interface PESDKTextDesignOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextDesignOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextDesignOptionMenuItem")
@interface PESDKTextDesignOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>TextDesignAction</code> that this menu item represents.
@property (nonatomic, readonly) enum TextDesignAction textDesignAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new text design option menu item for the given text action.
/// \param textDesignAction The text design action that this menu item represents.
///
- (nonnull instancetype)initWithTextDesignAction:(enum TextDesignAction)textDesignAction icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit text designs. It contains a menu with all available text designs and
/// a <code>SpriteEditController</code> to change a layout’s geometry.
SWIFT_CLASS_NAMED("TextDesignOptionsToolController")
@interface PESDKTextDesignOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end



@interface PESDKTextDesignOptionsToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


enum TextDesignOverlayAction : NSInteger;

/// Options for configuring a <code>TextDesignOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextDesignOptionsToolControllerOptions")
@interface PESDKTextDesignOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>textDesignActionButtonConfigurationClosure</code> instead.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable menuActionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextDesignAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignOverlayAction);
/// This closure is called when the user selects a <code>TextDesign</code>.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>actionSelectedClosure</code> instead.
@property (nonatomic, readonly, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable actionSelectedClosure)(enum TextDesignAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextDesignOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignOptionsToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextDesignOptionsToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignOptionsToolControllerOptionsBuilder</code> for <code>TextDesignOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignOptionsToolControllerOptionsBuilder")
@interface PESDKTextDesignOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>textDesignActionButtonConfigurationClosure</code> instead.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable menuActionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextDesignAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignOverlayAction);
/// This closure is called when the user selects a <code>TextDesign</code>.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>actionSelectedClosure</code> instead.
@property (nonatomic, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable actionSelectedClosure)(enum TextDesignAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextDesignOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignOptionsToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignOptionsToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignOptionsToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTextDesignOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>TextDesignOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTextDesignOverlayActions</code> with the corresponding <code>TextDesignOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextDesignOverlayActions;
@end

/// The overlay actions that can be used in an instance of <code>TextDesignOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextDesignOverlayAction, open) {
/// Invert the text design.
  TextDesignOverlayActionInvert = 0,
/// Delete the text design.
  TextDesignOverlayActionDelete = 1,
/// Undo the latest operation.
  TextDesignOverlayActionUndo = 2,
/// Redo the latest operation.
  TextDesignOverlayActionRedo = 3,
/// Move the selected text design to the front.
  TextDesignOverlayActionBringToFront = 4,
/// Switch to the add text design UI.
  TextDesignOverlayActionAdd = 5,
};


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignSunshine")
@interface PESDKTextDesignSunshine : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignParticles")
@interface PESDKTextDesignParticles : PESDKTextDesignSunshine
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier SWIFT_UNAVAILABLE;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignRotated")
@interface PESDKTextDesignRotated : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This layout is included for compatibility of TextDesign serialization v3.0.0 ..< v3.1.1
/// Please do not use directly.
SWIFT_CLASS_NAMED("TextDesignSunshine_V3_1_0")
@interface PESDKTextDesignSunshine_V3_1_0 : PESDKTextDesignSunshine
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

/// Options for configuring a <code>TextDesignToolController</code>.
SWIFT_CLASS_NAMED("TextDesignToolControllerOptions")
@interface PESDKTextDesignToolControllerOptions : PESDKToolControllerOptions
/// Use this closure to configure the text input view.
/// Defaults to an empty implementation.
@property (nonatomic, readonly, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, readonly, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// Use this closure to configure the color collection view.
/// note:
/// This closure is only used in the legacy tool.
@property (nonatomic, readonly, copy) void (^ _Nullable colorCollectionViewConfigurationClosure)(PESDKColorCollectionView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, readonly, copy) NSString * _Nullable updateTitle;
/// The color palette to display.
@property (nonatomic, readonly, strong) PESDKColorPalette * _Nonnull colorPalette;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic, readonly) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextDesignToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignToolControllerOptionsBuilder</code> for <code>TextDesignToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignToolControllerOptionsBuilder")
@interface PESDKTextDesignToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Use this closure to configure the text input view.
@property (nonatomic, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// Use this closure to configure the color collection view.
@property (nonatomic, copy) void (^ _Nullable colorCollectionViewConfigurationClosure)(PESDKColorCollectionView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, copy) NSString * _Nullable updateTitle;
/// The color palette to display.
@property (nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end




/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignWatercolor")
@interface PESDKTextDesignWatercolor : PESDKTextDesignMaskedSpeechBubble
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>TextDurationToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, TextDurationOverlayAction, open) {
/// Toggle play/pause for video preview.
  TextDurationOverlayActionPlayPause = 0,
};


/// Options for configuring a <code>TextDurationToolController</code>.
SWIFT_CLASS_NAMED("TextDurationToolControllerOptions")
@interface PESDKTextDurationToolControllerOptions : PESDKDurationToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textDurationOverlayActionSelectedClosure)(enum TextDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDurationToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>TextDurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDurationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDurationToolControllerOptionsBuilder</code> for <code>TextDurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDurationToolControllerOptionsBuilder")
@interface PESDKTextDurationToolControllerOptionsBuilder : PESDKDurationToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textDurationOverlayActionSelectedClosure)(enum TextDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDurationToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions SWIFT_UNAVAILABLE;
@end


/// The tool to edit the font of a sprite label. It contains a menu with available fonts and a
/// <code>FontSelectorViewController</code> to see a more detailed view of the fonts.
SWIFT_CLASS_NAMED("TextFontToolController")
@interface PESDKTextFontToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



@interface PESDKTextFontToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end



/// Options for configuring a <code>TextFontToolController</code>.
SWIFT_CLASS_NAMED("TextFontToolControllerOptions")
@interface PESDKTextFontToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFont * _Nonnull);
/// This closure is called every time the user selects a crop ratio.
@property (nonatomic, readonly, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);
/// This closure allows further configuration of the font selector view, i.e. the view that can
/// be expanded from the bottom to display a more detailed view of the fonts.
@property (nonatomic, readonly, copy) void (^ _Nullable fontSelectorViewConfigurationClosure)(PESDKFontSelectorView * _Nonnull);
/// This closure allows further configuration of the handle button, i.e. the view that is used to
/// expand the font selector view.
@property (nonatomic, readonly, copy) void (^ _Nullable handleButtonConfigurationClosure)(PESDKHandleButton * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextFontToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextFontToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextFontToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextFontToolControllerOptionsBuilder</code> for <code>TextFontToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextFontToolControllerOptionsBuilder")
@interface PESDKTextFontToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFont * _Nonnull);
/// This closure is called every time the user selects a font.
@property (nonatomic, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);
/// This closure allows further configuration of the font selector view, i.e. the view that can
/// be expanded from the bottom to display a more detailed view of the fonts.
@property (nonatomic, copy) void (^ _Nullable fontSelectorViewConfigurationClosure)(PESDKFontSelectorView * _Nonnull);
/// This closure allows further configuration of the handle button, i.e. the view that is used to
/// expand the font selector view.
@property (nonatomic, copy) void (^ _Nullable handleButtonConfigurationClosure)(PESDKHandleButton * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// Handles the display of <code>TextOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("TextOptionListSectionController")
@interface PESDKTextOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextOptionMenuItem")
@interface PESDKTextOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>TextAction</code> that this menu item represents.
@property (nonatomic, readonly) enum TextAction textAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new text option menu item for the given text action.
/// \param textAction The text action that this menu item represents.
///
- (nonnull instancetype)initWithTextAction:(enum TextAction)textAction icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit text. It contains a menu with options to change attributes of the
/// text and a <code>SpriteEditController</code> to change a text’s geometry.
SWIFT_CLASS_NAMED("TextOptionsToolController")
@interface PESDKTextOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end



@interface PESDKTextOptionsToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


enum TextOverlayAction : NSInteger;

/// Options for configuring a <code>TextOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptions")
@interface IMGLTextOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextOptionsToolConrollerOptions</code> using the given builder.
/// \param builder A <code>TextOptionsToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextOptionsToolControllerOptionsBuilder</code> for <code>TextOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptionsBuilder")
@interface PESDKTextOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTextOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>TextAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTextActions</code> with the corresponding <code>TextAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextActions;
/// An array of <code>TextOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTextOverlayActions</code> with the corresponding <code>TextOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextOverlayActions;
@end

/// The overlay actions that can be used in an instance of <code>TextOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextOverlayAction, open) {
/// Switch to the add text UI.
  TextOverlayActionAdd = 0,
/// Delete the label.
  TextOverlayActionDelete = 1,
/// Undo the latest operation.
  TextOverlayActionUndo = 2,
/// Redo the latest operation.
  TextOverlayActionRedo = 3,
/// Flip the label.
  TextOverlayActionFlip = 4,
/// Move the selected text to the front.
  TextOverlayActionBringToFront = 5,
};


/// A <code>TextSelectionView</code> is displayed above a label to indicate that this label is selected.
SWIFT_CLASS_NAMED("TextSelectionView")
@interface PESDKTextSelectionView : UIView
/// The handle on the right side of the view. This is used to resize the bounding box of a label.
@property (nonatomic, readonly, strong) UIView * _Nonnull rightHandle;
/// The handle on the left side of the view. This is used to resize the bounding box of a label.
@property (nonatomic, readonly, strong) UIView * _Nonnull leftHandle;
/// Called by accessibility to make this selection smaller.
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);
/// Called by accessibility to make this selection bigger.
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);
/// Called by accessibility to rotate this selection to the left.
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);
/// Called by accessibility to rotate this selection to the right.
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);
/// Called by accessibility to increase the bounding box.
@property (nonatomic, copy) void (^ _Nullable increaseBoundingBoxHandler)(void);
/// Called by accessibility to decrease the bounding box.
@property (nonatomic, copy) void (^ _Nullable decreaseBoundingBoxHandler)(void);
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGRect)alignmentRectForFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)accessibilityDecrement;
/// :nodoc:
- (void)accessibilityIncrement;
@end


/// Options for configuring a <code>TextToolController</code>.
SWIFT_CLASS_NAMED("TextToolControllerOptions")
@interface PESDKTextToolControllerOptions : PESDKToolControllerOptions
/// Use this closure to configure the text input view.
/// Defaults to an empty implementation.
@property (nonatomic, readonly, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, readonly, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, readonly, copy) NSString * _Nullable updateTitle;
/// The default color a newly created text has.
@property (nonatomic, readonly, strong) UIColor * _Nonnull defaultTextColor;
/// The default alignment a newly created text has.
@property (nonatomic, readonly) NSTextAlignment defaultTextAlignment;
/// The minimum initial font size of newly created text.
@property (nonatomic, readonly) CGFloat minimumTextSize;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic, readonly) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


@interface PESDKTextToolControllerOptions (SWIFT_EXTENSION(ImglyKit))
/// The maximum initial font size of newly created text.
/// If set to <code>nil</code> the maximum text size is calculated
/// to fit the image size which is the default.
@property (nonatomic, readonly, strong) NSNumber * _Nullable maximumTextSize;
@end


/// The default <code>TextToolControllerOptionsBuilder</code> for <code>TextToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextToolControllerOptionsBuilder")
@interface PESDKTextToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Use this closure to configure the text input view.
@property (nonatomic, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, copy) NSString * _Nullable updateTitle;
/// The default color a newly created text has.
@property (nonatomic, strong) UIColor * _Nonnull defaultTextColor;
/// The default alignment a newly created text has.
@property (nonatomic) NSTextAlignment defaultTextAlignment;
/// The minimum initial font size of newly created text.
@property (nonatomic) CGFloat minimumTextSize;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTextToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// The maximum initial font size of newly created text.
/// If set to <code>nil</code> the maximum text size is calculated
/// to fit the image size which is the default.
@property (nonatomic, strong) NSNumber * _Nullable maximumTextSize;
@end

@protocol MTLTexture;
@protocol MTLSamplerState;

/// A <code>Texture</code> manages a Metal texture. It is responsible for allocating and deallocting the necessary memory.
SWIFT_CLASS_NAMED("Texture")
@interface PESDKTexture : NSObject
/// The Metal texture that backs this instance
@property (nonatomic, strong) id <MTLTexture> _Nonnull texture;
/// The Metal sampler that should be used to sample this texture
@property (nonatomic, strong) id <MTLSamplerState> _Nonnull sampler;
/// Creates a new texture from the given image.
/// \param cgImage The image to create a texture for.
///
/// \param forceRGB Set to <code>true</code> if the image should be RGB, <code>false</code> otherwise.
///
/// \param device The Metal device to associate textures with.
///
- (nonnull instancetype)initWithCgImage:(CGImageRef _Nonnull)cgImage forceRGB:(BOOL)forceRGB device:(id <MTLDevice> _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface PESDKTimelineToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKProxyZoomControllerDelegate>
/// :nodoc:
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end


@interface PESDKTimelineToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimViewDelegate>
/// :nodoc:
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end



/// This filter is used to colorize stickers.
SWIFT_CLASS_NAMED("TintFilter")
@interface PESDKTintFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The color of the tint.
@property (nonatomic, strong) UIColor * _Nullable inputColor;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





/// Handles the display of <code>ToolMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("ToolListSectionController")
@interface PESDKToolListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>PhotoEditViewController</code> to present a new tool.
SWIFT_CLASS_NAMED("ToolMenuItem")
@interface PESDKToolMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// The class of the tool that should be presented when selecting this menu item.
@property (nonatomic, readonly) SWIFT_METATYPE(PESDKPhotoEditToolController) _Nonnull toolControllerClass;
/// Whether this tool supports editing photos.
@property (nonatomic, readonly) BOOL supportsPhoto;
/// Whether this tool supports editing videos.
@property (nonatomic, readonly) BOOL supportsVideo;
/// Whether this tool can be redirected to if it is the only one in the menu.
@property (nonatomic, readonly) BOOL supportsSingleToolUsage;
/// Creates a new tool menu item with the given title, icon and tool controller class.
/// \param title The title of the menu item.
///
/// \param icon The icon of the menu item.
///
/// \param toolControllerClass The class of the tool that should be presented when selecting this
/// menu item.
///
- (nullable instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon toolControllerClass:(SWIFT_METATYPE(PESDKPhotoEditToolController) _Nullable)toolControllerClass;
/// Creates a new tool menu item with the given title, icon and tool controller class.
/// \param title The title of the menu item.
///
/// \param icon The icon of the menu item.
///
/// \param toolControllerClass The class of the tool that should be presented when selecting this
/// menu item.
///
/// \param supportsPhoto Whether this tool supports editing photos.
///
/// \param supportsVideo Whether this tool supports editing videos.
///
- (nullable instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon toolControllerClass:(SWIFT_METATYPE(PESDKPhotoEditToolController) _Nullable)toolControllerClass supportsPhoto:(BOOL)supportsPhoto supportsVideo:(BOOL)supportsVideo supportsSingleToolUsage:(BOOL)supportsSingleToolUsage;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKToolMenuItem (SWIFT_EXTENSION(ImglyKit))
/// Creates the item for the transform tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTransformToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the filter tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createFilterToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the adjust tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createAdjustToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the sticker tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createStickerToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the text tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTextToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the text design tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTextDesignToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the legacy text design tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createLegacyTextDesignToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the overlay tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createOverlayToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the frame tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createFrameToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the brush tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createBrushToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the focus tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createFocusToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the trim tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTrimToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the composition tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createCompositionToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the composition tool if the license feature is available otherwise the trim tool is created as fallback
/// because the composition tool also allows trimming and using both tools is usually not intended.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createCompositionOrTrimToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the audio tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createAudioToolItem SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>Toolbar</code> is used inside a <code>ToolbarController</code> to display <code>ToolbarItem</code>s.
IB_DESIGNABLE
SWIFT_CLASS_NAMED("Toolbar")
@interface PESDKToolbar : UIView
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// The content view which hosts all <code>ToolbarItem</code>s.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// The toolbar items that are on the toolbar item stack.
@property (nonatomic, copy) NSArray<PESDKToolbarItem *> * _Nonnull items;
/// Updates the items that are on the toolbar item stack.
/// \param items The items to replace the toolbar item stack with.
///
/// \param animated Whether or not to animate the change.
///
- (void)setItems:(NSArray<PESDKToolbarItem *> * _Nullable)items animated:(BOOL)animated;
/// Pushes a toolbar item onto the toolbar item stack.
/// \param item The item to push onto the stack.
///
/// \param animated Whether or not to animate the change.
///
- (void)pushToolbarItem:(PESDKToolbarItem * _Nonnull)item animated:(BOOL)animated;
/// Pops the top toolbar item from the toolbar item stack.
/// \param animated Whether or not to animate the change.
///
///
/// returns:
/// The toolbar item that was popped from the stack, if any.
- (PESDKToolbarItem * _Nullable)popToolbarItemAnimated:(BOOL)animated;
@end


/// A <code>ToolbarButton</code> should be used within an instance of <code>Toolbar</code>. It automatically styles itself
/// to display touch events.
SWIFT_CLASS_NAMED("ToolbarButton")
@interface PESDKToolbarButton : PESDKButton
/// The width of the button that is used as a layout constraint
/// within the <code>Toolbar</code>. Default is set to 60.
@property (nonatomic) CGFloat width;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// :nodoc:
- (void)setEnabled:(BOOL)enabled animated:(BOOL)animated;
/// :nodoc:
- (void)tintColorDidChange;
@end



/// A TooltipSlider object is a visual control used to select a single value from a continuous range of
/// values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the
/// current value of the slider and can be moved by the user to change the setting.
/// A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
/// Additionally a <code>TooltipSlider</code> also presents a tooltip above the thumb image that displays the current
/// selected value while dragging.
SWIFT_CLASS_NAMED("TooltipSlider")
@interface PESDKTooltipSlider : PESDKSlider
/// The tooltip that is displayed above the thumb image.
@property (nonatomic, readonly, strong) PESDKSliderTooltip * _Nonnull tooltip;
/// The font of the label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (BOOL)beginTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)endTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
@end


/// A <code>TouchingGestureRecognizer</code> is a simple <code>UIGestureRecognizer</code> subclass that counts the number
/// of touches on the associated view.
SWIFT_CLASS_NAMED("TouchingGestureRecognizer")
@interface PESDKTouchingGestureRecognizer : UIGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// :nodoc:
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// :nodoc:
- (void)reset;
@end

/// Describes all available transform actions.
typedef SWIFT_ENUM(NSInteger, TransformAction, open) {
/// Rotate the image to the left.
  TransformActionRotateLeft = 0,
/// Flip the image horizontally.
  TransformActionFlipHorizontally = 1,
/// Straightens the image.
  TransformActionStraighten = 2,
};





@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKScalePickerDelegate>
/// :nodoc:
- (void)scalePicker:(CGFloat)value didChangeValue:(PESDKScalePicker * _Nonnull)scalePicker;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKCropAndStraightenViewDelegate>
/// :nodoc:
- (void)cropAndStraightenViewWillBeginTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// :nodoc:
- (void)cropAndStraightenViewDidEndTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// :nodoc:
- (void)cropAndStraightenViewDidTrack:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
@end



/// The tool controller to update the geometry of an image. It contains a menu with available
/// aspect ratios and a <code>TransformEditController</code> to update the geometry.
SWIFT_CLASS_NAMED("TransformToolController")
@interface PESDKTransformToolController : PESDKMenuToolController <PESDKTransformEditControllerDelegate>
/// The contaiend <code>TransformEditController</code>.
@property (nonatomic, readonly, strong) PESDKTransformEditController * _Nonnull transformEditController;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditControllerDidChangeOrientation:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



/// Options for configuring a <code>TransformToolController</code>.
SWIFT_CLASS_NAMED("TransformToolControllerOptions")
@interface PESDKTransformToolControllerOptions : PESDKToolControllerOptions
/// Whether to show a reset button to reset the applied crop, rotation and straighten angle.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL showResetButton;
/// Whether to allow free cropping. If this is enabled, ‘Free’ is always the first available option.
/// If disabled, the asset will be cropped automatically using the best fitting aspect from <code>allowedCropAspects</code>
/// or in case that <code>MediaEditViewControllerOptions.forceCropMode</code> is set to <code>true</code> the user will
/// be forced to pick one of the <code>allowedCropAspects</code> at launch.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL allowFreeCrop;
/// Sets the output scaling in case when cropped output dimensions aren’t exactly the same ratio as the selected
/// <code>CropAspect</code>, so we scale the image accordingly so the image has exactly right output dimensions.
@property (nonatomic, readonly) enum PESDKOutputScalingRule outputScaling;
/// Defines all allowed crop aspects. The crop aspect buttons are shown in the given order.
/// If the size of the asset is not fitting one of these aspects and <code>allowFreeCrop</code> is disabled, it is
/// automatically cropped using the best fitting aspect from this array.
/// Defaults to <code>1:1</code>, <code>16:9</code>, <code>4:3</code> and <code>3:2</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKCropAspect *> * _Nonnull allowedCropAspects;
/// This closure allows further configuration of the crop aspect buttons. The closure is called for
/// each crop aspect button and has the button and its corresponding crop aspect as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable cropAspectButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKCropAspect * _Nullable);
/// This closure is called every time the user selects a crop aspect.
@property (nonatomic, readonly, copy) void (^ _Nullable cropAspectSelectedClosure)(PESDKCropAspect * _Nullable);
/// This closure allows further configuration of the transform buttons, i.e. rotate left and flip. The closure is called for
/// each button and has the button and its corresponding transform action as parameters.
/// The scalepicker to choose the straighten angle, has its own configuration closeure.
@property (nonatomic, readonly, copy) void (^ _Nullable transformButtonConfigurationClosure)(PESDKButton * _Nonnull, enum TransformAction);
/// This closure alloes further configuration of the scale picker. This UI element is used to
/// choose the straighten angle.
@property (nonatomic, readonly, copy) void (^ _Nullable scalePickerConfigurationClosure)(PESDKScalePicker * _Nonnull);
/// This closure alloes further configuration of the scale picker container view.
@property (nonatomic, readonly, copy) void (^ _Nullable scalePickerContainerViewConfigurationClosure)(UIView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TransformToolControllerOptions</code> using the given builder.
/// \param builder A <code>TransformToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTransformToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TransformToolControllerOptionsBuilder</code> for <code>TransformToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TransformToolControllerOptionsBuilder")
@interface PESDKTransformToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Whether to show a reset button to reset the applied crop, rotation and straighten angle.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL showResetButton;
/// Whether to allow free cropping. If this is enabled, ‘Free’ is always the first available option.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL allowFreeCrop;
/// Defines all allowed crop aspects. The crop aspect buttons are shown in the given order.
/// Defaults to <code>1:1</code>, <code>16:9</code>, <code>4:3</code> and <code>3:2</code>.
@property (nonatomic, copy) NSArray<PESDKCropAspect *> * _Nonnull allowedCropRatios;
/// Sets the output scaling in case when cropped output dimensions aren’t exactly the same ratio as the selected
/// <code>CropAspect</code>, so we scale the image accordingly so the image has exactly right output dimensions.
/// Defaults to <code>.none</code>.
@property (nonatomic) enum PESDKOutputScalingRule outputScaling;
/// This closure allows further configuration of the transform buttons, i.e. rotate left and flip. The closure is called for
/// each button and has the button and its corresponding transform action as parameters.
@property (nonatomic, copy) void (^ _Nullable transformButtonConfigurationClosure)(PESDKButton * _Nonnull, enum TransformAction);
/// This closure allows further configuration of the crop aspect buttons. The closure is called for
/// each crop aspect button and has the button and its corresponding crop aspect as parameters.
@property (nonatomic, copy) void (^ _Nullable cropAspectButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKCropAspect * _Nullable);
/// This closure is called every time the user selects a crop aspect.
@property (nonatomic, copy) void (^ _Nullable cropAspectSelectedClosure)(PESDKCropAspect * _Nullable);
/// This closure allows further configuration of the scale picker. This UI element is used to
/// choose the straighten angle.
@property (nonatomic, copy) void (^ _Nullable scalePickerConfigurationClosure)(PESDKScalePicker * _Nonnull);
/// This closure alloes further configuration of the scale picker container view.
@property (nonatomic, copy) void (^ _Nullable scalePickerContainerViewConfigurationClosure)(UIView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TransformToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TransformToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTransformToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

/// The overlay actions that can be used in an instance of <code>TrimToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, TrimOverlayAction, open) {
/// Toggle play/pause for video preview.
  TrimOverlayActionPlayPause = 0,
};



/// Options for configuring a <code>TrimToolController</code>.
SWIFT_CLASS_NAMED("TrimToolControllerOptions")
@interface PESDKTrimToolControllerOptions : PESDKTrimToolOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable trimOverlayActionSelectedClosure)(enum TrimOverlayAction);
/// If set this closure is called right after starting the editor when the input video or video composition is too short
/// and the <code>minimumDuration</code> limit <em>cannot</em> be met either because the trim tool is used or because the composition tool is configured that
/// additional clips cannot be added (<code>CompositionToolControllerOptions.videoClipLibraryMode == .none</code>).
/// You can for example use this to present an alert view informing the user that the video is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will call
/// <code>videoEditViewController.delegate?.videoEditViewControllerDidFail(videoEditViewController)</code>
/// next which in turn should dismiss the editor.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, readonly, copy) void (^ _Nullable videoTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// Enforces a minimum allowed duration for the edited video for the trim and composition tool.
/// The minimum allowed value is 0.5 seconds.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>0.5</code>.
/// note:
/// The duration of the exported video may be inaccurate if this parameter is defined with high precision (below 0.1 s).
@property (nonatomic, readonly) NSTimeInterval minimumDuration;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TrimToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>TrimToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKTrimToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimBuilder:(PESDKTrimToolOptionsBuilder * _Nonnull)trimBuilder SWIFT_UNAVAILABLE;
@end


@interface PESDKTrimToolControllerOptions (SWIFT_EXTENSION(ImglyKit))
/// Enforces a maximum allowed duration for the edited video for the trim and composition tool
/// if set to a value different from <code>nil</code>.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>nil</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nullable maximumDuration;
@end


/// The default <code>TrimToolControllerOptionsBuilder</code> for <code>TrimToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TrimToolControllerOptionsBuilder")
@interface PESDKTrimToolControllerOptionsBuilder : PESDKTrimToolOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable trimOverlayActionSelectedClosure)(enum TrimOverlayAction);
/// If set this closure is called right after starting the editor when the input video or video composition is too short
/// and the <code>minimumDuration</code> limit <em>cannot</em> be met either because the trim tool is used or because the composition tool is configured that
/// additional clips cannot be added (<code>CompositionToolControllerOptions.videoClipLibraryMode == .none</code>).
/// You can for example use this to present an alert view informing the user that the video is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will call
/// <code>videoEditViewController.delegate?.videoEditViewControllerDidFail(videoEditViewController)</code>
/// next which in turn should dismiss the editor.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, copy) void (^ _Nullable videoTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// Enforces a minimum allowed duration for the edited video for the trim and composition tool.
/// The minimum allowed value is 0.5 seconds.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>0.5</code>.
/// note:
/// The duration of the exported video may be inaccurate if this parameter is defined with high precision (below 0.1 s).
@property (nonatomic) NSTimeInterval minimumDuration;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TrimToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TrimToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTrimToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimOptions:(PESDKTrimToolOptions * _Nonnull)trimOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTrimToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// Enforces a maximum allowed duration for the edited video for the trim and composition tool
/// if set to a value different from <code>nil</code>.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable maximumDuration;
/// An array of <code>TrimOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTrimOverlayActions</code> with the corresponding <code>TrimOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTrimOverlayActions;
@end














@interface UIDevice (SWIFT_EXTENSION(ImglyKit))
/// Checks if the device is too old for our new blur.
@property (nonatomic, readonly) BOOL pesdk_isTooOldForLensBlurPreview;
@end









@interface UIImage (SWIFT_EXTENSION(ImglyKit))
/// Creates a lower resolution version of an image.
/// \param dimension The maximum dimensions of the image.
///
///
/// returns:
/// A lower resolution version of the image.
- (UIImage * _Nonnull)pesdk_downsampleWithMaxDimension:(CGFloat)dimension SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_downsampleWithMaxDimension");
/// Creates a lower resolution version of an image.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param dimension The maximum dimensions of the image.
///
///
/// returns:
/// A lower resolution version of the image.
- (UIImage * _Nonnull)imgly_downsampleWithMaxDimension:(CGFloat)dimension SWIFT_WARN_UNUSED_RESULT;
/// Resizes an image to a given size with a given interpolation quality.
/// \param newSize The size of the new image.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized image.
- (UIImage * _Nonnull)pesdk_resizedImageToSize:(CGSize)newSize interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_resizedImageToSize");
/// Resizes an image to a given size with a given interpolation quality.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param newSize The size of the new image.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized image.
- (UIImage * _Nonnull)imgly_resizedImageToSize:(CGSize)newSize interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT;
/// Resizes an image to a given size with a given interpolation quality, applies a transform and
/// optionally draws the image transposed.
/// \param newSize The size of the new image.
///
/// \param transform The transform to apply to the image.
///
/// \param transpose Set to <code>true</code> if the image should be drawn transposed, <code>false</code> otherweise.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized and transformed image.
- (UIImage * _Nonnull)pesdk_resizedImageToSize:(CGSize)newSize transform:(CGAffineTransform)transform drawTransposed:(BOOL)transpose interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_resizedImageToSize");
/// Resizes an image to a given size with a given interpolation quality, applies a transform and
/// optionally draws the image transposed.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param newSize The size of the new image.
///
/// \param transform The transform to apply to the image.
///
/// \param transpose Set to <code>true</code> if the image should be drawn transposed, <code>false</code> otherweise.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized and transformed image.
- (UIImage * _Nonnull)imgly_resizedImageToSize:(CGSize)newSize transform:(CGAffineTransform)transform drawTransposed:(BOOL)transpose interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT;
/// Returns a copy of the image, taking into account its orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull pesdk_normalizedImage SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_normalizedImage");
/// Returns a copy of the image, taking into account its orientation
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
@property (nonatomic, readonly, strong) UIImage * _Nonnull imgly_normalizedImage;
/// Returns a rescaled copy of the image, taking into account its orientation.
/// note:
/// The image will be scaled disproportionately if necessary to fit the bounds specified
/// by the parameter.
/// \param size The size of the rescaled image.
///
///
/// returns:
/// The rescaled image.
- (UIImage * _Nonnull)pesdk_normalizedImageOfSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_normalizedImageOfSize");
/// Returns a rescaled copy of the image, taking into account its orientation.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// note:
/// The image will be scaled disproportionately if necessary to fit the bounds specified
/// by the parameter.
/// \param size The size of the rescaled image.
///
///
/// returns:
/// The rescaled image.
- (UIImage * _Nonnull)imgly_normalizedImageOfSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Draws the receiver in the given rect with the given content mode.
/// \param rect The rectangle to draw into.
///
/// \param contentMode The content mode to use for drawing.
///
- (void)pesdk_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_drawInRect");
/// Draws the receiver in the given rect with the given content mode.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param rect The rectangle to draw into.
///
/// \param contentMode The content mode to use for drawing.
///
- (void)imgly_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode;
/// Returns a colored version of the image.
/// \param tint The color to colorize the image.
///
///
/// returns:
/// The colorized image.
- (UIImage * _Nonnull)pesdk_imageWithTintColor:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_imageWithTintColor");
/// Returns a colored version of the image.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param tint The color to colorize the image.
///
///
/// returns:
/// The colorized image.
- (UIImage * _Nonnull)imgly_imageWithTintColor:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT;
@end











/// <code>UndoController</code> is a general-purpose recorder of operations for undo and redo.
/// note:
/// You register an undo operation by specifying the object that’s changing (or the owner
/// of that object), along with a method to invoke to revert its state, and the arguments for that
/// method. When performing undo an <code>UndoController</code> saves the operations reverted so that you can redo
/// the undos.
/// It differs from Foundation’s <code>NSUndoManager</code> in that groups are not created automatically for
/// each cycle of the run loop and that each step of a group can be undone rather than just the
/// whole group.
SWIFT_CLASS_NAMED("UndoController")
@interface PESDKUndoController : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A Boolean value that indicates whether the receiver is enabled and undo operations can be
/// registered.
@property (nonatomic) BOOL isEnabled;
/// Returns a Boolean value that indicates whether the receiver is in the process of performing
/// its <code>undo()</code>, <code>undoStep()</code>, <code>undoStepInCurrentGroup()</code>, <code>undoAllInCurrentGroup()</code> or
/// <code>undoGroup()</code> method.
@property (nonatomic, readonly) BOOL isUndoing;
/// Returns a Boolean value that indicates whether the receiver is in the process of performing
/// its <code>redo()</code> method.
@property (nonatomic, readonly) BOOL isRedoing;
/// Marks the beginning of an undo group.
- (void)beginUndoGrouping;
/// Marks the end of an undo group.
- (void)endUndoGrouping;
/// Clears the undo and redo stacks.
- (void)removeAllActions;
/// Clears the undo and redo stacks for the current group.
- (void)removeAllActionsInCurrentGroup;
/// A Boolean value that indicates whether the receiver has any actions to undo.
@property (nonatomic, readonly) BOOL canUndo;
/// A Boolean value that indicates whether the receiver has any actions to undo in the current
/// group.
@property (nonatomic, readonly) BOOL canUndoInCurrentGroup;
/// If the last undo operation on the undo stack is a group, this method performs the undo
/// operations of the whole group, if it is a single operation it performs only that operation.
- (void)undo;
/// Performs the latest undo operation only.
- (void)undoStep;
/// Performs the latest undo operation in the current group. If the group contains a nested group
/// it performs the undo operations of the whole nested group.
- (void)undoStepInCurrentGroup;
/// Performs all undo operations in the current group.
- (void)undoAllInCurrentGroup;
/// Performs the undo operations of the latest group. If the top item on the undo stack is not
/// the ending of a group, this method throws an exception.
- (void)undoGroup;
/// A Boolean value that indicates whether the receiver has any actions to redo.
@property (nonatomic, readonly) BOOL canRedo;
/// A Boolean value that indicates whether the receiver has any actions to redo in the current
/// group.
@property (nonatomic, readonly) BOOL canRedoInCurrentGroup;
/// Performs the operations in the last group on the redo stack, if there are any, recording
/// them on the undo stack as a single group.
- (void)redo;
@end



/// <code>VESDK</code> provides methods to unlock and customize the SDK.
SWIFT_CLASS("_TtC8ImglyKit5VESDK")
@interface VESDK : IMGLY
/// :nodoc:
+ (BOOL)crashIfNeededAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKVideoSegment;

/// An object that wraps audiovisual media.
/// The <code>Video</code> class currently supports <code>URL</code> and <code>AVAsset</code> as sources for videos. Passing an <code>URL</code>
/// requires the destination to be in a format that can be decoded by iOS.
SWIFT_CLASS_NAMED("Video")
@interface PESDKVideo : NSObject <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The underlying <code>AVAsset</code> object.
@property (nonatomic, readonly, strong) AVAsset * _Nonnull asset;
/// The video segments that compose the resulting video.
@property (nonatomic, readonly, copy) NSArray<PESDKVideoSegment *> * _Nonnull segments;
/// The size of the video in pixels.
@property (nonatomic, readonly) CGSize size;
/// Creates a new empty <code>Video</code> object with a specific size but without any assets.
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithSize:(CGSize)size;
/// Creates a new <code>Video</code> object from an <code>URL</code>.
/// \param url The URL to the video on disk. This must be in a format that can be decoded by iOS.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
/// Creates a new <code>Video</code> object from a <code>VideoSegment</code>.
/// \param segment The video segment that should be passed to the editor.
///
- (nonnull instancetype)initWithSegment:(PESDKVideoSegment * _Nonnull)segment;
/// Creates a new <code>Video</code> object from a <code>VideoSegment</code> with a specific size.
/// \param segment The video segment that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithSegment:(PESDKVideoSegment * _Nonnull)segment size:(CGSize)size;
/// Creates a new <code>Video</code> object with a composition from multiple <code>VideoSegment</code>s.
/// \param segments The video segments that should be passed to the editor. This array must include at least one asset.
/// The size of the first asset in the given array is used to initialize the editor.
///
- (nonnull instancetype)initWithSegments:(NSArray<PESDKVideoSegment *> * _Nonnull)segments;
/// Creates a new <code>Video</code> object with a composition from multiple <code>VideoSegment</code>s and a specific size.
/// \param segments The video segments that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithSegments:(NSArray<PESDKVideoSegment *> * _Nonnull)segments size:(CGSize)size;
/// Creates a new <code>Video</code> object from an <code>AVAsset</code>.
/// \param asset The asset that should be passed to the editor.
///
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegment:");
/// Creates a new <code>Video</code> object from an <code>AVAsset</code> with a specific size.
/// \param asset The asset that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset size:(CGSize)size SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegment:size:");
/// Creates a new <code>Video</code> object with a composition from multiple <code>AVAsset</code>s.
/// \param assets The assets that should be passed to the editor. This array must include at least one asset.
/// The size of the first asset in the given array is used to initialize the editor.
///
- (nonnull instancetype)initWithAssets:(NSArray<AVAsset *> * _Nonnull)assets SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegments:");
/// Creates a new <code>Video</code> object with a composition from multiple <code>AVAsset</code>s and a specific size.
/// \param assets The assets that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithAssets:(NSArray<AVAsset *> * _Nonnull)assets size:(CGSize)size SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegments:size:");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An <code>VideoAsset</code> object can be used together with an <code>AssetManager</code> to cache an <code>AVAsset</code>
/// object and an optional user info dictionary.
SWIFT_CLASS_NAMED("VideoAsset")
@interface PESDKVideoAsset : NSObject
/// An <code>AVAsset</code> object.
@property (nonatomic, strong) AVAsset * _Nullable asset;
/// An optional user info dictionary to associate any metadata with this <code>VideoAsset</code>.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// Creates a new video asset for the given image and an associated user info dictionary.
/// \param asset An<code>AVAsset</code> object.
///
/// \param userInfo An optional user info dictionary.
///
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>VideoClip</code> represents a single video clip in a video clip category. Each video clip needs a
/// video URL and a thumbnail image. If no thumbnail is provided, it is automatically generated.
SWIFT_CLASS_NAMED("VideoClip")
@interface PESDKVideoClip : NSObject
/// A unique string that makes the video clip uniquely identifiable.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of the video clip.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The artist of the video clip.
@property (nonatomic, readonly, copy) NSString * _Nullable artist;
/// The URL for the thumbnail image of the video clip.
/// If <code>nil</code> the thumbnail will be automatically generated from the <code>videoURL</code>.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// The URL for the video clip.
/// note:
/// Video clips from remote resources can be used in the editor but
/// their use is not optimized. Remote resources should be downloaded
/// in advance and then passed to the editor as local resources.
@property (nonatomic, readonly, copy) NSURL * _Nonnull videoURL;
/// Creates a new <code>VideoClip</code> object with the given identifier and video URL.
/// \param identifier The identifier of the video clip.
///
/// \param videoURL The URL to the underlying video.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier videoURL:(NSURL * _Nonnull)videoURL;
/// Creates a new <code>VideoClip</code> object with the given identifier, video URL, an optional title, an optional artist as well
/// as an optional thumbnail URL.
/// \param identifier The title of the video clip.
///
/// \param title The title of the video clip.
///
/// \param videoURL The URL to the underlying video.
///
/// \param artist The artist of the video clip.
///
/// \param thumbnailURL The URL for the thumbnail image of the video clip.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier videoURL:(NSURL * _Nonnull)videoURL title:(NSString * _Nullable)title artist:(NSString * _Nullable)artist thumbnailURL:(NSURL * _Nullable)thumbnailURL OBJC_DESIGNATED_INITIALIZER;
/// Returns the first video clip with the given identifier if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the video clip to look for.
///
///
/// returns:
/// The video clip with the given identifier or <code>nil</code>.
+ (PESDKVideoClip * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.videoClip(withIdentifier:)` of your `Configuration` object instead.");
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A <code>VideoClipCategory</code> represents one category of video clips. Each category can have multiple video clips
/// associated with it. To support accessibility you should also set its <code>accessibilityLabel</code>.
SWIFT_CLASS_NAMED("VideoClipCategory")
@interface PESDKVideoClipCategory : NSObject
/// The identifier of this category.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this category, e.g. ‘Toy Collection’.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The URL of the category’s preview image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The video clips associated with this category.
@property (nonatomic, readonly, copy) NSArray<PESDKVideoClip *> * _Nonnull videoClips;
/// The pool of video clips that is available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKVideoClipCategory *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.videoClips` of your `Configuration` object instead.");)
+ (NSArray<PESDKVideoClipCategory *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKVideoClipCategory *> * _Nonnull)newValue;
/// Creates the default video clip categories that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKVideoClipCategory *> * _Nonnull defaultItems;)
+ (NSArray<PESDKVideoClipCategory *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultItems:(NSArray<PESDKVideoClipCategory *> * _Nonnull)value;
/// Creates a video clip category with video clips, a title and an optional image url.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param videoClips The video clips to associate with this category.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL videoClips:(NSArray<PESDKVideoClip *> * _Nonnull)videoClips;
/// Creates a video clip category with an identifier, video clips, a title and an optional image url.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param videoClips The video clips to associate with this category.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL videoClips:(NSArray<PESDKVideoClip *> * _Nonnull)videoClips OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The menu item that is used in <code>VideoClipToolController</code> for action menu items, e.g. open video picker button.
SWIFT_CLASS_NAMED("VideoClipCategoryActionMenuItem")
@interface PESDKVideoClipCategoryActionMenuItem : PESDKActionMenuItem
@end


/// Handles the display of <code>VideoClipCategoryMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("VideoClipCategoryListSectionController")
@interface PESDKVideoClipCategoryListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>VideoClipToolController</code>.
SWIFT_CLASS_NAMED("VideoClipCategoryMenuItem")
@interface PESDKVideoClipCategoryMenuItem : NSObject <PESDKMenuItem>
/// The <code>VideoClipCategory</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKVideoClipCategory * _Nonnull videoClipCategory;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the icon of the menu item.
@property (nonatomic, readonly, copy) NSURL * _Nullable iconURL;
/// Creates a new video clip category menu item for the given video clip category.
/// \param videoClipCategory The video clip category that this menu item represents.
///
- (nonnull instancetype)initWithVideoClipCategory:(PESDKVideoClipCategory * _Nonnull)videoClipCategory;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>VideoClipCollectionViewCell</code> is a cell that has an image view and an activity indicator in its
/// center.
SWIFT_CLASS_NAMED("VideoClipCollectionViewCell")
@interface PESDKVideoClipCollectionViewCell : PESDKAssetCollectionViewCell
/// :nodoc:
- (void)setupImageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The mode determines which library type should be displayed when the user wants
/// to add a <code>VideoClip</code> within the <code>CompositionToolController</code>.
/// If set to any other mode than <code>.none</code> an action button is added as last item in the composition menu which
/// presents the corresponding selection controller.
/// In order to enable/disable personal video clips within the <code>VideoClipToolController</code> please refer
/// to <code>VideoClipToolControllerOptions.personalVideoClipsEnabled</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoClipLibraryMode, "VideoClipLibraryMode", open) {
/// Modally presents an <code>UIImagePickerController</code>
/// to add personal video clips to the video composition.
  PESDKVideoClipLibraryModePersonal = 0,
/// Presents a <code>VideoClipToolController</code> in which the user can select predefined video clips.
  PESDKVideoClipLibraryModePredefined = 1,
/// In this mode the user is not allowed to add video clips so no action button is added in the composition menu.
  PESDKVideoClipLibraryModeNone = 2,
};

@protocol PESDKVideoClipSelectionControllerDelegate;

/// A <code>VideoClipSelectionController</code> displays multiple <code>VideoClip</code>s and allows selection of a video clip for the video composition.
SWIFT_CLASS_NAMED("VideoClipSelectionController")
@interface PESDKVideoClipSelectionController : PESDKViewController
/// The collection view that displays the <code>VideoClip</code>s.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/// The gradient view that is added to the collection view for a fade effect.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull gradientView;
/// The visual effect view in the background of the collection view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull visualEffectView;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>VideoClip</code>s which should be displayed.
@property (nonatomic, copy) NSArray<PESDKVideoClip *> * _Nonnull videoClips;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKVideoClipSelectionControllerDelegate> _Nullable delegate;
/// A closure to configure the cell of each video clip.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKVideoClipCollectionViewCell * _Nonnull, PESDKVideoClip * _Nonnull);
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKVideoClipCollectionViewCell) _Nonnull collectionViewCellType;)
+ (SWIFT_METATYPE(PESDKVideoClipCollectionViewCell) _Nonnull)collectionViewCellType SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKVideoClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSourcePrefetching>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end


@interface PESDKVideoClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface PESDKVideoClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>VideoClipSelectionControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>VideoClipSelectionController</code>.
SWIFT_PROTOCOL_NAMED("VideoClipSelectionControllerDelegate")
@protocol PESDKVideoClipSelectionControllerDelegate
/// Tells the delegate that the given video clip was selected.
/// \param videoClipSelectionController The video clip selection controller where the video clip has been selected
/// in.
///
/// \param videoClip The video clip that was selected.
///
- (void)videoClipSelectionController:(PESDKVideoClipSelectionController * _Nonnull)videoClipSelectionController didSelect:(PESDKVideoClip * _Nonnull)videoClip;
@end


/// The tool controller to add a <code>VideoClip</code> to the composition. It contains a menu with the available
/// <code>VideoClipCategory</code>s and a <code>VideoClipSelectionController</code> to display the available video clips in that
/// category.
SWIFT_CLASS_NAMED("VideoClipToolController")
@interface PESDKVideoClipToolController : PESDKMenuToolController
/// The contained <code>VideoClipSelectionController</code>.
@property (nonatomic, readonly, strong) PESDKVideoClipSelectionController * _Nonnull videoClipSelectionController;
/// An object that acts as the selection delegate.
@property (nonatomic, weak) id <PESDKVideoClipToolControllerDelegate> _Nullable selectionDelegate;
/// Preview controller in charge of playing/pausing the preview video. Used from
@property (nonatomic, readonly, strong) PESDKVideoEditPreviewController * _Nullable videoPreviewController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



@interface PESDKVideoClipToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoClipSelectionControllerDelegate>
/// :nodoc:
- (void)videoClipSelectionController:(PESDKVideoClipSelectionController * _Nonnull)videoClipSelectionController didSelect:(PESDKVideoClip * _Nonnull)videoClip;
@end



@interface PESDKVideoClipToolController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


@interface PESDKVideoClipToolController (SWIFT_EXTENSION(ImglyKit))
/// Adds clip to the composition.
/// \param videoClip Video clip to be added at the end of the composition.
///
- (void)addClip:(PESDKVideoClip * _Nonnull)videoClip;
/// Pauses the main video preview.
- (void)pausePreview;
/// Resumes playback of the main video preview.
- (void)playPreview;
/// Returns <code>true</code> if main preview is playing and <code>false</code> if paused.
@property (nonatomic, readonly) BOOL previewPlaying;
@end



/// Options for configuring a <code>VideoClipToolController</code>.
SWIFT_CLASS_NAMED("VideoClipToolControllerOptions")
@interface PESDKVideoClipToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the video clip category buttons. The closure is called for
/// each video clip category button and has the button and its corresponding video clip category as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable videoClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKVideoClipCategory * _Nonnull);
/// This closure allows further configuration of the video clip buttons. The closure is called for
/// each video clip button and has the button and its corresponding video clip as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable videoClipButtonConfigurationClosure)(PESDKVideoClipCollectionViewCell * _Nonnull, PESDKVideoClip * _Nonnull);
/// This closure is invoked when add button tapped on the composition tool. It can be used to call your own action and present
/// your own view controller like camera. If set, it will prevent original action, which is opening the gallery.
/// In case you are performing an action that requires preview to be paused, <code>VideoClipToolController</code> exposes
/// access to the preview playback so you can utilize methods <code>pausePreview()</code> and <code>playPreview()</code> if you require
/// this functionality.
@property (nonatomic, readonly, copy) void (^ _Nullable videoClipAddButtonSelectedClosure)(PESDKVideoClipToolController * _Nonnull);
/// The index of the video clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic, readonly) NSInteger defaultVideoClipCategoryIndex;
/// Whether the user can add personal video clips from the device’s video library. If <code>true</code> an action button is added as first item in the video clip category selection menu which modally presents an <code>UIImagePickerController</code>
/// to add personal video clips to the video composition.
/// Default is <code>true</code>.
@property (nonatomic, readonly) BOOL personalVideoClipsEnabled;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>VideoClipToolControllerOptionsBuilder</code> using the given builder.
/// \param builder An instance of <code>VideoClipToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKVideoClipToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>VideoClipToolControllerOptionsBuilder</code> for <code>VideoClipToolControllerOptions</code>.
SWIFT_CLASS_NAMED("VideoClipToolControllerOptionsBuilder")
@interface PESDKVideoClipToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the video clip category buttons. The closure is called for
/// each video clip category button and has the button and its corresponding video clip category as parameters.
@property (nonatomic, copy) void (^ _Nullable videoClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKVideoClipCategory * _Nonnull);
/// This closure allows further configuration of the video clip buttons. The closure is called for
/// each video clip button and has the button and its corresponding video clip as parameters.
@property (nonatomic, copy) void (^ _Nullable videoClipButtonConfigurationClosure)(PESDKVideoClipCollectionViewCell * _Nonnull, PESDKVideoClip * _Nonnull);
/// This closure is invoked when add button tapped on the composition tool. It can be used to call your own action and present
/// your own view controller like camera. If set, it will prevent original action, which is opening the gallery.
/// note:
/// Preview will be paused when closure is invoked.
@property (nonatomic, copy) void (^ _Nullable videoClipAddButtonSelectedClosure)(PESDKVideoClipToolController * _Nonnull);
/// The index of the video clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic) NSInteger defaultVideoClipCategoryIndex;
/// Whether the user can add personal video clips from the device’s video library. If <code>true</code> an action button is added as first item in the video clip category selection menu which modally presents an <code>UIImagePickerController</code>
/// to add personal video clips to the video composition.
/// Default is <code>true</code>.
@property (nonatomic) BOOL personalVideoClipsEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>VideoClipToolControllerOptions</code> initialized with the given options.
/// \param options A <code>VideoClipToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKVideoClipToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The model that is used in <code>VideoClipSelectionController</code>.
SWIFT_CLASS_NAMED("VideoClipViewModel")
@interface PESDKVideoClipViewModel : NSObject
/// The <code>VideoClip</code> that this model represents.
@property (nonatomic, readonly, strong) PESDKVideoClip * _Nonnull videoClip;
/// Creates a new video clip view model for the given video clip.
/// \param videoClip The video clip that this model represents.
///
- (nonnull instancetype)initWithVideoClip:(PESDKVideoClip * _Nonnull)videoClip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents different video codecs.
SWIFT_CLASS_NAMED("VideoCodec")
@interface PESDKVideoCodec : NSObject
/// The H264 video codec.
/// \param bitRate The bit rate to use in bits per second. The value of the input video
/// will be used if you do not specify this value.
///
///
/// returns:
/// The H264 video codec.
+ (PESDKVideoCodec * _Nonnull)h264WithBitRate:(NSNumber * _Nullable)bitRate SWIFT_WARN_UNUSED_RESULT;
/// The HEVC video codec.
/// \param quality The quality value ranges from 0.0 to 1.0 and it tells the encoder what compression level is desired.
/// Quality level value means low = 0.25, normal = 0.50, high = 0.75, and 1.0 implies lossless compression for the encoder.
/// In HEVC, lossless encoding means that DCT transforms and quantization are bypassed but normal predictions are still used.
///
///
/// returns:
/// The HEVC video codec.
+ (PESDKVideoCodec * _Nonnull)hevcWithQuality:(NSNumber * _Nonnull)quality SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKVideoCodec (SWIFT_EXTENSION(ImglyKit))
/// The H264 video codec.
/// \param bitRate The bit rate to use in bits per second. The value of the input video
/// will be used if you do not specify this value.
///
/// \param profile The <code>VideoCodecProfileH264</code>’s raw value wrapped in a <code>NSNumber</code>.
///
///
/// returns:
/// The H264 video codec.
+ (PESDKVideoCodec * _Nonnull)h264WithBitRate:(NSNumber * _Nullable)bitRate profile:(NSNumber * _Nullable)profile SWIFT_WARN_UNUSED_RESULT;
@end

/// A profile for the .H264 video codec.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoCodecProfileH264, "VideoCodecProfileH264", open) {
/// Baseline profile with auto level.
  PESDKVideoCodecProfileH264BaselineAutoLevel = 0,
/// Baseline profile level 3.0.
  PESDKVideoCodecProfileH264BaselineLevel30 = 1,
/// Baseline profile level 3.1.
  PESDKVideoCodecProfileH264BaselineLevel31 = 2,
/// Baseline profile level  4.1.
  PESDKVideoCodecProfileH264BaselineLevel41 = 3,
/// Main profile auto level.
  PESDKVideoCodecProfileH264MainAutoLevel = 4,
/// Main profile level 3.0.
  PESDKVideoCodecProfileH264MainLevel30 = 5,
/// Main profile level 3.1.
  PESDKVideoCodecProfileH264MainLevel31 = 6,
/// Main profile level 3.2.
  PESDKVideoCodecProfileH264MainLevel32 = 7,
/// Main profile level 4.1.
  PESDKVideoCodecProfileH264MainLevel41 = 8,
/// High profile auto level.
  PESDKVideoCodecProfileH264HighAutoLevel = 9,
/// High profile level 4.0.
  PESDKVideoCodecProfileH264HighLevel40 = 10,
/// High profile level 4.1.
  PESDKVideoCodecProfileH264HighLevel41 = 11,
};

/// Represents different video container formats.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoContainerFormat, "VideoContainerFormat", open) {
/// The MP4 container format.
  PESDKVideoContainerFormatMp4 = 0,
/// The MOV container format.
  PESDKVideoContainerFormatMov = 1,
};


/// The <code>VideoEditPreviewController</code> is responsible for previewing changes to a video and displaying
/// the video in a scrollable container.
SWIFT_CLASS_NAMED("VideoEditPreviewController")
@interface PESDKVideoEditPreviewController : PESDKMediaEditPreviewController
/// The video that is being previewed.
@property (nonatomic, readonly, strong) PESDKVideo * _Nonnull video;
/// Menu accessory containing the timeline view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull timelineContainerView;
/// The main timeline view.
@property (nonatomic, readonly, strong) PESDKVideoTrimView * _Nonnull timelineView;
/// The height of the main timeline view. Default is <code>88</code>.
@property (nonatomic) CGFloat timelineHeight;
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
@property (nonatomic, strong) UIImage * _Nullable baseWorkUIImage;
/// Loads the first frame of the video as the base image.
- (void)loadBaseImage:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// :nodoc:
- (void)updateLayout;
/// :nodoc:
- (void)updateRenderer;
@end


@interface PESDKVideoEditPreviewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a newly initialized video edit preview controller for the given video and the given
/// photo edit model.
/// \param videoAsset The video to preview.
///
/// \param photoEditModel The photo edit model to render.
///
- (nonnull instancetype)initWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
@end



@interface PESDKVideoEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimViewDelegate>
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end

@protocol PESDKVideoEditViewControllerDelegate;

/// A <code>VideoEditViewController</code> is the main starting point for the SDK. It displays the rendered
/// video and a menu. It can present <code>PhotoEditToolController</code> objects and react to changes. It
/// can be presented on its own (thus displaying a toolbar for navigation at the bottom) or be
/// embedded into a <code>UINavigationController</code> (thus using the navigation controller’s navigation bar
/// for navigation).
SWIFT_CLASS_NAMED("VideoEditViewController")
@interface PESDKVideoEditViewController : PESDKMediaEditViewController
/// Indicates whether the video is currently being played or should be played when a new video is loaded if there is currently no video loaded.
@property (nonatomic, readonly) BOOL isPlaying;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKVideoEditViewControllerDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, readonly, strong) PESDKMediaEditViewControllerOptions * _Nonnull options;
/// :nodoc:
- (void)viewDidLoad;
/// Resumes the video playback.
- (void)play;
/// Pauses the video playback.
- (void)pause;
/// Applies all changes to the high resolution video and calls the delegate methods.
- (void)renderHighResolutionVariant;
/// Serializes all currently applied operations into a single file, which may be restored on other
/// platforms to continue editing.
@property (nonatomic, readonly, copy) NSData * _Nullable serializedSettings;
/// :nodoc:
- (void)didCancel;
/// :nodoc:
- (void)willPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)willDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (BOOL)mediaEditPreviewControllerPlaybackEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
@end



@interface PESDKVideoEditViewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>VideoEditViewController</code> for the given <code>Video</code> and the given configuration,
/// using the default photo edit model.
/// \param videoAsset The video to edit.
///
/// \param configuration The configuration options to apply.
///
- (nonnull instancetype)initWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset configuration:(PESDKConfiguration * _Nonnull)configuration;
/// Creates a new <code>VideoEditViewController</code> for the given <code>Video</code>, the given configuration and
/// photo edit model.
/// attention:
/// This initializer should only be used with Objective-C.
/// \param videoAsset The video to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
- (nonnull instancetype)initWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
/// Creates a new <code>VideoEditViewController</code> or subclass if there is a replacing class defined by <code>VESDK.replaceClass</code> in Swift.
/// \param videoAsset The video to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
+ (PESDKVideoEditViewController * _Nonnull)videoEditViewControllerWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel SWIFT_WARN_UNUSED_RESULT;
@end

@class PESDKVideoEditorTask;
@class PESDKVideoEditorResult;
@class PESDKVideoEditorError;

/// The <code>VideoEditViewControllerDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>VideoEditViewController</code>.
SWIFT_PROTOCOL_NAMED("VideoEditViewControllerDelegate")
@protocol PESDKVideoEditViewControllerDelegate <PESDKMediaEditViewControllerDelegate>
@optional
/// Called before the output video is generated.
/// \param videoEditViewController The video edit view controller that will create the output video.
///
/// \param task The input data, containing the input video and <code>PhotoEditModel</code>.
///
- (BOOL)videoEditViewControllerShouldStart:(PESDKVideoEditViewController * _Nonnull)videoEditViewController task:(PESDKVideoEditorTask * _Nonnull)task SWIFT_WARN_UNUSED_RESULT;
@required
/// Called when the output video was generated.
/// \param videoEditViewController The video edit view controller that created the output video.
///
/// \param result The result of the processing, containing output video URL and the export status.
///
- (void)videoEditViewControllerDidFinish:(PESDKVideoEditViewController * _Nonnull)videoEditViewController result:(PESDKVideoEditorResult * _Nonnull)result;
/// Called when the output video could not be generated.
/// \param videoEditViewController The video edit view controller that was unable to create the output video.
///
/// \param error The occurred error.
///
- (void)videoEditViewControllerDidFail:(PESDKVideoEditViewController * _Nonnull)videoEditViewController error:(PESDKVideoEditorError * _Nonnull)error;
/// Called when the user wants to dismiss the editor.
/// \param videoEditViewController The video edit view controller that is asking to be cancelled.
///
- (void)videoEditViewControllerDidCancel:(PESDKVideoEditViewController * _Nonnull)videoEditViewController;
@end


/// Options for configuring a <code>VideoEditViewController</code>.
SWIFT_CLASS_NAMED("VideoEditViewControllerOptions")
@interface PESDKVideoEditViewControllerOptions : PESDKMediaEditViewControllerOptions
/// The video container format to export. Default is <code>.mp4</code>.
@property (nonatomic, readonly) enum PESDKVideoContainerFormat videoContainerFormat;
/// The Uniform Type Identifier (UTI) of the output video as <code>UTType</code>.
@property (nonatomic, readonly) CFStringRef _Nonnull videoContainerFormatUTI;
/// The video codec to use for the exported video. Default is <code>.h264</code>.
@property (nonatomic, readonly, strong) PESDKVideoCodec * _Nonnull videoCodec;
/// The local file path where to export the edited video. <code>nil</code> means export to a temporary file. Default is <code>nil</code>.
/// If the file already exists it will be overwritten. Intermediate directories will be created if needed.
/// attention:
/// Please ensure to specify a <code>URL</code> with valid writing permissions otherwise <code>VideoEditViewControllerDelegate.videoEditViewControllerDidFail</code> will be called on export.
@property (nonatomic, readonly, copy) NSURL * _Nullable exportURL;
/// With the force trim option, you’re able to enforce a <code>TrimToolControllerOptions.minimumDuration</code> and
/// <code>TrimToolControllerOptions.maximumDuration</code> for a video composition in the composition tool and/or a
/// single video in the trim tool. Thus users will not be able to export videos, which are not within the defined video duration limits.
/// This feature is implemented as part of the user interface only.
/// To be able to use this feature your subscription must include the trim feature.
/// Default is set to <code>ForceTrimMode.silent</code>.
@property (nonatomic, readonly) enum PESDKForceTrimMode forceTrimMode;
/// Controls if we show the time scurbber on the main screen of video editor.
/// Default is set to <code>false</code>.
@property (nonatomic, readonly) BOOL showTimelineOnMainScreen;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>VideoEditViewControllerOptions</code> using the given builder.
/// \param videoEditBuilder A <code>VideoEditViewControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithVideoEditBuilder:(PESDKVideoEditViewControllerOptionsBuilder * _Nonnull)videoEditBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKMediaEditViewControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>VideoEditViewControllerOptionsBuilder</code> for <code>VideoEditViewControllerOptions</code>.
SWIFT_CLASS_NAMED("VideoEditViewControllerOptionsBuilder")
@interface PESDKVideoEditViewControllerOptionsBuilder : PESDKMediaEditViewControllerOptionsBuilder
/// The video container format to export. Default is <code>.mp4</code>.
@property (nonatomic) enum PESDKVideoContainerFormat videoContainerFormat;
/// The video codec to use for the exported video. Default is <code>.h264</code>.
@property (nonatomic, strong) PESDKVideoCodec * _Nonnull videoCodec;
/// The local file path where to export the edited video. <code>nil</code> means export to a temporary file. Default is <code>nil</code>.
@property (nonatomic, copy) NSURL * _Nullable exportURL;
/// Controls if we show the time scurbber on the main screen of video editor.
/// Default is set to <code>false</code>.
@property (nonatomic) BOOL showTimelineOnMainScreen;
/// With the force trim option, you’re able to enforce a <code>TrimToolControllerOptions.minimumDuration</code> and
/// <code>TrimToolControllerOptions.maximumDuration</code> for a video composition in the composition tool and/or a
/// single video in the trim tool. Thus users will not be able to export videos, which are not within the defined video duration limits.
/// This feature is implemented as part of the user interface only.
/// To be able to use this feature your subscription must include the trim feature.
/// Default is set to <code>ForceTrimMode.silent</code>.
@property (nonatomic) enum PESDKForceTrimMode forceTrimMode;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>VideoEditViewControllerOptionsBuilder</code> initialized with the given options.
/// \param videoEditOptions A <code>VideoEditViewControllerOptions</code> instance.
///
- (nonnull instancetype)initWithVideoEditOptions:(PESDKVideoEditViewControllerOptions * _Nonnull)videoEditOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKMediaEditViewControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

enum PESDKVideoEditorErrorReason : NSInteger;

/// Possible errors that could be returned by VideoEditor SDK.
SWIFT_CLASS_NAMED("VideoEditorError")
@interface PESDKVideoEditorError : NSError
/// The error reason.
@property (nonatomic, readonly) enum PESDKVideoEditorErrorReason reason;
/// The underlying error.
@property (nonatomic, readonly) NSError * _Nullable underlyingError;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSError *> * _Nonnull underlyingErrors;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// The error reason.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoEditorErrorReason, "Reason", open) {
/// Video is too short to satisfy duration limits configured in the <code>TrimToolControllerOptions</code>.
  PESDKVideoEditorErrorReasonVideoTooShort = 0,
/// Video export operation failed.
  PESDKVideoEditorErrorReasonExportFailed = 1,
};

@class PESDKVideoEditorOutput;
enum VESDKVideoEditorStatus : NSInteger;

/// A <code>VideoEditorResult</code> contains the relevant information from a successful export of VideoEditor SDK.
SWIFT_CLASS_NAMED("VideoEditorResult")
@interface PESDKVideoEditorResult : NSObject
/// The output video object.
@property (nonatomic, readonly, strong) PESDKVideoEditorOutput * _Nonnull output;
/// An enum indicating whether any changes have been applied to the video.
@property (nonatomic, readonly) enum VESDKVideoEditorStatus status;
/// The <code>VideoEditorTask</code> that initialized the export.
@property (nonatomic, readonly, strong) PESDKVideoEditorTask * _Nonnull task;
/// A flag indicating whether any changes have been applied to the video.
@property (nonatomic, readonly) BOOL hasChanges SWIFT_DEPRECATED_MSG("Use `status` instead.");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The export status.
typedef SWIFT_ENUM_NAMED(NSInteger, VESDKVideoEditorStatus, "Status", open) {
/// Input video was not modified.
/// note:
/// To process the unedited video with the rendering pipeline, enable <code>VideoEditViewControllerOptions.forceExport</code>.
  VESDKVideoEditorStatusPassedWithoutRendering = 0,
/// Input video was processed by the rendering pipeline, without any edits.
/// note:
/// To avoid processing the unedited video with the rendering pipeline, disable <code>VideoEditViewControllerOptions.forceExport</code>.
  VESDKVideoEditorStatusRenderedWithoutChanges = 1,
/// Input video was rendered with edits described in the <code>PhotoEditModel</code>.
  VESDKVideoEditorStatusRenderedWithChanges = 2,
};


/// A <code>VideoEditor.Output</code> contains output video data and format.
SWIFT_CLASS_NAMED("Output")
@interface PESDKVideoEditorOutput : NSObject
/// The output video URL.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The type identifier of of the generated output file if available.
///
/// returns:
/// <code>nil</code> if the video format cannot be recognized.
@property (nonatomic, readonly, copy) NSString * _Nullable uti;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>VideoEditorTask</code> contains all the data that is necessary to start rendering.
SWIFT_CLASS_NAMED("VideoEditorTask")
@interface PESDKVideoEditorTask : NSObject
/// The <code>Video</code> that was passed to the editor or modified with the audio/video composition tool.
@property (nonatomic, readonly, strong) PESDKVideo * _Nonnull video;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKVideoEditorTask (SWIFT_EXTENSION(ImglyKit))
/// The <code>PhotoEditModel</code> that holds the operations applied to the video.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull model;
@end


/// A <code>VideoRecordButton</code> is a button that can be used to start a video recording. It animates between
/// a ‘Start recording’ and a ‘Stop recording’ state.
SWIFT_CLASS_NAMED("VideoRecordButton")
@interface PESDKVideoRecordButton : UIControl
/// Whether or not the button is currently in recording mode.
@property (nonatomic) BOOL isRecording;
/// The color of the outline around the red recording button.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable outlineColor;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end


/// The view that represents the scrubber in a <code>VideoTrimView</code>.
SWIFT_CLASS_NAMED("VideoScrubberView")
@interface PESDKVideoScrubberView : UIView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>VideoSegment</code> holds information about a single video clip that should be part of a <code>Video</code> composition.
SWIFT_CLASS_NAMED("VideoSegment")
@interface PESDKVideoSegment : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL to the asset’s media.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKVideoSegment (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>VideoSegment</code> for the given URL.
/// \param url The URL to the asset of the <code>VideoSegment</code> that should be added to a video composition.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
/// Creates a new <code>VideoSegment</code> for the given URL and clip trimming options.
/// \param url The URL to the asset of the <code>VideoSegment</code> that should be added to a video composition.
///
/// \param startTime The start time of the asset.
///
/// \param endTime The end time of the asset.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url startTime:(NSNumber * _Nullable)startTime endTime:(NSNumber * _Nullable)endTime;
/// The start time of the asset.
@property (nonatomic, readonly, strong) NSNumber * _Nullable startTime;
/// The end time of the asset.
@property (nonatomic, readonly, strong) NSNumber * _Nullable endTime;
@end

@protocol PESDKVideoTrimSelectionViewDelegate;

/// The view that is used to change the start or end time of a video by dragging.
SWIFT_CLASS_NAMED("VideoTrimSelectionView")
@interface PESDKVideoTrimSelectionView : UIView
/// The delegate object for this view.
@property (nonatomic, weak) id <PESDKVideoTrimSelectionViewDelegate> _Nullable delegate;
/// The asset to load the keyframes for.
@property (nonatomic, strong) AVAsset * _Nullable asset;
/// The minimum trim duration.
@property (nonatomic) CMTime minimumDuration;
/// The width of the handle on both sides.
@property (nonatomic) CGFloat handleWidth;
/// The color to use when the control is inactive.
@property (nonatomic, strong) UIColor * _Nonnull inactiveColor;
/// The handle on the left.
@property (nonatomic, readonly, strong) UIView * _Nonnull leftHandle;
/// The handle on the right.
@property (nonatomic, readonly, strong) UIView * _Nonnull rightHandle;
/// The top border.
@property (nonatomic, readonly, strong) UIView * _Nonnull topBorder;
/// The bottom border.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomBorder;
/// The overlay label that displays the duration of the video.
@property (nonatomic, readonly, strong) PESDKOverlayLabel * _Nonnull durationOverlayLabel;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>VideoTrimSelectionViewDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>VideoTrimSelectionView</code>.
SWIFT_PROTOCOL_NAMED("VideoTrimSelectionViewDelegate")
@protocol PESDKVideoTrimSelectionViewDelegate
/// Called when the user started dragging.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidStartDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// Called when the start time was changed.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidChangeStartTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// Called when the end time was changed.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidChangeEndTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// Called when the user stopped dragging.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidStopDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
@end


/// A view that displays keyframes of a video, a playback scrubber on top of the keyframes and a
/// view on the left and right side of the keyframes to adjust start and end time.
SWIFT_CLASS_NAMED("VideoTrimView")
@interface PESDKVideoTrimView : UIView
/// The delegate object for this view.
@property (nonatomic, weak) id <PESDKVideoTrimViewDelegate> _Nullable delegate;
/// The video to load the keyframes for.
@property (nonatomic, strong) PESDKVideo * _Nullable video;
/// The width of each generated thumbnail.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat thumbnailWidth;
/// The minimum trim duration.
@property (nonatomic) CMTime minimumDuration;
/// If <code>true</code> the timeline is dynamic and automatically zooms the current trim duration defined by <code>startTime</code> and <code>endTime</code>  to the view width.
/// If <code>false</code> the timeline is static and it always maps the whole untrimmed video duration to the view width.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL isZoomToSelectionEnabled;
/// If <code>true</code> handles for trimming the video will be shown, and hidden if set to <code>false</code>.
@property (nonatomic) BOOL trimEnabled;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (void)didMoveToWindow;
/// :nodoc:
- (void)layoutSubviews;
/// Displays the scrubber view.
- (void)play;
/// Hides the scrubber view.
- (void)pause;
@end


@interface PESDKVideoTrimView (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimSelectionViewDelegate>
/// :nodoc:
- (void)videoTrimSelectionViewDidStartDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// :nodoc:
- (void)videoTrimSelectionViewDidChangeStartTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// :nodoc:
- (void)videoTrimSelectionViewDidChangeEndTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// :nodoc:
- (void)videoTrimSelectionViewDidStopDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
@end


@interface PESDKVideoTrimView (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end




@interface PESDKViewController (SWIFT_EXTENSION(ImglyKit))
/// Called when this view controller or a parent view controller is about to become the active
/// tool of a <code>PhotoEditViewController</code>.
- (void)pesdk_willBecomeActiveTool;
/// Called when this view controller or a parent view controller became the active tool of a
/// <code>PhotoEditViewController</code>.
- (void)pesdk_didBecomeActiveTool;
/// Called when this view controller or a parent view controller is about to resign being the
/// active tool of a <code>PhotoEditViewController</code>.
- (void)pesdk_willResignActiveTool;
/// Called when this view controller or a parent view controller resigned being the active tool
/// of a <code>PhotoEditViewController</code>.
- (void)pesdk_didResignActiveTool;
@end


/// Options for configuring custom watermark.
SWIFT_CLASS_NAMED("WatermarkOptions")
@interface PESDKWatermarkOptions : NSObject
/// Input image URL for the watermark. No additional processing is performed on the image.
/// Transparency must be supported by the file itself.
/// If <code>nil</code> no watermark will be applied.
/// If the watermark is the only editing operation to be performed, <code>PhotoEditViewControllerOptions.forceExport</code>
/// or <code>VideoEditViewControllerOptions.forceExport</code> must be enabled for the change to be applied.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The relative size of the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.2</code>.
/// note:
/// Values outside <code>(0.0, 1.0)</code> will be clamped.
@property (nonatomic, readonly) CGFloat size;
/// The relative spacing between the edges of the image/video and the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.05</code>.
/// note:
/// Values outside <code>(0.0, 0.5)</code> will be clamped.
@property (nonatomic, readonly) CGFloat inset;
/// It defines the layout of the watermark inside the canvas.
/// The default value is <code>.topRight</code>.
/// note:
/// <code>.center</code>, <code>.topLeft</code>, <code>.topRight</code>, <code>.bottomLeft</code>, <code>.bottomRight</code> are currently supported.
@property (nonatomic, readonly) UIViewContentMode alignment;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>WatermarkOptions</code> using the given builder.
/// \param builder A <code>WatermarkOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKWatermarkOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


/// The default <code>WatermarkOptionsBuilder</code> for <code>WatermarkOptions</code>.
SWIFT_CLASS_NAMED("WatermarkOptionsBuilder")
@interface PESDKWatermarkOptionsBuilder : NSObject
/// Input image URL for the watermark. No additional processing is performed on the image.
/// Transparency must be supported by the file itself.
/// If <code>nil</code> no watermark will be applied.
/// If the watermark is the only editing operation to be performed, <code>PhotoEditViewControllerOptions.forceExport</code>
/// or <code>VideoEditViewControllerOptions.forceExport</code> must be enabled for the change to be applied.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// The relative size of the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.2</code>.
/// note:
/// Values outside <code>(0.0, 1.0)</code> will be clamped.
@property (nonatomic) CGFloat size;
/// The relative spacing between the edges of the image/video and the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.05</code>.
/// note:
/// Values outside <code>(0.0, 0.5)</code> will be clamped.
@property (nonatomic) CGFloat inset;
/// It defines the layout of the watermark inside the canvas.
/// The default value is <code>.topRight</code>.
/// note:
/// <code>.center</code>, <code>.topLeft</code>, <code>.topRight</code>, <code>.bottomLeft</code>, <code>.bottomRight</code> are currently supported.
@property (nonatomic) UIViewContentMode alignment;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithOptions:(PESDKWatermarkOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@end



/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>AdjustmentModel</code>. For more information about the type, please take
/// a look at the documentation for <code>AdjustmentModel</code>.
SWIFT_CLASS_NAMED("_ObjCAdjustmentModel")
@interface PESDKAdjustmentModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithBrightness:(double)brightness contrast:(double)contrast shadows:(double)shadows highlights:(double)highlights exposure:(double)exposure clarity:(double)clarity saturation:(double)saturation gamma:(double)gamma blacks:(double)blacks whites:(double)whites temperature:(double)temperature sharpness:(double)sharpness OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) double brightness;
/// :nodoc:
@property (nonatomic) double contrast;
/// :nodoc:
@property (nonatomic) double shadows;
/// :nodoc:
@property (nonatomic) double highlights;
/// :nodoc:
@property (nonatomic) double exposure;
/// :nodoc:
@property (nonatomic) double clarity;
/// :nodoc:
@property (nonatomic) double saturation;
/// :nodoc:
@property (nonatomic) double gamma;
/// :nodoc:
@property (nonatomic) double blacks;
/// :nodoc:
@property (nonatomic) double whites;
/// :nodoc:
@property (nonatomic) double temperature;
/// :nodoc:
@property (nonatomic) double sharpness;
@end

@class PESDKTrimModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>AudioClipModel</code>. For more information about the type, please take
/// a look at the documentation for <code>AudioClipModel</code>.
SWIFT_CLASS_NAMED("_ObjCAudioClipModel")
@interface PESDKAudioClipModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTrimModel * _Nonnull trimModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>AudioModel</code>. For more information about the type, please take
/// a look at the documentation for <code>AudioModel</code>.
SWIFT_CLASS_NAMED("_ObjCAudioModel")
@interface PESDKAudioModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKAudioClipModel *> * _Nonnull clips;
/// :nodoc:
@property (nonatomic) double volumeBalance;
@end



/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>SpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>SpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCSpriteModel")
@interface PESDKSpriteModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPathModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>BrushSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>BrushSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCBrushSpriteModel")
@interface PESDKBrushSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKPathModel *> * _Nonnull paths;
@end

@class PESDKVideoClipModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>CompositionModel</code>. For more information about the type, please take
/// a look at the documentation for <code>CompositionModel</code>.
SWIFT_CLASS_NAMED("_ObjCCompositionModel")
@interface PESDKCompositionModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKVideoClipModel *> * _Nonnull clips;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>EffectFilterModel</code>. For more information about the type, please take
/// a look at the documentation for <code>EffectFilterModel</code>.
SWIFT_CLASS_NAMED("_ObjCEffectFilterModel")
@interface PESDKEffectFilterModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier intensity:(double)intensity OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) double intensity;
@end


/// Wrapper class for <code>FloatValue</code>. This should only be used if you are using Objective-C.
SWIFT_CLASS_NAMED("_ObjCFloatValue")
@interface PESDKFloatValue : NSObject
/// Creates a new <code>FloatValue</code> that represents a relative value.
/// \param relativeValue The value to represent.
///
- (nonnull instancetype)initWithRelativeValue:(CGFloat)relativeValue OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>FloatValue</code> that represents an absolute value.
/// \param absoluteValue The value to represent.
///
- (nonnull instancetype)initWithAbsoluteValue:(CGFloat)absoluteValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>FocusModel</code>. For more information about the type, please take
/// a look at the documentation for <code>FocusModel</code>.
SWIFT_CLASS_NAMED("_ObjCFocusModel")
@interface PESDKFocusModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithNormalizedControlPoint1:(CGPoint)normalizedControlPoint1 normalizedControlPoint2:(CGPoint)normalizedControlPoint2 normalizedBlurRadius:(double)normalizedBlurRadius normalizedFadeWidth:(double)normalizedFadeWidth mode:(enum PESDKFocusMode)mode blurQuality:(enum PESDKBlurQuality)blurQuality OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) CGPoint normalizedControlPoint1;
/// :nodoc:
@property (nonatomic) CGPoint normalizedControlPoint2;
/// :nodoc:
@property (nonatomic) double normalizedBlurRadius;
/// :nodoc:
@property (nonatomic) double normalizedFadeWidth;
/// :nodoc:
@property (nonatomic) enum PESDKFocusMode mode;
/// :nodoc:
@property (nonatomic) enum PESDKBlurQuality blurQuality;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>FrameSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>FrameSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCFrameSpriteModel")
@interface PESDKFrameSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(PESDKFrame * _Nonnull)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic, strong) NSNumber * _Nullable scale;
/// :nodoc:
@property (nonatomic) CGFloat alpha;
/// :nodoc:
@property (nonatomic, strong) NSNumber * _Nullable ratio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKLicenseProduct, "_ObjCLicenseProduct", open) {
/// :nodoc:
  PESDKLicenseProductPESDK SWIFT_COMPILE_NAME("pesdk") = 0,
/// :nodoc:
  PESDKLicenseProductVESDK SWIFT_COMPILE_NAME("vesdk") = 1,
};


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>OverlayModel</code>. For more information about the type, please take
/// a look at the documentation for <code>OverlayModel</code>.
SWIFT_CLASS_NAMED("_ObjCOverlayModel")
@interface PESDKOverlayModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier blendMode:(enum PESDKBlendMode)blendMode intensity:(double)intensity OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) enum PESDKBlendMode blendMode;
/// :nodoc:
@property (nonatomic) double intensity;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>PathModel</code>. For more information about the type, please take
/// a look at the documentation for <code>PathModel</code>.
SWIFT_CLASS_NAMED("_ObjCPathModel")
@interface PESDKPathModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color normalizedSize:(CGFloat)normalizedSize hardness:(CGFloat)hardness points:(NSArray<NSValue *> * _Nonnull)points eraseFragment:(PESDKPaintingFragment * _Nullable)eraseFragment drawFragment:(PESDKPaintingFragment * _Nullable)drawFragment OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color normalizedSize:(CGFloat)normalizedSize hardness:(CGFloat)hardness points:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// :nodoc:
@property (nonatomic, readonly) CGFloat normalizedSize;
/// :nodoc:
@property (nonatomic, readonly) CGFloat hardness;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
/// :nodoc:
@property (nonatomic, strong) PESDKPaintingFragment * _Nullable eraseFragment;
/// :nodoc:
@property (nonatomic, strong) PESDKPaintingFragment * _Nullable drawFragment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Wrapper class for <code>PhotoEditMenuItem</code>. This should only be used if you are using Objective-C.
SWIFT_CLASS_NAMED("_ObjCPhotoEditMenuItem")
@interface PESDKPhotoEditMenuItem : NSObject
/// The tool menu item associated with this photo edit menu item.
@property (nonatomic, readonly, strong) PESDKToolMenuItem * _Nullable toolMenuItem;
/// The action menu item associated with this photo edit menu item.
@property (nonatomic, readonly, strong) PESDKActionMenuItem * _Nullable actionMenuItem;
/// Creates the default menu items (trim, transform, filter, adjust, sticker, text, text design, overlay, frame,
/// brush, focus and auto enhancement)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKPhotoEditMenuItem *> * _Nonnull defaultItems;)
+ (NSArray<PESDKPhotoEditMenuItem *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// Creates a new <code>_ObjCPhotoEditMenuItem</code> for the given tool menu item.
/// \param toolMenuItem The tool menu item.
///
- (nullable instancetype)initWithToolMenuItem:(PESDKToolMenuItem * _Nullable)toolMenuItem OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>_ObjCPhotoEditMenuItem</code> for the given action menu item.
/// \param actionMenuItem The action menu item.
///
- (nullable instancetype)initWithActionMenuItem:(PESDKActionMenuItem * _Nullable)actionMenuItem OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKTransformModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>PhotoEditModel</code>. For more information about the type, please take
/// a look at the documentation for <code>PhotoEditModel</code>.
SWIFT_CLASS_NAMED("_ObjCPhotoEditModel")
@interface PESDKPhotoEditModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithSerializedData:(NSData * _Nonnull)data referenceSize:(CGSize)referenceSize OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use `init(serializedData:referenceSize:assetCatalog:)` instead");
/// :nodoc:
- (nullable instancetype)initWithSerializedData:(NSData * _Nonnull)data referenceSize:(CGSize)referenceSize assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog OBJC_DESIGNATED_INITIALIZER;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKAdjustmentModel * _Nonnull adjustmentModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKEffectFilterModel * _Nonnull effectFilterModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKFocusModel * _Nonnull focusModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKOverlayModel * _Nonnull overlayModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKSpriteModel *> * _Nonnull spriteModels;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTransformModel * _Nonnull transformModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTrimModel * _Nonnull trimModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKCompositionModel * _Nonnull compositionModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKAudioModel * _Nonnull audioModel;
/// :nodoc:
@property (nonatomic) BOOL isAutoEnhancementEnabled;
/// :nodoc:
@property (nonatomic) BOOL isBackgroundRemoved;
@end





/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>StickerSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>StickerSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCStickerSpriteModel")
@interface PESDKStickerSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithSticker:(PESDKSticker * _Nonnull)sticker OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) CGSize normalizedSize;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable startTime;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable endTime;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// :nodoc:
@property (nonatomic) CGFloat brightness;
/// :nodoc:
@property (nonatomic) CGFloat contrast;
/// :nodoc:
@property (nonatomic) CGFloat saturation;
/// :nodoc:
@property (nonatomic) CGFloat alpha;
/// :nodoc:
@property (nonatomic) BOOL backgroundRemoved;
/// :nodoc:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TextDesignSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TextDesignSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCTextDesignSpriteModel")
@interface PESDKTextDesignSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat normalizedPadding;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// :nodoc:
@property (nonatomic) uint64_t randomizerSeed;
/// :nodoc:
@property (nonatomic) BOOL isInverted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TextSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TextSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCTextSpriteModel")
@interface PESDKTextSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic) CGFloat normalizedFontSize;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable startTime;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable endTime;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic) NSTextAlignment textAlignment;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable fontIdentifier;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>Theme</code>. For more information about the type, please take
/// a look at the documentation for <code>Theme</code>.
SWIFT_CLASS_NAMED("_ObjCTheme")
@interface PESDKTheme : NSObject
/// :nodoc:
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor menuBackgroundColor:(UIColor * _Nonnull)menuBackgroundColor toolbarBackgroundColor:(UIColor * _Nonnull)toolbarBackgroundColor primaryColor:(UIColor * _Nonnull)primaryColor OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull toolbarBackgroundColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable rotationSnapGuideColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable positionSnapGuideColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable boundingBoxSnapGuideColor;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull primaryFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull mediumFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull boldFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull monospacedFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull searchBarFont;
/// :nodoc:
@property (nonatomic) BOOL uppercasedToolbarTitles;
@end


@interface PESDKTheme (SWIFT_EXTENSION(ImglyKit))
/// The dark theme.
/// This property should only be used if you are using Objective-C.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKTheme * _Nonnull dark;)
+ (PESDKTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The light theme.
/// This property should only be used if you are using Objective-C.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKTheme * _Nonnull light;)
+ (PESDKTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// The dynamic theme.
/// This property should only be used if you are using Objective-C.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKTheme * _Nonnull dynamic;)
+ (PESDKTheme * _Nonnull)dynamic SWIFT_WARN_UNUSED_RESULT;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TransformModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TransformModel</code>.
SWIFT_CLASS_NAMED("_ObjCTransformModel")
@interface PESDKTransformModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithAppliedOrientation:(enum PESDKOrientation)appliedOrientation normalizedCropRect:(CGRect)normalizedCropRect straightenAngle:(double)straightenAngle imageInsets:(UIEdgeInsets)imageInsets OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) enum PESDKOrientation appliedOrientation;
/// :nodoc:
@property (nonatomic) CGRect normalizedCropRect;
/// :nodoc:
@property (nonatomic) double straightenAngle;
/// :nodoc:
@property (nonatomic) UIEdgeInsets imageInsets;
/// :nodoc:
@property (nonatomic, readonly) double adjustedStraightenAngle;
/// :nodoc:
@property (nonatomic, readonly) BOOL isGeometryIdentity;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum PESDKOrientation identityOrientation;)
+ (enum PESDKOrientation)identityOrientation SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGRect identityNormalizedCropRect;)
+ (CGRect)identityNormalizedCropRect SWIFT_WARN_UNUSED_RESULT;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TrimModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TrimModel</code>.
SWIFT_CLASS_NAMED("_ObjCTrimModel")
@interface PESDKTrimModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable startTime;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable endTime;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>VideoClipModel</code>. For more information about the type, please take
/// a look at the documentation for <code>VideoClipModel</code>.
SWIFT_CLASS_NAMED("_ObjCVideoClipModel")
@interface PESDKVideoClipModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTrimModel * _Nonnull trimModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef IMGLYKIT_SWIFT_H
#define IMGLYKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreGraphics;
@import CoreImage;
@import CoreLocation;
@import CoreMedia;
@import CoreVideo;
@import Dispatch;
@import Foundation;
@import MetalKit;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#import <ImglyKit/ImglyKit.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ImglyKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)







@protocol PESDKMenuListSectionControllerSelectionDelegate;
@protocol PESDKMenuListSectionControllerListDisplayDelegate;
@class UICollectionViewCell;
@class NSString;
@class UICollectionReusableView;

/// Handles a section in the menu of a <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("MenuListSectionController")
@interface PESDKMenuListSectionController : NSObject
/// An object that acts as the delegate for selections.
@property (nonatomic, weak) id <PESDKMenuListSectionControllerSelectionDelegate> _Nullable selectionDelegate;
/// An object that acts as the delegate for display related events.
@property (nonatomic, weak) id <PESDKMenuListSectionControllerListDisplayDelegate> _Nullable displayDelegate;
/// The inset of the section.
@property (nonatomic) UIEdgeInsets inset;
/// The line spacing of the section.
@property (nonatomic) CGFloat minimumLineSpacing;
/// The interitem spacing of the section.
@property (nonatomic) CGFloat minimumInteritemSpacing;
/// Whether this is the first section in the list.
@property (nonatomic, readonly) BOOL isFirstSection;
/// Whether this is the last section in the list.
@property (nonatomic, readonly) BOOL isLastSection;
/// The index of the section.
@property (nonatomic, readonly) NSInteger section;
/// Returns <code>true</code> if this section controller has any selected items.
@property (nonatomic, readonly) BOOL hasSelectedItems;
/// Returns <code>true</code> if the item at <code>index</code> is selected.
- (BOOL)hasSelectionAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Marks the item at <code>index</code> as selected. Does not call delegate methods.
- (void)selectItemAt:(NSInteger)index;
/// Marks the item at <code>index</code> as deselected. Does not call delegate methods.
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) NSInteger numberOfItems;
/// :nodoc:
- (CGSize)sizeForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didSelectItemAt:(NSInteger)index;
/// :nodoc:
- (BOOL)canMoveItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedElementKinds;
/// :nodoc:
- (UICollectionReusableView * _Nonnull)viewForSupplementaryElementOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)sizeForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>ActionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("ActionListSectionController")
@interface PESDKActionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol NSObject;

/// The <code>Diffable</code> protocol provides methods needed to compare the identity and equality of two objects.
SWIFT_PROTOCOL_NAMED("Diffable")
@protocol PESDKDiffable
/// A key that can be used to uniquely identify the object.
/// note:
/// Two objects may share the same identifier, but are not equal. A common pattern is to
/// use the <code>NSObject</code> category for automatic conformance. However this means that objects will
/// be identified on their pointer value so finding updates becomes impossible.
/// warning:
/// This value should never be mutated.
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// Returns whether the receiver and a given object are equal.
/// \param object The object to be compared to the receiver.
///
///
/// returns:
/// <code>true</code> if the receiver and object are equal, otherwise <code>false</code>.
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A marker protocol for types that can be used in a <code>MenuViewController</code>.
SWIFT_PROTOCOL_NAMED("MenuItem")
@protocol PESDKMenuItem <PESDKDiffable>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
@optional
/// Flag that indicates if the menu item is a togglable action, which isn’t deselected when choosing other items.
@property (nonatomic, readonly) BOOL isTogglable;
@end

@class UIImage;

/// The menu item that is used in <code>PhotoEditViewController</code> that when selected executes a given
/// closure.
SWIFT_CLASS_NAMED("ActionMenuItem")
@interface PESDKActionMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// Whether this action supports editing photos.
@property (nonatomic, readonly) BOOL supportsPhoto;
/// Whether this action supports editing videos.
@property (nonatomic, readonly) BOOL supportsVideo;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKPhotoEditModel;

@interface PESDKActionMenuItem (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>ActionMenuItem</code> with the given title, icon, action and selected closure.
/// This initializer should only be used from Objective-C.
/// \param title The title of the menu item.
///
/// \param icon The icon of the menu item.
///
/// \param objcActionClosure A closure to execute when selecting this menu item.
///
/// \param objcSelectedClosure A closure that is used to determine whether this menu item is currently
/// active.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon objcActionClosure:(void (^ _Nonnull)(PESDKPhotoEditModel * _Nonnull))objcActionClosure objcSelectedClosure:(BOOL (^ _Nullable)(PESDKPhotoEditModel * _Nonnull))objcSelectedClosure;
@end


@interface PESDKActionMenuItem (SWIFT_EXTENSION(ImglyKit))
/// Creates a menu item for the auto enhancement tool.
///
/// returns:
/// An action menu item.
+ (PESDKActionMenuItem * _Nonnull)createMagicItem SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;
@class NSCoder;

/// A <code>ViewController</code> includes some debugging helpers to ensure that no strong reference cycles
/// exist in the controller. Those helpers are only active in <code>Debug</code> builds.
SWIFT_CLASS_NAMED("ViewController")
@interface PESDKViewController : UIViewController
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKAdjustEditControllerDelegate;
enum AdjustTool : NSInteger;

/// An <code>AdjustEditController</code> can be used to update the <code>AdjustmentModel</code> of a <code>PhotoEditModel</code>.
/// It is supposed to be contained in a tool controller and be presented above a
/// <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("AdjustEditController")
@interface PESDKAdjustEditController : PESDKViewController
/// The object that acts as this controller’s delegate.
@property (nonatomic, weak) id <PESDKAdjustEditControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// Updates the slider properties for the selected adjustment tool.
/// The slider can be accessed with <code>sliderEditController.slider</code>.
/// \param adjustTool The selected adjustment tool.
///
- (void)updateSliderFor:(enum AdjustTool)adjustTool;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKAdjustEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKAdjustEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@class UIScrollView;

/// The <code>AdjustEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>AdjustEditController</code>.
SWIFT_PROTOCOL_NAMED("AdjustEditControllerDelegate")
@protocol PESDKAdjustEditControllerDelegate
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param adjustEditController The adjust edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)adjustEditController:(PESDKAdjustEditController * _Nonnull)adjustEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Asks the delegate for the scroll view to which zoom events of the adjust edit controller should
/// be forwarded.
/// \param adjustEditController The adjust edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)adjustEditControllerTargetScrollView:(PESDKAdjustEditController * _Nonnull)adjustEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param adjustEditController The adjust edit controller that changed the photo edit model.
///
- (void)adjustEditControllerDidChangePhotoEditModel:(PESDKAdjustEditController * _Nonnull)adjustEditController;
/// Called when sliding occurred in the slider.
/// \param adjustEditController The adjust edit controller in which sliding occurred.
///
/// \param value The value to which the slider was dragged.
///
- (void)adjustEditControllerDidSlide:(PESDKAdjustEditController * _Nonnull)adjustEditController toValue:(CGFloat)value;
/// Called when sliding ended in the slider.
/// \param adjustEditController The adjust edit controller in which sliding ended.
///
- (void)adjustEditControllerDidEndSliding:(PESDKAdjustEditController * _Nonnull)adjustEditController;
@end


/// Adjustment limits for slider values.
SWIFT_CLASS_NAMED("AdjustLimits")
@interface PESDKAdjustLimits : NSObject
/// Minimum value (clamped to -1 and 1)
@property (nonatomic, readonly) CGFloat minimum;
/// Maximum value (clamped to -1 and 1)
@property (nonatomic, readonly) CGFloat maximum;
/// Creates new instance of <code>AdjustLimits</code> with given values
/// \param minimum Minimum adjustment value
///
/// \param maximum Maximum adjustment value
///
- (nonnull instancetype)initWithMinimum:(CGFloat)minimum maximum:(CGFloat)maximum OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Handles the display of <code>AdjustMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("AdjustListSectionController")
@interface PESDKAdjustListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>AdjustToolController</code>
SWIFT_CLASS_NAMED("AdjustMenuItem")
@interface PESDKAdjustMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new adjust menu item for the given adjust tool.
/// \param adjustTool The adjust tool that this menu item represents.
///
- (nullable instancetype)initWithAdjustTool:(enum AdjustTool)adjustTool;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The overlay actions that can be used in an instance of <code>AdjustToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, AdjustOverlayAction, open) {
/// Undo the latest operation.
  AdjustOverlayActionUndo = 0,
/// Redo the latest operation.
  AdjustOverlayActionRedo = 1,
};

/// The tools that can be used in an instance of <code>AdjustToolController</code>.
typedef SWIFT_ENUM(NSInteger, AdjustTool, open) {
/// Change the brightness of the image.
  AdjustToolBrightness = 0,
/// Change the contrast of the image.
  AdjustToolContrast = 1,
/// Change the saturation of the image.
  AdjustToolSaturation = 2,
/// Change the shadows of the image.
  AdjustToolShadows = 3,
/// Change the highlights of the image.
  AdjustToolHighlights = 4,
/// Change the exposure of the image.
  AdjustToolExposure = 5,
/// Change the clarity of the image.
  AdjustToolClarity = 6,
/// Change the gamma of the image.
  AdjustToolGamma = 7,
/// Change the blacks of the image.
  AdjustToolBlacks = 8,
/// Change the whites of the image.
  AdjustToolWhites = 9,
/// Change the temperature of the image.
  AdjustToolTemperature = 10,
/// Change the sharpness of the image.
  AdjustToolSharpness = 11,
};

@class PESDKMenuViewController;

/// The <code>MenuViewControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>MenuViewController</code>.
SWIFT_PROTOCOL_NAMED("MenuViewControllerDelegate")
@protocol PESDKMenuViewControllerDelegate
/// Called when a menu item was selected.
/// \param menuViewController The menu view controller that the item was selected in.
///
/// \param menuItem The menu item that was selected.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// Called when a menu item was deselected.
/// \param menuViewController The menu view controller that the item was deselected in.
///
/// \param menuItem The menu item that was deselected.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// Called when a menu item is about to be shown.
/// \param menuViewController The menu view controller that the item will be shown in.
///
/// \param menuItem The menu item that will be shown.
///
/// \param cell The cell that the menu item will be shown in.
///
/// \param index The index of this cell with its section.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// Called when a menu item should be moved as the result of interactive reordering.
/// \param menuViewController The menu view controller that the item will be moved in.
///
/// \param menuItem The menu item that was moved.
///
/// \param previousMenuItems The array of menu items prior to the move.
///
/// \param menuItems The array of menu items after the move.
///
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
@end

@class PESDKToolbarItem;
@class PESDKConfiguration;
@protocol PESDKPhotoEditToolControllerDelegate;
@class PESDKUndoController;
@class PESDKAssetManager;
@class PESDKAssetCatalog;
@class UIColor;

/// A <code>PhotoEditToolController</code> is the base class for any tool controller. Tool controllers can be
/// presented in a <code>PhotoEditViewController</code> and are displayed above a <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("PhotoEditToolController")
@interface PESDKPhotoEditToolController : PESDKViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// The <code>ToolbarItem</code> that is displayed in the <code>Toolbar</code> of a <code>PhotoEditViewController</code> when
/// this tool is pushed onto the stack.
@property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
/// Configures the <code>toolbarItem</code>. Subclasses can override this to do any custom configuration.
- (void)configureToolbarItem;
/// Called when the apply button is tapped. This sends a <code>viewControllerDidFinish(_:)</code> message
/// to subscribers.
/// \param sender The toolbar item that called this method.
///
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// Called when the discard button is tapped. This sends a <code>viewControllerDidCancel(_:)</code> message
/// to subscribers.
/// \param sender The toolbar item that called this method.
///
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// The configuration object that configures this tool.
@property (nonatomic, readonly, strong) PESDKConfiguration * _Nonnull configuration;
/// An object that acts as a delegate.
@property (nonatomic, weak) id <PESDKPhotoEditToolControllerDelegate> _Nullable delegate;
/// The <code>UndoController</code> associated with this tool controller.
@property (nonatomic, strong) PESDKUndoController * _Nullable undoController;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Asks the tool to update its user interface state if required. By default this method does
/// nothing.
- (void)updateUserInterfaceState;
/// Notifies the tool controller that it is about to become the active tool.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_willBecomeActiveTool;
/// Notifies the tool controller that it became the active tool.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_didBecomeActiveTool;
/// Notifies the tool controller that it is about to resign being the active tool.
/// note:
/// This method will <em>not</em> be called if another tool is pushed above this tool.
/// It is only called if you pop the tool from the photo edit view controller.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_willResignActiveTool;
/// Notifies the tool controller that it resigned being the active tool.
/// note:
/// This method will <em>not</em> be called if another tool is pushed above this tool.
/// It is only called if you pop the tool from the photo edit view controller.
/// important:
/// If you override this method, you must call <code>super</code> at some point in your
/// implementation.
- (void)pesdk_didResignActiveTool;
/// Called when this tool wants zooming enabled. Override this method to setup a proxy scroll
/// view for example.
- (void)setupForZoomAndPan;
/// Called when this tool wants zooming enabled and is about to be presented. Override this
/// method to reset your zoom scale if necessary.
- (void)resetForZoomAndPan;
/// :nodoc:
@property (nonatomic, readonly) BOOL isModelChangeLocal;
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
/// :nodoc:
@property (nonatomic, readonly) PESDKRenderMode preferredRenderMode;
/// :nodoc:
@property (nonatomic, readonly, strong) UIColor * _Nullable preferredPreviewBackgroundColor;
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
@property (nonatomic, readonly) CGFloat preferredDefaultPreviewViewScale;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// A <code>MenuToolController</code> is a tool controller, that shows a menu at the bottom (via a contained
/// <code>MenuViewController</code> object) and some other view controller above that menu.
SWIFT_CLASS_NAMED("MenuToolController")
@interface PESDKMenuToolController : PESDKPhotoEditToolController <PESDKMenuViewControllerDelegate>
/// The menu view controller that is contained in this tool controller.
@property (nonatomic, readonly, strong) PESDKMenuViewController * _Nonnull menuViewController;
/// The content view controller whose view is shown above the menu.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
@end

@class PESDKOverlayButton;

/// An <code>AdjustToolController</code> is reponsible for displaying the UI for the adjustments of an image.
SWIFT_CLASS_NAMED("AdjustToolController")
@interface PESDKAdjustToolController : PESDKMenuToolController <PESDKAdjustEditControllerDelegate>
/// The <code>AdjustEditController</code> that is used within this tool to edit the adjustments.
@property (nonatomic, readonly, strong) PESDKAdjustEditController * _Nonnull adjustEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)adjustEditControllerDidChangePhotoEditModel:(PESDKAdjustEditController * _Nonnull)adjustEditController;
/// :nodoc:
- (UIScrollView * _Nullable)adjustEditControllerTargetScrollView:(PESDKAdjustEditController * _Nonnull)adjustEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)adjustEditController:(PESDKAdjustEditController * _Nonnull)adjustEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)adjustEditControllerDidSlide:(PESDKAdjustEditController * _Nonnull)adjustEditController toValue:(CGFloat)value;
/// :nodoc:
- (void)adjustEditControllerDidEndSliding:(PESDKAdjustEditController * _Nonnull)adjustEditController;
/// The undo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
/// An array that contains all overlay buttons (including <code>undoButton</code> and <code>redoButton</code>)
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end


@class UIView;
@class PESDKButton;
@class PESDKToolControllerOptionsBuilder;

/// Options for configuring a <code>PhotoEditToolController</code>.
SWIFT_CLASS_NAMED("ToolControllerOptions")
@interface PESDKToolControllerOptions : NSObject
/// The background color of the menu. Unless this is set the configuration’s global background color,
/// will be used.
@property (nonatomic, readonly, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, readonly, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// This closure will be called when a tool has been entered.
@property (nonatomic, readonly, copy) void (^ _Nullable didEnterToolClosure)(void);
/// The closure will be called when a tool is about to be left.
@property (nonatomic, readonly, copy) void (^ _Nullable willLeaveToolClosure)(void);
/// Creates a newly allocated instance of <code>ToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>ToolControllerOptions</code> using the given biulder.
/// \param editorBuilder A <code>ToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKSlider;
@class PESDKAdjustToolControllerOptionsBuilder;

/// Options for configuring an <code>AdjustToolController</code>.
SWIFT_CLASS_NAMED("AdjustToolControllerOptions")
@interface PESDKAdjustToolControllerOptions : PESDKToolControllerOptions
/// Whether to show a reset button to reset the applied adjustments.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL showResetButton;
/// This closure can be used to configure the slider that is visible when selecting an adjust tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// an adjust tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>AdjustTool</code>
/// will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum AdjustTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AdjustOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable adjustActionSelectedClosure)(enum AdjustOverlayAction);
/// This closure is called when slider requests the minimum and maximum values for each adjustment tool.
/// Adjustment options are limited to -1 and 1. If closure returns <code>nil</code> default values will be used ([-1, 1]).
@property (nonatomic, readonly, copy) PESDKAdjustLimits * _Nullable (^ _Nullable limitConfigurationClosure)(enum AdjustTool);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>AdjustToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>AdjustToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKAdjustToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>ToolControllerOptionsBuilder</code> for <code>ToolControllerOptions</code>.
SWIFT_CLASS_NAMED("ToolControllerOptionsBuilder")
@interface PESDKToolControllerOptionsBuilder : NSObject
/// The background color of the menu. Unless this is set the configuration’s global background color,
/// will be used.
@property (nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called when a tool has been entered.
@property (nonatomic, copy) void (^ _Nullable didEnterToolClosure)(void);
/// The closure will be called when a tool is about to be left.
@property (nonatomic, copy) void (^ _Nullable willLeaveToolClosure)(void);
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>ToolControllerOptionsBuilder</code> initialized with the given options.
/// \param editorOptions A <code>ToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions OBJC_DESIGNATED_INITIALIZER;
@end


/// The default <code>AdjustToolControllerOptionsBuilder</code> for <code>AdjustToolControllerOptions</code>.
SWIFT_CLASS_NAMED("AdjustToolControllerOptionsBuilder")
@interface PESDKAdjustToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Whether to show a reset button to reset the applied adjustments.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL showResetButton;
/// This closure can be used to configure the slider that is visible when selecting an adjust tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// an adjust tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>AdjustTool</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum AdjustTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AdjustOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable adjustActionSelectedClosure)(enum AdjustOverlayAction);
/// This closure is called when slider requests the minimum and maximum values for each adjustment tool.
/// Adjustment options are limited to -1 and 1. If closure returns <code>nil</code> default values will be used ([-1, 1]).
@property (nonatomic, copy) PESDKAdjustLimits * _Nullable (^ _Nullable limitConfigurationClosure)(enum AdjustTool);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

@class NSNumber;
@class PESDKMenuCollectionViewCell;

@interface PESDKAdjustToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AdjustTool</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedAdjustTools</code> with the corresponding <code>AdjustTool</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAdjustTools;
/// An array of <code>AdjustOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedAdjustOverlayActions</code> with the corresponding <code>AdjustOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAdjustOverlayActions;
/// This closure allows further configuration of the adjust tool buttons. The closure is called for
/// each adjust tool button and has the button and its corresponding adjust tool as parameters.
@property (nonatomic, copy) void (^ _Nullable adjustToolButtonConfigurationBlock)(PESDKMenuCollectionViewCell * _Nonnull, NSNumber * _Nullable);
/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable adjustToolSelectedBlock)(NSNumber * _Nullable);
@end


/// Consumers of analytics screen views and events must implement this protocol. You can then forward
/// all screen views and events to an analytics service of your choice. To receive events you must
/// register your <code>AnalyticsClient</code> instance with <code>Analytics.addAnalyticsClient(_:)</code>.
SWIFT_PROTOCOL_NAMED("AnalyticsClient")
@protocol PESDKAnalyticsClient
/// This method is called when an analytics screen view occurs.
/// \param screenView The name of the screen view.
///
- (void)logScreenView:(PESDKAnalyticsScreenViewName _Nonnull)screenView;
/// This method is called when an analytics event occurs.
/// \param event The name of the event.
///
/// \param attributes The attributes associated with the event, if any.
///
- (void)logEvent:(PESDKAnalyticsEventName _Nonnull)event attributes:(NSDictionary<PESDKAnalyticsEventAttributeName, id> * _Nullable)attributes;
@end


/// A concrete implementation of <code>AnalyticsClient</code> that dispatches events to all registered
/// clients on a background queue.
SWIFT_CLASS_NAMED("Analytics")
@interface PESDKAnalytics : NSObject <PESDKAnalyticsClient>
/// Events are only dispatched if <code>isEnabled</code> is set to <code>true</code>. Defaults to <code>false</code>.
@property (nonatomic) BOOL isEnabled;
/// Register an instance which implements the <code>AnalyticsClient</code> protocol to receiving events.
/// \param client The client that should receive events.
///
- (void)addAnalyticsClient:(id <PESDKAnalyticsClient> _Nonnull)client;
/// Unregister an instance which implements the <code>AnalyticsClient</code> protocol from receiving events.
/// \param client The client that should stop receiving events.
///
- (void)removeAnalyticsClient:(id <PESDKAnalyticsClient> _Nonnull)client;
/// :nodoc:
- (void)logScreenView:(PESDKAnalyticsScreenViewName _Nonnull)screenView;
/// :nodoc:
- (void)logEvent:(PESDKAnalyticsEventName _Nonnull)event attributes:(NSDictionary<PESDKAnalyticsEventAttributeName, id> * _Nullable)attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CAAnimation;

/// <code>AnimationDelegate</code> can be used as the delegate of a <code>CAAnimation</code> to easily specify a completion block.
SWIFT_CLASS_NAMED("AnimationDelegate")
@interface PESDKAnimationDelegate : NSObject <CAAnimationDelegate>
/// The block that should be executed after a <code>CAAnimation</code> finishes.
@property (nonatomic, readonly, copy) void (^ _Nonnull block)(BOOL);
/// :nodoc:
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKStickerCategory;
@class PESDKVideoClipCategory;
@class PESDKFrame;
@class PESDKEffect;
@class PESDKOverlay;
@class PESDKFont;
@class PESDKTextDesign;
@class PESDKAudioClipCategory;
@class PESDKSticker;
@class PESDKVideoClip;
@class PESDKAudioClip;

/// An <code>AssetCatalog</code> configures all assets that are available to an editor instance for editing tasks, such as stickers, frames, effects, overlays, fonts, and text designs.
SWIFT_CLASS_NAMED("AssetCatalog")
@interface PESDKAssetCatalog : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// This array contains all available stickers.
@property (nonatomic, copy) NSArray<PESDKStickerCategory *> * _Nonnull stickers;
/// This array contains all available video clips.
@property (nonatomic, copy) NSArray<PESDKVideoClipCategory *> * _Nonnull videoClips;
/// This array contains all available frames.
@property (nonatomic, copy) NSArray<PESDKFrame *> * _Nonnull frames;
/// This array contains all available effects.
@property (nonatomic, copy) NSArray<PESDKEffect *> * _Nonnull effects;
/// This array contains all available overlays.
@property (nonatomic, copy) NSArray<PESDKOverlay *> * _Nonnull overlays;
/// This array contains all available fonts.
@property (nonatomic, copy) NSArray<PESDKFont *> * _Nonnull fonts;
/// This array contains all available text designs.
@property (nonatomic, copy) NSArray<PESDKTextDesign *> * _Nonnull textDesigns;
/// This array contains all available audio clips.
@property (nonatomic, copy) NSArray<PESDKAudioClipCategory *> * _Nonnull audioClips;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAssetCatalog * _Nonnull shared SWIFT_DEPRECATED_MSG("Use `AssetCatalog.defaultItems` or a custom one in the `Configuration` instead. Please see the PE.SDK (https://img.ly/docs/pesdk/ios/introduction/migration/) or VE.SDK (https://img.ly/docs/vesdk/ios/introduction/migration/) version 11 migration guide for details.");)
+ (PESDKAssetCatalog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if this <code>AssetCatalog</code> instance is the <code>shared</code> singleton instance.
@property (nonatomic, readonly) BOOL isShared SWIFT_DEPRECATED_MSG("`AssetCatalog.isShared` is deprecated.");
/// Creates a new asset catalog from global assets defined by the current state of the <code>shared</code> singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAssetCatalog * _Nonnull sharedItems SWIFT_DEPRECATED_MSG("Use `AssetCatalog.defaultItems` instead.", "defaultItems");)
+ (PESDKAssetCatalog * _Nonnull)sharedItems SWIFT_WARN_UNUSED_RESULT;
/// Creates a new asset catalog from default assets defined by the <code>defaultItems</code> property of <code>StickerCategory</code>, <code>Frame</code>, <code>Effect</code>, <code>Overlay</code>, <code>FontImporter</code>, <code>TextDesign</code>, <code>VideoClipCategory</code>, and <code>AudioClipCategory</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAssetCatalog * _Nonnull defaultItems;)
+ (PESDKAssetCatalog * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// Initializes an empty asset catalog.
- (nonnull instancetype)init;
/// Initialize a new asset catalog with the given assets.
- (nonnull instancetype)initWithStickers:(NSArray<PESDKStickerCategory *> * _Nonnull)stickers frames:(NSArray<PESDKFrame *> * _Nonnull)frames effects:(NSArray<PESDKEffect *> * _Nonnull)effects overlays:(NSArray<PESDKOverlay *> * _Nonnull)overlays fonts:(NSArray<PESDKFont *> * _Nonnull)fonts textDesigns:(NSArray<PESDKTextDesign *> * _Nonnull)textDesigns;
/// Initialize a new asset catalog with the given assets.
- (nonnull instancetype)initWithStickers:(NSArray<PESDKStickerCategory *> * _Nonnull)stickers frames:(NSArray<PESDKFrame *> * _Nonnull)frames effects:(NSArray<PESDKEffect *> * _Nonnull)effects overlays:(NSArray<PESDKOverlay *> * _Nonnull)overlays fonts:(NSArray<PESDKFont *> * _Nonnull)fonts textDesigns:(NSArray<PESDKTextDesign *> * _Nonnull)textDesigns videoClips:(NSArray<PESDKVideoClipCategory *> * _Nonnull)videoClips audioClips:(NSArray<PESDKAudioClipCategory *> * _Nonnull)audioClips OBJC_DESIGNATED_INITIALIZER;
/// Removes empty categories and all temporarily created assets from this asset catalog, e.g., personal stickers by the user.
- (void)removeTemporaryItems;
/// Removes all temporarily created assets from this asset catalog, e.g., personal stickers by the user.
/// \param removeEmptyCategories If <code>true</code> empty categories, e.g., sticker categories, are removed as well.
///
- (void)removeTemporaryItemsWithRemoveEmptyCategories:(BOOL)removeEmptyCategories;
/// Returns the first sticker with the given identifier, if any.
/// \param identifier The identifier of the sticker to look for.
///
///
/// returns:
/// The sticker with the given identifier or <code>nil</code>.
- (PESDKSticker * _Nullable)stickerWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first frame with the given identifier, if any.
/// \param identifier The identifier of the frame to look for.
///
///
/// returns:
/// The frame with the given identifier or <code>nil</code>.
- (PESDKFrame * _Nullable)frameWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first effect with the given identifier, if any.
/// \param identifier The identifier of the effect to look for.
///
///
/// returns:
/// The effect with the given identifier or <code>nil</code>.
- (PESDKEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first overlay with the given identifier, if any.
/// \param identifier The identifier of the overlay to look for.
///
///
/// returns:
/// The overlay with the given identifier or <code>nil</code>.
- (PESDKOverlay * _Nullable)overlayWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first font with the given identifier, if any.
/// \param identifier The identifier of the font to look for.
///
///
/// returns:
/// The font with the given identifier or <code>nil</code>.
- (PESDKFont * _Nullable)fontWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first text design with the given identifier, if any.
/// \param identifier The identifier of the text design to look for.
///
///
/// returns:
/// The text design with the given identifier or <code>nil</code>.
- (PESDKTextDesign * _Nullable)textDesignWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first video clip with the given identifier, if any.
/// \param identifier The identifier of the video clip to look for.
///
///
/// returns:
/// The video clip with the given identifier or <code>nil</code>.
- (PESDKVideoClip * _Nullable)videoClipWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the first audio clip with the given identifier, if any.
/// \param identifier The identifier of the audio clip to look for.
///
///
/// returns:
/// The audio clip with the given identifier or <code>nil</code>.
- (PESDKAudioClip * _Nullable)audioClipWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;
@class UIActivityIndicatorView;

/// An <code>AssetCollectionViewCell</code> is a cell that has an image view and an activity indicator in its
/// center.
SWIFT_CLASS_NAMED("AssetCollectionViewCell")
@interface PESDKAssetCollectionViewCell : UICollectionViewCell
/// An image view that shows an icon.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// An activity indicator in the center of the cell.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Configures the image view.
- (void)setupImageView;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end

@class PESDKImageAsset;
@class PESDKVideoAsset;
@class PESDKAudioAsset;
@class NSURL;

/// An <code>AssetManager</code> can be used to cache <code>UIImage</code>, <code>CIImage</code>, and <code>AVAsset</code> instances and to download and
/// cache image assets.
SWIFT_CLASS_NAMED("AssetManager")
@interface PESDKAssetManager : NSObject
/// Caches an image asset for the given identifier.
/// \param imageAsset The image asset to store in the cache or <code>nil</code> to delete an image from the
/// cache.
///
/// \param identifier The identifier to register this image asset for.
///
/// \param metadata SmartSticker metadata from which hash is calculated and used as a part of cache key.
///
- (void)setImageAsset:(PESDKImageAsset * _Nullable)imageAsset forIdentifier:(NSString * _Nonnull)identifier metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Caches an image asset for the given identifier.
/// \param imageAsset The image asset to store in the cache or <code>nil</code> to delete an image from the
/// cache.
///
/// \param identifier The identifier to register this image asset for.
///
- (void)setImageAsset:(PESDKImageAsset * _Nullable)imageAsset forIdentifier:(NSString * _Nonnull)identifier;
/// Returns the image asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the image asset.
///
/// \param metadata SmartSticker metadata from which hash is calculated and used as a part of cache key.
///
///
/// returns:
/// The cached image asset or <code>nil</code>.
- (PESDKImageAsset * _Nullable)imageAssetForIdentifier:(NSString * _Nonnull)identifier metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Returns the image asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the image asset.
///
///
/// returns:
/// The cached image asset or <code>nil</code>.
- (PESDKImageAsset * _Nullable)imageAssetForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Caches a video asset for the given identifier.
/// \param videoAsset The video asset to store in the cache or <code>nil</code> to delete a video from the
/// cache.
///
/// \param identifier The identifier to register this video asset for.
///
- (void)setVideoAsset:(PESDKVideoAsset * _Nullable)videoAsset forIdentifier:(NSString * _Nonnull)identifier;
/// Returns the video asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the video asset.
///
///
/// returns:
/// The cached video asset or <code>nil</code>.
- (PESDKVideoAsset * _Nullable)videoAssetForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Caches an audio asset for the given identifier.
/// \param audioAsset The <code>AudioAsset</code> to cache.
///
/// \param identifier The identifier to register the source for.
///
- (void)setAudioAsset:(PESDKAudioAsset * _Nullable)audioAsset forIdentifier:(NSString * _Nonnull)identifier;
/// Returns the audio asset for the given identifier from the cache, if available.
/// \param identifier The identifier of the audio asset.
///
///
/// returns:
/// The cached audio asset or <code>nil</code>.
- (PESDKAudioAsset * _Nullable)audioAssetForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// This is called with <code>false</code> when downloading starts and again called with <code>true</code> when
/// downloading ends.
@property (nonatomic, copy) void (^ _Nullable progressClosure)(BOOL);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Retrieves a single audio source from the cache. If the audio source
/// is not in the cache, it downloads the source and returns the local source.
/// \param url The URL of the audio source.
///
/// \param identifier The identifier the source is associated with in the cache. If this is set to <code>nil</code>, the source will not be cached.
///
/// \param withLoadingIndicator Determines whether a loading indicator is shown during processing.
///
/// \param completion A completion block that is passed the audio source on success or the error on failure.
///
- (void)getAudioAt:(NSURL * _Nonnull)url for:(NSString * _Nullable)identifier withLoadingIndicator:(BOOL)withLoadingIndicator completion:(void (^ _Nonnull)(PESDKAudioAsset * _Nullable, NSError * _Nullable))completion;
/// Retrieves multiple images from the cache and decodes them in the background. If the images
/// are not in the cache, it downloads the images, decodes them and stores them in both a disk
/// cache (if the passed <code>url</code> is not a file url) and an in-memory cache.
/// \param urls A list of URLs to images.
///
/// \param completion A completion block that is passed a list of images and errors.
///
- (void)getImagesAt:(NSArray<NSURL *> * _Nonnull)urls completion:(void (^ _Nonnull)(NSDictionary<NSURL *, UIImage *> * _Nonnull, NSArray<NSError *> * _Nonnull))completion;
/// Retrieves a single image from the cache and decodes the image in the background. If the image
/// is not in the cache, it downloads the image, decodes it and stores it in both a disk cache
/// (if the passed <code>url</code> is not a file url) and an in-memory cache.
/// \param url The URL of the image.
///
/// \param completion A completion block that is passed the image on success or the error on failure.
///
- (void)getImageAt:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end

@class PESDKPhotoEditRenderer;

@interface PESDKAssetManager (SWIFT_EXTENSION(ImglyKit))
/// Retrieves and caches all the assets required to render the given <code>PhotoEditModel</code>.
/// It can be used to populate the cache before any headless rendering operation,
/// directly using <code>PhotoEditRenderer</code>.
/// important:
/// This method should finish before issuing any rendering calls, e.g. <code>PhotoEditRenderer.generateOutputImageData</code>.
/// \param renderer The renderer to use to render the model.
///
/// \param model The <code>PhotoEditModel</code> used in rendering operation.
///
/// \param configuration The <code>Configuration</code> defines the used <code>AssetCatalog</code> and <code>WeatherProvider</code>.
///
/// \param completion A block called when retrieving assets finishes. It will be called from the main queue.
///
- (void)populateWithRenderer:(PESDKPhotoEditRenderer * _Nonnull)renderer model:(PESDKPhotoEditModel * _Nonnull)model configuration:(PESDKConfiguration * _Nonnull)configuration completion:(void (^ _Nonnull)(NSDictionary<NSURL *, UIImage *> * _Nonnull, NSArray<NSError *> * _Nonnull))completion;
@end


@protocol PESDKResolvableAsset;

/// The <code>AssetResolver</code> can be used to (de-)serialize custom assets.
SWIFT_PROTOCOL_NAMED("AssetResolver")
@protocol PESDKAssetResolver
/// Deserializes a custom asset.
/// \param data The data to deserialize the asset from.
///
- (void)deserializeFrom:(NSDictionary<NSString *, NSString *> * _Nonnull)data completion:(void (^ _Nonnull)(id <PESDKResolvableAsset> _Nullable))completion;
/// Serializes a custom asset.
/// \param asset The <code>ResolvableAsset</code> that should be serialized.
///
- (NSDictionary<NSString *, NSString *> * _Nullable)serialize:(id <PESDKResolvableAsset> _Nonnull)asset SWIFT_WARN_UNUSED_RESULT;
@end


/// An <code>AudioAsset</code> object can be used together with an <code>AssetManager</code> to cache an audio source
/// object and optional audio metadata.
SWIFT_CLASS_NAMED("AudioAsset")
@interface PESDKAudioAsset : NSObject
/// The source <code>URL</code>.
@property (nonatomic, copy) NSURL * _Nullable url;
/// Creates a new audio asset with the given url.
/// \param url The source <code>URL</code>.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An <code>AudioClip</code> represents a single audio clip in an audio clip category.
SWIFT_CLASS_NAMED("AudioClip")
@interface PESDKAudioClip : NSObject
/// A unqiue string that makes the audio clip unique identifiable.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of the audio clip.
/// If <code>nil</code> the title will be fetched from the clip’s metadata if available
/// and <code>AudioClipToolControllerOptions.useMetadata</code> is set
/// to <code>true</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The artist of the audio clip.
/// If <code>nil</code> the artist will be fetched from the clip’s metadata if available
/// and <code>AudioClipToolControllerOptions.useMetadata</code> is set
/// to <code>true</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable artist;
/// The URL for the thumbnail image of the audio clip.
/// If <code>nil</code> the artwork will be fetched from the clip’s metadata if available
/// and <code>AudioClipToolControllerOptions.useMetadata</code> is set
/// to <code>true</code>. Otherwise, the thumbnail will be replaced by a placeholder image.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// The URL for the audio clip.
/// note:
/// Audio clips from remote resources can be used in the editor but
/// their use is not optimized. Remote resources should be downloaded
/// in advance and then passed to the editor as local resources.
@property (nonatomic, readonly, copy) NSURL * _Nonnull audioURL;
/// The <code>AudioResolver</code> identifier that is responsible for (de-)serializing this audio clip.
@property (nonatomic, readonly, copy) NSString * _Nullable resolver;
/// Creates a new <code>AudioClip</code> object with the given identifier and audio URL.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param identifier The title of the audio clip.
///
/// \param audioURL The URL to the underlying audio.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier audioURL:(NSURL * _Nonnull)audioURL;
/// Creates a new <code>AudioClip</code> object with the given identifier, audio URL and an asset resolver.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param identifier The title of the audio clip.
///
/// \param audioURL The URL to the underlying audio.
///
/// \param resolver The id of the asset resolver.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier audioURL:(NSURL * _Nonnull)audioURL resolver:(NSString * _Nonnull)resolver;
/// Returns the first audio clip with the given identifier if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the audio clip to look for.
///
///
/// returns:
/// The audio clip with the given identifier or <code>nil</code>.
+ (PESDKAudioClip * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.audioClip(withIdentifier:)` of your `Configuration` object instead.");
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// An asset that can be resolved by an <code>AssetResolver.</code>
SWIFT_PROTOCOL_NAMED("ResolvableAsset")
@protocol PESDKResolvableAsset
/// The identifier of the corresponding <code>AssetResolver</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable resolver;
@end


@interface PESDKAudioClip (SWIFT_EXTENSION(ImglyKit)) <PESDKResolvableAsset>
@end



/// An <code>AudioClipCategory</code> represents one category of audio clips.
SWIFT_CLASS_NAMED("AudioClipCategory")
@interface PESDKAudioClipCategory : NSObject
/// The identifier of this category.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this category, e.g. ‘Toy Collection’.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The URL of the category’s preview image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The audio clips associated with this category.
@property (nonatomic, readonly, copy) NSArray<PESDKAudioClip *> * _Nonnull audioClips;
/// The pool of audio clips that is available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKAudioClipCategory *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.audioClips` of your `Configuration` object instead.");)
+ (NSArray<PESDKAudioClipCategory *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKAudioClipCategory *> * _Nonnull)newValue;
/// Creates the default audio clip categories that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKAudioClipCategory *> * _Nonnull defaultItems;)
+ (NSArray<PESDKAudioClipCategory *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultItems:(NSArray<PESDKAudioClipCategory *> * _Nonnull)value;
/// Creates a audio clip category with audio clips, a title and an optional image url.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param audioClips The audio clips to associate with this category.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips;
/// Creates a audio clip category with an identifier, audio clips, a title and an optional image url.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param audioClips The audio clips to associate with this category.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Handles the display of <code>AudioClipCategoryMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS("_TtC8ImglyKit38AudioClipCategoryListSectionController")
@interface AudioClipCategoryListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>AudioClipToolController</code>.
SWIFT_CLASS_NAMED("AudioClipCategoryMenuItem")
@interface PESDKAudioClipCategoryMenuItem : NSObject <PESDKMenuItem>
/// The <code>AudioClipCategory</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKAudioClipCategory * _Nonnull audioClipCategory;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the icon of the menu item.
@property (nonatomic, readonly, copy) NSURL * _Nullable iconURL;
/// Creates a new audio clip category menu item for the given audio clip category.
/// \param audioClipCategory The audio clip category that this menu item represents.
///
- (nonnull instancetype)initWithAudioClipCategory:(PESDKAudioClipCategory * _Nonnull)audioClipCategory;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITableView;
@class PESDKGradientView;
@class UIVisualEffectView;
@class PESDKAudioSearchBar;
@class PESDKAudioErrorView;
@class PESDKAudioEmptyView;
@protocol PESDKAudioProvider;
@protocol PESDKAudioClipSelectionControllerDelegate;
@class PESDKAudioClipTableViewCell;

/// A <code>AudioClipSelectionController</code> displays multiple <code>AudioClip</code>s and allows selection of an audio clip.
SWIFT_CLASS_NAMED("AudioClipSelectionController")
@interface PESDKAudioClipSelectionController : PESDKViewController
/// The table view that displays the <code>AudioClip</code>s.
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
/// The gradient view that is added to the table view for a fade effect.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull gradientView;
/// The visual effect view in the background of the table view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull visualEffectView;
/// The search bar view enabled when using <code>AudioProvider</code>.
@property (nonatomic, readonly, strong) PESDKAudioSearchBar * _Nonnull searchBar;
/// The error view used with <code>AudioProvider</code>.
@property (nonatomic, readonly, strong) PESDKAudioErrorView * _Nonnull errorView;
/// The empty collection view used with <code>AudioProvider</code>.
@property (nonatomic, readonly, strong) PESDKAudioEmptyView * _Nonnull emptyView;
/// Calls the current error handler.
- (void)handleError;
/// The async audio provider.
@property (nonatomic, strong) id <PESDKAudioProvider> _Nullable audioProvider;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AudioClip</code>s which should be displayed.
@property (nonatomic, copy) NSArray<PESDKAudioClip *> * _Nonnull audioClips;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKAudioClipSelectionControllerDelegate> _Nullable delegate;
/// A closure to configure the cell of each audio clip.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKAudioClipTableViewCell * _Nonnull, PESDKAudioClip * _Nonnull);
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKAudioClipTableViewCell) _Nonnull tableViewCellType;)
+ (SWIFT_METATYPE(PESDKAudioClipTableViewCell) _Nonnull)tableViewCellType SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSIndexPath;

@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UITableViewDataSourcePrefetching>
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView prefetchRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end

@class UITableViewCell;

@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UITableViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UISearchBar;

@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UISearchBarDelegate>
/// :nodoc:
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// :nodoc:
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface PESDKAudioClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UITableViewDelegate>
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView;
@end


/// The <code>AudioClipSelectionControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>AudioClipSelectionController</code>.
SWIFT_PROTOCOL_NAMED("AudioClipSelectionControllerDelegate")
@protocol PESDKAudioClipSelectionControllerDelegate
/// Tells the delegate that the given audio clip was selected.
/// \param audioClipSelectionController The audio clip selection controller where the audio clip has been selected
/// in.
///
/// \param audioClip The audio clip that was selected.
///
- (void)audioClipSelectionController:(PESDKAudioClipSelectionController * _Nonnull)audioClipSelectionController didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end

@class UIFont;
@class UILabel;

/// A <code>AudioClipTableViewCell</code> is a cell used to display an <code>AudioClip</code>.
SWIFT_CLASS_NAMED("AudioClipTableViewCell")
@interface PESDKAudioClipTableViewCell : UITableViewCell
/// The <code>AudioClip</code> contained by this table view cell.
@property (nonatomic, readonly, strong) PESDKAudioClip * _Nullable audioClip;
/// The font of the title label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// The font of the artist label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull artistFont;
/// The font of the duration label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull durationFont;
/// Indicates whether the <code>AudioClip</code> represented by this cell is
/// currently being played.
@property (nonatomic, readonly) BOOL isPlaying;
/// An image view that shows the preview image of the audio clip.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull artworkImageView;
/// An image view that shows the play/pause icon.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull playImageView;
/// A label that shows the title of the audio clip.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// A label that shows the artist of the audio clip.
@property (nonatomic, readonly, strong) UILabel * _Nonnull artistLabel;
/// A label that shows the duration of the audio clip.
@property (nonatomic, readonly, strong) UILabel * _Nonnull durationLabel;
/// :nodoc:
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class UITraitCollection;

/// The tool controller to add a <code>AudioClip</code> to the composition. It contains a menu with the available
/// <code>AudioClipCategory</code>s and a <code>AudioClipSelectionController</code> to display the available audio clips in that
/// category.
SWIFT_CLASS("_TtC8ImglyKit23AudioClipToolController")
@interface AudioClipToolController : PESDKMenuToolController
/// The contained <code>AudioClipSelectionController</code>.
@property (nonatomic, readonly, strong) PESDKAudioClipSelectionController * _Nonnull audioClipSelectionController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end


@interface AudioClipToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioClipSelectionControllerDelegate>
/// :nodoc:
- (void)audioClipSelectionController:(PESDKAudioClipSelectionController * _Nonnull)audioClipSelectionController didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end

@protocol PESDKAudioCollection;

/// The <code>AudioCollectionDelegate</code> protocol defines methods to handle audio clips provided by the <code>AudioCollection</code>.
SWIFT_PROTOCOL_NAMED("AudioCollectionDelegate")
@protocol PESDKAudioCollectionDelegate
/// Tells the delegate that an <code>AudioClip</code> has been selected.
/// \param audioCollection The <code>AudioCollection</code> in which the clip has been selected.
///
/// \param audioClip The <code>AudioClip</code> that has been selected.
///
- (void)audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end


@interface AudioClipToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioCollectionDelegate>
/// :nodoc:
- (void)audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection didSelect:(PESDKAudioClip * _Nullable)audioClip;
@end


@class PESDKAudioClipToolControllerOptionsBuilder;

/// Options for configuring an <code>AudioClipToolController</code>.
SWIFT_CLASS_NAMED("AudioClipToolControllerOptions")
@interface PESDKAudioClipToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the audio clip category buttons. The closure is called for
/// each audio clip category button and has the button and its corresponding audio clip category as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable audioClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKAudioClipCategory * _Nonnull);
/// This closure allows further configuration of the audio clip buttons. The closure is called for
/// each audio clip button and has the button and its corresponding audio clip as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable audioClipButtonConfigurationClosure)(PESDKAudioClipTableViewCell * _Nonnull, PESDKAudioClip * _Nonnull);
/// The index of the audio clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic, readonly) NSInteger defaultAudioClipCategoryIndex;
/// Determines whether the artwork, artist and duration should be fetched from the
/// metadata of an audio file in case these information are missing from the corresponding
/// <code>AudioClip</code>.
/// Default is set to <code>true</code>.
@property (nonatomic, readonly) BOOL useMetadata;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>AudioClipToolControllerOptionsBuilder</code> using the given builder.
/// \param builder An instance of <code>AudioClipToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKAudioClipToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>AudioClipToolControllerOptionsBuilder</code> for <code>AudioClipToolControllerOptions</code>.
SWIFT_CLASS_NAMED("AudioClipToolControllerOptionsBuilder")
@interface PESDKAudioClipToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the audio clip category buttons. The closure is called for
/// each audio clip category button and has the button and its corresponding audio clip category as parameters.
@property (nonatomic, copy) void (^ _Nullable audioClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKAudioClipCategory * _Nonnull);
/// This closure allows further configuration of the audio clip buttons. The closure is called for
/// each audio clip button and has the button and its corresponding audio clip as parameters.
@property (nonatomic, copy) void (^ _Nullable audioClipButtonConfigurationClosure)(PESDKAudioClipTableViewCell * _Nonnull, PESDKAudioClip * _Nonnull);
/// The index of the audio clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic) NSInteger defaultAudioClipCategoryIndex;
/// Determines whether the artwork, artist and duration should be fetched from the
/// metadata of an audio file in case these information are missing from the corresponding
/// <code>AudioClip</code>.
/// Default is set to <code>true</code>.
@property (nonatomic) BOOL useMetadata;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>AudioClipToolControllerOptions</code> initialized with the given options.
/// \param options A <code>AudioClipToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKAudioClipToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The model that is used in <code>AudioClipSelectionController</code>.
SWIFT_CLASS_NAMED("AudioClipViewModel")
@interface PESDKAudioClipViewModel : NSObject
/// The <code>AudioClip</code> that this model represents.
@property (nonatomic, readonly, strong) PESDKAudioClip * _Nonnull audioClip;
/// Creates a new audio clip view model for the given audio clip.
/// \param audioClip The audio clip that this model represents.
///
- (nonnull instancetype)initWithAudioClip:(PESDKAudioClip * _Nonnull)audioClip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Types conforming to <code>AudioCollection</code> can provide a custom <code>UIViewController</code> instance for selecting audio clips.
SWIFT_PROTOCOL_NAMED("AudioCollection")
@protocol PESDKAudioCollection
/// The delegate object that handles adding audio clips to the video.
@property (nonatomic, weak) id <PESDKAudioCollectionDelegate> _Nullable delegate;
/// The view controller responsible for presenting and loading the audio clips.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull viewController;
@end


/// An <code>AudioCollectionCategory</code> represents an empty category with a custom <code>AudioCollection</code>.
SWIFT_CLASS_NAMED("AudioCollectionCategory")
@interface PESDKAudioCollectionCategory : PESDKAudioClipCategory
/// The <code>AudioCollection</code> associated with this audio category.
@property (nonatomic, readonly, strong) id <PESDKAudioCollection> _Nonnull audioCollection;
/// Creates an audio category with with an <code>AudioCollection</code> object.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param audioCollection The <code>AudioCollection</code> that handles the loading and selection of the audio clips.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection;
/// Creates an audio category with with an <code>AudioCollection</code> object.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param audioCollection The <code>AudioCollection</code> that handles the loading and selection of the audio clips.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioCollection:(id <PESDKAudioCollection> _Nonnull)audioCollection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips SWIFT_UNAVAILABLE;
@end



/// An <code>EmptyView</code> is used as a placeholder for empty search results from asset providers.
SWIFT_CLASS_NAMED("EmptyView")
@interface PESDKEmptyView : UIStackView
/// The empty results icon.
@property (nonatomic, strong) UIImageView * _Nonnull icon;
/// The secondary label.
@property (nonatomic, strong) UILabel * _Nonnull label;
/// The search term that triggered the placeholder.
@property (nonatomic, copy) NSString * _Nonnull query;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>AudioEmptyView</code> is used as a placeholder for empty search results from an <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioEmptyView")
@interface PESDKAudioEmptyView : PESDKEmptyView
/// The search term that triggered the placeholder.
@property (nonatomic, copy) NSString * _Nonnull query;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An<code>ErrorView</code> is used to indicate download errors in asset providers.
SWIFT_CLASS_NAMED("ErrorView")
@interface PESDKErrorView : UIStackView
/// The main action button.
@property (nonatomic, strong) PESDKButton * _Nonnull retryButton;
/// The unavailable icon.
@property (nonatomic, strong) UIImageView * _Nonnull icon;
/// The secondary label.
@property (nonatomic, strong) UILabel * _Nonnull label;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>AudioErrorView</code> is used to indicate download errors in <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioErrorView")
@interface PESDKAudioErrorView : PESDKErrorView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>AudioToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, AudioOverlayAction, open) {
/// Delete the overlay audio clip of a video.
  AudioOverlayActionDelete = 0,
/// Toggle play/pause for video preview.
  AudioOverlayActionPlayPause = 1,
};


/// An <code>AudioProviderCategory</code> represents an empty category with a custom <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioProviderCategory")
@interface PESDKAudioProviderCategory : PESDKAudioClipCategory
/// The <code>AudioProvider</code> associated with this audio category.
/// This property should only be used if you are using Objective-C.
@property (nonatomic, readonly, strong) id <PESDKAudioProvider> _Nullable audioProvider;
/// Creates an audio category with with an <code>AudioProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param _objCAudioProvider The <code>_ObjCAudioProvider</code> object responsible for loading local/remote audio clips.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioProvider:(id <PESDKAudioProvider> _Nonnull)_objCAudioProvider;
/// Creates an audio category with with an <code>AudioProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param _objCAudioProvider The <code>_ObjCAudioProvider</code> object responsible for loading local/remote audio clips.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioProvider:(id <PESDKAudioProvider> _Nonnull)_objCAudioProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips SWIFT_UNAVAILABLE;
@end


/// Type representing the result of an audio provider request.
SWIFT_CLASS_NAMED("AudioProviderResult")
@interface PESDKAudioProviderResult : NSObject
/// An array of <code>AudioClip</code> models.
@property (nonatomic, readonly, copy) NSArray<PESDKAudioClip *> * _Nonnull audioClips;
/// A flag indicating whether more content is available for infinite scrolling.
@property (nonatomic, readonly) BOOL hasMore;
/// Creates a new audio result.
/// \param audioClips An array of <code>AudioClip</code> models.
///
/// \param hasMore A flag indicating that more content is available for endless scrolling.
///
- (nonnull instancetype)initWithAudioClips:(NSArray<PESDKAudioClip *> * _Nonnull)audioClips hasMore:(BOOL)hasMore OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A  <code>SearchBar</code> implementation used across ImglyKit with additional customizations.
SWIFT_CLASS_NAMED("SearchBar")
@interface PESDKSearchBar : UISearchBar
/// The text color of the search field.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull fieldTextColor;
/// The background color of the search field.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull fieldBackgroundColor;
/// The text color of the placeholder, tint color of the activity indicator, search and clear icons.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull fieldPlaceholderColor;
/// The font of the search text field.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nullable fieldFont;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>AudioSeachBar</code> is displayed above the audio clip table view when using an <code>AudioProvider</code>.
SWIFT_CLASS_NAMED("AudioSeachBar")
@interface PESDKAudioSearchBar : PESDKSearchBar
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKProxyZoomController;
@class PESDKMenuAccessoryContainerView;
@class PESDKTooltipSlider;
@class PESDKPrimaryLabel;
@class PESDKAudioTrimView;

/// The tool controller to position and configure the overlay audio track in relation to the video.
SWIFT_CLASS_NAMED("AudioToolController")
@interface PESDKAudioToolController : PESDKPhotoEditToolController
/// The contained <code>ProxyZoomZontroller</code>.
@property (nonatomic, readonly, strong) PESDKProxyZoomController * _Nonnull proxyZoomController;
/// The container view of the audio mix slider.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull sliderContainerView;
/// The container view of the audio trim view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull trimViewContainerView;
/// The container view of the audio track labels.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull labelContainerView;
/// The slider in this view controller.
@property (nonatomic, readonly, strong) PESDKTooltipSlider * _Nonnull slider;
/// The label that displays the start time of the audio track.
@property (nonatomic, readonly, strong) PESDKPrimaryLabel * _Nonnull startTimeLabel;
/// The label that displays the name of the audio track.
@property (nonatomic, readonly, strong) PESDKPrimaryLabel * _Nonnull trackNameLabel;
/// The audio trim view.
@property (nonatomic, readonly, strong) PESDKAudioTrimView * _Nonnull trimView;
/// The height of the trim container view. Default is <code>72</code>.
@property (nonatomic) CGFloat trimViewHeight;
/// :nodoc:
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// The delete  button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable deleteButton;
/// The play/pause overlay button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseButton;
/// An array of all overlay buttons that are displayed in the controller.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end



/// The <code>AudioTrimViewDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>AudioTrimView</code>.
SWIFT_PROTOCOL_NAMED("AudioTrimViewDelegate")
@protocol PESDKAudioTrimViewDelegate
/// Called when the user started scrolling the audio track.
/// \param audioTrimView The audio trim view that this event occurred in.
///
- (void)audioTrimViewDidStartScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
/// Called when the user scrolled the audio track.
/// \param audioTrimView The audio trim view that this event occurred in.
///
/// \param startTime The selected start time of the audio track.
///
- (void)audioTrimView:(PESDKAudioTrimView * _Nonnull)audioTrimView didScrollAudioTrackTo:(CMTime)startTime;
/// Called when the user stopped scrolling the audio track.
/// \param audioTrimView The audio trim view that this event occurred in.
///
- (void)audioTrimViewDidStopScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
@end


@interface PESDKAudioToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioTrimViewDelegate>
/// :nodoc:
- (void)audioTrimViewDidStartScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
/// :nodoc:
- (void)audioTrimView:(PESDKAudioTrimView * _Nonnull)audioTrimView didScrollAudioTrackTo:(CMTime)startTime;
/// :nodoc:
- (void)audioTrimViewDidStopScrollingAudioTrack:(PESDKAudioTrimView * _Nonnull)audioTrimView;
@end


/// The <code>ProxyZoomControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>ProxyZoomController</code>.
SWIFT_PROTOCOL_NAMED("ProxyZoomControllerDelegate")
@protocol PESDKProxyZoomControllerDelegate
/// Asks the delegate for the scroll view to which zoom events of the proxy zoom controller
/// should be forwarded.
/// \param proxyZoomController The proxy zoom controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// Called when scrolling occurred in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where scrolling occurred.
///
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// Called when zooming will begin in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where zooming will begin.
///
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// Called when zooming occurred in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where zooming occurred.
///
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// Called when zooming did end in the proxy scroll view.
/// \param proxyZoomController The proxy zoom controller where zooming did end.
///
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end


@interface PESDKAudioToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKProxyZoomControllerDelegate>
/// :nodoc:
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end

@class PESDKAudioToolControllerOptionsBuilder;

/// Options for configuring an <code>AudioToolController</code>.
SWIFT_CLASS_NAMED("AudioToolControllerOptions")
@interface PESDKAudioToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AudioOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable audioOverlayActionSelectedClosure)(enum AudioOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>AudioToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>AudioToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKAudioToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>AudioToolControllerOptionsBuilder</code> for <code>AudioToolControllerOptions</code>.
SWIFT_CLASS_NAMED("AudioToolControllerOptionsBuilder")
@interface PESDKAudioToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum AudioOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable audioOverlayActionSelectedClosure)(enum AudioOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>AudioToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A n<code>AudioToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKAudioToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKAudioToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AudioOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedAudioOverlayActions</code> with the corresponding <code>AudioOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAudioOverlayActions;
@end

@class AVAsset;

/// A view that displays the waveform and playback position of an audio track to trim its duration by defining its start position
/// in relation to a target timeline, e.g., the duration of a video where this audio track should be added as overlay audio.
SWIFT_CLASS_NAMED("AudioTrimView")
@interface PESDKAudioTrimView : UIView
/// The delegate object for this view.
@property (nonatomic, weak) id <PESDKAudioTrimViewDelegate> _Nullable delegate;
/// The asset that contains the audio track that should be trimmed.
@property (nonatomic, strong) AVAsset * _Nullable asset;
/// The current selected start time of the audio track. A negative value means that the audio track should start after the beginning
/// of the target timeline.
@property (nonatomic) CMTime audioStartTime;
/// The current time of the target timeline to highlight the playback progress.
@property (nonatomic) CMTime timelineTime;
/// The duration of the target timeline where the audio track should be positioned in.
@property (nonatomic) CMTime timelineDuration;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (void)layoutSubviews;
@end


@interface PESDKAudioTrimView (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/// Represents the type of blend that should be used for several operations such as overlay.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKBlendMode, "BlendMode", open) {
/// Standard alpha blending should be used.
  PESDKBlendModeNormal = 0,
/// Overlay blending should be used.
  PESDKBlendModeOverlay = 1,
/// Soft-light blending should be used.
  PESDKBlendModeSoftLight = 2,
/// Hard-light blending should be used.
  PESDKBlendModeHardLight = 3,
/// Multiply blending should be used.
  PESDKBlendModeMultiply = 4,
/// Darken blending should be used.
  PESDKBlendModeDarken = 5,
/// Color-burn blending should be used.
  PESDKBlendModeColorBurn = 6,
/// Screen blending should be used.
  PESDKBlendModeScreen = 7,
/// Lighten blending should be used.
  PESDKBlendModeLighten = 8,
};


/// A <code>BlendModeCollectionViewCell</code> is being used within the <code>OverlayEditController</code> to display
/// the currently selected blend mode.
SWIFT_CLASS_NAMED("BlendModeCollectionViewCell")
@interface PESDKBlendModeCollectionViewCell : UICollectionViewCell
/// The font of the label in unselected state.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The font of the label in selected state.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull selectedFont;
/// The label that displays the blend mode’s name.
@property (nonatomic, readonly, strong) UILabel * _Nonnull blendModeLabel;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end


/// The menu item that is used in <code>OverlayEditController</code>.
SWIFT_CLASS_NAMED("BlendModeMenuItem")
@interface PESDKBlendModeMenuItem : NSObject
/// The <code>BlendMode</code> that this menu item represents.
@property (nonatomic, readonly) enum PESDKBlendMode blendMode;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Creates a new blend mode menu item for the given blend mode.
/// \param blendMode The blend mode that this menu item represents.
///
- (nonnull instancetype)initWithBlendMode:(enum PESDKBlendMode)blendMode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This is used to set the quality of the blur
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKBlurQuality, "BlurQuality", open) {
/// Low is used during preview.
  PESDKBlurQualityLow = 0,
/// High is used during export.
  PESDKBlurQualityHigh = 1,
};


/// This class represents a gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("FocusGradientView")
@interface PESDKFocusGradientView : UIControl
/// The center point between both control points.
@property (nonatomic, readonly) CGPoint centerPoint;
/// The absolute fade width value. This value is between 0 and 100.
@property (nonatomic) CGFloat fadeWidth;
/// The normalized fade width.
@property (nonatomic, readonly) CGFloat normalizedFadeWidth;
/// The color of the gradient view.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The shadow color of the gradient view.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)accessibilityIncrement;
/// :nodoc:
- (void)accessibilityDecrement;
@end


/// This class represents a rectangle gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("BoxGradientView")
@interface PESDKBoxGradientView : PESDKFocusGradientView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// :nodoc:
- (void)layoutSubviews;
@end


/// A <code>Brush</code> holds all information needed to render a stroke.
SWIFT_CLASS_NAMED("Brush")
@interface PESDKBrush : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKStampGenerator;

/// The <code>GeneratorDelegate</code> protocol defines methods that allow you to respond to changes that are made to a generator.
SWIFT_PROTOCOL_NAMED("GeneratorDelegate")
@protocol PESDKGeneratorDelegate
/// Called when a generator changes any property.
/// \param generator The generator that was changed.
///
- (void)generatorDidChange:(PESDKStampGenerator * _Nonnull)generator;
@end


@interface PESDKBrush (SWIFT_EXTENSION(ImglyKit)) <PESDKGeneratorDelegate>
/// :nodoc:
- (void)generatorDidChange:(PESDKStampGenerator * _Nonnull)generator;
@end

@class PESDKColor;
@class PESDKColorCollectionViewCell;
@class PESDKColorToolControllerOptionsBuilder;

/// Options for configuring a <code>ColorToolController</code>.
SWIFT_CLASS_NAMED("ColorToolControllerOptions")
@interface PESDKColorToolControllerOptions : PESDKToolControllerOptions
/// An array of colors to present in the color tool.
@property (nonatomic, readonly, copy) NSArray<PESDKColor *> * _Nonnull availableColors;
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding color and color name as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable colorActionButtonConfigurationClosure)(PESDKColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/// This closure is called every time the user selects an action
@property (nonatomic, readonly, copy) void (^ _Nullable colorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/// Creates a newly allocated instance of <code>ColorToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>ColorToolControllerOptions</code> using the given builder.
/// \param builder A <code>ColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end

@class PESDKBrushColorToolControllerOptionsBuilder;

/// Options for configuring a <code>BrushColorToolController</code>.
SWIFT_CLASS_NAMED("BrushColorToolControllerOptions")
@interface PESDKBrushColorToolControllerOptions : PESDKColorToolControllerOptions
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>BrushColorToolControllerOptions</code> using the given builder.
/// \param brushBuilder A <code>BrushColorToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBrushBuilder:(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull)brushBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>ColorToolControllerOptionsBuilder</code> for <code>ColorToolControllerOptions</code>.
SWIFT_CLASS_NAMED("ColorToolControllerOptionsBuilder")
@interface PESDKColorToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// An array of colors to present in the color tool.
@property (nonatomic, copy) NSArray<PESDKColor *> * _Nonnull availableColors;
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding color and color name as parameters.
@property (nonatomic, copy) void (^ _Nullable colorActionButtonConfigurationClosure)(PESDKColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/// This closure is called every time the user selects an action
@property (nonatomic, copy) void (^ _Nullable colorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>ColorToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>ColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The default <code>BrushColorToolControllerOptionsBuilder</code> for <code>BrushColorToolControllerOptions</code>.
SWIFT_CLASS_NAMED("BrushColorToolControllerOptionsBuilder")
@interface PESDKBrushColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>BrushColorToolControllerOptionsBuilder</code> initialized with the given options.
/// \param brushOptions A <code>BrushColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithBrushOptions:(PESDKBrushColorToolControllerOptions * _Nonnull)brushOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

enum BrushTool : NSInteger;
@protocol PESDKBrushEditControllerDelegate;
@class PESDKBrushPreviewView;

/// A <code>BrushEditController</code> contains a <code>SliderEditController</code> and can be used to draw in a
/// <code>CanvasView</code>.
SWIFT_CLASS_NAMED("BrushEditController")
@interface PESDKBrushEditController : PESDKViewController
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>BrushTool</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum BrushTool);
/// The object that acts as a delegate.
@property (nonatomic, weak) id <PESDKBrushEditControllerDelegate> _Nullable delegate;
/// The brush preview view that previews the brush when changing any properties of it.
@property (nonatomic, readonly, strong) PESDKBrushPreviewView * _Nonnull brushPreviewView;
/// The color of the brush.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The size of the brush.
@property (nonatomic) CGFloat size;
/// The hardness of the brush.
@property (nonatomic) CGFloat hardness;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKBrushEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKBrushEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@interface PESDKBrushEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


@class PESDKSpriteViewController;

/// The <code>BrushEditControllerDelegate</code> defines methods that allow you to respond to message from
/// the <code>BrushEditController</code>.
SWIFT_PROTOCOL_NAMED("BrushEditControllerDelegate")
@protocol PESDKBrushEditControllerDelegate
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param brushEditController The brush edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param brushEditController The brush edit controller that changed the photo edit model.
///
- (void)brushEditControllerPhotoEditModelDidChange:(PESDKBrushEditController * _Nonnull)brushEditController;
/// Asks the delegate for the scroll view to which zoom events of the brush edit controller should
/// be forwarded.
/// \param brushEditController The brush edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)brushEditControllerTargetScrollView:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the <code>SpriteViewController</code>.
/// \param brushEditController The brush edit controller asking for the sprite view controller.
///
///
/// returns:
/// An instance of <code>SpriteViewController</code>.
- (PESDKSpriteViewController * _Nullable)brushEditControllerSpriteViewController:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the brush size was updated.
/// \param brushEditController The brush edit controller that updated the brush size.
///
/// \param size The new size of the brush.
///
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToSize:(CGFloat)size;
/// Tells the delegate that the brush hardness was updated.
/// \param brushEditController The brush edit controller that updated the brush hardness.
///
/// \param hardness The new hardness of the brush.
///
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToHardness:(CGFloat)hardness;
/// Tells the delegate that the slider contained in the brush edit controller did start sliding.
/// \param brushEditController The brush edit controller where sliding started.
///
- (void)brushEditControllerDidStartSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
/// Tells the delegate that the slider contained in the brush edit controller did end sliding.
/// \param brushEditController The brush edit controller where sliding ended.
///
- (void)brushEditControllerDidEndSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
@end


/// Handles the display of <code>BrushMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("BrushListSectionController")
@interface PESDKBrushListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>BrushToolController</code>
SWIFT_CLASS_NAMED("BrushMenuItem")
@interface PESDKBrushMenuItem : NSObject <PESDKMenuItem>
/// The <code>BrushTool</code> that this menu item represents.
@property (nonatomic, readonly) enum BrushTool brushTool;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new brush menu item for the given brush tool.
/// \param brushTool The brush tool that this menu item represents.
///
- (nonnull instancetype)initWithBrushTool:(enum BrushTool)brushTool icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The overlay actions that can be used in an instance of <code>BrushToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, BrushOverlayAction, open) {
/// Undo the latest stroke.
  BrushOverlayActionUndo = 0,
/// Redo the latest stroke.
  BrushOverlayActionRedo = 1,
/// Delete the drawing.
  BrushOverlayActionDelete = 2,
/// Bring the drawing to the front.
  BrushOverlayActionBringToFront = 3,
};

@class UIVisualEffect;

/// A <code>BrushPreviewView</code> displays a preview of a styled brush.
SWIFT_CLASS_NAMED("BrushPreviewView")
@interface PESDKBrushPreviewView : UIVisualEffectView
/// The image view where the brush preview is displayed in.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The color of the brush.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The size of the brush.
@property (nonatomic) CGFloat width;
/// The hardness of the brush.
@property (nonatomic) CGFloat hardness;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
- (nonnull instancetype)initWithEffect:(UIVisualEffect * _Nullable)effect SWIFT_UNAVAILABLE;
@end

/// The tools that can be used in an instance of <code>BrushToolController</code>.
typedef SWIFT_ENUM(NSInteger, BrushTool, open) {
/// Change the color of the brush.
  BrushToolColor = 0,
/// Change the size of the brush.
  BrushToolSize = 1,
/// Change the hardness of the brush.
  BrushToolHardness = 2,
};


/// A <code>BrushToolController</code> is reponsible for displaying the UI to draw a painting on top of an image.
SWIFT_CLASS_NAMED("BrushToolController")
@interface PESDKBrushToolController : PESDKMenuToolController <PESDKBrushEditControllerDelegate>
/// The brush edit controller that is associated with this tool controller
@property (nonatomic, readonly, strong) PESDKBrushEditController * _Nonnull brushEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_willBecomeActiveTool;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)brushEditControllerPhotoEditModelDidChange:(PESDKBrushEditController * _Nonnull)brushEditController;
/// :nodoc:
- (UIScrollView * _Nullable)brushEditControllerTargetScrollView:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)brushEditControllerSpriteViewController:(PESDKBrushEditController * _Nonnull)brushEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToSize:(CGFloat)size;
/// :nodoc:
- (void)brushEditController:(PESDKBrushEditController * _Nonnull)brushEditController didUpdateToHardness:(CGFloat)hardness;
/// :nodoc:
- (void)brushEditControllerDidStartSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
/// :nodoc:
- (void)brushEditControllerDidEndSliding:(PESDKBrushEditController * _Nonnull)brushEditController;
/// The undo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
/// An array that contains all overlay buttons (including <code>undoButton</code> and <code>redoButton</code>)
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end


@class PESDKBrushToolControllerOptionsBuilder;

/// Options for configuring an <code>BrushToolController</code>.
SWIFT_CLASS_NAMED("BrushToolControllerOptions")
@interface PESDKBrushToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the brush tool buttons. The closure is called for
/// each brush tool button and has the button and its corresponding brush tool as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable brushToolButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum BrushTool);
/// This closure is called every time the user selects a tool.
@property (nonatomic, readonly, copy) void (^ _Nullable brushToolSelectedClosure)(enum BrushTool);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>BrushTool</code>
/// will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum BrushTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum BrushOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable brushActionSelectedClosure)(enum BrushOverlayAction);
/// The minimum hardness factor a brush can have.
@property (nonatomic, readonly) CGFloat minimumBrushHardness;
/// The maximum hardness factor a brush can have.
@property (nonatomic, readonly) CGFloat maximumBrushHardness;
/// The default hardness factor a brush has.
@property (nonatomic, readonly) CGFloat defaultBrushHardness;
/// The default color a brush has.
@property (nonatomic, readonly, strong) UIColor * _Nonnull defaultBrushColor;
/// <code>false</code> if the opacity of the brush should vary by the size of the brush, <code>true</code> otherwise.
/// Default is <code>false</code>.
@property (nonatomic, readonly) BOOL usesUniformHardness;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>BrushToolControllerOptions</code> using the given builder.
/// \param builder A <code>BrushToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKBrushToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>BrushToolControllerOptionsBuilder</code> for <code>BrushToolControllerOptions</code>.
SWIFT_CLASS_NAMED("BrushToolControllerOptionsBuilder")
@interface PESDKBrushToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the brush tool buttons. The closure is called for
/// each brush tool button and has the button and its corresponding brush tool as parameters.
@property (nonatomic, copy) void (^ _Nullable brushToolButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum BrushTool);
/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable brushToolSelectedClosure)(enum BrushTool);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>BrushTool</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum BrushTool);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum BrushOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable brushActionSelectedClosure)(enum BrushOverlayAction);
/// The minimum hardness factor a brush can have.
@property (nonatomic) CGFloat minimumBrushHardness;
/// The maximum hardness factor a brush can have.
@property (nonatomic) CGFloat maximumBrushHardness;
/// The default hardness factor a brush has.
@property (nonatomic) CGFloat defaultBrushHardness;
/// The default color a brush has.
@property (nonatomic, strong) UIColor * _Nonnull defaultBrushColor;
/// <code>false</code> if the hardness of the brush should vary by the size of the brush, <code>true</code> otherwise.
/// Default is <code>false</code>.
@property (nonatomic) BOOL usesUniformHardness;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>BrushToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>BrushToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKBrushToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

@class PESDKFloatValue;

@interface PESDKBrushToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>BrushTool</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedBrushTools</code> with the corresponding <code>BrushTool</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBrushTools;
/// An array of <code>BrushOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedBrushOverlayActions</code> with the corresponding <code>BrushOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBrushOverlayActions;
/// The minimum size that a brush can have. This can either be a value that’s relative to the
/// smaller side of the photo that the user is editing or an absolute value in pixels.
/// Default is <code>.absolute(1)</code>.
@property (nonatomic, strong) PESDKFloatValue * _Nonnull minimumBrushSize;
/// The maximum size that a brush can have. This can either be a value that’s relative to the
/// smaller side of the photo that the user is editing or an absolute value in pixels.
/// Default is <code>.relative(0.125)</code>.
@property (nonatomic, strong) PESDKFloatValue * _Nonnull maximumBrushSize;
/// The default size that a brush has. This can either be a value that’s relative to the smaller
/// side of the photo that the user is editing or an absolute value in pixels.
/// Default is <code>.relative(0.05)</code>.
@property (nonatomic, strong) PESDKFloatValue * _Nonnull defaultBrushSize;
@end



@interface NSBundle (SWIFT_EXTENSION(ImglyKit))
/// The bundle that contains all assets of ImglyKit.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull imglyBundle SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_resourceBundle");)
+ (NSBundle * _Nonnull)imglyBundle SWIFT_WARN_UNUSED_RESULT;
/// The bundle that contains all assets of ImglyKit.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull imgly_resourceBundle;)
+ (NSBundle * _Nonnull)imgly_resourceBundle SWIFT_WARN_UNUSED_RESULT;
@end

@class UIEvent;

/// A <code>Button</code> is a subclass of <code>UIButton</code>, which supports running a closure for a given control event
/// and has the ability to specify a touch area inset as well as receive appearance proxy calls
/// to change its font.
SWIFT_CLASS_NAMED("Button")
@interface PESDKButton : UIButton
/// The font of the title label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nullable titleFont;
/// Associates a closure with the control.
/// \param actionClosure The closure to associate with the control.
///
/// \param controlEvents The control-specific events for which the closure is called.
///
- (void)setActionClosure:(void (^ _Nullable)(id _Nonnull))actionClosure for:(UIControlEvents)controlEvents;
/// Associates a closure with the control for the <code>.touchUpInside</code> control event.
@property (nonatomic, copy) void (^ _Nullable actionClosure)(id _Nonnull);
/// The insets to add to the touch target.
@property (nonatomic) UIEdgeInsets touchAreaInsets;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tintColorDidChange;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@class CLLocationManager;
enum RecordingMode : NSInteger;
@class NSError;
@class AVAssetWriter;
@class NSData;

/// The <code>CameraController</code> class provides functions for several camera related tasks,
/// including setup, flash control, and such.
SWIFT_CLASS_NAMED("CameraController")
@interface PESDKCameraController : NSObject
/// When this closure is called, the SDK has determined that location access has not been granted
/// to the host app yet. Within this closure you should then request appropriate permissions from
/// the passed in <code>CLLocationManager</code> object. Location access is used to tag photos with the
/// location where they are taken.
/// attention:
/// Starting Spring 2019, all apps submitted to the App Store that access user data
/// are required to include a purpose string as soon as location permissions requests appear
/// somewhere in the binary. Since we do not want to force developers integrating the SDK into
/// their app to include a purpose string even with location tagging disabled, this closure was
/// introduced, so that developers can decide for themselves if it is appropriate to request
/// location access. Simply set this property like this:
/// \code
/// cameraController.locationAccessRequestClosure = { locationManager in
///   locationManager.requestWhenInUseAuthorization()
/// }
///
/// \endcodenote:
/// When this camera controller was instantiated by a <code>CameraViewController</code> object, this
/// property will be set automatically and forward location access requests to
/// <code>CameraViewController.locationAccessRequestClosure</code>.
@property (nonatomic, copy) void (^ _Nullable locationAccessRequestClosure)(CLLocationManager * _Nonnull);
/// An instance of a <code>UIView</code> that is used to present the preview.
@property (nonatomic, readonly, strong) UIView * _Nonnull videoPreviewView;
/// An instance of a <code>UIView</code> that hosts the <code>videoPreviewView</code> in the center.
@property (nonatomic, readonly, strong) UIView * _Nonnull videoPreviewViewContainer;
/// The currently active recording mode (i.e. <code>.Photo</code> or <code>.Video</code>). Setting this property before
/// calling <code>setupWithInitialRecordingMode(:)</code> is ignored. The setter asynchronously updates the
/// session, so the getter might not immediately represent the new value. You can observe changes
/// to the value of this property using key-value observing.
@property (nonatomic) enum RecordingMode recordingMode;
/// Called when the <code>running</code> state of the camera changes.
@property (nonatomic, copy) void (^ _Nullable runningStateChangedHandler)(BOOL);
/// Called when the camera position changes.
@property (nonatomic, copy) void (^ _Nullable cameraPositionChangedHandler)(AVCaptureDevicePosition, AVCaptureDevicePosition);
/// Called when the recording mode changes.
@property (nonatomic, copy) void (^ _Nullable recordingModeChangedHandler)(enum RecordingMode);
/// Called when the list of available camera positions was changed.
@property (nonatomic, copy) void (^ _Nullable availableCameraPositionsChangedHandler)(void);
/// Called when any aspect of the flash changes.
/// <code>hasFlash</code> is <code>true</code> if the current camera has a flash. <code>flashMode</code> represents the currently
/// active flash mode. <code>flashAvailable</code> is <code>true</code> if the flash is available for use.
@property (nonatomic, copy) void (^ _Nullable flashChangedHandler)(BOOL, AVCaptureFlashMode, BOOL);
/// Called when any aspect of the torch changes.
/// <code>hasTorch</code> is <code>true</code> if the current camera has a torch. <code>torchMMode</code> represents the currently
/// active torch mode. <code>torchAvailable</code> is <code>true</code> if the torch is available for use.
@property (nonatomic, copy) void (^ _Nullable torchChangedHandler)(BOOL, AVCaptureTorchMode, BOOL);
/// Called when a photo is currently being captured or done being captured.
@property (nonatomic, copy) void (^ _Nullable capturingStillImageHandler)(BOOL);
/// Called when the session is interrupted or the interruption ended. This can happen when
/// switching to a multi-app layout, introduced in iOS 9 for example.
@property (nonatomic, copy) void (^ _Nullable sessionInterruptionHandler)(BOOL);
/// Called when a runtime error occurs.
@property (nonatomic, copy) void (^ _Nullable sessionRuntimeErrorHandler)(NSError * _Nonnull);
/// Called when the user did not grant authorization for the camera.
@property (nonatomic, copy) void (^ _Nullable authorizationFailedHandler)(void);
/// Called when video recording starts.
@property (nonatomic, copy) void (^ _Nullable videoRecordingStartedHandler)(void);
/// Called when video recording finishes.
@property (nonatomic, copy) void (^ _Nullable videoRecordingFinishedHandler)(NSURL * _Nonnull);
/// Called when video recording fails.
@property (nonatomic, copy) void (^ _Nullable videoRecordingFailedHandler)(void);
/// Called each second while a video recording is in progress.
@property (nonatomic, copy) void (^ _Nullable videoRecordingProgressHandler)(NSInteger);
/// Called when the size of the preview image within the <code>videoPreviewView</code> changes
@property (nonatomic, copy) void (^ _Nullable previewFrameChangedHandler)(CGRect);
/// Called when the focus point changes.
@property (nonatomic, copy) void (^ _Nullable focusPointChangedHandler)(CGPoint);
/// Called when the focus mode changes.
@property (nonatomic, copy) void (^ _Nullable focusModeChangedHandler)(AVCaptureFocusMode, AVCaptureExposureMode);
/// Called when the focus gets disabled.
@property (nonatomic, copy) void (^ _Nullable focusDisabledHandler)(void);
/// The video output settings to use for video recording. If <code>nil</code>, the recommended video
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended audio
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/// The file type to use for video recording. Default is <code>AVFileTypeQuickTimeMovie</code>.
/// note:
/// If you change this, you will most likely also want to change <code>videoOutputSettings</code>
/// and <code>audioOutputSettings</code>.
@property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
/// The extension to use for video files. Default is “mov”.
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileExtension;
/// Use this closure to further configure the asset writer that is created for video recording.
@property (nonatomic, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/// Set to <code>false</code> to disable locking focus when a user taps on the live preview. Default is <code>true</code>.
@property (nonatomic) BOOL tapToFocusEnabled;
/// The effect filter that is applied to the live feed.
@property (nonatomic, strong) PESDKEffect * _Nullable effect;
/// The intensity of the filter that is applied to the live feed.
@property (nonatomic) CGFloat effectIntensity;
/// Whether the recorded video should include the applied filter or not.
@property (nonatomic) BOOL includeEffectInOutput;
/// Whether the user’s location should be included in photos. This is enabled by default.
@property (nonatomic) BOOL includeUserLocation;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the camera. This method <em>must</em> be called before calling <code>startCamera()</code>.
/// Any handlers that will be used should be set before calling this method, so that they are called
/// with their initial values.
/// \param recordingMode The initial recording mode (e.g. <code>.Photo</code> or <code>.Video</code>) to use when
/// initializing the camera.
///
///
/// throws:
/// A <code>CameraControllerError</code> or an <code>NSError</code> if setup fails.
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode error:(NSError * _Nullable * _Nullable)error;
/// Same as <code>setup(with:)</code> but with an optional completion handler. The completion handler is
/// always invoked on the main thread.
/// \param recordingMode The initial recording mode (e.g. <code>.photo</code> or <code>.video</code>) to use when
/// initializing the camera.
///
/// \param completion A block to be executed when the camera has finished initialization.
///
///
/// throws:
/// A <code>CameraControllerError</code> or an <code>NSError</code> if setup fails.
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode completion:(void (^ _Nullable)(void))completion error:(NSError * _Nullable * _Nullable)error;
/// Starts the camera. <code>setupWithInitialRecordingMode(:)</code> <em>must</em> be called before calling this method, otherwise this method does
/// nothing. You should also add the <code>videoPreviewView</code> to your view hierachy to see the camera output.
- (void)startCamera;
/// Stops the camera.
- (void)stopCamera;
/// Switches the camera to the other position (e.g. <code>.Back</code> -> <code>.Front</code> and <code>.Front</code> -> <code>.Back</code>)
- (void)toggleCameraPosition;
/// Switches the camera to the desired position (if available)
/// \param position The position to switch to.
///
- (void)switchToCameraAtPosition:(AVCaptureDevicePosition)position;
/// Takes a photo and hands it over to the completion block. The completion block always runs on
/// the main thread. This method loses the image’s metadata.
/// \param completion A completion block that has an image and an error as parameters.
/// If the image was taken sucessfully the error is nil.
///
- (void)takePhoto:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Takes a photo and hands it over to the completion block. The completion block always runs on
/// the main thread. Use this method to preserve the image’s metadata.
/// \param completion A completion block that has data and an error as parameters.
/// If the image was taken successfully the error is <code>nil</code>.
///
- (void)takePhotoAndReturnData:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/// Starts the video recording. This only works if <code>recordingMode</code> is set to .Video. You should
/// set appropriate blocks for <code>videoRecordingStartedHandler</code>, <code>videoRecordingFailedHandler</code>,
/// <code>videoRecordingFinishedHandler</code> and <code>videoRecordingProgressHandler</code>. The finished handler gets
/// passed a <code>NSURL</code> to the path of the recorded video file. Please note that you are responsible
/// for deleting that file when you no longer need it.
- (void)startVideoRecording;
/// Stops video recording. This only works if you previously started video recording.
- (void)stopVideoRecording;
/// Selects the next light mode. The order is taken from <code>flashModes</code> or <code>torchModes</code> depending on which is active.
/// If the current device does not support a light mode, the next light mode that is supported is used or <code>.off</code>.
- (void)selectNextLightMode;
/// Zooms the camera by the desired zoom factor.
/// \param zoomFactor The factor to zoom by.
///
- (void)zoomWithDesiredZoomFactor:(CGFloat)zoomFactor;
@end

@class CLLocation;

@interface PESDKCameraController (SWIFT_EXTENSION(ImglyKit)) <CLLocationManagerDelegate>
/// :nodoc:
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end



@interface PESDKCameraController (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AVCaptureDevicePosition</code> raw values wrapped in <code>NSNumber</code>s.
/// Setting this property overrides any previously set values in
/// <code>cameraPositions</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cameraPositions;
/// An array of <code>AVCaptureFlashMode</code> raw values wrapped in <code>NSNumber</code>s.
/// Setting this property overrides any previously set values in
/// <code>flashModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull flashModes;
/// An array of <code>AVCaptureTorchMode</code> raw values wrapped in <code>NSNumber</code>s.
/// Setting this property overrides any previously set values in
/// <code>torchModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull torchModes;
@end

/// This enum holds types of errors that occur while using the <code>CameraController</code>.
typedef SWIFT_ENUM(NSInteger, CameraControllerError, open) {
/// Indicates that setup is called multiple times.
  CameraControllerErrorMultipleCallsToSetup = 0,
/// Indicates that the capture device can’t be initialized.
  CameraControllerErrorUnableToInitializeCaptureDevice = 1,
};
static NSString * _Nonnull const CameraControllerErrorDomain = @"ImglyKit.CameraControllerError";


/// A <code>CameraResult</code> contains the relevant information of the recorded/selected video/image of a <code>Camera</code>.
SWIFT_CLASS_NAMED("CameraResult")
@interface PESDKCameraResult : NSObject
/// The selected or taken photo as <code>Data</code> in JPEG format with metadata if available.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The <code>URL</code> of the recorded/selected video.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKCameraResult (SWIFT_EXTENSION(ImglyKit))
/// The <code>PhotoEditModel</code> that holds the operations applied to the image/video.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull model;
@end

@class UISwipeGestureRecognizer;
@class UIPinchGestureRecognizer;
@class PESDKFilterSelectionController;
@class PESDKVideoRecordButton;

/// The <code>CameraViewController</code> class provides a dialog to perform serveral tasks regarding the camera.
/// These include taking photos, switching on the flash, and such.
SWIFT_CLASS_NAMED("CameraViewController")
@interface PESDKCameraViewController : UIViewController
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a camera view controller using the given parameters.
/// note:
/// If you use the standard <code>init()</code> method or <code>init?(coder:)</code> to initialize a
/// <code>CameraViewController</code> object, a camera view controller with all supported recording modes and
/// the default configuration is created.
/// \param configuration A <code>Configuration</code> object.
///
- (nonnull instancetype)initWithConfiguration:(PESDKConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The view that contains the background views.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundContainerView;
/// The view that contains all view positioned at the top of the screen.
@property (nonatomic, readonly, strong) UIView * _Nonnull topControlsView;
/// The view that serves as container for the actual preview.
@property (nonatomic, readonly, strong) UIView * _Nonnull cameraPreviewContainer;
/// The view that contains all view positioned at the bottom of the screen.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomControlsView;
/// The view that spans from the bottom of the screen to the bottom of the safeAreaLayoutGuide.
/// This is only visible on an iPhone X.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomSafeAreaHidingView;
/// The cancel button.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull cancelButton;
/// The flash button.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull flashButton;
/// The camera switch button.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull switchCameraButton;
/// The camera roll button
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull cameraRollButton;
/// The view that contains actions button that is used to initiate the photo capturing process.
@property (nonatomic, readonly, strong) UIView * _Nonnull actionButtonContainer;
/// The label that is used to display the current recording time.
@property (nonatomic, readonly, strong) UILabel * _Nonnull recordingTimeLabel;
/// The button that is used to initiate the photo capturing process.
@property (nonatomic, readonly, strong) UIControl * _Nullable actionButton;
/// The view that is used to select the current filter that is applied to the preview.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull filterSelectionButton;
/// The slider that is used to control the inensity of the previewed filter.
@property (nonatomic, readonly, strong) PESDKSlider * _Nonnull filterIntensitySlider;
/// The recognizer that detects a swipe gesture to the right.
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeRightGestureRecognizer;
/// The recognizer that detects a swipe gesture to the left.
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeLeftGestureRecognizer;
/// The recognizer that detects a pinch gesture.
@property (nonatomic, readonly, strong) UIPinchGestureRecognizer * _Nonnull pinchGestureRecognizer;
/// The instance of a <code>FilterSelectionController</code> that is used to select the current preview filter.
@property (nonatomic, readonly, strong) PESDKFilterSelectionController * _Nonnull filterSelectionController;
/// The camera controller that is used by the controller.
@property (nonatomic, readonly, strong) PESDKCameraController * _Nullable cameraController;
/// The block that is called when the user taps the cancel button. See
/// <code>CameraViewControllerOptions.showCancelButton</code>.
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
/// The block that is called once the capture process has finished. It is passed a Data instance, containing
/// a JPEG image with metadata.
@property (nonatomic, copy) void (^ _Nullable completionBlock)(PESDKCameraResult * _Nonnull);
/// When this closure is called, the SDK has determined that location access has not been granted
/// to the host app yet. Within this closure you should then request appropriate permissions from
/// the passed in <code>CLLocationManager</code> object. Location access is used to tag photos with the
/// location where they are taken.
/// attention:
/// Starting Spring 2019, all apps submitted to the App Store that access user data
/// are required to include a purpose string as soon as location permissions requests appear
/// somewhere in the binary. Since we do not want to force developers integrating the SDK into
/// their app to include a purpose string even with location tagging disabled, this closure was
/// introduced, so that developers can decide for themselves if it is appropriate to request
/// location access. Simply set this property like this:
/// \code
/// cameraViewController.locationAccessRequestClosure = { locationManager in
///   locationManager.requestWhenInUseAuthorization()
/// }
///
/// \endcode
@property (nonatomic, copy) void (^ _Nullable locationAccessRequestClosure)(CLLocationManager * _Nonnull);
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutorotate;
/// :nodoc:
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
/// This function gets the most recent image form the camera roll, and sets it as preview image for the according button.
- (void)setLastImageFromRollAsPreview;
/// Takes a photo.
/// \param sender The object that initiated the request.
///
- (void)takePhoto:(PESDKButton * _Nullable)sender;
/// Toggles video recording.
/// \param sender Sender of the event.
///
- (void)recordVideo:(PESDKVideoRecordButton * _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface PESDKCameraViewController (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKCameraViewController (SWIFT_EXTENSION(ImglyKit))
/// Generate a photo edit model from the current camera settings.
/// This model can be passed to a <code>PhotoEditViewController</code> in order to have the
/// edited image look like the preview image in the camera’s viewfinder.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull photoEditModel;
@end

@class UIImagePickerController;

@interface PESDKCameraViewController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


/// Options for configuring a <code>CameraViewController</code>.
SWIFT_CLASS_NAMED("CameraViewControllerOptions")
@interface PESDKCameraViewControllerOptions : NSObject
/// The views background color. In video mode the colors alpha value is reduced to 0.3.
/// Defaults to the global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Use this closure to configure the cancel button.
@property (nonatomic, readonly, copy) void (^ _Nullable cancelButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the flash button.
@property (nonatomic, readonly, copy) void (^ _Nullable flashButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the switch camera button.
@property (nonatomic, readonly, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the camera roll button.
@property (nonatomic, readonly, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the action button in photo mode.
@property (nonatomic, readonly, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the filter selector button.
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the timelabel.
@property (nonatomic, readonly, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);
/// Use this closure to configure the filter intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// Use this closure to configure the given recording mode button. By default the buttons
/// light up in yellow, when selected.
@property (nonatomic, readonly, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(PESDKButton * _Nonnull, enum RecordingMode);
/// Enable/Disable permanent crop to square. Disabled by default.
@property (nonatomic, readonly) BOOL cropToSquare;
/// The maximum length of a video. If set to 0 the length is unlimited.
@property (nonatomic, readonly) NSInteger maximumVideoLength;
/// Enable/Disable tap to focus on the camera preview image. Enabled by default.
@property (nonatomic, readonly) BOOL tapToFocusEnabled;
/// Show/hide the cancel button. Disabled by default. In addition you have to set
/// <code>CameraViewController.cancelBlock</code> and add custom code to dismiss your view controller when
/// the user taps the cancel button.
@property (nonatomic, readonly) BOOL showCancelButton;
/// Show/Hide the camera roll button. Enabled by default.
@property (nonatomic, readonly) BOOL showCameraRoll;
/// Enable/Disable filter bottom drawer. Enabled by default.
@property (nonatomic, readonly) BOOL showFilters;
/// Enable/Disable filter intensity slider.
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;
/// The initial intensity of the filters.
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended video
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended audio
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/// The file type to use for video recording. Default is <code>AVFileTypeQuickTimeMovie</code>.
/// note:
/// If you change this, you will most likely also want to change <code>videoOutputSettings</code>
/// and <code>audioOutputSettings</code>.
@property (nonatomic, readonly) AVFileType _Nonnull videoRecordingFileType;
/// The extension to use for video files. Default is “mov”.
@property (nonatomic, readonly, copy) NSString * _Nonnull videoRecordingFileExtension;
/// Use this closure to further configure the asset writer that is created for video recording.
@property (nonatomic, readonly, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/// Whether the user’s location should be included in photos. This is enabled by default.
/// attention:
/// When this is set to <code>true</code>, you must either request location access within your
/// host app or set <code>CameraViewController.locationAccessRequestClosure</code>.
@property (nonatomic, readonly) BOOL includeUserLocation;
/// Whether the recorded video should include the applied filter or not. This is disabled by
/// default.
@property (nonatomic, readonly) BOOL writeVideoWithFilterApplied;
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The default <code>CameraViewControllerOptionsBuilder</code> for <code>CameraViewControllerOptions</code>.
SWIFT_CLASS_NAMED("CameraViewControllerOptionsBuilder")
@interface PESDKCameraViewControllerOptionsBuilder : NSObject
/// The views background color. In video mode the colors alpha value is reduced to 0.3.
/// Defaults to the global background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Use this closure to configure the cancel button.
@property (nonatomic, copy) void (^ _Nullable cancelButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the flash button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable flashButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the switch camera button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the camera roll button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the action button in photo mode. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the filter selector button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Use this closure to configure the timelabel. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);
/// Use this closure to configure the filter intensity slider. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// Use this closure to configure the given recording mode button. By default the buttons
/// light up in yellow, when selected.
@property (nonatomic, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(PESDKButton * _Nonnull, enum RecordingMode);
/// Enable/Disable permanent crop to square. Disabled by default.
@property (nonatomic) BOOL cropToSquare;
/// The maximum length of a video. If set to 0 the length is unlimited.
@property (nonatomic) NSInteger maximumVideoLength;
/// Enable/Disable tap to focus on the camera preview image. Enabled by default.
@property (nonatomic) BOOL tapToFocusEnabled;
/// Show/hide the cancel button. Disabled by default. In addition you have to set
/// <code>CameraViewController.cancelBlock</code> and add custom code to dismiss your view controller when
/// the user taps the cancel button.
@property (nonatomic) BOOL showCancelButton;
/// Show/Hide the camera roll button. Enabled by default.
@property (nonatomic) BOOL showCameraRoll;
/// Enable/Disable filter bottom drawer. Enabled by default.
@property (nonatomic) BOOL showFilters;
/// Enable/Disable filter intensity slider.
@property (nonatomic) BOOL showFilterIntensitySlider;
/// The initial intensity of the filters.
@property (nonatomic) CGFloat initialFilterIntensity;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended video
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/// The video output settings to use for video recording. If <code>nil</code>, the recommended audio
/// settings for file type <code>AVFileTypeQuickTimeMovie</code> will be used.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/// The file type to use for video recording. Default is <code>AVFileTypeQuickTimeMovie</code>.
/// note:
/// If you change this, you will most likely also want to change <code>videoOutputSettings</code>
/// and <code>audioOutputSettings</code>.
@property (nonatomic) AVFileType _Nonnull videoRecordingFileType;
/// The extension to use for video files. Default is “mov”.
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileExtension;
/// Use this closure to further configure the asset writer that is created for video recording.
@property (nonatomic, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/// Whether the user’s location should be included in photos. This is enabled by default.
/// attention:
/// When this is set to <code>true</code>, you must either request location access within your
/// host app or set <code>CameraViewController.locationAccessRequestClosure</code>.
@property (nonatomic) BOOL includeUserLocation;
/// Whether the recorded video should include the applied filter or not. This is disabled by
/// default.
@property (nonatomic) BOOL writeVideoWithFilterApplied;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PESDKCameraViewControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>AVCaptureDevicePosition</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedCameraPositions</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedCameraPositions;
/// An array of <code>AVCaptureFlashMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedFlashModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFlashModes;
/// An array of <code>AVCaptureTorchMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedFlashModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTorchModes;
/// An array of <code>RecordingMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedRecordingModes</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedRecordingModes;
/// An array of <code>RecordingOrientation</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>RecordingOrientation</code> with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedRecordingOrientations;
@end


/// A <code>CancelButton</code> is a subclass of <code>Button</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("CancelButton")
@interface PESDKCancelButton : PESDKButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPainting;
@class PESDKTool;
@protocol PESDKCanvasViewDataSource;
@class NSUUID;
@protocol MTLDevice;

/// The <code>CanvasViewMetal</code> is responsible for presenting a painting and handling touch events related to paintings.
SWIFT_CLASS_NAMED("CanvasView")
@interface PESDKCanvasView : MTKView
/// The painting that is managed by this canvas view.
@property (nonatomic, readonly, strong) PESDKPainting * _Nonnull painting;
/// The tool that is currently active. Currently only an instance of <code>FreehandTool</code> is supported.
@property (nonatomic, strong) PESDKTool * _Nonnull activeTool;
/// The object that acts as the data source for the canvas view.
@property (nonatomic, weak) id <PESDKCanvasViewDataSource> _Nullable dataSource;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// <code>true</code> if a user is currently painting, <code>false</code> otherwise.
@property (nonatomic, readonly) BOOL currentlyPainting;
/// Creates a canvas view for the given painting, with the given tool and the given frame.
/// \param painting The painting that is managed by this canvas view.
///
/// \param activeTool The tool that should be used for the painting. Currently only an instance
/// of <code>FreehandTool</code> is supported.
///
/// \param uuid The UUID that matches this instance with its <code>BrushSpriteModel</code>.
///
/// \param frame The frame of the view.
///
- (nonnull instancetype)initWithPainting:(PESDKPainting * _Nonnull)painting activeTool:(PESDKTool * _Nonnull)activeTool uuid:(NSUUID * _Nonnull)uuid frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// Called by a pan gesture recognizer to handle touches.
/// \param gestureRecognizer The recognizer that called this method.
///
- (void)handlePan:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
/// Converts a given point from view coordinates to painting coordinates.
/// \param pt The point that should be converted.
///
///
/// returns:
/// The converted point.
- (CGPoint)convertPointToDocument:(CGPoint)pt SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frameRect device:(id <MTLDevice> _Nullable)device SWIFT_UNAVAILABLE;
@end


enum PESDKOrientation : NSInteger;

/// The <code>CanvasViewMetalDataSource</code> protocol defines methods that allow you to pass needed information to the canvas view.
SWIFT_PROTOCOL_NAMED("CanvasViewDataSource")
@protocol PESDKCanvasViewDataSource
/// Called to ask for the normalized crop rect that is currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The normalized crop rect.
- (CGRect)canvasViewNormalizedCropRect:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the image orientation that is currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The applied image orienation.
- (enum PESDKOrientation)canvasViewAppliedOrientation:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the straighten angle that is currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The applied straighten angle.
- (CGFloat)canvasViewStraightenAngle:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the image insets that are currently applied to the image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The applied image insets.
- (UIEdgeInsets)canvasViewImageInsets:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// Called to ask for the size of the output image.
/// \param canvasView The canvas view that is requesting this information.
///
///
/// returns:
/// The output image size.
- (CGSize)canvasViewOutputImageSize:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
@end


/// This class represents a circle gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("CircleGradientView")
@interface PESDKCircleGradientView : PESDKFocusGradientView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// :nodoc:
- (void)layoutSubviews;
@end

@class CIImage;

/// This filter adds or takes away clarity of an image.
SWIFT_CLASS_NAMED("ClarityFilter")
@interface PESDKClarityFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The intensity of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>ClipTrimToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, ClipTrimOverlayAction, open) {
/// Delete the video clip of a video composition.
  ClipTrimOverlayActionDelete = 0,
/// Toggle play/pause for video preview.
  ClipTrimOverlayActionPlayPause = 1,
};

@class PESDKVideoTrimView;
@protocol UIViewControllerTransitionCoordinator;

/// The tool controller to trim the length of a video.
SWIFT_CLASS_NAMED("TimelineToolController")
@interface PESDKTimelineToolController : PESDKPhotoEditToolController
/// The contained <code>ProxyZoomZontroller</code>.
@property (nonatomic, readonly, strong) PESDKProxyZoomController * _Nonnull proxyZoomController;
/// The container view of the trim view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull trimViewContainerView;
/// The trim view.
@property (nonatomic, readonly, strong) PESDKVideoTrimView * _Nonnull trimView;
/// The height of the trim container view. Default is <code>88</code>.
@property (nonatomic) CGFloat trimViewHeight;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// The play/pause overlay button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseOverlayButton;
/// An array of all overlay buttons that are displayed in the controller.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end

@class PESDKDimmedLabel;

/// The tool controller to trim the length of a video.
SWIFT_CLASS_NAMED("TrimToolController")
@interface PESDKTrimToolController : PESDKTimelineToolController
/// The container view of the playback controls.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull controlsContainerView SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// The label that displays the current playback time.
@property (nonatomic, readonly, strong) PESDKDimmedLabel * _Nonnull currentTimeLabel SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// The label that displays the duration of the video.
@property (nonatomic, readonly, strong) PESDKPrimaryLabel * _Nonnull durationLabel SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// The button to play and pause the video.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull playPauseButton SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because it belongs to the removed legacy trim controls. Now, the overlay trim controls will be always used which was the default before.");
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end


/// The tool controller to trim the length of a video clip contained in a video composition.
SWIFT_CLASS_NAMED("ClipTrimToolController")
@interface PESDKClipTrimToolController : PESDKTrimToolController
/// The delete overlay button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable deleteOverlayButton;
@end

@class PESDKTrimToolOptionsBuilder;

/// Options for configuring a <code>TrimTool</code>.
SWIFT_CLASS_NAMED("TrimToolOptions")
@interface PESDKTrimToolOptions : PESDKToolControllerOptions
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// Defaults to <code>true</code>. If disabled the legacy controls are displayed instead of the tooltips and overlay button controls.
@property (nonatomic, readonly) BOOL useOverlayControls SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because the legacy trim controls were removed. Now, the overlay trim controls will be always used which was the default before.");
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TrimToolOptions</code> using the given builder.
/// \param trimBuilder An instance of <code>TrimToolOptionsBuilder</code>.
///
- (nonnull instancetype)initWithTrimBuilder:(PESDKTrimToolOptionsBuilder * _Nonnull)trimBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end

@class PESDKClipTrimToolControllerOptionsBuilder;

/// Options for configuring a <code>ClipTrimToolController</code>.
SWIFT_CLASS_NAMED("ClipTrimToolControllerOptions")
@interface PESDKClipTrimToolControllerOptions : PESDKTrimToolOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum ClipTrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable clipTrimOverlayActionSelectedClosure)(enum ClipTrimOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>ClipTrimToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>ClipTrimToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKClipTrimToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimBuilder:(PESDKTrimToolOptionsBuilder * _Nonnull)trimBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TrimToolOptionsBuilder</code> for <code>TrimToolOptions</code>.
SWIFT_CLASS_NAMED("TrimToolOptionsBuilder")
@interface PESDKTrimToolOptionsBuilder : PESDKToolControllerOptionsBuilder
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// Defaults to <code>true</code>. If disabled the legacy controls are displayed instead of the tooltips and overlay button controls.
@property (nonatomic) BOOL useOverlayControls SWIFT_DEPRECATED_MSG("This property is unused and will also be removed soon because the legacy trim controls were removed. Now, the overlay trim controls will be always used which was the default before.");
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TrimToolOptionsBuilder</code> initialized with the given options.
/// \param trimOptions A <code>TrimToolOptions</code> instance.
///
- (nonnull instancetype)initWithTrimOptions:(PESDKTrimToolOptions * _Nonnull)trimOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The default <code>ClipTrimToolControllerOptionsBuilder</code> for <code>ClipTrimToolControllerOptions</code>.
SWIFT_CLASS_NAMED("ClipTrimToolControllerOptionsBuilder")
@interface PESDKClipTrimToolControllerOptionsBuilder : PESDKTrimToolOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum ClipTrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable clipTrimOverlayActionSelectedClosure)(enum ClipTrimOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>ClipTrimToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>ClipTrimToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKClipTrimToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimOptions:(PESDKTrimToolOptions * _Nonnull)trimOptions SWIFT_UNAVAILABLE;
@end


/// Represents a color and a matching name for accessibility.
SWIFT_CLASS_NAMED("Color")
@interface PESDKColor : NSObject
/// The actual color that this object represents.
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// A name for <code>color</code>, used for accessibility.
@property (nonatomic, readonly, copy) NSString * _Nonnull colorName;
/// Creates a new <code>Color</code> object.
/// \param color The actual color that this object represents.
///
/// \param colorName The name for <code>color</code>, used for accessibility.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKColorPalette;
@protocol PESDKColorCollectionViewDelegate;

/// A view that displays a <code>ColorPalette</code> within a collection view.
SWIFT_CLASS_NAMED("ColorCollectionView")
@interface PESDKColorCollectionView : UIView
/// The color palette to display.
@property (nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
/// The object that acts as the delegate.
@property (nonatomic, weak) id <PESDKColorCollectionViewDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The currently selected color.
@property (nonatomic, readonly, strong) PESDKColor * _Nullable selectedColor;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new <code>ColorCollectionView</code> for the given color palette.
/// \param colorPalette The color palette to display.
///
- (nonnull instancetype)initWithColorPalette:(PESDKColorPalette * _Nonnull)colorPalette OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Selects the color at the given index.
/// \param index The index of the color to select.
///
/// \param animated Whether to animated the change.
///
- (void)selectColorAtIndex:(NSInteger)index animated:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewLayout;

@interface PESDKColorCollectionView (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface PESDKColorCollectionView (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>ColorCollectionViewCell</code> is a cell that shows a solid color and an image view on top of that color when the cell
/// is selected. It also has a <code>selectionIndicator</code> to show whether or not the cell is currently selected.
SWIFT_CLASS_NAMED("ColorCollectionViewCell")
@interface PESDKColorCollectionViewCell : UICollectionViewCell
/// Whether this cell is currently active or not. This behaves similar to <code>isSelected</code>, however
/// we don’t use <code>isSelected</code> on purpose to have better control over a cell’s selection state.
@property (nonatomic) BOOL isActive;
/// A view that represents a solid color.
@property (nonatomic, readonly, strong) UIView * _Nonnull colorView;
/// An image view that is above the solid color and always visible.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconView;
/// An image view that is above the solid color and only visible when the cell is selected.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The shadow color of the <code>contentView.layer</code>, the <code>iconView.layer</code>, and <code>imageView.layer</code>.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end


/// The <code>ColorCollectionViewDelegate</code> defines methods that allow you to respond to messages from
/// the <code>ColorCollectionView</code>.
SWIFT_PROTOCOL_NAMED("ColorCollectionViewDelegate")
@protocol PESDKColorCollectionViewDelegate
/// Tells the delegate that a color was selected.
/// \param colorCollectionView The color collection view the color was selected in.
///
/// \param color The color that was selected.
///
- (void)colorCollectionView:(PESDKColorCollectionView * _Nonnull)colorCollectionView didSelectColor:(PESDKColor * _Nonnull)color;
@end


/// Handles the display of <code>ColorMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("ColorListSectionController")
@interface PESDKColorListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (CGSize)sizeForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>ColorToolController</code>.
SWIFT_CLASS_NAMED("ColorMenuItem")
@interface PESDKColorMenuItem : NSObject <PESDKMenuItem>
/// The color of this menu item.
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// The name of the color of this menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull colorName;
/// Creates a new menu item for the given color and color name.
/// \param color The color of this menu item.
///
/// \param colorName The name of the color of this menu item.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a collection of colors.
SWIFT_CLASS_NAMED("ColorPalette")
@interface PESDKColorPalette : NSObject
/// The colors that this palette contains.
@property (nonatomic, readonly, copy) NSArray<PESDKColor *> * _Nonnull colors;
/// Creates a new <code>ColorPalette</code> object with a given color palette.
/// \param colors The colors in this palette.
///
- (nonnull instancetype)initWithColors:(NSArray<PESDKColor *> * _Nonnull)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ColorPickerView</code> provides a way to pick colors.
/// It contains three elements - a hue picker, a brightness and saturation picker and an alpha
/// picker. It has full support for wide colors.
SWIFT_CLASS_NAMED("ColorPickerView")
@interface PESDKColorPickerView : UIControl
/// The currently selected color
@property (nonatomic, strong) UIColor * _Nonnull color;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A special menu item for the <code>ColorToolController</code> that allows to use a color pipette to pick a color value from the edited image.
SWIFT_CLASS_NAMED("ColorPipetteMenuItem")
@interface PESDKColorPipetteMenuItem : PESDKColorMenuItem
@end


/// A <code>ColorPipetteOverlayView</code> is responsible to draw the UI of a <code>ColorPipetteView</code>. This overlay consists of a circular border that highlights the selected color and a crosshair in the middle to facilitate precise color selection.
SWIFT_CLASS_NAMED("ColorPipetteOverlayView")
@interface PESDKColorPipetteOverlayView : UIView
/// The selected color.
@property (nonatomic, strong) UIColor * _Nonnull pickedColor;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKColorPipetteViewDelegate;
@class PESDKMediaEditPreviewController;

/// A <code>ColorPipetteView</code> can be used to pick a color from a preview image. It hosts an <code>ColorPipetteOverlayView</code> and a view that magnifies the preview image for precise color selection.
SWIFT_CLASS_NAMED("ColorPipetteView")
@interface PESDKColorPipetteView : UIView
/// The object that acts as a delegate.
@property (nonatomic, weak) id <PESDKColorPipetteViewDelegate> _Nullable delegate;
/// Scale factor of the magnified preview image.
@property (nonatomic) CGFloat magnificationScale;
/// The UI that is drawn over the <code>magnificationView</code>.
@property (nonatomic, readonly, strong) PESDKColorPipetteOverlayView * _Nonnull overlayView;
/// The view that shows the magnification of the edited image.
@property (nonatomic, readonly, strong) UIView * _Nonnull magnificationView;
/// The <code>PhotoEditPreviewController</code> that hosts the image where this pipette operates on.
@property (nonatomic, strong) PESDKMediaEditPreviewController * _Nullable previewController;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)setNeedsDisplay;
@end


@interface PESDKColorPipetteView (SWIFT_EXTENSION(ImglyKit)) <MTKViewDelegate>
/// :nodoc:
- (void)drawInMTKView:(MTKView * _Nonnull)view;
/// :nodoc:
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
@end


/// The <code>ColorPipetteViewDelegate</code> defines methods that allow you to respond to messages from
/// the <code>ColorPipetteView</code>.
SWIFT_PROTOCOL_NAMED("ColorPipetteViewDelegate")
@protocol PESDKColorPipetteViewDelegate
/// Called when the pipette changed its position or the selected color did change.
/// \param colorPipetteView The color pipette view that picked a new color or changed its position.
///
/// \param newColor Indicates whether the picked <code>color</code> is different from the last picked color.
///
/// \param color The picked color.
///
/// \param normalizedPosition The normalized position of the picked <code>color</code> in the untransformed image.
///
- (void)colorPipetteView:(PESDKColorPipetteView * _Nonnull)colorPipetteView didPick:(BOOL)newColor :(UIColor * _Nonnull)color at:(CGPoint)normalizedPosition;
@end




/// This filter is used to colorize stickers.
SWIFT_CLASS_NAMED("ColorizeFilter")
@interface PESDKColorizeFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The color of this filter.
@property (nonatomic, strong) UIColor * _Nullable inputColor;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The footer view for a <code>CompositionActionMenuItem</code> in a <code>CompositionActionListSectionController</code>.
SWIFT_CLASS_NAMED("CompositionActionFooterView")
@interface PESDKCompositionActionFooterView : UICollectionViewCell
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)updateConstraints;
/// :nodoc:
- (void)prepareForReuse;
@end


/// Handles the display of <code>CompositionActionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("CompositionActionListSectionController")
@interface PESDKCompositionActionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedElementKinds;
/// :nodoc:
- (UICollectionReusableView * _Nonnull)viewForSupplementaryElementOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)sizeForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The action menu item that is used in <code>CompositionToolController</code>
SWIFT_CLASS_NAMED("CompositionActionMenuItem")
@interface PESDKCompositionActionMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// The supplementary text of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nullable supplementaryText;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKCompositionEditControllerDelegate;

/// An <code>CompositionEditController</code> can be used to update the <code>TrimModel</code> of a <code>PhotoEditModel</code>.
/// It is supposed to be contained in a tool controller and be presented above a
/// <code>VideoEditPreviewController</code>.
SWIFT_CLASS_NAMED("CompositionEditController")
@interface PESDKCompositionEditController : PESDKViewController
/// The contained <code>ProxyZoomZontroller</code>.
@property (nonatomic, readonly, strong) PESDKProxyZoomController * _Nonnull proxyZoomController;
/// The container view of the trim view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull trimViewContainerView;
/// The trim view.
@property (nonatomic, readonly, strong) PESDKVideoTrimView * _Nonnull trimView;
/// The height of the trim view. Default is <code>88</code>.
@property (nonatomic) CGFloat trimViewHeight;
/// The object that acts as this controller’s delegate.
@property (nonatomic, weak) id <PESDKCompositionEditControllerDelegate> _Nullable delegate;
/// Creates a new <code>CompositionEditController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKProxyZoomControllerDelegate>
/// :nodoc:
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end


/// The <code>VideoTrimViewDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>VideoTrimView</code>.
SWIFT_PROTOCOL_NAMED("VideoTrimViewDelegate")
@protocol PESDKVideoTrimViewDelegate
/// Called when the user started dragging the scrubber.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the user dragged the scrubber.
/// \param videoTrimView The video trim view that this event occurred in.
///
/// \param time The time that the scrubber was dragged to.
///
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
/// Called when the user stopped dragging the scrubber.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the user started dragging the start or end time.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the start time was changed.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the end time was changed.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// Called when the user stopped dragging the start or end time.
/// \param videoTrimView The video trim view that this event occurred in.
///
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end


@interface PESDKCompositionEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimViewDelegate>
/// :nodoc:
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end

@class PESDKVideoEditPreviewController;

/// The <code>CompositionEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>CompositionEditController</code>.
SWIFT_PROTOCOL_NAMED("CompositionEditControllerDelegate")
@protocol PESDKCompositionEditControllerDelegate
/// Asks the delegate for the video edit preview controller.
/// \param compositionEditController The composition edit controller asking.
///
///
/// returns:
/// The video edit preview controller.
- (PESDKVideoEditPreviewController * _Nullable)compositionEditControllerPreviewController:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param compositionEditController The composition edit controller that changed the photo edit model.
///
- (void)compositionEditControllerDidChangePhotoEditModel:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// Called when the user started dragging the scrubber or trim handles.
/// \param compositionEditController The composition edit controller that this event occurred in.
///
- (void)compositionEditControllerDidStartDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// Called when the user stopped dragging the scrubber or trim handles.
/// \param compositionEditController The composition edit controller that this event occurred in.
///
- (void)compositionEditControllerDidStopDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// Asks the delegate for the scroll view to which zoom events of the composition edit controller
/// should be forwarded.
/// \param compositionEditController The composition edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)compositionEditControllerTargetScrollView:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>CompositionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("CompositionListSectionController")
@interface PESDKCompositionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
/// :nodoc:
- (BOOL)canMoveItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>CompositionToolController</code>
SWIFT_CLASS_NAMED("CompositionMenuItem")
@interface PESDKCompositionMenuItem : NSObject <PESDKMenuItem>
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:`
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The overlay actions that can be used in an instance of <code>CompositionToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, CompositionOverlayAction, open) {
/// Toggle play/pause for video preview.
  CompositionOverlayActionPlayPause = 0,
};


/// The tool controller to create a composition of multiple videos clips and to trim the lengths of the individual clips as well as the length of the resulting video composition.
SWIFT_CLASS_NAMED("CompositionToolController")
@interface PESDKCompositionToolController : PESDKMenuToolController <PESDKCompositionEditControllerDelegate>
/// The <code>CompositionEditController</code> that is used within this tool to edit the composition.
@property (nonatomic, readonly, strong) PESDKCompositionEditController * _Nonnull compositionEditController;
/// :nodoc:
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
/// :nodoc:
- (PESDKVideoEditPreviewController * _Nullable)compositionEditControllerPreviewController:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)compositionEditControllerDidChangePhotoEditModel:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// :nodoc:
- (void)compositionEditControllerDidStartDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// :nodoc:
- (void)compositionEditControllerDidStopDragging:(PESDKCompositionEditController * _Nonnull)compositionEditController;
/// :nodoc:
- (UIScrollView * _Nullable)compositionEditControllerTargetScrollView:(PESDKCompositionEditController * _Nonnull)compositionEditController SWIFT_WARN_UNUSED_RESULT;
/// The play/pause button
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseButton;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>playPauseButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
@end


@class PESDKVideoClipToolController;

/// The <code>VideoClipToolControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>VideoClipToolController</code>.
SWIFT_PROTOCOL_NAMED("VideoClipToolControllerDelegate")
@protocol PESDKVideoClipToolControllerDelegate
/// Tells the delegate that the given video clips were selected.
/// \param videoClipToolController The video clip tool controller where the video clips have been selected
/// in.
///
/// \param videos The video clips that have been selected.
///
- (void)videoClipToolController:(PESDKVideoClipToolController * _Nonnull)videoClipToolController didSelect:(NSArray<PESDKVideoClip *> * _Nonnull)videos;
@end


@interface PESDKCompositionToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoClipToolControllerDelegate>
/// :nodoc:
- (void)videoClipToolController:(PESDKVideoClipToolController * _Nonnull)videoClipToolController didSelect:(NSArray<PESDKVideoClip *> * _Nonnull)videos;
@end


@interface PESDKCompositionToolController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (NSIndexPath * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView targetIndexPathForMoveFromItemAtIndexPath:(NSIndexPath * _Nonnull)originalIndexPath toProposedIndexPath:(NSIndexPath * _Nonnull)proposedIndexPath SWIFT_WARN_UNUSED_RESULT;
@end



@interface PESDKCompositionToolController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end

@class PESDKVideoEditViewController;
enum PESDKVideoClipLibraryMode : NSInteger;
@class PESDKCompositionToolControllerOptionsBuilder;

/// Options for configuring a <code>CompositionToolController</code>.
SWIFT_CLASS_NAMED("CompositionToolControllerOptions")
@interface PESDKCompositionToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum CompositionOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable compositionOverlayActionSelectedClosure)(enum CompositionOverlayAction);
/// If set this closure is called when the user trys to export a video composition which is too short to meet the <code>TrimToolControllerOptions.minimumDuration</code> limit but
/// the composition could be adjusted by adding or trimming video clips to fulfill this requirement.
/// You can for example use this to present an alert view informing the user that the video composition is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will open the composition tool automatically.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, readonly, copy) void (^ _Nullable compositionTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// The mode determines which library type should be displayed when the user wants
/// to add a <code>VideoClip</code> within the <code>CompositionToolController</code>.
/// Default is set to <code>.personal</code>.
@property (nonatomic, readonly) enum PESDKVideoClipLibraryMode videoClipLibraryMode;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>CompositionToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>CompositionToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKCompositionToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>CompositionToolControllerOptionsBuilder</code> for <code>CompositionToolControllerOptions</code>.
SWIFT_CLASS_NAMED("CompositionToolControllerOptionsBuilder")
@interface PESDKCompositionToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum CompositionOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable compositionOverlayActionSelectedClosure)(enum CompositionOverlayAction);
/// If set this closure is called when the user trys to export a video composition which is too short to meet the <code>TrimToolControllerOptions.minimumDuration</code> limit but
/// the composition could be adjusted by adding or trimming video clips to fulfill this requirement.
/// You can for example use this to present an alert view informing the user that the video composition is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will open the composition tool automatically.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, copy) void (^ _Nullable compositionTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// The mode determines which library type should be displayed when the user wants
/// to add a <code>VideoClip</code> within the <code>CompositionToolController</code>.
/// Default is set to <code>.personal</code>.
@property (nonatomic) enum PESDKVideoClipLibraryMode videoClipLibraryMode;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>CompositionToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>CompositionToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKCompositionToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKCompositionToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>CompositionOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedCompositionOverlayActions</code> with the corresponding <code>CompositionOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedCompositionOverlayActions;
@end

@class PESDKFilterToolControllerOptions;
@class PESDKOverlayToolControllerOptions;
@class PESDKStickerToolControllerOptions;
@class PESDKStickerOptionsToolControllerOptions;
@class PESDKTransformToolControllerOptions;
@class PESDKFocusToolControllerOptions;
@class PESDKTextToolControllerOptions;
@class IMGLTextOptionsToolControllerOptions;
@class PESDKTextFontToolControllerOptions;
@class PESDKTextColorToolControllerOptions;
@class PESDKFrameToolControllerOptions;
@class PESDKFrameOptionsToolControllerOptions;
@class PESDKTextDesignToolControllerOptions;
@class PESDKTextDesignOptionsToolControllerOptions;
@class PESDKTextDesignColorToolControllerOptions;
@class PESDKTextDesignLayoutToolControllerOptions;
@class PESDKSnappingOptions;
@class PESDKWatermarkOptions;
@class PESDKConfigurationBuilder;

/// An Configuration defines behaviour and look of all view controllers
/// provided by the PhotoEditorSDK. It uses the builder pattern to create an
/// immutable object via a closure. To configure the different editors and
/// viewControllers contained in the SDK, edit their options in the corresponding
/// <code>configure*ViewController</code> method of the <code>ConfigurationBuilder</code>.
SWIFT_CLASS_NAMED("Configuration")
@interface PESDKConfiguration : NSObject
/// The asset catalog which configures all assets that are available for editing tasks, such as stickers, frames, effects, overlays, fonts, and text designs. Defaults to <code>AssetCatalog.shared</code>.
@property (nonatomic, readonly, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Options for the <code>CameraViewController</code>.
@property (nonatomic, readonly, strong) PESDKCameraViewControllerOptions * _Nonnull cameraViewControllerOptions;
/// Options for the <code>FilterToolController</code>.
@property (nonatomic, readonly, strong) PESDKFilterToolControllerOptions * _Nonnull filterToolControllerOptions;
/// Options for the <code>OverlayToolController</code>.
@property (nonatomic, readonly, strong) PESDKOverlayToolControllerOptions * _Nonnull overlayToolControllerOptions;
/// Options for the <code>StickerToolController</code>.
@property (nonatomic, readonly, strong) PESDKStickerToolControllerOptions * _Nonnull stickerToolControllerOptions;
/// Options for the <code>StickerOptionsToolController</code>.
@property (nonatomic, readonly, strong) PESDKStickerOptionsToolControllerOptions * _Nonnull stickerOptionsToolControllerOptions;
/// Options for the <code>StickerColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKColorToolControllerOptions * _Nonnull stickerColorToolControllerOptions;
/// Options for the <code>TransformToolController</code>.
@property (nonatomic, readonly, strong) PESDKTransformToolControllerOptions * _Nonnull transformToolControllerOptions;
/// Options for the <code>FocusToolController</code>.
@property (nonatomic, readonly, strong) PESDKFocusToolControllerOptions * _Nonnull focusToolControllerOptions;
/// Options for the <code>TextToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextToolControllerOptions * _Nonnull textToolControllerOptions;
/// Options for the <code>TextOptionsToolController</code>.
@property (nonatomic, readonly, strong) IMGLTextOptionsToolControllerOptions * _Nonnull textOptionsToolControllerOptions;
/// Options for the <code>TextFontToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextFontToolControllerOptions * _Nonnull textFontToolControllerOptions;
/// Options for the <code>TextColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextColorToolControllerOptions * _Nonnull textColorToolControllerOptions;
/// Options for the <code>AdjustToolController</code>.
@property (nonatomic, readonly, strong) PESDKAdjustToolControllerOptions * _Nonnull adjustToolControllerOptions;
/// Options for the <code>BrushToolController</code>.
@property (nonatomic, readonly, strong) PESDKBrushToolControllerOptions * _Nonnull brushToolControllerOptions;
/// Options for the <code>BrushColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKBrushColorToolControllerOptions * _Nonnull brushColorToolControllerOptions;
/// Options for the <code>FrameToolController</code>.
@property (nonatomic, readonly, strong) PESDKFrameToolControllerOptions * _Nonnull frameToolControllerOptions;
/// Options for the <code>FrameOptionsToolController</code>.
@property (nonatomic, readonly, strong) PESDKFrameOptionsToolControllerOptions * _Nonnull frameOptionsToolControllerOptions;
/// Options for the <code>TextDesignToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignToolControllerOptions * _Nonnull textDesignToolControllerOptions;
/// Options for the <code>TextDesignOptionsToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignOptionsToolControllerOptions * _Nonnull textDesignOptionsToolControllerOptions;
/// Options for the <code>TextDesignColorToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignColorToolControllerOptions * _Nonnull textDesignColorToolControllerOptions;
/// Options for the <code>TextDesignLayoutToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignLayoutToolControllerOptions * _Nonnull textDesignLayoutToolControllerOptions;
/// Global snapping options for all sprites, e.g., stickers, texts, and text designs.
@property (nonatomic, readonly, strong) PESDKSnappingOptions * _Nonnull snappingOptions;
/// Global watermark options.
@property (nonatomic, readonly, strong) PESDKWatermarkOptions * _Nonnull watermarkOptions;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>Configuration</code> using the given builder.
/// \param builder An instance of <code>ConfigurationBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKConfigurationBuilder * _Nonnull))builder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPhotoEditViewControllerOptions;

@interface PESDKConfiguration (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>PhotoEditViewController</code>.
@property (nonatomic, readonly, strong) PESDKPhotoEditViewControllerOptions * _Nonnull photoEditViewControllerOptions;
@end

@class PESDKVideoEditViewControllerOptions;
@class PESDKTrimToolControllerOptions;
@class PESDKVideoClipToolControllerOptions;
@class PESDKStickerDurationToolControllerOptions;
@class PESDKTextDurationToolControllerOptions;
@class PESDKTextDesignDurationToolControllerOptions;

@interface PESDKConfiguration (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>VideoEditViewController</code>.
@property (nonatomic, readonly, strong) PESDKVideoEditViewControllerOptions * _Nonnull videoEditViewControllerOptions;
/// Options for the <code>TrimToolController</code>.
@property (nonatomic, readonly, strong) PESDKTrimToolControllerOptions * _Nonnull trimToolControllerOptions;
/// Options for the <code>CompositionToolController</code>.
@property (nonatomic, readonly, strong) PESDKCompositionToolControllerOptions * _Nonnull compositionToolControllerOptions;
/// Options for the <code>ClipTrimToolController</code>.
@property (nonatomic, readonly, strong) PESDKClipTrimToolControllerOptions * _Nonnull clipTrimToolControllerOptions;
/// Options for the <code>VideoClipToolController</code>.
@property (nonatomic, readonly, strong) PESDKVideoClipToolControllerOptions * _Nonnull videoClipToolControllerOptions;
/// Options for the <code>AudioClipToolController</code>.
@property (nonatomic, readonly, strong) PESDKAudioClipToolControllerOptions * _Nonnull audioClipToolControllerOptions;
/// Options for the <code>AudioToolController</code>.
@property (nonatomic, readonly, strong) PESDKAudioToolControllerOptions * _Nonnull audioToolControllerOptions;
/// Options for the <code>StickerDurationToolController</code>.
@property (nonatomic, readonly, strong) PESDKStickerDurationToolControllerOptions * _Nonnull stickerDurationToolControllerOptions;
/// Options for the <code>TextDurationToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDurationToolControllerOptions * _Nonnull textDurationToolControllerOptions;
/// Options for the <code>TextDesignDurationToolController</code>.
@property (nonatomic, readonly, strong) PESDKTextDesignDurationToolControllerOptions * _Nonnull textDesignDurationToolControllerOptions;
@end

@class PESDKTheme;
@class PESDKFilterToolControllerOptionsBuilder;
@class PESDKOverlayToolControllerOptionsBuilder;
@class PESDKStickerToolControllerOptionsBuilder;
@class PESDKStickerOptionsToolControllerOptionsBuilder;
@class PESDKFocusToolControllerOptionsBuilder;
@class PESDKTextToolControllerOptionsBuilder;
@class PESDKTextOptionsToolControllerOptionsBuilder;
@class PESDKTextFontToolControllerOptionsBuilder;
@class PESDKTextColorToolControllerOptionsBuilder;
@class PESDKTransformToolControllerOptionsBuilder;
@class PESDKFrameToolControllerOptionsBuilder;
@class PESDKFrameOptionsToolControllerOptionsBuilder;
@class PESDKTextDesignToolControllerOptionsBuilder;
@class PESDKTextDesignOptionsToolControllerOptionsBuilder;
@class PESDKTextDesignColorToolControllerOptionsBuilder;
@class PESDKTextDesignLayoutToolControllerOptionsBuilder;
@class PESDKSnappingOptionsOptionsBuilder;
@class PESDKWatermarkOptionsBuilder;

/// The configuration builder object offers all properties of <code>Configuration</code> in
/// a mutable version, in order to build an immutable <code>Configuration</code> object. To
/// further configure the different viewcontrollers, use the <code>configureXYZViewController</code>
/// methods to edit the given options.
SWIFT_CLASS_NAMED("ConfigurationBuilder")
@interface PESDKConfigurationBuilder : NSObject
/// The overall theme used to configure colors of the UI elements. Defaults to <code>PESDKTheme.dark</code>.
/// This property should only be used if you are using Objective-C.
@property (nonatomic, strong) PESDKTheme * _Nonnull theme;
/// This closure is called after the theme was applied via <code>UIAppearance</code> proxies during the initialization of a <code>CameraViewController</code> or a <code>MediaEditViewController</code>.
/// It is intended to run custom calls to <code>UIAppearance</code> proxies. The immutable active theme is passed to this closure.
/// This property should only be used if you are using Objective-C and it will only be called if the corresponding Swift closure <code>appearanceProxyConfigurationClosure</code> is <code>nil</code>.
@property (nonatomic, copy) void (^ _Nullable appearanceProxyConfigurationClosure)(PESDKTheme * _Nonnull);
/// The asset catalog which configures all assets that are available for editing tasks, such as stickers, frames, effects, overlays, fonts, and text designs. Defaults to <code>AssetCatalog.shared</code>.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Adds an options object to this builder.
/// \param options The options object to add.
///
- (void)addOptions:(id _Nonnull)options;
/// Options for the <code>CameraViewController</code>.
- (void)configureCameraViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKCameraViewControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FilterToolController</code>.
- (void)configureFilterToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFilterToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>OverlayToolController</code>.
- (void)configureOverlayToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKOverlayToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerToolController</code>.
- (void)configureStickerToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKStickerToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerOptionsToolController</code>.
- (void)configureStickerOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerColorToolController</code>.
- (void)configureStickerColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FocusToolController</code>.
- (void)configureFocusToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFocusToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextToolController</code>.
- (void)configureTextToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextOptionsToolController</code>.
- (void)configureTextOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextFontToolController</code>.
- (void)configureTextFontToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextFontToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextColorToolController</code>.
- (void)configureTextColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>AdjustToolController</code>.
- (void)configureAdjustToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKAdjustToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>BrushToolController</code>.
- (void)configureBrushToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKBrushToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>BrushToolController</code>.
- (void)configureBrushColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKBrushColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TransformToolController</code>.
- (void)configureTransformToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTransformToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FrameToolController</code>.
- (void)configureFrameToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFrameToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>FrameOptionsToolController</code>.
- (void)configureFrameOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKFrameOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignToolController</code>.
- (void)configureTextDesignToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignOptionsToolController</code>.
- (void)configureTextDesignOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignColorToolController</code>.
- (void)configureTextDesignColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignColorToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignLayoutToolController</code>.
- (void)configureTextDesignLayoutToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignLayoutToolControllerOptionsBuilder * _Nonnull))builder;
/// Global snapping options for all sprites, e.g., stickers, texts, and text designs.
- (void)configureSnapping:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKSnappingOptionsOptionsBuilder * _Nonnull))builder;
/// Global watermark options.
- (void)configureWatermark:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKWatermarkOptionsBuilder * _Nonnull))builder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPhotoEditViewControllerOptionsBuilder;

@interface PESDKConfigurationBuilder (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>PhotoEditViewController</code>.
- (void)configurePhotoEditViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull))builder;
@end


@interface PESDKConfigurationBuilder (SWIFT_EXTENSION(ImglyKit))
/// Read configuration from a dictionary. This process will modify the current <code>assetCatalog</code> associated with this builder if the given <code>dictionary</code> configures any assets.
/// \param dictionary A valid JSON object.
///
- (BOOL)configureFromDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error;
/// Read configuration from data. This process will modify the current <code>assetCatalog</code> associated with this builder if the given <code>data</code> configures any assets.
/// \param data A serialized JSON object.
///
- (BOOL)configureFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end

@class PESDKTrimToolControllerOptionsBuilder;
@class PESDKVideoClipToolControllerOptionsBuilder;
@class PESDKStickerDurationToolControllerOptionsBuilder;
@class PESDKTextDurationToolControllerOptionsBuilder;
@class PESDKTextDesignDurationToolControllerOptionsBuilder;
@class PESDKVideoEditViewControllerOptionsBuilder;

@interface PESDKConfigurationBuilder (SWIFT_EXTENSION(ImglyKit))
/// Options for the <code>TrimToolController</code>.
- (void)configureTrimToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTrimToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>CompositionToolController</code>.
- (void)configureCompositionToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKCompositionToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>VideoClipToolController</code>.
- (void)configureVideoClipToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKVideoClipToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>ClipTrimToolController</code>.
- (void)configureClipTrimToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKClipTrimToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>AudioToolController</code>.
- (void)configureAudioToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKAudioToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>AudioClipToolController</code>.
- (void)configureAudioClipToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKAudioClipToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>StickerDurationToolController</code>.
- (void)configureStickerDurationToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKStickerDurationToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDurationToolController</code>.
- (void)configureTextDurationToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDurationToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>TextDesignDurationToolController</code>.
- (void)configureTextDesignDurationToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKTextDesignDurationToolControllerOptionsBuilder * _Nonnull))builder;
/// Options for the <code>VideoEditViewController</code>.
- (void)configureVideoEditViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(PESDKVideoEditViewControllerOptionsBuilder * _Nonnull))builder;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ConfigurationSerializationConfiguration")
@interface PESDKConfigurationSerializationConfiguration : NSObject
@end


/// The base class for effects that can be applied to a photo. It is meant to be subclassed.
SWIFT_CLASS_NAMED("Effect")
@interface PESDKEffect : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The identifier of the effect.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The name that is displayed to the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Returns a new <code>CIFilter</code> object that implements the actual effect.
/// Subclasses need to override this method.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
/// Initializes the base class <code>Effect</code>. Use this initilizer in subclasses only and make sure
/// to override <code>newEffectFilter</code>.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param displayName The name that is displayed to the user.
///
///
/// returns:
/// A newly initialized <code>Effect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/// Creates a no-op effect.
///
/// returns:
/// A newly initialized <code>Effect</code> object that behaves like a <code>NoEffect</code> object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates the default effects that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKEffect *> * _Nonnull defaultItems;)
+ (NSArray<PESDKEffect *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// Change this array to only support a subset of all available filters or to include custom
/// filters. By default this array includes all available filters.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKEffect *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.effects` of your `Configuration` object instead.");)
+ (NSArray<PESDKEffect *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKEffect *> * _Nonnull)newValue;
/// This method returns the effect with the given identifier if such an effect exists.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the effect.
///
///
/// returns:
/// A <code>Effect</code> object.
+ (PESDKEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.effect(withIdentifier:)` of your `Configuration` object instead.");
@end


/// A concrete <code>Effect</code> that uses a registered Core Image filter.
SWIFT_CLASS_NAMED("CoreImageEffect")
@interface PESDKCoreImageEffect : PESDKEffect
/// The name of the <code>CIFilter</code> that should be used to apply this effect.
@property (nonatomic, readonly, copy) NSString * _Nullable ciFilterName;
/// Additional options that should be passed to the <code>CIFilter</code> object that will be created when applying this effect.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable options;
/// Creates an effect based on a registered Core Image filter.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param filterName The name of the <code>CIFilter</code> that should be used to apply this effect.
///
/// \param displayName The name that is displayed to the user.
///
/// \param options Additional options that should be passed to the <code>CIFilter</code> object that will be created when applying this effect.
///
///
/// returns:
/// A newly initialized <code>CoreImageEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier ciFilterName:(NSString * _Nullable)filterName displayName:(NSString * _Nonnull)displayName options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>CIFilter</code> object with the given name and options.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKSpriteContainerView;
@protocol PESDKCropAndStraightenViewDelegate;

/// The <code>CropAndStraightenView</code> class provides support for displaying, zooming, rotating and
/// cropping an image.
SWIFT_CLASS_NAMED("CropAndStraightenView")
@interface PESDKCropAndStraightenView : UIView
/// A <code>SpriteContainerView</code> which contains all sprites that have been added.
@property (nonatomic, strong) PESDKSpriteContainerView * _Nullable spriteContainerView;
/// The delegate of the <code>CropAndStraightenView</code> object.
@property (nonatomic, weak) id <PESDKCropAndStraightenViewDelegate> _Nullable delegate;
/// The image that is to be displayed.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The straighten angle to apply to the image in radians.
@property (nonatomic) CGFloat straightenAngle;
/// The crop rect to fit the image into. This rect should be relative to the view.
@property (nonatomic) CGRect cropRect;
/// The orientation to apply to the image.
@property (nonatomic) enum PESDKOrientation orientation;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)layoutSubviews;
/// The crop rect in image dimensions.
@property (nonatomic, readonly) CGRect imageCropRect;
/// Converts a view rect to image dimensions.
/// \param viewRect The view rect to convert.
///
///
/// returns:
/// The crop rect in image dimensions.
- (CGRect)imageCropRectForViewRect:(CGRect)viewRect SWIFT_WARN_UNUSED_RESULT;
/// Updates the scroll view’s zoom scale and content offset, such that the image region fits
/// into the crop rect.
/// \param imageRegion The image region to fit into the crop rect.
///
/// \param animated Whether or not to animate the change.
///
- (void)fitImageRegion:(CGRect)imageRegion inCropRectAnimated:(BOOL)animated;
/// Returns whether the user has touched the content to initiate scrolling.
/// note:
/// The value of this property is <code>true</code> if the user has touched the image but might
/// not have yet have started dragging it.
@property (nonatomic, readonly) BOOL isTracking;
/// Returns whether the content is moving in the view after the user lifted their finger.
/// note:
/// The returned value is <code>true</code> if user isn’t dragging the content but scrolling
/// is still occurring.
@property (nonatomic, readonly) BOOL isDecelerating;
/// The frame of the crop canvas. This can be smaller than the bounds of the view so that a padding
/// can be added to the view. If this is set to an empty rect, <code>bounds</code> will be returned.
@property (nonatomic) CGRect canvasFrame;
@end


@interface PESDKCropAndStraightenView (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKCropAndStraightenView (SWIFT_EXTENSION(ImglyKit)) <MTKViewDelegate>
/// :nodoc:
- (void)drawInMTKView:(MTKView * _Nonnull)view;
/// :nodoc:
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
@end


@interface PESDKCropAndStraightenView (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


/// The methods declared by the <code>CropAndStraightenViewDelegate</code> protocol allow the adopting
/// delegate to respond to message from the <code>CropAndStraightenView</code> class and thus respond to
/// operations such as tracking.
SWIFT_PROTOCOL_NAMED("CropAndStraightenViewDelegate")
@protocol PESDKCropAndStraightenViewDelegate
/// Called just before the crop and straighten view begins tracking.
/// \param cropAndStraightenView The view that is about to begin tracking.
///
- (void)cropAndStraightenViewWillBeginTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// Called just after the crop and straighten view finished tracking.
/// \param cropAndStraightenView The view that finished tracking.
///
- (void)cropAndStraightenViewDidEndTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// Called when the crop and straighten view tracked user interaction.
/// \param cropAndStraightenView The view that tracked user interaction.
///
- (void)cropAndStraightenViewDidTrack:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
@end


/// The <code>CropAspect</code> class is used to specify the available crop aspect ratios for the
/// <code>TransformToolController</code>.
SWIFT_CLASS_NAMED("CropAspect")
@interface PESDKCropAspect : NSObject
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>CropAspect</code>. The aspect ratio is <code>width</code> divided by <code>height</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;
/// Creates a new instance of <code>CropAspect</code>. The aspect ratio is <code>width</code> divided by <code>height</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param rotatable Whether this crop aspect can be rotated by tapping on it in the transform tool.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height rotatable:(BOOL)rotatable;
/// Creates a new instance of <code>CropAspect</code> with a custom localized name. Usually the aspect
/// ratio will be used as the name, but with this initializer it is possible to use a different
/// name such as <code>Square</code> instead of <code>1.0</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param localizedName The custom localized name for this aspect ratio.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName;
/// Creates a new instance of <code>CropAspect</code> with a custom localized name. Usually the aspect
/// ratio will be used as the name, but with this initializer it is possible to use a different
/// name such as <code>Square</code> instead of <code>1.0</code>.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param localizedName The custom localized name for this aspect ratio.
///
/// \param rotatable Whether this crop aspect can be rotated by tapping on it in the transform tool.
///
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName rotatable:(BOOL)rotatable OBJC_DESIGNATED_INITIALIZER;
/// The width of the aspect ratio.
@property (nonatomic, readonly) CGFloat width;
/// The height of the aspect ratio.
@property (nonatomic, readonly) CGFloat height;
/// The localized name of the aspect ratio.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedName;
/// Whether this crop aspect can be rotated by tapping on it in the transform tool.
@property (nonatomic, readonly) BOOL isRotatable;
/// The calculated ratio (i.e. <code>width / height</code>).
@property (nonatomic, readonly) CGFloat ratio;
/// Whether this crop aspect is same as inverse one.
@property (nonatomic, readonly) BOOL isSquare;
/// Calculates the width for a given height.
/// \param height The height to calculate the matching width for.
///
///
/// returns:
/// The width for the given height.
- (CGFloat)widthForHeight:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
/// Calculates the height for a given width.
/// \param width The width to calculate the matching height for.
///
///
/// returns:
/// The height for the given width.
- (CGFloat)heightForWidth:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
/// Creates the reversed aspect ratio.
@property (nonatomic, readonly, strong) PESDKCropAspect * _Nonnull inversed;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Handles the display of <code>CropAspectMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("CropAspectListSectionController")
@interface PESDKCropAspectListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (void)selectItemAt:(NSInteger)index;
/// :nodoc:
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TransformToolController</code>.
SWIFT_CLASS_NAMED("CropAspectMenuItem")
@interface PESDKCropAspectMenuItem : NSObject <PESDKMenuItem>
/// The <code>CropAspect</code> that this menu item represents or <code>nil</code> if it represents the <code>Free</code> crop.
@property (nonatomic, readonly, strong) PESDKCropAspect * _Nullable cropAspect;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Whether this crop aspect can be rotated.
@property (nonatomic, readonly) BOOL rotatable;
/// When <code>true</code>, tapping this menu item causes the transform to be reset.
@property (nonatomic, readonly) BOOL resetsTransform;
/// Creates a new crop aspect menu item for the given crop aspect.
/// \param cropAspect The crop aspect that this menu item represents.
///
- (nonnull instancetype)initWithCropAspect:(PESDKCropAspect * _Nonnull)cropAspect OBJC_DESIGNATED_INITIALIZER;
/// Creates a new crop aspect menu item with the given title and no associated crop aspect.
/// \param title The title of this menu item.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title;
/// Creates the reset item.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCropAspectMenuItem * _Nonnull resetItem;)
+ (PESDKCropAspectMenuItem * _Nonnull)resetItem SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>CropHandleView</code> represents the interactive, draggable part of a crop rect.
SWIFT_CLASS_NAMED("CropHandleView")
@interface PESDKCropHandleView : UIView
/// Whether the handle view is at the top.
@property (nonatomic, readonly) BOOL isTop;
/// Whether the handle view is on the left.
@property (nonatomic, readonly) BOOL isLeft;
/// Whether the handle view is on the right.
@property (nonatomic, readonly) BOOL isRight;
/// Whether the handle view is at the bottom.
@property (nonatomic, readonly) BOOL isBottom;
/// Whether the handle view is a corner.
@property (nonatomic, readonly) BOOL isCorner;
/// Whether the handle view is lateral.
@property (nonatomic, readonly) BOOL isLateral;
/// Whether the line weight for the handle is heavy to visualize interaction.
@property (nonatomic) BOOL isLineWeightHeavy;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>CropMaskView</code> is a view that blurs the content behind it.
SWIFT_CLASS_NAMED("CropMaskView")
@interface PESDKCropMaskView : UIView
/// The underlying <code>UIVisualEffectView</code>.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull effectView;
/// The <code>UIVisualEffect</code> that will be applied to the <code>effectView</code>.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIVisualEffect * _Nullable effect;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>CropOverlayView</code> is added above the <code>CropAndStraightenView</code> to display the UI elements to
/// adjust the crop rect and hosts the mask views to dim the content that is outside the crop rect.
SWIFT_CLASS_NAMED("CropOverlayView")
@interface PESDKCropOverlayView : UIView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Whether the masked content is currently visible.
@property (nonatomic) BOOL isMaskedContentVisible;
/// Hides or shows the masked content.
/// \param visible Whether the masked content should be visible.
///
/// \param animated Whether to animate the change.
///
- (void)setMaskedContentVisible:(BOOL)visible animated:(BOOL)animated;
/// The frame of the crop rect.
@property (nonatomic) CGRect cropRect;
/// Whether the crop grid is currently visible.
@property (nonatomic) BOOL isCropGridVisible;
/// Hides or shows the crop grid.
/// \param visible Whether the crop grid should be visible.
///
/// \param animated Whether to animate the change.
///
- (void)setCropGridVisible:(BOOL)visible animated:(BOOL)animated;
/// Whether the straighten grid is currently visible.
@property (nonatomic) BOOL isStraightenGridVisible;
/// Hides or shows the straighten grid.
/// \param visible Whether the straighten grid should be visible.
///
/// \param animated Whether to animate the change.
///
- (void)setStraightenGridVisible:(BOOL)visible animated:(BOOL)animated;
@end


/// This class provides our own implementation of adjustment filters.
/// Using these we get more consistant results across the several platforms.
SWIFT_CLASS_NAMED("CustomAdjustmentsFilter")
@interface PESDKCustomAdjustmentsFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The brightness value.
@property (nonatomic, strong) NSNumber * _Nullable inputBrightness;
/// The contrast value.
@property (nonatomic, strong) NSNumber * _Nullable inputContrast;
/// The saturation value.
@property (nonatomic, strong) NSNumber * _Nullable inputSaturation;
/// The shadows value.
@property (nonatomic, strong) NSNumber * _Nullable inputShadows;
/// The highlights value.
@property (nonatomic, strong) NSNumber * _Nullable inputHighlights;
/// The exposure value.
@property (nonatomic, strong) NSNumber * _Nullable inputExposure;
/// The gamma value.
@property (nonatomic, strong) NSNumber * _Nullable inputGamma;
/// The blacks value.
@property (nonatomic, strong) NSNumber * _Nullable inputBlacks;
/// The whites value.
@property (nonatomic, strong) NSNumber * _Nullable inputWhites;
/// Returns an image with the applied changes.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKFrameImageGroup;
enum FrameLayoutMode : NSInteger;

/// The configuration for the build engine.
SWIFT_CLASS_NAMED("CustomPatchConfiguration")
@interface PESDKCustomPatchConfiguration : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The top image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable topImageGroup;
/// The left image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable leftImageGroup;
/// The bottom image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable bottomImageGroup;
/// The right image group.
@property (nonatomic, strong) PESDKFrameImageGroup * _Nullable rightImageGroup;
/// The layout mode.
@property (nonatomic) enum FrameLayoutMode layoutMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Every frame builder must implement this protocol.
SWIFT_PROTOCOL_NAMED("FrameBuilder")
@protocol PESDKFrameBuilderProtocol
/// Builds an asset following the configuration settings, for the chosen size.
/// \param size The desired size of the output image.
///
/// \param relativeScale The scale of the frame, relative the minimum of width and height.
///
/// \param completion A completion block that gets the resulting image as parameter.
///
- (void)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
@end


/// A framebuilder for custom patches.
/// Each patch consists of four groups. There are two basic layouts.
/// The first one places the top and bottom group above the full width of the image,
/// and the left and right group in between. The second layout works the other way around.
SWIFT_CLASS_NAMED("CustomPatchFrameBuilder")
@interface PESDKCustomPatchFrameBuilder : NSObject <PESDKFrameBuilderProtocol>
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns a newly allocated instance of <code>CustomPatchFrameBuilder</code>.
/// \param configuration The configutation to use.
///
- (nonnull instancetype)initWithConfiguration:(PESDKCustomPatchConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Builds an asset following the configuration settings, for the chosen size.
/// \param size The desired size of the output image.
///
/// \param relativeScale The scale of the frame, relative the minimum of width and height.
///
///
/// returns:
/// The resulting asset.
- (void)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides the methods to generate the dynamic frame-builders provided by the SDK.
SWIFT_CLASS_NAMED("DefaultDynamicFrames")
@interface PESDKDefaultDynamicFrames : NSObject
/// Returns the builder for the ‘imgly_frame_art_decor’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull artDecorFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)artDecorFrameBuilder SWIFT_WARN_UNUSED_RESULT;
/// Returns the builder for the ‘imgly_frame_wood_passepartout’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull woodPassepartoutFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)woodPassepartoutFrameBuilder SWIFT_WARN_UNUSED_RESULT;
/// Returns the builder for the ‘imgly_frame_black_passepartout’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull blackPassepartoutFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)blackPassepartoutFrameBuilder SWIFT_WARN_UNUSED_RESULT;
/// Returns the builder for the ‘imgly_frame_dia’ frame.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKCustomPatchFrameBuilder * _Nonnull diaFrameBuilder;)
+ (PESDKCustomPatchFrameBuilder * _Nonnull)diaFrameBuilder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The logger is used by the SDK, to promote import informations.
/// A client could use his own logger to log the messages to a server or
/// something alike.
SWIFT_PROTOCOL_NAMED("LoggerProtocol")
@protocol PESDKLoggerProtocol
/// Logs an error.
/// \param message A message.
///
- (void)error:(NSString * _Nonnull)message;
/// Logs a warning.
/// \param message A message.
///
- (void)warn:(NSString * _Nonnull)message;
/// Logs an info level message.
/// \param message A message.
///
- (void)info:(NSString * _Nonnull)message;
/// Logs a debug level message.
/// \param message A message.
///
- (void)debug:(NSString * _Nonnull)message;
@end


/// The default logger provided by the SDK. It will log into the Xcode console. It will use
/// <code>print</code> for iOS < 10.0 and os_log for iOS >= 10.0.
SWIFT_CLASS_NAMED("DefaultLogger")
@interface PESDKDefaultLogger : NSObject <PESDKLoggerProtocol>
/// Logs an error.
/// \param message A message.
///
- (void)error:(NSString * _Nonnull)message;
/// Logs a warning.
/// \param message A message.
///
- (void)warn:(NSString * _Nonnull)message;
/// Logs an info level message.
/// \param message A message.
///
- (void)info:(NSString * _Nonnull)message;
/// Logs a debug level message.
/// \param message A message.
///
- (void)debug:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// To use a custom progress HUD when saving a photo or while downloading stickers etc., your
/// progress view must implement this protocol. Please note that your custom progress view should
/// disable user interaction in all parts of the editor. Changing state while the progress view
/// is visible can cause unexpected behavior.
SWIFT_PROTOCOL_NAMED("ProgressView")
@protocol PESDKProgressView
/// Displays the progress HUD with the given message.
/// \param message The message to display in the progress HUD.
///
- (void)showWithMessage:(NSString * _Nonnull)message;
/// Hides the progress HUD.
- (void)hide;
@optional
/// Changes the progress on the HUD.
/// \param value Progress from 0 to 1.
///
- (void)setProgress:(double)value;
/// Displays the progress HUD with the given message, cancel text, and cancel handler.
/// \param message The message to display in the progress HUD.
///
/// \param cancelText Title of the cancel button.
///
/// \param cancelHandler Cancel handler that cancels the current action in progress.
///
- (void)showWithMessage:(NSString * _Nonnull)message cancelText:(NSString * _Nonnull)cancelText cancelHandler:(void (^ _Nonnull)(void))cancelHandler;
@end


/// A <code>ProgressView</code> is an activity indicator that is shown on top of all other views in a HUD style
/// and temporarily blocks all user interaction with other views.
SWIFT_CLASS_NAMED("DefaultProgressView")
@interface PESDKDefaultProgressView : NSObject <PESDKProgressView>
/// The main container view of the progress view.
@property (nonatomic, readonly, strong) UIView * _Nonnull overlayView;
/// The background view that is being animated in.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundView;
/// The image view that holds the spinner.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The label that contains the loading message.
@property (nonatomic, readonly, strong) UILabel * _Nonnull label;
/// The cancel button that is only shown in case of showing with cancel callback.
@property (nonatomic, readonly, strong) PESDKCancelButton * _Nonnull cancelButton;
/// The duration of one rotation of the spinner.
@property (nonatomic) double animationDuration;
/// A shared instance for convenience.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKDefaultProgressView * _Nonnull sharedView;)
+ (PESDKDefaultProgressView * _Nonnull)sharedView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Presents the activity indicator with the given message.
/// \param message The message to present.
///
- (void)showWithMessage:(NSString * _Nonnull)message;
/// Presents a cancelable activity indicator with the given message.
/// \param message The message to present.
///
/// \param cancelText Cancel button title.
///
/// \param cancelHandler Cancel button callback that triggers on button press.
///
- (void)showWithMessage:(NSString * _Nonnull)message cancelText:(NSString * _Nonnull)cancelText cancelHandler:(void (^ _Nonnull)(void))cancelHandler;
/// Sets the percentage on the ProgressView.
/// \param value Progress to be shown from 0 to 1.
///
- (void)setProgress:(double)value;
/// Hides the activity indicator.
- (void)hide;
@end

@class PESDKToolbarButton;

/// A <code>ToolbarItem</code> hosts views which are displayed in the <code>toolbar</code> of a <code>ToolbarController</code>.
/// If the toolbar controller is embedded into an <code>UINavigationController</code>, those views are added
/// to the navigation controller’s navigation bar.
SWIFT_CLASS_NAMED("ToolbarItem")
@interface PESDKToolbarItem : NSObject
/// The title view is displayed in the center of the toolbar or navigation bar.
@property (nonatomic, strong) UIView * _Nullable titleView;
/// The leading button is displayed on the left side of the toolbar or navigation bar in a LTR
/// environment and on the right side of the toolbar or navigation bar in a RTL environment.
@property (nonatomic, strong) PESDKToolbarButton * _Nullable leadingButton;
/// The trailing button is displayed on the right side of the toolbar or navigation bar in a LTR
/// environment and on the left side of the toolbar or navigation bar in a RTL environment.
@property (nonatomic, strong) PESDKToolbarButton * _Nullable trailingButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKLabel;

/// A <code>DefaultToolbarItem</code> is a toolbar item with a label in the center and a default discard
/// button on the left and apply button on the right. It is used in most tool controllers.
SWIFT_CLASS_NAMED("DefaultToolbarItem")
@interface PESDKDefaultToolbarItem : PESDKToolbarItem
/// The title label of the item.
@property (nonatomic, strong) PESDKLabel * _Nonnull titleLabel;
/// The default discard button on the leading side.
@property (nonatomic, strong) PESDKToolbarButton * _Nonnull discardButton;
/// The default apply button on the trailing side.
@property (nonatomic, strong) PESDKToolbarButton * _Nonnull applyButton;
/// :nodoc:
@property (nonatomic, strong) UIView * _Nullable titleView;
/// :nodoc:
@property (nonatomic, strong) PESDKToolbarButton * _Nullable leadingButton;
/// :nodoc:
@property (nonatomic, strong) PESDKToolbarButton * _Nullable trailingButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKPhotoRepresentation;

/// Contains the results of a deserialization.
SWIFT_CLASS_NAMED("DeserializationResult")
@interface PESDKDeserializationResult : NSObject
/// A photo that may have been serialized within the settings file.
@property (nonatomic, readonly, strong) id <PESDKPhotoRepresentation> _Nullable photo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKDeserializationResult (SWIFT_EXTENSION(ImglyKit))
/// The deserialized model or nil, if deserialization failed.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nullable model;
@end


/// Wrapper class that manages deserialization of settings files and delegates
/// work to the different implementations for each major version.
SWIFT_CLASS_NAMED("Deserializer")
@interface PESDKDeserializer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface PESDKDeserializer (SWIFT_EXTENSION(ImglyKit))
/// Deserializes the settings file contained in the given data.
/// If the deserialized data contains embedded personal assets they will be added to <code>AssetCatalog.shared</code>.
/// \param data The JSON settings.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `deserializeWithData:assetCatalog:` instead.");
/// Deserializes the settings file contained in the given data.
/// \param data The JSON settings.
///
/// \param assetCatalog If the deserialized data contains embedded personal assets they will be added to this <code>AssetCatalog</code>.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog SWIFT_WARN_UNUSED_RESULT;
/// Deserializes the settings file contained in the given data.
/// If the deserialized data contains embedded personal assets they will be added to <code>AssetCatalog.shared</code>.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `deserializeWithData:imageDimensions:assetCatalog:` instead.");
/// Deserializes the settings file contained in the given data.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
/// \param assetCatalog If the deserialized data contains embedded personal assets they will be added to this <code>AssetCatalog</code>.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog SWIFT_WARN_UNUSED_RESULT;
/// Deserializes the settings file contained in the given data.
/// If the deserialized data contains embedded personal assets they will be added to <code>AssetCatalog.shared</code>.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
/// \param existingModel If an existing model is given, only values present in the serialized settings
/// will be updated. This allows applying templates during editing.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions existingModel:(PESDKPhotoEditModel * _Nonnull)existingModel SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `deserializeWithData:imageDimensions:existingModel:assetCatalog:` instead.");
/// Deserializes the settings file contained in the given data.
/// \param data The JSON settings.
///
/// \param imageDimensions Pass an image size to deserialize according to it’s aspect ratio.
/// Otherwise the size encoded in the settings will be used. If no dimensions are passed
/// and none are encoded, deserialization will fail.
///
/// \param existingModel If an existing model is given, only values present in the serialized settings
/// will be updated. This allows applying templates during editing.
///
/// \param assetCatalog If the deserialized data contains embedded personal assets they will be added to this <code>AssetCatalog</code>.
///
///
/// returns:
/// A <code>DeserializationResult</code> object.
+ (PESDKDeserializationResult * _Nonnull)deserializeWithData:(NSData * _Nonnull)data imageDimensions:(CGSize)imageDimensions existingModel:(PESDKPhotoEditModel * _Nonnull)existingModel assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog SWIFT_WARN_UNUSED_RESULT;
@end


/// Used to determine device orientation even if orientation lock is active.
SWIFT_CLASS_NAMED("DeviceOrientationController")
@interface PESDKDeviceOrientationController : NSObject
/// Starts to observe the accelerometer to update the capture video orientation.
/// This needs to be done, to capture with the correct device orientation.
- (void)start;
/// Stops observing the acceleronmenter.
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>Label</code> is a subclass of <code>UILabel</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("Label")
@interface PESDKLabel : UILabel
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// This property wraps <code>textColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
@end


/// A <code>DimmedLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("DimmedLabel")
@interface PESDKDimmedLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>DimmingView</code> is a subclass of <code>UIView</code>, which allows to restrict appearance proxy calls
/// to a subset of all views that are instances of this class.
SWIFT_CLASS_NAMED("DimmingView")
@interface PESDKDimmingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A concrete <code>Effect</code> that creates a duotone look based on a two-color gradient map applied to the
/// input after grayscale conversion.
SWIFT_CLASS_NAMED("DuoToneEffect")
@interface PESDKDuoToneEffect : PESDKEffect
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The color that is mapped to light colors.
@property (nonatomic, readonly, strong) UIColor * _Nullable lightColor;
/// The color that is mapped to dark colors.
@property (nonatomic, readonly, strong) UIColor * _Nullable darkColor;
/// Creates an effect for duotone looks.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lightColor The color that is mapped to light colors.
///
/// \param darkColor The color that is mapped to dark colors.
///
/// \param displayName The name that is displayed to the user.
///
///
/// returns:
/// A newly initialized <code>DuoToneEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lightColor:(UIColor * _Nullable)lightColor darkColor:(UIColor * _Nullable)darkColor displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>CIFilter</code> object.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides a general duotone filter.
SWIFT_CLASS_NAMED("DuoToneFilter")
@interface PESDKDuoToneFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The effect intensity in range.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The light duotone color.
@property (nonatomic, strong) UIColor * _Nullable inputLightColor;
/// The dark duotone color.
@property (nonatomic, strong) UIColor * _Nullable inputDarkColor;
/// Returns an image with the applied changes.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKDurationToolControllerOptionsBuilder;

/// Options for configuring a <code>DurationToolController</code>.
SWIFT_CLASS_NAMED("DurationToolControllerOptions")
@interface PESDKDurationToolControllerOptions : PESDKToolControllerOptions
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>DurationToolControllerOptions</code> using the given builder.
/// \param durationBuilder An instance of <code>DurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>DurationToolControllerOptionsBuilder</code> for <code>DurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("DurationToolControllerOptionsBuilder")
@interface PESDKDurationToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>DurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param durationOptions A <code>DurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end




/// Handles the display of <code>EffectMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("EffectListSectionController")
@interface PESDKEffectListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FilterToolController</code>.
SWIFT_CLASS_NAMED("EffectMenuItem")
@interface PESDKEffectMenuItem : NSObject <PESDKMenuItem>
/// The <code>Effect</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKEffect * _Nonnull effect;
/// The thumbnail of the effect.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// Creates a new <code>EffectMenuItem</code> for the given effect.
/// \param effect The <code>Effect</code> that this menu item represents.
///
/// \param thumbnail A thumbnail representing this effect.
///
- (nonnull instancetype)initWithEffect:(PESDKEffect * _Nonnull)effect thumbnail:(UIImage * _Nullable)thumbnail OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>EffectThumbnailRenderer</code> can be used to generate thumbnails of a given input image for
/// multiple effects.
SWIFT_CLASS_NAMED("EffectThumbnailRenderer")
@interface PESDKEffectThumbnailRenderer : NSObject
/// The input image that will be used to generate the thumbnails.
@property (nonatomic, readonly, strong) UIImage * _Nonnull inputImage;
/// Creates a effect thumbnail renderer with the given input image.
/// \param inputImage The input image that will be used to generate the thumbnails.
///
///
/// returns:
/// A newly initialized <code>EffectThumbnailRenderer</code> object.
- (nonnull instancetype)initWithInputImage:(UIImage * _Nonnull)inputImage OBJC_DESIGNATED_INITIALIZER;
/// Generates thumbnails for multiple effects of the given size.
/// \param effects The effects that should be used to generate thumbnails.
///
/// \param size The size of the thumbnails.
///
/// \param singleCompletion This handler will be called for each thumbnail that has been created successfully.
///
- (void)generateThumbnailsForEffects:(NSArray<PESDKEffect *> * _Nonnull)effects ofSize:(CGSize)size singleCompletion:(void (^ _Nonnull)(UIImage * _Nonnull, PESDKEffect * _Nonnull))singleCompletion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol PESDKFilterEditControllerDelegate;

/// A <code>FilterEditController</code> can update the applied filter and the filter’s intensity using a
/// contained <code>SliderEditController</code>. It is supposed to be contained in a tool controller and is
/// added above a <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("FilterEditController")
@interface PESDKFilterEditController : PESDKViewController
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKFilterEditControllerDelegate> _Nullable delegate;
/// The <code>Effect</code> that is currently applied.
@property (nonatomic, strong) PESDKEffect * _Nullable effect;
/// Whether to show the filter intensity slider.
@property (nonatomic) BOOL showFilterIntensitySlider;
/// The initial filter intensity to apply when setting a new effect.
@property (nonatomic) CGFloat initialFilterIntensity;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// Updates the currently set effect. If <code>nil</code> is passed, the slider is hidden, otherwise
/// it is shown.
/// \param effect The effect to apply, if any.
///
/// \param animated Whether to animate the showing or hiding of the slider.
///
- (void)setEffect:(PESDKEffect * _Nullable)effect animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKFilterEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKFilterEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end



/// The <code>FilterEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>FilterEditController</code>.
SWIFT_PROTOCOL_NAMED("FilterEditControllerDelegate")
@protocol PESDKFilterEditControllerDelegate
/// Asks the delegate for the scroll view to which zoom events of the filter edit controller should
/// be forwarded.
/// \param filterEditController The filter edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)filterEditControllerTargetScrollView:(PESDKFilterEditController * _Nonnull)filterEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param filterEditController The filter edit controller that changed the photo edit model.
///
- (void)filterEditControllerDidChangePhotoEditModel:(PESDKFilterEditController * _Nonnull)filterEditController;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param filterEditController The filter edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)filterEditController:(PESDKFilterEditController * _Nonnull)filterEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end


/// A <code>FilterSelectionController</code> contains everything that is needed to display a list of available filters.
SWIFT_CLASS_NAMED("FilterSelectionController")
@interface PESDKFilterSelectionController : NSObject
/// The collection view that presents all available filters.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/// This block is called when a new effect is selected.
@property (nonatomic, copy) void (^ _Nullable selectedBlock)(PESDKEffect * _Nonnull);
/// This block is used to determine the currently applied effect.
@property (nonatomic, copy) PESDKEffect * _Nullable (^ _Nullable activeEffectBlock)(void);
/// This block is used to configure the filter collection view cell.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKEffect * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nonnull instancetype)initWithConfiguration:(PESDKConfiguration * _Nonnull)configuration;
/// Creates a new instance of a <code>FilterSelectionController</code> using the given input image.
/// \param inputImage The input image that should be used to preview the filters.
///
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage;
/// Creates a new instance of a <code>FilterSelectionController</code> using the given input image and cell class.
/// \param inputImage The input image that should be used to preview the filters.
///
/// \param cellClass The type of cell that should be used.
///
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage cellClass:(SWIFT_METATYPE(PESDKMenuCollectionViewCell) _Nonnull)cellClass;
/// Creates a new instance of a <code>FilterSelectionController</code> using the given input image and cell class.
/// \param inputImage The input image that should be used to preview the filters.
///
/// \param cellClass The type of cell that should be used.
///
/// \param configuration A <code>Configuration</code> object.
///
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage cellClass:(SWIFT_METATYPE(PESDKMenuCollectionViewCell) _Nonnull)cellClass configuration:(PESDKConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Updates the cell selection based on the <code>activeEffectBlock</code>.
/// \param animated If <code>true</code> the selection will be animated.
///
- (void)updateSelectionWithAnimated:(BOOL)animated;
@end


@interface PESDKFilterSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKFilterSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface PESDKFilterSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>FilterToolController</code> is reponsible for displaying the UI to apply an effect filter to an image.
SWIFT_CLASS_NAMED("FilterToolController")
@interface PESDKFilterToolController : PESDKMenuToolController <PESDKFilterEditControllerDelegate>
/// The <code>FilterEditController</code> that is contained by this tool.
@property (nonatomic, readonly, strong) PESDKFilterEditController * _Nonnull filterEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)filterEditControllerDidChangePhotoEditModel:(PESDKFilterEditController * _Nonnull)filterEditController;
/// :nodoc:
- (UIScrollView * _Nullable)filterEditControllerTargetScrollView:(PESDKFilterEditController * _Nonnull)filterEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)filterEditController:(PESDKFilterEditController * _Nonnull)filterEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end


@class PESDKGroup;

/// Options for configuring a <code>FilterToolController</code>.
SWIFT_CLASS_NAMED("FilterToolControllerOptions")
@interface PESDKFilterToolControllerOptions : PESDKToolControllerOptions
/// This closure can be used to configure the filter intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the filter intensity slider’s container view.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the filter intensity slider. Defaults to true.
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;
/// The intensity that should be initialy applied to a filter when selecting it. Defaults to 100 %.
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
/// This closure is called every time the user selects a filter.
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectedClosure)(PESDKEffect * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Effect</code> will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the filter cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Effect</code> as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable filterCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the folder cells. The closure is called for
/// each folder cell and has the cell as a parameter.
@property (nonatomic, readonly, copy) void (^ _Nullable folderCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull);
/// This array represents the groups that filters are grouped in. A group can contain any filter
/// that is defined in <code>Effect.all</code>. Any filters that are not part of a group but defined in
/// <code>Effect.all</code> will appear as a top-level effect in front of any groups. If you do not want
/// to group any filters, simply set this to an empty array.
@property (nonatomic, readonly, copy) NSArray<PESDKGroup *> * _Nonnull filterGroups;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new <code>FilterToolControllerOptions</code> using the given builder.
/// \param builder A <code>FilterToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKFilterToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FilterToolControllerOptionsBuilder</code> for <code>FilterToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FilterToolControllerOptionsBuilder")
@interface PESDKFilterToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure can be used to configure the filter intensity slider.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the filter intensity slider’s container view.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the filter intensity slider. Defaults to true.
@property (nonatomic) BOOL showFilterIntensitySlider;
/// The intensity that should be initialy applied to a filter when selecting it. Defaults to 100 %.
@property (nonatomic) CGFloat initialFilterIntensity;
/// This closure is called every time the user selects a filter.
@property (nonatomic, copy) void (^ _Nullable filterSelectedClosure)(PESDKEffect * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Effect</code> will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable filterIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the filter cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Effect</code> as parameters.
@property (nonatomic, copy) void (^ _Nullable filterCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKEffect * _Nonnull);
/// This closure allows further configuration of the folder cells. The closure is called for
/// each folder cell and has the cell as a parameter.
@property (nonatomic, copy) void (^ _Nullable folderCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull);
/// This array represents the groups that filters are grouped in. A group can contain any filter
/// that is defined in <code>Effect.all</code>. Any filters that are not part of a group but defined in
/// <code>Effect.all</code> will appear as a top-level effect in front of any groups. If you do not want
/// to group any filters, simply set this to an empty array.
@property (nonatomic, copy) NSArray<PESDKGroup *> * _Nonnull filterGroups;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>FilterToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>FilterToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKFilterToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

@class PESDKLinearGradientView;
enum PESDKFocusMode : NSInteger;
@protocol PESDKFocusEditControllerDelegate;

/// A <code>FocusEditController</code> displays controls to update a linear or radial blur. It is supposed to
/// be contained in a tool controller and be presented above a <code>PhotoEditPreviewController</code>. It
/// can also contain a <code>SliderEditController</code> to present a slider to control the blur intensity.
SWIFT_CLASS_NAMED("FocusEditController")
@interface PESDKFocusEditController : PESDKViewController
/// The <code>BoxGradientView</code> to update the linear blur.
@property (nonatomic, readonly, strong) PESDKBoxGradientView * _Nonnull boxGradientView;
/// The <code>CircleGradientView</code> to update the radial blur.
@property (nonatomic, readonly, strong) PESDKCircleGradientView * _Nonnull circleGradientView;
/// The <code>LinearGradientView</code> to update the linear blur.
@property (nonatomic, readonly, strong) PESDKLinearGradientView * _Nonnull linearGradientView;
/// The currently active <code>FocusMode</code>. Based on this the correct gradient view is shown.
@property (nonatomic) enum PESDKFocusMode focusMode;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKFocusEditControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// Changes the active focus mode and displays the correct gradient view.
/// \param focusMode The focus mode to use.
///
/// \param animated Whether to animate the layout change.
///
- (void)setFocusMode:(enum PESDKFocusMode)focusMode animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKFocusEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKFocusEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end



/// The <code>FocusEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>FocusEditControllerDelegate</code>.
SWIFT_PROTOCOL_NAMED("FocusEditControllerDelegate")
@protocol PESDKFocusEditControllerDelegate
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param focusEditController The focus edit controller that changed the photo edit model.
///
- (void)focusEditControllerDidChangePhotoEditModel:(PESDKFocusEditController * _Nonnull)focusEditController;
/// Asks the delegate for the preview view.
/// \param focusEditController The focus edit controller asking for the preview view.
///
///
/// returns:
/// The preview view.
- (UIView * _Nullable)focusEditControllerPreviewView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the scroll view to which zoom events of the focus edit controller should
/// be forwarded.
/// \param focusEditController The focus edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)focusEditControllerTargetScrollView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the untransformed image size.
/// \param focusEditController The foucs edit controller asking for the size.
///
///
/// returns:
/// The untransformed image size.
- (CGSize)focusEditControllerUntransformedImageSize:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param focusEditController The focus edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)focusEditController:(PESDKFocusEditController * _Nonnull)focusEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end



@interface PESDKFocusGradientView (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>FocusMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FocusListSectionController")
@interface PESDKFocusListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FocusToolController</code>.
SWIFT_CLASS_NAMED("FocusMenuItem")
@interface PESDKFocusMenuItem : NSObject <PESDKMenuItem>
/// The <code>FocusMode</code> that this menu item represents.
@property (nonatomic, readonly) enum PESDKFocusMode focusMode;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new focus menu item for the given focus mode.
/// \param focusMode The focus mode that this menu item represents.
///
- (nullable instancetype)initWithFocusMode:(enum PESDKFocusMode)focusMode;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the mode of focus that should be used in an image.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKFocusMode, "FocusMode", open) {
/// Focus should be disabled.
  PESDKFocusModeOff = 0,
/// A radial focus should be used.
  PESDKFocusModeRadial = 1,
/// A mirrored focus should be used.
  PESDKFocusModeMirrored = 2,
/// A linear focus should be used.
  PESDKFocusModeLinear = 3,
/// A gaussian focus should be used.
  PESDKFocusModeGaussian = 4,
};


/// The tool controller to edit the focus. It contains a menu with options to select the type of
/// blur and a <code>FocusEditController</code> to update the blur.
SWIFT_CLASS_NAMED("FocusToolController")
@interface PESDKFocusToolController : PESDKMenuToolController <PESDKFocusEditControllerDelegate>
/// The contained <code>FocusEditController</code>.
@property (nonatomic, readonly, strong) PESDKFocusEditController * _Nonnull focusEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)focusEditControllerDidChangePhotoEditModel:(PESDKFocusEditController * _Nonnull)focusEditController;
/// :nodoc:
- (UIView * _Nullable)focusEditControllerPreviewView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)focusEditControllerPreviewContainer:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)focusEditControllerDidSlide:(PESDKFocusEditController * _Nonnull)focusEditController toValue:(CGFloat)value;
/// :nodoc:
- (UIScrollView * _Nullable)focusEditControllerTargetScrollView:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
- (CGSize)focusEditControllerUntransformedImageSize:(PESDKFocusEditController * _Nonnull)focusEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)focusEditController:(PESDKFocusEditController * _Nonnull)focusEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end



/// Options for configuring a <code>FocusToolController</code>.
SWIFT_CLASS_NAMED("FocusToolControllerOptions")
@interface PESDKFocusToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the focus mode buttons. The closure is called for
/// each focus mode button and has the button and its corresponding focus mode as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable focusModeButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum PESDKFocusMode);
/// This closure is called when the user selects a focus mode.
@property (nonatomic, readonly, copy) void (^ _Nullable focusModeSelectedClosure)(enum PESDKFocusMode);
/// This closure can be used to configure the slider.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure is called whenever the slider changes its value. The instance of <code>Slider</code> and
/// the active focus mode are passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderUpdatedValueClosure)(PESDKSlider * _Nonnull, enum PESDKFocusMode);
/// This closure can be used to configure the circle gradient view.
@property (nonatomic, readonly, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(PESDKCircleGradientView * _Nonnull);
/// This closure can be used to configure the box gradient view.
@property (nonatomic, readonly, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(PESDKBoxGradientView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>FocusToolControllerOptions</code> using the given builder.
/// \param builder A <code>FocusToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKFocusToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FocusToolControllerOptionsBuilder</code> for <code>FocusToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FocusToolControllerOptionsBuilder")
@interface PESDKFocusToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the focus mode buttons. The closure is called for
/// each focus mode button and has the button and its corresponding focus mode as parameters.
@property (nonatomic, copy) void (^ _Nullable focusModeButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum PESDKFocusMode);
/// This closure is called when the user selects a focus mode.
@property (nonatomic, copy) void (^ _Nullable focusModeSelectedClosure)(enum PESDKFocusMode);
/// This closure can be used to configure the slider.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure is called whenever the slider changes its value. The instance of <code>Slider</code> and
/// the active focus mode are passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderUpdatedValueClosure)(PESDKSlider * _Nonnull, enum PESDKFocusMode);
/// This closure can be used to configure the circle gradient view.
@property (nonatomic, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(PESDKCircleGradientView * _Nonnull);
/// This closure can be used to configure the box gradient view.
@property (nonatomic, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(PESDKBoxGradientView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKFocusToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>PESDKFocusMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedFocusModes</code> with the corresponding <code>PESDKFocusMode</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFocusModes;
@end


/// Handles the display of <code>FolderMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FolderListSectionController")
@interface PESDKFolderListSectionController : PESDKMenuListSectionController
/// :nodoc:
@property (nonatomic, readonly) NSInteger numberOfItems;
/// :nodoc:
- (CGSize)sizeForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didSelectItemAt:(NSInteger)index;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used to group multiple assets.
SWIFT_CLASS_NAMED("FolderMenuItem")
@interface PESDKFolderMenuItem : NSObject <PESDKMenuItem>
/// The identifier that this menu item represents.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The thumbnail image of this menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// The accessibility identifier of this menu item.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityIdentifier;
/// The child menu items that this group contains.
@property (nonatomic, readonly, copy) NSArray<id <PESDKMenuItem>> * _Nonnull items;
/// Creates a new <code>FolderMenuItem</code> object.
/// \param identifier The identifier that this menu item represents.
///
/// \param title The title of this menu item.
///
/// \param thumbnail The thumbnail image of this menu item.
///
/// \param accessibilityIdentifier The accessibility identifier of this menu item.
///
/// \param items The child menu items that this group contains.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title thumbnail:(UIImage * _Nullable)thumbnail accessibilityIdentifier:(NSString * _Nullable)accessibilityIdentifier items:(NSArray<id <PESDKMenuItem>> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Font</code> represents meta information about a font, that should be loaded into the SDK.
/// If a font has a long name, the <code>displayName</code> can be used to substitude it within the UI.
/// The font name is used by iOS to identify the font. This is usualy the filename of the font.
/// But it can be different. To be sure use the font in a sandbox project, and get its ‘fontName’ attribute.
SWIFT_CLASS_NAMED("Font")
@interface PESDKFont : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL to the font, e.g. URL within a bundle. This is not needed when using
/// system fonts.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Some font names are long and rather ugly. In that case it is possible to change the displayed
/// name of the font with this property.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// The name of the font as registered in the font manager.
@property (nonatomic, copy) NSString * _Nonnull fontName;
/// A unique identifier, that is used during (de)serialization to identify a font between platforms.
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// Creates a font from the given font url, with the display name.
/// The font name will be used as argument for the <code>UIFont</code> initializer,
/// therefor the name does not necessarily need to equal the filename,
/// but rather the font family. Please refer to the official Apple documentation for details.
/// If you have trouble loading a font, please set up a test project,
/// and try to load the font using <code>UIFont</code>, or use the interface builder to load the font,
/// and print out the <code>fontName</code>.
/// \param url The URL to the font, e.g. URL within a bundle.
///
/// \param displayName The name for the font that is used within the UI.
///
/// \param fontName The actual name of the font.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url displayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Creates a font with the given name and display name.
/// This initializer should be used when adding system fonts.
/// The font name will be used as argument for the UIFont initializer.
/// \param displayName The name for the font that is used within the UI.
///
/// \param fontName The actual name of the font.
///
- (nonnull instancetype)initWithDisplayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Provides functions to import fonts added as resources. It also registers them,
/// so that the application can load them like any other pre-installed font.
SWIFT_CLASS_NAMED("FontImporter")
@interface PESDKFontImporter : NSObject
/// This array contains all available fonts.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKFont *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.fonts` of your `Configuration` object instead.");)
+ (NSArray<PESDKFont *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKFont *> * _Nonnull)newValue;
/// Returns the first font with the given identifier, if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the font to look for.
///
///
/// returns:
/// The font with the given identifier or <code>nil</code>.
+ (PESDKFont * _Nullable)fontWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.font(withIdentifier:)` of your `Configuration` object instead.");
/// Creates the default fonts that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKFont *> * _Nonnull defaultItems;)
+ (NSArray<PESDKFont *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Handles the display of <code>FontMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FontListSectionController")
@interface PESDKFontListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextFontToolController</code>.
SWIFT_CLASS_NAMED("FontMenuItem")
@interface PESDKFontMenuItem : NSObject <PESDKMenuItem>
/// The <code>Font</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKFont * _Nonnull font;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Creates a new font menu item for the given font.
/// \param font The font that this menu item represents.
///
- (nonnull instancetype)initWithFont:(PESDKFont * _Nonnull)font;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKFontSelectorViewDelegate;

/// The <code>FontSelectorView</code> is a subclass of <code>UIScrollView</code> that presents a scrollable list of fonts.
SWIFT_CLASS_NAMED("FontSelectorView")
@interface PESDKFontSelectorView : UIScrollView
/// The receiver’s delegate.
/// <ul>
///   <li>
///     See: <code>FontSelectorViewDelegate</code>.
///   </li>
/// </ul>
@property (nonatomic, weak) id <PESDKFontSelectorViewDelegate> _Nullable selectorDelegate;
/// The text color for the fonts.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The text color for the font’s label.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/// The name of the currently selected font.
@property (nonatomic, copy) NSString * _Nullable selectedFontName;
/// The preview text.
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
- (void)layoutSubviews;
@end


/// The <code>FontSelectorViewDelegate</code> protocol defines methods that allow you to respond to the events
/// of an instance of <code>FontSelectorView</code>.
SWIFT_PROTOCOL_NAMED("FontSelectorViewDelegate")
@protocol PESDKFontSelectorViewDelegate
/// Called when a font was selected in the font selector view.
/// \param fontSelectorView The font selector view that the font was selected in.
///
/// \param fontName The name of the font that was selected.
///
- (void)fontSelectorView:(PESDKFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
@end

/// A force trim mode.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKForceTrimMode, "ForceTrimMode", open) {
/// Will always automatically present the composition tool or the trim tool
/// after opening the editor and force your users to change the length of the video(s).
/// The composition tool will only be used if it is included in your subscription and if it is included in the menu items
/// or if both the composition and trim tool are not included as menu items.
/// Otherwise, the trim tool is used if it is included in your subscription.
  PESDKForceTrimModeAlways = 0,
/// Will automatically present the composition or trim tool if needed.
/// Will only present:
/// <ul>
///   <li>
///     the composition tool, if your initial composition is longer than <code>TrimToolControllerOptions.maximumDuration</code> or shorter than <code>TrimToolControllerOptions.minimumDuration</code>, or
///   </li>
///   <li>
///     the trim tool, if your initial video is longer than <code>TrimToolControllerOptions.maximumDuration</code>. If the video is shorter than <code>TrimToolControllerOptions.minimumDuration</code> an alert
///     (see <code>TrimToolControllerOptions.videoTooShortConfirmationClosure</code>) is displayed as soon as the editor is opened and after dismissing the alert, the editor is closed.
///   </li>
/// </ul>
/// The composition tool will only be used if it is included in your subscription and if it is included in the menu items
/// or if both the composition and trim tool are not included as menu items.
/// Otherwise, the trim tool is used if it is included in your subscription.
  PESDKForceTrimModeIfNeeded = 1,
/// Will automatically trim the video to <code>TrimToolControllerOptions.maximumDuration</code> without opening any tool.
/// If the length of the initially loaded video(s) is shorter than <code>TrimToolControllerOptions.minimumDuration</code> and the user has the option to add more videos (because of composition),
/// an alert (see <code>CompositionToolControllerOptions.compositionTooShortConfirmationClosure</code>) will be shown when tapping the export button and after dismissing the alert, the composition tool will automatically open.
/// If no additional videos can be added, an alert (see <code>TrimToolControllerOptions.videoTooShortConfirmationClosure</code>) is displayed as soon as the editor is opened and after dismissing the alert, the editor is closed.
  PESDKForceTrimModeSilent = 2,
};


/// A <code>Frame</code> represents a unique frame, which can have multiple images for different aspect ratios.
/// The matching image for the current aspect ratio will be used automatically. Each frame neeeds at
/// least one image and one thumbnail image. If no thumbnail is provide, it is automatically generated.
SWIFT_CLASS_NAMED("Frame")
@interface PESDKFrame : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The amount by which the image should be inset when this frame is applied. The inset is
/// specified as a value relative to the smaller side of the image.
@property (nonatomic) UIEdgeInsets imageInsets;
/// The default scale of the frame. This specifies the frame’s width and is relative to the
/// shorter side of the untransformed image.
@property (nonatomic, readonly) CGFloat relativeScale;
/// The tolerance that is used to check if this frame
/// is a good match for a certain ratio.
@property (nonatomic, readonly) CGFloat tolerance;
/// This string is used to identify this frame. It must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// This indicates if a Frame is dynamic. A dynamic frame is composed of other images,
/// and therefore it can be adjusted to fit every ratio.
@property (nonatomic, readonly) BOOL isDynamic;
/// Instantiates a new <code>Frame</code>, built using the given frame builder.
/// Use this initializer for dynamic frames.
/// \param frameBuilder The builder that will build the frame.
///
/// \param relativeScale The relative scale of the frame. Relative to the shorter side of an image.
///
/// \param thumbnailURL A <code>URL</code> for the thumbnail asset.
///
- (nonnull instancetype)initWithFrameBuilder:(id <PESDKFrameBuilderProtocol> _Nonnull)frameBuilder relativeScale:(CGFloat)relativeScale thumbnailURL:(NSURL * _Nonnull)thumbnailURL identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>Frame</code>. Use this initializer for static frames.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier tolerance:(CGFloat)tolerance OBJC_DESIGNATED_INITIALIZER;
/// Adds an image for a given ratio to this frame.
/// \param imageURL The url for the frame’s full size image. This can be a file url or a remote
/// /    url.
///
/// \param thumbnailURL The url for the frame’s thumbnail image. This can be a file url or a
/// remote url.
///
/// \param ratio The ratio that this image should be used for.
///
- (void)addImage:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL forRatio:(CGFloat)ratio;
/// The image url for a given ratio.
/// \param ratio The ratio to get the image url for.
///
///
/// returns:
/// An image url or <code>nil</code>.
- (NSURL * _Nullable)imageURLForRatio:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// The mask image url for a given ratio.
/// \param ratio The ratio to get the image url for.
///
/// \param tolerance The tolerance that is used to pick the correct image based on the
/// aspect ratio.
///
///
/// returns:
/// An image url or <code>nil</code>.
- (NSURL * _Nullable)maskImageURLForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance SWIFT_WARN_UNUSED_RESULT;
/// Generates a frame asset for the given size, using a <code>FrameBuilder</code>.
/// \param size The desired size.
///
/// \param completion A completion block that is called with the generated asset.
///
- (void)imageForSize:(CGSize)size completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// Generates a frame asset for the given size and scale, using a <code>FrameBuilder</code>.
/// \param size The desired size.
///
/// \param relativeScale The width of the frame, relative to the shortest side of the untransformed
/// image.
///
/// \param completion A completion block that is called with the generated asset.
///
- (void)imageForSize:(CGSize)size relativeScale:(CGFloat)relativeScale completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// Generates a frame asset for the given ratio for a static (<code>isDynamic == false</code>) frame.
/// \param ratio The desired ratio.
///
/// \param completion A closure that is executed after the image has been generated.
///
- (void)staticImageForRatio:(CGFloat)ratio completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// This method generates a thumbnail of a dynamic frame.
/// After generation, the image is saved to the photo album.
/// \param size The desired size.
///
- (void)saveThumbnailToCameraRollForSize:(CGSize)size;
/// The thumbnail url for a given ratio.
/// \param ratio The ratio to get the thumbnail url for.
///
///
/// returns:
/// A thumbnail url or <code>nil</code>.
- (NSURL * _Nullable)thumbnailURLForRatio:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// Checks whether a frame has an image added for a given ratio.
/// \param ratio The ratio to check.
///
///
/// returns:
/// <code>true</code> if an image for this ratio was added, <code>false</code> otherwise.
- (BOOL)hasImageForRatio:(CGFloat)ratio SWIFT_WARN_UNUSED_RESULT;
/// The pool of frames that is available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKFrame *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.frames` of your `Configuration` object instead.");)
+ (NSArray<PESDKFrame *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKFrame *> * _Nonnull)newValue;
/// Returns the first frame with the given identifier if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the frame to look for.
///
///
/// returns:
/// The frame with the given identifier or <code>nil</code>.
+ (PESDKFrame * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.frame(withIdentifier:)` of your `Configuration` object instead.");
/// Creates the default frames that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKFrame *> * _Nonnull defaultItems;)
+ (NSArray<PESDKFrame *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The actions that can be used in an instance of <code>FrameOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, FrameAction, open) {
/// Replace the frame
  FrameActionReplace = 0,
/// Change the width of the frame
  FrameActionWidth = 1,
/// Change the opacity of the frame
  FrameActionOpacity = 2,
};

/// This enum is used during the builder to detmin the current phase.
typedef SWIFT_ENUM(NSInteger, FrameBuildMode, open) {
/// Used to indicate the horizontal phase.
  FrameBuildModeHorizontal = 0,
/// Used to indicate the vertical phase.
  FrameBuildModeVertical = 1,
};


@protocol PESDKTransformEditControllerDelegate;
@class UIRotationGestureRecognizer;
@class PESDKScalePicker;
@class CAGradientLayer;

/// A <code>TransformEditController</code> displays controls and provides gestures to edit the straighten
/// angle, crop rectangle and orientation of an image.
SWIFT_CLASS_NAMED("TransformEditController")
@interface PESDKTransformEditController : PESDKViewController
/// Whether or not controls (e.g. straighten angle picker, flip button, rotate button, crop handles)
/// should be shown. Default is <code>true</code>. This must be set before the view is loaded or it won’t
/// have any effect.
@property (nonatomic) BOOL showControls;
/// Whether or not the straighten angle can be set using a rotation gesture. Default is <code>false</code>.
/// This must be set before the view is loaded or it won’t have any effect.
@property (nonatomic) BOOL canRotateUsingGesture;
/// :nodoc:
@property (nonatomic, readonly) BOOL isModelChangeLocal;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKTransformEditControllerDelegate> _Nullable delegate;
/// The view that displays the image.
@property (nonatomic, readonly, strong) PESDKCropAndStraightenView * _Nonnull cropView;
/// The view that dims the content that is outside the crop rectangle.
@property (nonatomic, readonly, strong) PESDKCropOverlayView * _Nonnull cropOverlayView;
/// The canvas for the crop.
@property (nonatomic, readonly, strong) UIView * _Nonnull cropCanvasView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// :nodoc:
- (void)pesdk_willBecomeActiveTool;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)pesdk_didResignActiveTool;
/// The rotation recognizer that updates the straighten angle based on rotation gestures.
@property (nonatomic, readonly, strong) UIRotationGestureRecognizer * _Nullable rotationGestureRecognizer;
/// The container view for the scale picker.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull scalePickerContainerView;
/// The scale picker view.
@property (nonatomic, readonly, strong) PESDKScalePicker * _Nonnull scalePicker;
/// The button to flip the image.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull flipButton;
/// The button to rotate the image.
@property (nonatomic, readonly, strong) PESDKButton * _Nonnull rotateButton;
/// The gradient layer that is added above the scale picker.
@property (nonatomic, readonly, strong) CAGradientLayer * _Nonnull gradientLayer;
/// The currently active crop rectangle in view coordinates.
@property (nonatomic) CGRect viewCropRect;
/// Updates the crop rectangle in view and normalized image dimensions.
/// \param viewCropRect The crop rectangle in view dimensions.
///
/// \param normalizedImageRect The crop rectangle in normalized image dimensions.
///
/// \param animated Whether to animate this change.
///
- (void)setViewCropRect:(CGRect)viewCropRect normalizedImageRect:(CGRect)normalizedImageRect animated:(BOOL)animated;
/// The currently set straighten angle.
@property (nonatomic) CGFloat straightenAngle;
/// Updates the straighten angle.
/// \param straightenAngle The straighten angle.
///
/// \param animated Whether to animate this change.
///
/// \param completion A closure to execute after the angle changed.
///
- (void)setStraightenAngle:(CGFloat)straightenAngle animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// The currently set <code>CropAspect</code>.
@property (nonatomic, strong) PESDKCropAspect * _Nullable cropAspect;
/// Sets the crop aspect.
/// \param cropAspect The crop aspect or <code>nil</code> for a free transform.
///
/// \param animated Whether to animate this change.
///
- (void)setCropAspect:(PESDKCropAspect * _Nullable)cropAspect animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>FrameEditController</code> displays a <code>Frame</code> above the edited image and provides manipulation
/// options using rotate, pinch and pan gestures. It is supposed to be contained in a tool controller
/// and be presented above a <code>PhotoEditPreviewController</code>.
SWIFT_CLASS_NAMED("FrameEditController")
@interface PESDKFrameEditController : PESDKTransformEditController
/// Whether rotation is enabled. <code>true</code> by default.
@property (nonatomic) BOOL rotationEnabled;
/// The image view that displays the frame.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull frameImageView;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets the frame with the given image.
/// \param frame The frame to display.
///
/// \param image The image that belongs to the frame.
///
- (void)setFrame:(PESDKFrame * _Nullable)frame with:(UIImage * _Nullable)image;
/// :nodoc:
- (void)viewDidLoad;
@end

enum FrameTileMode : NSInteger;

/// This class represents a group of the images.
SWIFT_CLASS_NAMED("FrameImageGroup")
@interface PESDKFrameImageGroup : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The image placed at the start.
@property (nonatomic, strong) UIImage * _Nullable startImage;
/// The image placed in the middle.
@property (nonatomic, strong) UIImage * _Nullable midImage;
/// The image placed at the end.
@property (nonatomic, strong) UIImage * _Nullable endImage;
/// The url of the image placed at the start.
@property (nonatomic, readonly, copy) NSURL * _Nullable startImageURL;
/// The url of the image placed in the middle.
@property (nonatomic, readonly, copy) NSURL * _Nullable midImageURL;
/// The url of the image placed at the end.
@property (nonatomic, readonly, copy) NSURL * _Nullable endImageURL;
/// The tiling mode for the image in the middle.
@property (nonatomic) enum FrameTileMode midImageMode;
/// Creates a new instance of <code>FrameImageGroup</code> for the images at the given urls.
/// \param startImageURL The url of the image placed at the start.
///
/// \param midImageURL The url of the image placed in the middle.
///
/// \param endImageURL The url of the image placed at the end.
///
- (nonnull instancetype)initWithStartImageURL:(NSURL * _Nullable)startImageURL midImageURL:(NSURL * _Nonnull)midImageURL endImageURL:(NSURL * _Nullable)endImageURL OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>FrameImageGroup</code> with no images.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SpriteImageView</code> is used to display an image in a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("SpriteImageView")
@interface PESDKSpriteImageView : UIView
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// The image displayed in the image view.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Creates a new <code>SpriteImageView</code> that is identified by the given <code>UUID</code>.
/// \param uuid The <code>UUID</code> that identifies this view.
///
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)sizeToFit;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// A <code>FrameImageView</code> is used to display a <code>Frame</code> within a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("FrameImageView")
@interface PESDKFrameImageView : PESDKSpriteImageView
/// :nodoc:
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// Each patch consists of four groups. There are two basic layouts.
/// The first one places the top and bottom group above the full width of the image,
/// and the left and right group in between. The second layout works the other way around.
/// This enum determins, what groups will be placed ‘inside’.
typedef SWIFT_ENUM(NSInteger, FrameLayoutMode, open) {
/// Sets the horizontal groups inside.
  FrameLayoutModeHorizontalInside = 0,
/// Sets the vertical group inside.
  FrameLayoutModeVerticalInside = 1,
};


/// Handles the display of <code>FrameMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FrameListSectionController")
@interface PESDKFrameListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FrameToolController</code>.
SWIFT_CLASS_NAMED("FrameMenuItem")
@interface PESDKFrameMenuItem : NSObject <PESDKMenuItem>
/// The <code>Frame</code> that this menu item represents or <code>nil</code> if it represents the no frame option.
@property (nonatomic, readonly, strong) PESDKFrame * _Nullable frame;
/// The url to the thumbnail image of the frame.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// Creates a new frame menu item for the given frame.
/// \param frame The frame that this menu item represents.
///
/// \param ratio The ratio to create the thumbnail url for.
///
- (nonnull instancetype)initWithFrame:(PESDKFrame * _Nonnull)frame ratio:(CGFloat)ratio;
/// Creates a frame menu item for the no frame option.
- (nonnull instancetype)init;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
@end


/// Handles the display of <code>FrameOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("FrameOptionListSectionController")
@interface PESDKFrameOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>FrameOptionToolController</code>.
SWIFT_CLASS_NAMED("FrameOptionMenuItem")
@interface PESDKFrameOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>FrameAction</code> that this menu item represents.
@property (nonatomic, readonly) enum FrameAction frameAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new frame option menu item for the given frame action.
/// \param frameAction The frame action that this menu item represents.
///
- (nonnull instancetype)initWithFrameAction:(enum FrameAction)frameAction;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>TransformEditControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>TransformEditController</code>.
SWIFT_PROTOCOL_NAMED("TransformEditControllerDelegate")
@protocol PESDKTransformEditControllerDelegate
/// Asks the delegate for the preview’s base <code>UIImage</code>.
/// \param transformEditController The transform edit controller asking.
///
///
/// returns:
/// The preview’s base image.
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview’s base <code>CIImage</code>.
/// \param transformEditController The transform edit controller asking.
///
///
/// returns:
/// The preview’s base image.
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the sprite view controller.
/// \param transformEditController The transform edit controller asking.
///
///
/// returns:
/// The sprite view controller.
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param transformEditController The transform edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Tells the delegate that the transform edit controller changed whether it wants the default
/// preview enabled or not.
/// \param transformEditController The transform edit controller that changed its state.
///
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
@optional
/// Tells the delegate that the transform edit controller changed the applied orientation.
/// \param transformEditController The transform edit controller that changed its state.
///
- (void)transformEditControllerDidChangeOrientation:(PESDKTransformEditController * _Nonnull)transformEditController;
@end


/// The tool controller to edit frame options. It contains a menu with options to change attributes
/// of a frame.
SWIFT_CLASS_NAMED("FrameOptionsToolController")
@interface PESDKFrameOptionsToolController : PESDKMenuToolController <PESDKTransformEditControllerDelegate>
/// The contained <code>FrameEditController</code>.
@property (nonatomic, readonly, strong) PESDKFrameEditController * _Nonnull frameEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
@end



/// Options for configuring a <code>FrameOptionsToolController</code>.
SWIFT_CLASS_NAMED("FrameOptionsToolControllerOptions")
@interface PESDKFrameOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure is called every time the user selects a tool.
@property (nonatomic, readonly, copy) void (^ _Nullable frameActionSelectedClosure)(enum FrameAction);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>FrameAction</code>
/// will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum FrameAction);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic, readonly) BOOL rotationEnabled;
/// Creates a newly allocated instance of <code>FrameToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>FrameOptionsToolControllerOptions</code> using the given builder.
/// \param builder A <code>FrameOptionsToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKFrameOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FrameOptionsToolControllerOptionsBuilder</code> for <code>FrameOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FrameOptionsToolControllerOptionsBuilder")
@interface PESDKFrameOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable frameActionSelectedClosure)(enum FrameAction);
/// This closure can be used to configure the slider that is visible when selecting a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the view that contains the slider and that is visible when selecting
/// a brush tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the active <code>FrameAction</code>
/// will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(PESDKSlider * _Nonnull, enum FrameAction);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic) BOOL rotationEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>FrameOptionsToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>FrameOptionsToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKFrameOptionsToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKFrameOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>FrameAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in <code>allowedFrameActions</code> with the corresponding <code>FrameAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFrameActions;
@end

/// This enum is used to set the the tiling mode to strech or repeat.
typedef SWIFT_ENUM(NSInteger, FrameTileMode, open) {
/// When this mode is set, the tile is stretched to fit its rect.
  FrameTileModeStretch = 0,
/// When this mode is set, the tile is repeated to fit its rect.
  FrameTileModeRepeat = 1,
};


/// The tool controller to edit the frame. It contains a menu with the available frames for the
/// image’s current aspect ratio and a <code>FrameEditController</code> to display the frame.
SWIFT_CLASS_NAMED("FrameToolController")
@interface PESDKFrameToolController : PESDKMenuToolController <PESDKTransformEditControllerDelegate>
/// The currently selected frame.
@property (nonatomic, strong) PESDKFrame * _Nullable selectedFrame;
/// The contained <code>FrameEditController</code>.
@property (nonatomic, readonly, strong) PESDKFrameEditController * _Nonnull frameEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)pesdk_willBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



/// Options for configuring a <code>FrameToolController</code>.
SWIFT_CLASS_NAMED("FrameToolControllerOptions")
@interface PESDKFrameToolControllerOptions : PESDKToolControllerOptions
/// This closure is called when the user selects a frame. The closure is passed <code>nil</code> when no frame
/// was selected.
@property (nonatomic, readonly, copy) void (^ _Nullable selectedFrameClosure)(PESDKFrame * _Nullable);
/// This closure allows further customization of the cells of a frame.
@property (nonatomic, readonly, copy) void (^ _Nullable cellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFrame * _Nullable);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic, readonly) BOOL rotationEnabled;
/// Creates a newly allocated instance of <code>FrameToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates a newly allocated instance of <code>FrameToolControllerOptions</code> using the given builder.
/// \param builder A <code>FrameToolControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKFrameToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>FrameToolControllerOptionsBuilder</code> for <code>FrameToolControllerOptions</code>.
SWIFT_CLASS_NAMED("FrameToolControllerOptionsBuilder")
@interface PESDKFrameToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called when the user selects a frame. The closure is passed <code>nil</code> when no frame
/// was selected.
@property (nonatomic, copy) void (^ _Nullable selectedFrameClosure)(PESDKFrame * _Nullable);
/// This closure allows further customization of the cells of a frame.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFrame * _Nullable);
/// Whether rotation using a rotation gesture should be enabled. <code>false</code> by default.
@property (nonatomic) BOOL rotationEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// A <code>Tool</code> is an abstract base class. Currently <code>FreehandTool</code> is the only concrete subclass and
/// it is used to handle touch events and draw primitives.
SWIFT_CLASS_NAMED("Tool")
@interface PESDKTool : NSObject
/// <code>true</code> if touch events occurred, <code>false</code> otherwise.
@property (nonatomic, readonly) BOOL moved;
/// Called at the beginning of a touch event.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// Called multiple times during a touch event.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// Called when a touch event ended.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// Called when a touch event was cancelled.
/// \param recognizer The recognizer that recognized the event.
///
/// \param view The view that this event was recognized in.
///
- (void)gestureCancelled:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>FreehandTool</code> is responsible for creating vertices for a freehand drawing.
SWIFT_CLASS_NAMED("FreehandTool")
@interface PESDKFreehandTool : PESDKTool
/// The color that should be used for this drawing.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The hardness that should be used for this drawing. This value is just used to store the value within
/// the drawn paths. The actual stamp setting is done via brush generator. Since that is a fire and forget thing,
/// and we create the brush somewhere else, we use this to keep the information.
@property (nonatomic) CGFloat hardness;
/// The brush that should be used for this drawing.
@property (nonatomic, strong) PESDKBrush * _Nullable brush;
/// :nodoc:
- (void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// This method starts a path. It is used during the deserialization process to
/// recreate the brushes.
/// \param location The starting location.
///
/// \param force The used force
///
- (void)beginPathWithLocation:(CGPoint)location force:(CGFloat)force;
/// :nodoc:
- (void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// This method continues a path. It is used during the deserialization process to
/// recreate the brushes.
/// \param location The starting location.
///
/// \param canvas A canvas view.
///
/// \param force The used force
///
- (void)continuePathWithLocation:(CGPoint)location canvas:(PESDKCanvasView * _Nonnull)canvas force:(CGFloat)force;
/// :nodoc:
- (void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
/// This method ends a path. It is used during the deserialization process to
/// recreate the brushes.
/// \param location The starting location.
///
/// \param canvas A canvas view.
///
/// \param didMove When this is set to false, the path consists of a single point only.
///
- (void)endPathWithLocation:(CGPoint)location canvas:(PESDKCanvasView * _Nonnull)canvas didMove:(BOOL)didMove;
/// :nodoc:
- (void)gestureCancelled:(UIGestureRecognizer * _Nonnull)recognizer in:(UIView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Applies a gaussian focus to an instance of <code>CIImage</code>.
SWIFT_CLASS_NAMED("GaussianFocusFilter")
@interface PESDKGaussianFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>StickerCategory</code> represents one category of stickers. Each category has a preview image and
/// multiple stickers associated with it. To support accessibility you should also set its
/// <code>accessibilityLabel</code>.
SWIFT_CLASS_NAMED("StickerCategory")
@interface PESDKStickerCategory : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The identifier of this category.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this category, e.g. ‘Toy Collection’.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The URL of the category’s preview image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The stickers associated with this category.
@property (nonatomic, readonly, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// Creates a sticker category with an image url. The associated image is automatically loaded
/// when needed.
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param stickers The stickers to associate with this category.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers;
/// Creates a sticker category with an image url. The associated image is automatically loaded
/// when needed.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param stickers The stickers to associate with this category.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers OBJC_DESIGNATED_INITIALIZER;
/// The pool of categories available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKStickerCategory *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.stickers` of your `Configuration` object instead.");)
+ (NSArray<PESDKStickerCategory *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKStickerCategory *> * _Nonnull)newValue;
/// Creates the default sticker categories that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKStickerCategory *> * _Nonnull defaultItems;)
+ (NSArray<PESDKStickerCategory *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKStickerProvider;

/// A <code>StickerProviderCategory</code> represents an empty category with a custom <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerProviderCategory")
@interface PESDKStickerProviderCategory : PESDKStickerCategory
/// The <code>StickerProvider</code> associated with this sticker category.
/// This property should only be used if you are using Objective-C.
@property (nonatomic, readonly, strong) id <PESDKStickerProvider> _Nullable stickerProvider;
/// Creates a sticker category with a <code>StickerProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param _objCStickerProvider The associated <code>StickerProvider</code> object responsible for loading local/remote stickers.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerProvider:(id <PESDKStickerProvider> _Nonnull)_objCStickerProvider;
/// Creates a sticker category with a <code>StickerProvider</code> object.
/// This initializer should only be used if you are using Objective-C.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param _objCStickerProvider The associated <code>StickerProvider</code> object responsible for loading local/remote stickers.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerProvider:(id <PESDKStickerProvider> _Nonnull)_objCStickerProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers SWIFT_UNAVAILABLE;
@end


/// A <code>GiphyStickerCategory</code> is a preconfigured category providing an easy access to the GIPHY Stickers API.
SWIFT_CLASS_NAMED("GiphyStickerCategory")
@interface PESDKGiphyStickerCategory : PESDKStickerProviderCategory
/// Creates a sticker category with GIPHY as <code>StickerProvider</code>.
/// \param apiKey The key used to authorize API requests obtained from GIPHY.
///
/// \param language The default language for regional content in 2-letter ISO 639-1 language code. Default value is the bundle preferred localization or <code>en</code> if unavailable.
///
/// \param rating The audience category used for content filtering. Available values are <code>g, pg, pg-13, r</code>. Default value is <code>g</code>.
///
- (nonnull instancetype)initWithAPIKey:(NSString * _Nonnull)apiKey language:(NSString * _Nonnull)language rating:(NSString * _Nonnull)rating OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerProvider:(id <PESDKStickerProvider> _Nonnull)_objCStickerProvider SWIFT_UNAVAILABLE;
@end


/// A <code>GiphyStickerProvider</code> represents an entry point to the GIPHY Stickers API.
/// <ul>
///   <li>
///     See: <a href="https://developers.giphy.com/docs/api#quick-start-guide">API Quickstart Guide</a>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("GiphyStickerProvider")
@interface PESDKGiphyStickerProvider : NSObject
/// Creates a sticker provider consuming GIPHY Stickers API.
/// note:
/// While creating custom sticker categories with the <code>GiphyStickerProvider</code> please follow official GIPHY attribution policy.
/// <ul>
///   <li>
///     See: <a href="https://developers.giphy.com/docs/sdk/#design-guidelines">Design Guidelines</a>
///   </li>
/// </ul>
/// \param apiKey The key used to authorize API requests obtained from GIPHY.
///
/// \param language The default language for regional content in 2-letter ISO 639-1 language code. Default value is the bundle preferred localization or <code>en</code> if unavailable.
///
/// \param rating The audience category used for content filtering. Available values are <code>g, pg, pg-13, r</code>. Default value is <code>g</code>.
///
- (nonnull instancetype)initWithAPIKey:(NSString * _Nonnull)apiKey language:(NSString * _Nonnull)language rating:(NSString * _Nonnull)rating OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKStickerProviderResult;

/// Types conforming to <code>PESDKStickerProvider</code> can implement a custom service to load stickers from local/network sources.
SWIFT_PROTOCOL_NAMED("_ObjCStickerProvider")
@protocol PESDKStickerProvider
/// Loads initial search page with the default set of stickers.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
/// Loads search results for the given query.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param query The query string.
///
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
@end


@interface PESDKGiphyStickerProvider (SWIFT_EXTENSION(ImglyKit)) <PESDKStickerProvider>
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKStickerProviderResult * _Nullable, NSError * _Nullable))completion;
@end


@class NSValue;

/// Applies a gradient focus to an instance of <code>CIImage</code>.
/// important:
/// This gradient focus filter is actually the ‘linear’ focus in the serialization, but
/// for legacy reasons the old name was kept. This will most likely be subject to change in a
/// future major version update of the PhotoEditor SDK.
SWIFT_CLASS_NAMED("GradientFocusFilter")
@interface PESDKGradientFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The first normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>. This point
/// describes the unblurred part of the image.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/// The second normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>. This point
/// describes the blurred part of the image.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>GradientView</code> shows a linear gradient from its top to its bottom.
SWIFT_CLASS_NAMED("GradientView")
@interface PESDKGradientView : UIView
/// The top color of the gradient.
@property (nonatomic, strong) UIColor * _Nonnull topColor;
/// The bottom color of the gradient.
@property (nonatomic, strong) UIColor * _Nonnull bottomColor;
/// Creates a new gradient view.
/// \param topColor The color at the top of the view.
///
/// \param bottomColor The color at the bottom of the view.
///
- (nonnull instancetype)initWithTopColor:(UIColor * _Nonnull)topColor bottomColor:(UIColor * _Nonnull)bottomColor;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// This class can be used to group multiple assets together in the user interace. Currently only
/// filters are supported. For more details see <code>FilterToolControllerOptions.filterGroups</code>.
SWIFT_CLASS_NAMED("Group")
@interface PESDKGroup : NSObject
/// The identifier of this group. This must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The display name of this group.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// A thumbnail image representing this group.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// The identifiers of this group’s members.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull memberIdentifiers;
/// Creates a new group to group multiple assets together.
/// \param identifier The identifier of this group. This must be unique.
///
/// \param displayName The display name of this group.
///
/// \param thumbnail A thumbnail image representing this group.
///
/// \param memberIdentifiers The identifiers of this group’s members.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName thumbnail:(UIImage * _Nullable)thumbnail memberIdentifiers:(NSArray<NSString *> * _Nonnull)memberIdentifiers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>HandleButton</code> is used in the <code>TextFontToolController</code> to expand the <code>FontSelectorView</code>.
/// It is a standard <code>Button</code> that uses its <code>tintColor</code> as its <code>backgroundColor</code>. It contains
/// a <code>SpriteEditController</code> to enable sprite geometry manipulations.
SWIFT_CLASS_NAMED("HandleButton")
@interface PESDKHandleButton : PESDKButton
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)tintColorDidChange;
@end


/// <code>IMGLY</code> provides methods to unlock and customize the SDK.
SWIFT_CLASS("_TtC8ImglyKit5IMGLY")
@interface IMGLY : NSObject
/// Force extended sRGB color space on export.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL forceExtendedSRGBColorSpace;)
+ (BOOL)forceExtendedSRGBColorSpace SWIFT_WARN_UNUSED_RESULT;
+ (void)setForceExtendedSRGBColorSpace:(BOOL)value;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param url The file url where the license file is located.
///
+ (void)unlockWithLicenseAt:(NSURL * _Nonnull)url;
/// :nodoc:
+ (BOOL)crashIfNeededAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param url The file url where the license file is located.
///
///
/// throws:
/// Throws a license error if there are issues with the given license.
+ (BOOL)unlockWithLicenseFromURL:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param string The license string in JSON format.
///
///
/// throws:
/// Throws a license error if there are issues with the given license.
+ (BOOL)unlockWithLicenseFromString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error;
/// Unlocks the SDK with the given license. Calling any unlock method prior to using any parts of the
/// SDK is required.
/// \param dictionary The license dictionary which can be encoded in JSON format.
///
///
/// throws:
/// Throws a license error if there are issues with the given license.
+ (BOOL)unlockWithLicenseFromDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error;
/// PhotoEditor SDK analytics instance. All screen views and events are logged with this instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKAnalytics * _Nonnull analytics;)
+ (PESDKAnalytics * _Nonnull)analytics SWIFT_WARN_UNUSED_RESULT;
/// The progress view that is being used to display progress. You can provide your own progress
/// view as long as it adopts the <code>ProgressView</code> protocol.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <PESDKProgressView> _Nonnull progressView;)
+ (id <PESDKProgressView> _Nonnull)progressView SWIFT_WARN_UNUSED_RESULT;
+ (void)setProgressView:(id <PESDKProgressView> _Nonnull)value;
/// Allows to set a custom dictionary that contains dictionaries with language locales.
/// Will override localization found in the bundle, if a value is found.
/// Falls back to “en” if localization key is not found in dictionary.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable)value;
/// Register a custom block that handles translation.
/// If this block is <code>nil</code>, the <code>ImglyKit.bundle</code> and  <code>localizationDictionary</code> will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable (^ _Nullable localizationBlock)(NSString * _Nonnull);)
+ (NSString * _Nullable (^ _Nullable)(NSString * _Nonnull))localizationBlock SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationBlock:(NSString * _Nullable (^ _Nullable)(NSString * _Nonnull))value;
/// Register a custom block that returns custom images for the given image name.
/// If this block is <code>nil</code>, the image from the <code>ImglyKit.bundle</code> will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) UIImage * _Nullable (^ _Nullable bundleImageBlock)(NSString * _Nonnull);)
+ (UIImage * _Nullable (^ _Nullable)(NSString * _Nonnull))bundleImageBlock SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundleImageBlock:(UIImage * _Nullable (^ _Nullable)(NSString * _Nonnull))value;
/// Register a custom block that returns a <code>ToolbarItem</code> for a view controller. Both the view
/// controller as well as the default <code>ToolbarItem</code> are passed as arguments. If you return <code>nil</code>,
/// no <code>ToolbarItem</code> is pushed onto the toolbar and thus the previous toolbar item remains visible.
/// If this block is <code>nil</code>, the default toolbar item for each view controller will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) PESDKToolbarItem * _Nullable (^ _Nullable toolbarItemBlock)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable);)
+ (PESDKToolbarItem * _Nullable (^ _Nullable)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable))toolbarItemBlock SWIFT_WARN_UNUSED_RESULT;
+ (void)setToolbarItemBlock:(PESDKToolbarItem * _Nullable (^ _Nullable)(UIViewController * _Nonnull, PESDKToolbarItem * _Nullable))value;
/// Register a custom <code>AssetResolver</code> that handles (de-)serialization of custom assets.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id <PESDKAssetResolver>> * _Nullable assetResolvers;)
+ (NSDictionary<NSString *, id <PESDKAssetResolver>> * _Nullable)assetResolvers SWIFT_WARN_UNUSED_RESULT;
+ (void)setAssetResolvers:(NSDictionary<NSString *, id <PESDKAssetResolver>> * _Nullable)value;
/// Allows you to use a specific subclass instead of the default PhotoEditor SDK classes. This works
/// across the whole framework with any public class.
/// note:
/// Only set from the main thread, before you first use the object. Set up your class overrides before calling any other methods.
/// \param builtinClass The class that should be replaced, e.g. <code>PhotoEditViewController.self</code>.
///
/// \param replacingClass The class that should be used instead (must be a subclass of <code>builtinClass</code>).
///
///
/// throws:
/// Throws an error if the replacing class is not a subclass of the builting class.
+ (BOOL)replaceClass:(SWIFT_METATYPE(NSObject) _Nonnull)builtinClass with:(SWIFT_METATYPE(NSObject) _Nonnull)replacingClass error:(NSError * _Nullable * _Nullable)error;
/// Removes any replacement classes set with <code>replaceClass(_:with:)</code>. This can be useful if you want to present multiple instances of the editor with different customizations.
/// note:
/// Only set from the main thread, before you first use the object. Set up your class overrides before calling any other methods.
+ (void)resetClassReplacements;
/// Resets all static options, such as <code>localizationBlock</code>, set on this class to their default value.
+ (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An icon generator can be used to generate various icons.
SWIFT_CLASS_NAMED("IconGenerator")
@interface PESDKIconGenerator : NSObject
/// Generates the icon used to display a crop aspect ratio.
/// \param width The width of the aspect ratio.
///
/// \param height The height of the aspect ratio.
///
/// \param size The size of the generated icon.
///
/// \param dottedBorder Whether to draw a dotted border or a solid border. If the border is drawn
/// dotted, the background won’t be filled.
///
///
/// returns:
/// An image for the given crop aspect ratio.
+ (UIImage * _Nullable)generateCropAspectImageWithWidth:(CGFloat)width height:(CGFloat)height ofSize:(CGSize)size dottedBorder:(BOOL)dottedBorder showSwitchIcon:(BOOL)showSwapIcon SWIFT_WARN_UNUSED_RESULT;
/// Generates the icon used to display a string.
/// \param font The font that should be used in the icon.
///
/// \param size The size of the icon that is generated.
///
/// \param text The text in the icon.
///
///
/// returns:
/// An image of the given string with the given size.
+ (UIImage * _Nullable)generateTextImageWithFont:(UIFont * _Nonnull)font ofSize:(CGSize)size text:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Generates the icon used to display a color in the menu.
/// \param color The color that should be displayed.
///
/// \param borderColor The color of the border.
///
/// \param size The size of the generated image.
///
///
/// returns:
/// An icon that can be used to display a color in the menu.
+ (UIImage * _Nullable)generateColorImageWithColor:(UIColor * _Nonnull)color borderColor:(UIColor * _Nonnull)borderColor ofSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>ImageAsset</code> object can be used together with an <code>AssetManager</code> to cache an <code>UIImage</code> or a
/// <code>CIImage</code> object and an optional user info dictionary.
SWIFT_CLASS_NAMED("ImageAsset")
@interface PESDKImageAsset : NSObject
/// An <code>UIImage</code> object.
@property (nonatomic, strong) UIImage * _Nullable image;
/// An optional user info dictionary to associate any metadata with this <code>ImageAsset</code>.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// An <code>CIImage</code> object. If an <code>UIImage</code> was provided when initializing this <code>ImageAsset</code>
/// instance, it will be generated from the given <code>UIImage</code>.
@property (nonatomic, readonly, strong) CIImage * _Nullable ciImage;
/// An oriented <code>CIImage</code> object. If an <code>UIImage</code> was provided when initializing this <code>ImageAsset</code>
/// instance, it will be generated from the given <code>UIImage</code>.
@property (nonatomic, readonly, strong) CIImage * _Nullable orientedCIImage;
/// <code>true</code> if the loaded asset is animated (animated GIFs) or <code>false</code> if it is static (JPGs, PNGs).
@property (nonatomic) BOOL isAnimated;
/// Creates a new image asset for the given image and an associated user info dictionary.
/// \param ciImage A <code>CIImage</code> object.
///
/// \param userInfo An optional user info dictionary.
///
- (nonnull instancetype)initWithCiImage:(CIImage * _Nonnull)ciImage userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo;
/// Creates a new image asset for the given image and an associated user info dictionary.
/// \param image An <code>UIImage</code> object.
///
/// \param userInfo An optional user info dictionary.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different image file formats.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKImageFileFormat, "ImageFileFormat", open) {
/// The JPEG image file format.
  PESDKImageFileFormatJpeg = 0,
/// The PNG image file format.
  PESDKImageFileFormatPng = 1,
/// The HEIF image file format.
  PESDKImageFileFormatHeif = 2,
/// The TIFF image file format.
  PESDKImageFileFormatTiff = 3,
};


/// A concrete <code>Effect</code> that uses an image-based lookup table (LUT) to alter colors.
SWIFT_CLASS_NAMED("LUTEffect")
@interface PESDKLUTEffect : PESDKEffect
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL of the lut image that should be used to generate a color cube.
@property (nonatomic, readonly, copy) NSURL * _Nullable lutURL;
/// The number of horizontal tiles in the LUT image.
@property (nonatomic, readonly) NSUInteger horizontalTileCount;
/// The number of vertical tiles in the LUT image.
@property (nonatomic, readonly) NSUInteger verticalTileCount;
/// Creates an effect that uses the LUT at url <code>lutURL</code> to generate the color cube data for
/// the filter.
/// The tile configuration is parsed from the <code>lutURL</code> filename that matches the scheme:
/// <code>*_horizontalTileCount_verticalTileCount_resolution*</code>, e.g. a
/// filename that contains <code>_5_5_128</code> would create a LUT configuration with 5x5
/// tiles and expect a image resolution of 128^2 pixels. If the tile configuration cannot be parsed
/// it defaults to a 8x8 512^2 LUT configuration.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lutURL The URL of the lut image that should be used to generate a color cube.
///
/// \param displayName The name that is displayed to the user.
///
///
/// returns:
/// A newly initialized <code>LUTEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/// Creates an effect that uses the LUT at url <code>lutURL</code> to generate the color cube data for
/// the filter.
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lutURL The URL of the lut image that should be used to generate a color cube.
///
/// \param displayName The name that is displayed to the user.
///
/// \param horizontalTileCount The number of horizontal tiles in the LUT image.
///
/// \param verticalTileCount The number of vertical tiles in the LUT image.
///
///
/// returns:
/// A newly initialized <code>LUTEffect</code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName horizontalTileCount:(NSUInteger)horizontalTileCount verticalTileCount:(NSUInteger)verticalTileCount OBJC_DESIGNATED_INITIALIZER;
/// Returns a new <code>CIFilter</code> object.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This filter applies a color lookup image to an image.
SWIFT_CLASS_NAMED("LUTFilter")
@interface PESDKLUTFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The LUT that should be applied.
@property (nonatomic, strong) CIImage * _Nullable inputLUT;
/// The number of tiles on the LUT image, in horizontal direction.
@property (nonatomic, strong) NSNumber * _Nullable inputHorizontalTileCount;
/// The number of tiles on the LUT image, in vertical direction.
@property (nonatomic, strong) NSNumber * _Nullable inputVerticalTileCount;
/// The effect intensity.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// The tool controller to edit text designs. It contains a menu with all available text designs and
/// a <code>SpriteEditController</code> to change a layout’s geometry.
SWIFT_CLASS_NAMED("LegacyTextDesignOptionsToolController")
@interface PESDKLegacyTextDesignOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end




/// A <code>LineView</code> is a subclass of <code>UIView</code>, which allows to restrict appearance proxy calls
/// to a subset of all views that are instances of this class.
SWIFT_CLASS_NAMED("LineView")
@interface PESDKLineView : UIView
/// This property wraps <code>layer.shadowColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Applies a linear focus to an instance of <code>CIImage</code>.
/// important:
/// This linear focus filter is actually the ‘mirrored’ focus in the serialization, but
/// for legacy reasons the old name was kept. This will most likely be subject to change in a
/// future major version update of the PhotoEditor SDK.
SWIFT_CLASS_NAMED("LinearFocusFilter")
@interface PESDKLinearFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The first normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/// The second normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The fade width to use for focus. Default is 0.
@property (nonatomic, strong) NSNumber * _Nullable inputFadeWidth;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents a linear gradient control view. It is used within the focus tool to visualize
/// the chosen focus parameters.
SWIFT_CLASS_NAMED("LinearGradientView")
@interface PESDKLinearGradientView : PESDKFocusGradientView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
@end

/// The log level determins what messages should be logged. For example
/// if the log level is set to <code>warn</code>, messages classified as <code>info</code> wont be logged.
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// Nothing should be logged.
  LogLevelNone = 0,
/// Only errors should be logged.
  LogLevelError = 1,
/// Warnings and errors should be logged.
  LogLevelWarn = 2,
/// Infos, warnings, and errors should be logged.
  LogLevelInfo = 3,
/// Debug messages, infos, warnings and errors should be logged.
  LogLevelDebug = 4,
};


@class PESDKMediaEditViewController;

/// The <code>MainFlowController</code> is the <code>EventSubscriber</code> of the <code>MediaEditViewController</code> and all
/// subclasses of <code>PhotoEditToolController</code>. It is responsible for presenting and dismissing tools
/// and forwards updated <code>PhotoEditModel</code>s to each active controller. It also keeps track of the
/// unedited photo edit model, to check for changes.
SWIFT_CLASS_NAMED("MainFlowController")
@interface PESDKMainFlowController : NSObject
/// The configuration object that configures this editor.
@property (nonatomic, readonly, strong) PESDKConfiguration * _Nonnull configuration;
/// The <code>MediaEditViewController</code> that this flow controller manages.
@property (nonatomic, readonly, weak) PESDKMediaEditViewController * _Nullable mediaEditViewController;
/// Creates a new flow controller for the given photo edit view controller and configuration.
/// \param mediaEditViewController The media edit view controller that this flow controller manages.
///
/// \param configuration The <code>Configuration</code> object to configure all tools with.
///
- (nonnull instancetype)initWithMediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController configuration:(PESDKConfiguration * _Nonnull)configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKMainFlowController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
- (void)viewControllerDidFinish:(UIViewController * _Nonnull)viewController;
/// :nodoc:
- (void)viewControllerDidCancel:(UIViewController * _Nonnull)viewController;
/// :nodoc:
- (void)viewController:(UIViewController * _Nonnull)viewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)photoEditToolController:(UIViewController * _Nonnull)photoEditToolController wantsToPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
@end


/// A <code>MarkerView</code> is a subclass of <code>UIView</code>, which allows to restrict appearance proxy calls
/// to a subset of all views that are instances of this class.
SWIFT_CLASS_NAMED("MarkerView")
@interface PESDKMarkerView : UIView
/// This property wraps <code>layer.shadowColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// This property wraps <code>layer.borderColor</code> and supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>MasterLogger</code> manages and deploys loggers. That means it holds all instances of loggers, and delegates incoming log messages to each of them.
/// Also it takes case of threading, to keep logging efficient. More loggers can be added using the <code>add</code> method.
/// All child loggers must implement the <code>LoggerProtocol</code>.
SWIFT_CLASS_NAMED("MasterLogger")
@interface PESDKLogger : NSObject
/// The log level determins what kind of logs will be performed. See <code>LogLevel</code> for details.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LogLevel logLevel;)
+ (enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum LogLevel)value;
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Use this function to add your own logger.
/// \param logger A logger.
///
+ (void)addWithLogger:(id <PESDKLoggerProtocol> _Nonnull)logger;
/// Remove a logger.
/// \param logger The logger that should be removed.
///
+ (void)removeWithLogger:(id <PESDKLoggerProtocol> _Nonnull)logger;
/// Removed all loggers.
+ (void)removeAll;
/// Logs an error.
/// \param message A message.
///
+ (void)error:(NSString * _Nonnull)message;
/// Logs a warning.
/// \param message A message.
///
+ (void)warn:(NSString * _Nonnull)message;
/// Logs an info level message.
/// \param message A message.
///
+ (void)info:(NSString * _Nonnull)message;
/// Logs a debug level message.
/// \param message A message.
///
+ (void)debug:(NSString * _Nonnull)message;
@end

/// The overlay actions that can be used in an instance of <code>MediaEditViewControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, MediaEditOverlayAction, open) {
/// Undo the latest operation.
  MediaEditOverlayActionUndo = 0,
/// Redo the latest operation.
  MediaEditOverlayActionRedo = 1,
/// Toggle sound on/off for video preview and export.
  MediaEditOverlayActionSoundOnOff = 2,
/// Toggle play/pause for video preview.
  MediaEditOverlayActionPlayPause = 3,
/// Toggle background removal.
/// attention:
/// This option does not work properly on a simulator.
/// To see background properly removed, please test on physical device.
  MediaEditOverlayActionRemoveBackground = 4,
};

@protocol PESDKMediaEditPreviewControllerDelegate;
@class UIScreen;

/// The <code>MediaEditPreviewController</code> is responsible for previewing changes to visual media and
/// displaying the asset in a scrollable container. It’s an abstract base class used by
/// <code>PhotoEditPreviewController</code> and <code>VideoEditPreviewController</code>. You should not instantiate this
/// class directly.
SWIFT_CLASS_NAMED("MediaEditPreviewController")
@interface PESDKMediaEditPreviewController : PESDKViewController
/// The scroll view that hosts the preview view.
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull previewViewScrollingContainer;
/// The preview view that renders the preview image.
@property (nonatomic, readonly, strong) UIView * _Nonnull previewView;
/// Whether zooming should be enabled.
@property (nonatomic) BOOL allowsPreviewImageZoom;
/// An object that acts as a delegate.
@property (nonatomic, weak) id <PESDKMediaEditPreviewControllerDelegate> _Nullable delegate;
/// The <code>UIImage</code> object used in the preview. This is the resized version of the original photo.
/// Setting this also generates the matching <code>CIImage</code> object, see <code>baseWorkCIImage</code>.
@property (nonatomic, strong) UIImage * _Nullable baseWorkUIImage;
/// The <code>CIImage</code> object used in the preview. This is the resized version of the original photo.
@property (nonatomic, readonly, strong) CIImage * _Nullable baseWorkCIImage;
/// The renderer that is being used to render the image.
@property (nonatomic, readonly, strong) PESDKPhotoEditRenderer * _Nonnull renderer;
/// The <code>SpriteViewController</code> that is displayed above the preview to manage sprites.
@property (nonatomic, readonly, strong) PESDKSpriteViewController * _Nonnull spriteViewController;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// The <code>UndoController</code> that handles undo/redo for this controller.
@property (nonatomic, strong) PESDKUndoController * _Nullable undoController;
/// This closure is called with <code>false</code> when the view controller starts loading its base image
/// and is called again with <code>true</code> when loading has finished. This should be used to display
/// a progress indicator and disable user interaction.
@property (nonatomic, copy) void (^ _Nullable loadingProgressClosure)(BOOL);
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
- (void)updateViewConstraints;
/// Loads a still base image to display in the preview.
/// \param completion A closure to execute when loading is finished.
///
- (void)loadBaseImage:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// Updates the state of the renderer and triggers a rerender if necessary.
- (void)updateRenderer;
/// Updates the attached asset manager’s image of the drawn brush.
/// \param onlyIfMissing If <code>false</code> the image will only be added if it doesn’t exist
/// in the asset manager yet.
///
- (void)updateBrushWithOnlyIfMissing:(BOOL)onlyIfMissing;
/// Updates the layout of the preview. This must be called whenever a new tool is presented above
/// the preview.
- (void)updateLayout;
/// Updates the insets of the preview. This must be called whenever a new tool is presented above
/// the preview.
/// \param animated Whether this change should be animated or not.
///
- (void)updateInsetsWithAnimated:(BOOL)animated;
/// Triggers a rerender of the preview.
- (void)updatePreview;
/// Calculates the maximum size of the preview image for the given screen. It is the longer side
/// of the given screen multiplied with the screen’s scale factor.
/// \param screen The screen to calculate the size for.
///
///
/// returns:
/// The maximum size of the preview image.
- (CGSize)workImageSizeFor:(UIScreen * _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKMediaEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <MTKViewDelegate>
/// :nodoc:
- (void)drawInMTKView:(MTKView * _Nonnull)view;
/// :nodoc:
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
@end


/// The <code>SpriteViewControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>SpriteViewController</code>.
SWIFT_PROTOCOL_NAMED("SpriteViewControllerDelegate")
@protocol PESDKSpriteViewControllerDelegate
/// Called when the photo edit model was changed.
/// \param spriteViewController The sprite view controller that changed the model.
///
- (void)spriteViewControllerDidChangePhotoEditModel:(PESDKSpriteViewController * _Nonnull)spriteViewController;
/// Asks the delegate for the <code>UndoController</code>.
/// \param spriteViewController The sprite view controller asking.
///
///
/// returns:
/// An <code>UndoController</code> object.
- (PESDKUndoController * _Nullable)spriteViewControllerUndoController:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the configuration.
/// \param spriteViewController The sprite view controller asking.
///
///
/// returns:
/// The configuration.
- (PESDKConfiguration * _Nullable)spriteViewControllerConfiguration:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKMediaEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <PESDKSpriteViewControllerDelegate>
/// :nodoc:
- (void)spriteViewControllerDidChangePhotoEditModel:(PESDKSpriteViewController * _Nonnull)spriteViewController;
/// :nodoc:
- (PESDKUndoController * _Nullable)spriteViewControllerUndoController:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKConfiguration * _Nullable)spriteViewControllerConfiguration:(PESDKSpriteViewController * _Nonnull)spriteViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKMediaEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>MediaEditPreviewControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>MediaEditPreviewController</code>.
SWIFT_PROTOCOL_NAMED("MediaEditPreviewControllerDelegate")
@protocol PESDKMediaEditPreviewControllerDelegate
/// Asks the delegate whether the preview should be enabled.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// Whether the preview should be enabled.
- (BOOL)mediaEditPreviewControllerPreviewEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the render modes to render in the preview.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The render modes to render.
- (PESDKRenderMode)mediaEditPreviewControllerRenderMode:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the background color in the preview.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The background color in the preview.
- (UIColor * _Nonnull)mediaEditPreviewControllerBackgroundColor:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview insets.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The preview insets.
- (UIEdgeInsets)mediaEditPreviewControllerPreviewInsets:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview scale factor.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The preview scale factor.
- (CGFloat)mediaEditPreviewControllerPreviewScale:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate whether proxy zooming should be active.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// Whether proxy zooming should be enabled.
- (BOOL)mediaEditPreviewControllerProxyZoomingActive:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to reset proxy zooming.
/// \param mediaEditPreviewController The media edit preview controller askign.
///
- (void)mediaEditPreviewControllerResetProxyZooming:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// Asks the delegate whether video playback should be active.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// Whether video playback should be enabled.
- (BOOL)mediaEditPreviewControllerPlaybackEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// Called when the photo edit model did change.
/// \param mediaEditPreviewController The media edit preview controller that changed the model.
///
- (void)mediaEditPreviewControllerDidChangePhotoEditModel:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// Asks the delegate for the configuration.
/// \param mediaEditPreviewController The media edit preview controller asking.
///
///
/// returns:
/// The configuration.
- (PESDKConfiguration * _Nonnull)mediaEditPreviewControllerConfiguration:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when all of the preview views are setup (sprites, brushes, …).
/// \param mediaEditPreviewController The media edit preview that finished with initialization.
///
- (void)mediaEditPreviewControllerDidInitialize:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
@end

@class PESDKToolbar;
@class PESDKToolMenuItem;
@class PESDKMediaEditViewControllerOptions;

/// A <code>MediaEditViewController</code> is the main starting point for the core SDK. It displays the rendered
/// photo and a menu. It can present <code>PhotoEditToolController</code> objects and react to changes. It
/// can be presented on its own (thus displaying a toolbar for navigation at the bottom) or be
/// embedded into a <code>UINavigationController</code> (thus using the navigation controller’s navigation bar
/// for navigation).
/// attention:
/// Do not initialize this class of the core SDK directly. Use a derived class of the product SDKs instead.
SWIFT_CLASS_NAMED("MediaEditViewController")
@interface PESDKMediaEditViewController : PESDKViewController
/// The associated flow controller for this photo edit view controller.
@property (nonatomic, readonly, strong) PESDKMainFlowController * _Null_unspecified flowController;
/// The contained <code>MenuViewController</code> that displays the menu at the bottom.
@property (nonatomic, readonly, strong) PESDKMenuViewController * _Nonnull menuViewController;
/// The contained <code>MediaEditPreviewController</code> that displays the preview.
@property (nonatomic, readonly, strong) PESDKMediaEditPreviewController * _Nonnull mediaEditPreviewController;
/// The container view that the <code>MenuViewController</code>’s view is added to. It does not include the
/// <code>toolbar</code>.
@property (nonatomic, readonly, strong) UIView * _Nonnull containerView;
/// The toolbar of this view controller.
@property (nonatomic, readonly, strong) PESDKToolbar * _Nonnull toolbar;
/// The <code>ToolbarItem</code> for this view controller.
@property (nonatomic, strong) PESDKToolbarItem * _Nonnull toolbarItem;
/// The configuration object that configures this editor.
@property (nonatomic, readonly, strong) PESDKConfiguration * _Nonnull configuration;
/// The <code>UndoController</code> associated with this photo edit view controller. This instance is
/// automatically passed to the tool controllers.
@property (nonatomic, strong) PESDKUndoController * _Nonnull undoController;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, readonly, strong) PESDKAssetManager * _Nonnull assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, readonly, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// Whether the user made any changes to the photo.
@property (nonatomic, readonly) BOOL hasChanges;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
/// :nodoc:
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/// :nodoc:
@property (nonatomic, readonly) UIRectEdge preferredScreenEdgesDeferringSystemGestures;
/// The sound on/off button that is displayed in the editor when editing videos.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable soundOnOffButton;
/// The play/pause button that is displayed in the editor when editing videos.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable playPauseButton;
/// The undo button that is displayed in the editor.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the editor.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
/// The remove background button that is displayed in the editor.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable removeBackgroundButton;
/// All overlay buttons that are displayed in the editor. This includes <code>undoButton</code> and
/// <code>redoButtton</code> and for videos additionally <code>soundOnOffButton</code> and <code>playPauseButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// Presents the tool that is represented by the given <code>ToolMenuItem</code>. You must only call this
/// when the editor is already on-screen.
/// \param toolMenuItem The tool menu item whose represented tool should be presented.
///
- (void)presentToolFor:(PESDKToolMenuItem * _Nonnull)toolMenuItem;
/// Called when the user wants to dismiss the editor.
- (void)didCancel;
/// Called when a new tool controller will be pushed onto the tool stack.
/// \param toolController The tool being presented.
///
- (void)willPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a new tool controller was pushed onto the tool stack.
/// \param toolController The tool that was presented.
///
- (void)didPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller will be popped from the tool stack.
/// \param toolController The tool being dismissed.
///
- (void)willDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller was popped from the tool stack.
/// \param toolController The tool that was dismissed.
///
- (void)didDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Applies all changes to the high resolution variant of this media edit view controller’s asset.
- (void)renderHighResolutionVariant;
/// The tools that are currently on the stack.
@property (nonatomic, readonly, copy) NSArray<PESDKPhotoEditToolController *> * _Nonnull viewControllers;
/// Pushes a new tool onto the tool stack and presents its view.
/// \param viewController The tool controller to present.
///
/// \param animated Whether to show this tool animated or not.
///
/// \param completion A closure that is executed after the presentation animation is finished.
///
- (void)pushViewController:(PESDKPhotoEditToolController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Pops the top view controller from the stack and removes its view.
/// \param animated Whether to animate the transition or not.
///
/// \param completion A closure that is executed after the dismissal animation.
///
///
/// returns:
/// The tool that was popped from the stack, if any.
- (PESDKPhotoEditToolController * _Nullable)popViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// The configuration options.
@property (nonatomic, readonly, strong) PESDKMediaEditViewControllerOptions * _Nonnull options;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end





@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMenuViewControllerDelegate>
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController move:(id <PESDKMenuItem> _Nonnull)menuItem from:(NSArray<id <PESDKMenuItem>> * _Nonnull)previousMenuItems to:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
@end


/// The <code>PhotoEditToolControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>PhotoEditToolController</code>.
SWIFT_PROTOCOL_NAMED("PhotoEditToolControllerDelegate")
@protocol PESDKPhotoEditToolControllerDelegate
/// Asks the delegate for the media edit view controller.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The media edit view controller.
- (PESDKMediaEditViewController * _Nullable)photoEditToolControllerViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the media edit preview controller.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The media edit preview controller.
- (PESDKMediaEditPreviewController * _Nullable)photoEditToolControllerPreviewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the base image.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The base image, which is displayed in the preview.
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the base <code>CIImage</code>.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The base <code>CIImage</code>, which is displayed in the preview.
- (CIImage * _Nullable)photoEditToolControllerBaseCIImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview view.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The preview view.
- (UIView * _Nullable)photoEditToolControllerPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the preview’s scroll view.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The scroll view that hosts the preview.
- (UIScrollView * _Nullable)photoEditToolControllerPreviewScrollView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the <code>SpriteViewController</code>.
/// \param photoEditToolController The tool controller asking.
///
///
/// returns:
/// The sprite view controller.
- (PESDKSpriteViewController * _Nullable)photoEditToolControllerSpriteViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// Called when a tool changed its preferred preview view insets.
/// \param photoEditToolController The tool controller that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)photoEditToolController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// Called when a tool changed whether it wants the preview enabled.
/// \param photoEditToolController The tool controller that changed whether it wants a preview.
///
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController;
@end


@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKPhotoEditToolControllerDelegate>
/// :nodoc:
- (PESDKMediaEditViewController * _Nullable)photoEditToolControllerViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKMediaEditPreviewController * _Nullable)photoEditToolControllerPreviewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)photoEditToolControllerBaseCIImage:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)photoEditToolControllerPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIScrollView * _Nullable)photoEditToolControllerPreviewScrollView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)photoEditToolController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)photoEditToolControllerSpriteViewController:(PESDKPhotoEditToolController * _Nonnull)photoEditToolController SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKMediaEditViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMediaEditPreviewControllerDelegate>
/// :nodoc:
- (BOOL)mediaEditPreviewControllerPreviewEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (PESDKRenderMode)mediaEditPreviewControllerRenderMode:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIColor * _Nonnull)mediaEditPreviewControllerBackgroundColor:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIEdgeInsets)mediaEditPreviewControllerPreviewInsets:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)mediaEditPreviewControllerPreviewScale:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)mediaEditPreviewControllerProxyZoomingActive:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)mediaEditPreviewControllerResetProxyZooming:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// :nodoc:
- (BOOL)mediaEditPreviewControllerPlaybackEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)mediaEditPreviewControllerDidChangePhotoEditModel:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
/// :nodoc:
- (PESDKConfiguration * _Nonnull)mediaEditPreviewControllerConfiguration:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)mediaEditPreviewControllerDidInitialize:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController;
@end


/// The <code>MediaEditViewControllerDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>MediaEditViewController</code>.
SWIFT_PROTOCOL_NAMED("MediaEditViewControllerDelegate")
@protocol PESDKMediaEditViewControllerDelegate
@optional
/// Called when a new tool controller will be pushed onto the tool stack.
/// \param mediaEditViewController The media edit view controller presenting the tool.
///
/// \param toolController The tool being presented.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController willPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a new tool controller was pushed onto the tool stack.
/// \param mediaEditViewController The media edit view controller presenting the tool.
///
/// \param toolController The tool that was presented.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController didPresentToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller will be popped from the tool stack.
/// \param mediaEditViewController The media edit view controller dismissing the tool.
///
/// \param toolController The tool being dismissed.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController willDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// Called when a tool controller was popped from the tool stack.
/// \param mediaEditViewController The media edit view controller dismissing the tool.
///
/// \param toolController The tool that was dismissed.
///
- (void)mediaEditViewController:(PESDKMediaEditViewController * _Nonnull)mediaEditViewController didDismissToolController:(PESDKPhotoEditToolController * _Nonnull)toolController;
@end

enum PESDKNavigationControllerMode : NSInteger;
@class PESDKMediaEditViewControllerOptionsBuilder;

/// Options for configuring a <code>MediaEditViewController</code>.
SWIFT_CLASS_NAMED("MediaEditViewControllerOptions")
@interface PESDKMediaEditViewControllerOptions : NSObject
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, readonly, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// The main view’s background color. Defaults to the configuration’s global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// The background color of the menu. Defaults to the configuration’s global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// Controls if the user can zoom the preview image. Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL allowsPreviewImageZoom;
/// When set to <code>true</code>, the user is forced to crop the asset to one of the allowed crop aspects
/// in <code>TransformToolControllerOptions.allowedCropAspects</code> before being able to use other
/// features of the editor. The transform tool will only be presented if the image does not
/// already fit one of those allowed aspect ratios. It will be presented automatically, if the
/// user changes the orientation of the asset and the result does not match an allowed
/// aspect ratio. If set to <code>false</code> while the image does not fit one of the allowed crop aspects,
/// the image will be silently cropped using the best fitting allowed crop aspect.
/// Default is set to <code>false</code>.
/// attention:
/// This property has no effect unless <code>TransformToolControllerOptions.allowFreeCrop</code>
/// is set to <code>false</code>.
@property (nonatomic, readonly) BOOL forceCropMode;
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum MediaEditOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable mediaEditOverlayActionSelectedClosure)(enum MediaEditOverlayAction);
/// The undo/redo buttons in the <code>MediaEditViewController</code> have two different modes of operation:
/// If this property is <code>true</code> (the default) each operation will be undone individually. So for
/// example if you draw 3 strokes in the brush tool and move a sticker around twice in the
/// sticker options tools, you’d have to tap ‘undo’ 5 times to undo everything.
/// If this property is <code>false</code> all modifications that have been made within a single tool will
/// be grouped together and undone in one step. In the above example that means that you’d only
/// have to tap ‘undo’ 2 times to undo everything (once for the changes within the sticker
/// options tool and once for the changes within the brush tool).
@property (nonatomic, readonly) BOOL undoStepByStep;
/// If set this closure is called when the user taps the discard button while changes to the
/// image are applied. You can for example use this to present an alert view informing the user
/// that he is about to lose his changes. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution. By default it is set to present
/// an <code>UIAlertController</code>.
@property (nonatomic, readonly, copy) void (^ _Nullable discardConfirmationClosure)(PESDKMediaEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// This option defines the behavior if a <code>MediaEditViewController</code>or one of its ancestors is a child
/// of a <code>UINavigationController</code>. Default is <code>NavigationControllerMode.useNavigationBar</code>.
@property (nonatomic, readonly) enum PESDKNavigationControllerMode navigationControllerMode;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// If enabled, the editor will render and export the asset in the defined output format even if no changes
/// have been applied. Otherwise, the input asset will be passed through and might not match the defined
/// output format.
/// Default is set to <code>false</code>.
@property (nonatomic, readonly) BOOL forceExport;
/// If enabled and you only have one item in the tools menu, menu step will be skipped and single tool
/// will be shown. Dismissing the tool will be redirecred to dismissing the editor.
/// Default is set to <code>true</code>.
@property (nonatomic, readonly) BOOL singleToolUsage;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>MediaEditViewControllerOptions</code> using the given builder.
/// \param builder A <code>MediaEditViewControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKMediaEditViewControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


/// The default <code>MediaEditViewControllerOptionsBuilder</code> for <code>MediaEditViewControllerOptions</code>.
SWIFT_CLASS_NAMED("MediaEditViewControllerOptionsBuilder")
@interface PESDKMediaEditViewControllerOptionsBuilder : NSObject
/// A configuration closure to configure the toolbars title view.
@property (nonatomic, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/// The main view’s background color. Defaults to the configuration’s global background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The background color of the menu. Defaults to the configuration’s global background color.
@property (nonatomic, strong) UIColor * _Nullable menuBackgroundColor;
/// A configuration closure to configure the apply button displayed at the bottom right.
/// Defaults to a checkmark icon.
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// A configuration closure to configure the discard button displayed at the bottom left.
/// Defaults to a cross icon.
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(PESDKButton * _Nonnull);
/// When set to <code>true</code>, the user is forced to crop the asset to one of the allowed crop aspects
/// in <code>TransformToolControllerOptions.allowedCropAspects</code> before being able to use other
/// features of the editor. The transform tool will only be presented if the image does not
/// already fit one of those allowed aspect ratios. It will be presented automatically, if the
/// user changes the orientation of the asset and the result does not match an allowed
/// aspect ratio. If set to <code>false</code> while the image does not fit one of the allowed crop aspects,
/// the image will be silently cropped using the best fitting allowed crop aspect.
/// Default is set to <code>false</code>.
/// attention:
/// This property has no effect unless <code>TransformToolControllerOptions.allowFreeCrop</code>
/// is set to <code>false</code>.
@property (nonatomic) BOOL forceCropMode;
/// Controls if the user can zoom the preview image. Defaults to <code>true</code>.
@property (nonatomic) BOOL allowsPreviewImageZoom;
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum MediaEditOverlayAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, copy) void (^ _Nullable mediaEditOverlayActionSelectedClosure)(enum MediaEditOverlayAction);
/// The undo/redo buttons in the <code>MediaEditViewController</code> have two different modes of operation:
/// If this property is <code>true</code> (the default) each operation will be undone individually. So for
/// example if you draw 3 strokes in the brush tool and move a sticker around twice in the
/// sticker options tools, you’d have to tap ‘undo’ 5 times to undo everything.
/// If this property is <code>false</code> all modifications that have been made within a single tool will
/// be grouped together and undone in one step. In the above example that means that you’d only
/// have to tap ‘undo’ 2 times to undo everything (once for the changes within the sticker
/// options tool and once for the changes within the brush tool).
@property (nonatomic) BOOL undoStepByStep;
/// If set this closure is called when the user taps the discard button while changes to the
/// image are applied. You can for example use this to present an alert view informing the user
/// that he is about to lose his changes. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution. By default it is set to present
/// an <code>UIAlertController</code>.
@property (nonatomic, copy) void (^ _Nullable discardConfirmationClosure)(PESDKMediaEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// This option defines the behavior if a <code>MediaEditViewController</code>or one of its ancestors is a child
/// of a <code>UINavigationController</code>. Default is <code>NavigationControllerMode.useNavigationBar</code>.
@property (nonatomic) enum PESDKNavigationControllerMode navigationControllerMode;
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// If enabled, the editor will render and export the asset in the defined output format even if no changes
/// have been applied. Otherwise, the input asset will be passed through and might not match the defined
/// output format.
/// Default is set to <code>false</code>.
@property (nonatomic) BOOL forceExport;
/// If enabled and you only have one item in the tools menu, menu step will be skipped and single tool
/// will be shown. Dismissing the tool will be redirecred to dismissing the editor.
/// Default is set to <code>true</code>.
@property (nonatomic) BOOL singleToolUsage;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>MediaEditViewControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>MediaEditViewControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKMediaEditViewControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@end


@class PESDKPhotoEditMenuItem;

@interface PESDKMediaEditViewControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationBlock)(PESDKMenuCollectionViewCell * _Nonnull, PESDKPhotoEditMenuItem * _Nonnull);
/// This closure is called every time the user selects a menu item.
@property (nonatomic, copy) void (^ _Nullable photoEditorActionSelectedBlock)(PESDKPhotoEditMenuItem * _Nonnull);
/// An array of <code>MediaEditOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedMediaEditOverlayActions</code> with the corresponding <code>MediaEditOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedMediaEditOverlayActions;
/// The menu items (or tools) to display in the main menu. Default is
/// <code>PhotoEditMenuItem.defaultItems</code>.
@property (nonatomic, copy) NSArray<PESDKPhotoEditMenuItem *> * _Nonnull menuItems;
@end


/// A view that hosts accessory UI elements above or below a <code>MenuCollectionView</code>.
/// It is used to define the accessory’s <code>backgroundColor</code> and to configure UI elements that depend on it.
SWIFT_CLASS_NAMED("MenuAccessoryContainerView")
@interface PESDKMenuAccessoryContainerView : UIView
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// This closure is executed when the <code>backgroundColor</code> changes.
@property (nonatomic, copy) void (^ _Nullable backgroundColorDidChange)(UIColor * _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewFlowLayout;

/// A <code>MenuCollectionView</code> is a subclass of <code>UICollectionView</code> configured to be used as the menu
/// of a tool controller.
SWIFT_CLASS_NAMED("MenuCollectionView")
@interface PESDKMenuCollectionView : UICollectionView
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// The flow layout of the collection view.
@property (nonatomic, readonly, strong) UICollectionViewFlowLayout * _Nonnull flowLayout;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
@end


/// The cell that is used in the menu.
SWIFT_CLASS_NAMED("MenuCollectionViewCell")
@interface PESDKMenuCollectionViewCell : UICollectionViewCell
/// Whether this cell is currently active or not. This behaves similar to <code>isSelected</code>, however
/// we don’t use <code>isSelected</code> on purpose to have better control over a cell’s selection state.
@property (nonatomic) BOOL isActive;
/// The icon image view displays an icon close to the center of the cell.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconImageView;
/// The caption text label displays text close to the bottom of the cell.
@property (nonatomic, readonly, strong) PESDKLabel * _Nonnull captionTextLabel;
/// A gradient view that is displayed behind the <code>captionTextLabel</code>.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull captionGradientView;
/// The background image view displays an image below the other views and across the whole size
/// of the cell.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull backgroundImageView;
/// The background dimming view will be visible when the cell is selected and
/// <code>dimBackgroundImageWhenSelected</code> is <code>true</code> to dim the content of <code>backgroundImageView</code>.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundDimmingView;
/// When set to <code>true</code> the <code>backgroundImageView</code>’s content will be dimmed when the cell is
/// selected. This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL dimsBackgroundImageWhenSelected;
/// When set to <code>true</code> the <code>iconImageView</code>’s and <code>captionTextLabel</code> content will be slightly
/// dimmed when the cell is not selected. This property supports being set via a <code>UIAppearance</code>
/// proxy.
@property (nonatomic) BOOL dimsContentWhenNotSelected;
/// When set to <code>true</code> the <code>captionGradientView</code> will be visible. This property supports being
/// set via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL showsGradientBehindCaptionTextLabel;
/// An activity indicator that is close to the center of the cell.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/// The color of the cell’s content (i.e. the <code>iconImageView</code> and <code>captionTextLabel</code>). While the
/// cell is not selected this color will be slightly dimmed by lowering the alpha value, when the
/// cell is selected the value will be displayed with an alpha value of <code>1</code>. This property
/// supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull contentTintColor;
/// The color that the <code>backgroundImageView</code> is dimmed with if <code>dimBackgroundImageWhenSelected</code>
/// is <code>true</code>. This property suppports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull backgroundDimmingColor;
/// When set to <code>false</code> the <code>captionTextLabel</code> won’t be shown. This property supports being set
/// via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL showsCaptionTextLabel;
/// The border width of the selection indicator.
/// This property suppports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat selectionBorderWidth;
/// The corner radius of the <code>contentView</code>.
/// This property suppports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat cornerRadius;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)updateConstraints;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
- (void)prepareForReuse;
/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end




/// The <code>MenuListSectionControllerListDisplayDelegate</code> protocol defines methods that allow you to
/// respond to the display events of an instance of <code>MenuListSectionController</code>.
SWIFT_PROTOCOL_NAMED("MenuListSectionControllerListDisplayDelegate")
@protocol PESDKMenuListSectionControllerListDisplayDelegate
/// Called just before a cell will be displayed.
/// \param sectionController The section controller that handles the cell.
///
/// \param cell The cell that will be displayed.
///
/// \param index The index of the cell within the section.
///
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController willDisplay:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end


/// The <code>MenuListSectionControllerSelectionDelegate</code> protocol defines methods that allow you to
/// respond to the selection events of an instance of <code>MenuListSectionController</code>.
SWIFT_PROTOCOL_NAMED("MenuListSectionControllerSelectionDelegate")
@protocol PESDKMenuListSectionControllerSelectionDelegate
/// Called when an item is selected.
/// \param sectionController The section controller that handles the item.
///
/// \param index The index of the item that was selected within the section.
///
/// \param object The object that was selected.
///
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController didSelectItemAt:(NSInteger)index object:(id _Nonnull)object;
@end



/// A <code>MenuViewController</code> displays a menu at the bottom of its view and the view of an arbitrary
/// contained <code>UIViewController</code> above that menu.
SWIFT_CLASS_NAMED("MenuViewController")
@interface PESDKMenuViewController : PESDKViewController
/// The view controller whose view should be displayed above the menu.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/// When selecting an item in the menu, the item can either remain selected until manually
/// deselected (<code>true</code>) or be immediately deselected automatically (<code>false</code>). The default is <code>false</code>.
@property (nonatomic) BOOL keepsSelection;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKMenuViewControllerDelegate> _Nullable delegate;
/// The collection view which displays the menu.
@property (nonatomic, readonly, strong) PESDKMenuCollectionView * _Nonnull collectionView;
/// The view above the menu, where the <code>contentViewController</code>’s view is added to.
@property (nonatomic, readonly, strong) UIView * _Nonnull workspaceView;
/// The view that hosts the <code>collectionView</code>. It extends below the bottom <code>safeAreaLayoutGuide</code>
/// if needed.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull accessoryView;
/// The menu items that this menu view controller displays.
@property (nonatomic, copy) NSArray<id <PESDKMenuItem>> * _Nonnull menuItems;
/// The height of the menu. Default is <code>88</code>.
@property (nonatomic) CGFloat menuHeight;
/// Whether the menu is currently hidden or not.
@property (nonatomic, readonly) BOOL isMenuHidden;
/// Creates a new <code>MenuViewController</code> with the given content view controller.
/// \param contentViewController The content view controller to show above the menu.
///
- (nonnull instancetype)initWithContentViewController:(UIViewController * _Nonnull)contentViewController OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillLayoutSubviews;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
/// :nodoc:
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
/// Shows the menu.
/// \param animated Whether this change should be animated or not.
///
- (void)showMenuWithAnimated:(BOOL)animated;
/// Hides the menu.
/// \param animated Whether this change should be animated or not.
///
- (void)hideMenuWithAnimated:(BOOL)animated;
/// Performs an immediate reload of the menu.
/// attention:
/// If possible you should use <code>performUpdates(animated:completion:)</code> instead because
/// it is less expensive.
/// \param completion The block to execute when the reload completes. The passed <code>Bool</code>
/// variable specifies whether or not the update animations completed successfully.
///
- (void)reloadDataWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Performs an update from the previous state of the menu.
/// \param animated A flag indicating if the transition should be animated.
///
/// \param completion The block to edecuted when the updates complete.
///
- (void)performUpdatesWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Reloads the menu for only the specified menu items.
/// \param menuItems The menu items to reload.
///
- (void)reloadMenuItems:(NSArray<id <PESDKMenuItem>> * _Nonnull)menuItems;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKMenuViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMenuListSectionControllerSelectionDelegate>
/// :nodoc:
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController didSelectItemAt:(NSInteger)index object:(id _Nonnull)object;
@end


@interface PESDKMenuViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKMenuListSectionControllerListDisplayDelegate>
/// :nodoc:
- (void)sectionController:(PESDKMenuListSectionController * _Nonnull)sectionController willDisplay:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



enum PESDKStickerTintMode : NSInteger;

/// A <code>Sticker</code> represents a single sticker in a sticker category. Each sticker needs an image and a
/// thumbnail image. If no thumbnail is provided, it is automatically generated.
SWIFT_CLASS_NAMED("Sticker")
@interface PESDKSticker : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL for the sticker’s full size image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The thumbnail URL of the sticker. If this is <code>nil</code>, it will be generated
/// automatically from the full size image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// The tint mode that this sticker supports. Default is <code>.none</code>.
@property (nonatomic) enum PESDKStickerTintMode tintMode;
/// This string is used to identify the sticker. It must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Whether brightness for this sticker can be adjusted. Default is <code>false</code>.
@property (nonatomic) BOOL allowBrightnessAdjustment;
/// Whether contrast for this sticker can be adjusted. Default is <code>false</code>.
@property (nonatomic) BOOL allowContrastAdjustment;
/// Whether saturation for this sticker can be adjusted. Default is <code>false</code>.
@property (nonatomic) BOOL allowSaturationAdjustment;
/// Creates a sticker with an image url and optionally a thumbnail url.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param imageURL The url for the sticker’s full size image.
///
/// \param thumbnailURL The url for the sticker’s thumbnail image.
///
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL identifier:(NSString * _Nonnull)identifier;
/// Creates a sticker with an image url and optionally a thumbnail url.
/// note:
/// To support accessibility you should also set its <code>accessibilityLabel</code>.
/// \param imageURL The url for the sticker’s full size image.
///
/// \param thumbnailURL The url for the sticker’s thumbnail image.
///
/// \param tintMode The tint mode that this sticker supports.
///
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Returns the first sticker with the given identifier, if any.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the sticker to look for.
///
///
/// returns:
/// The sticker with the given identifier or <code>nil</code>.
+ (PESDKSticker * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.sticker(withIdentifier:)` of your `Configuration` object instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>MultiImageSticker</code> allows to provide multiple variants for a sticker. The variants are cycled when the sticker is already selected and tapped again on the canvas.
SWIFT_CLASS_NAMED("MultiImageSticker")
@interface PESDKMultiImageSticker : PESDKSticker
/// The array of sticker variants provided for this multi image sticker.
@property (nonatomic, readonly, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// Creates a multi image sticker with an image url for the thumbnail and the sticker variants it should be composed of.
/// \param imageURL The url for the thumbnail image. If <code>nil</code> the first sticker of the given <code>stickers</code> array will be used to create the thumbnail.
///
/// \param stickers The sticker variants to associate with this multi image sticker.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier imageURL:(NSURL * _Nullable)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier SWIFT_UNAVAILABLE;
@end





/// This mode defines the behavior if a <code>MediaEditViewController</code>or one of its ancestors is a child
/// of a <code>UINavigationController</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKNavigationControllerMode, "NavigationControllerMode", open) {
/// If there’s a <code>UINavigationController</code> use its <code>UINavigationBar</code> at the top of the screen
/// to display the <code>MediaEditViewController</code>‘s <code>Toolbar</code> which is normally displayed at the bottom
/// of the screen if there’s no <code>UINavigationController</code> present.
  PESDKNavigationControllerModeUseNavigationBar = 0,
/// If there’s a <code>UINavigationController</code> keep the <code>MediaEditViewController</code>’s <code>Toolbar</code>
/// at the bottom of the screen.
  PESDKNavigationControllerModeUseToolbar = 1,
/// When a <code>MediaEditViewController</code> is part of a custom container view controller, which is
/// presented in an <code>UINavigationController</code>, the <code>MediaEditViewController</code> will not be able to
/// update the navigation controller’s navigation bar by default because that is the job of the
/// immediate child of the navigation controller. This mode is identical to the <code>useNavigationBar</code> mode except
/// that the parent view controller’s <code>UINavigationItem</code> will be altered instead of the <code>MediaEditViewController</code>’s
/// own navigation item so that the <code>UINavigationBar</code> can be used to display the <code>Toolbar</code> even when embedded in
/// a custom container view controller.
  PESDKNavigationControllerModeUseNavigationBarAndParentNavigationItem = 2,
};


/// A concrete <code>Effect</code> that does nothing.
SWIFT_CLASS_NAMED("NoEffect")
@interface PESDKNoEffect : PESDKEffect
/// Creates a no-op effect.
///
/// returns:
/// A newly initialized <code>NoEffect</code> object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName SWIFT_UNAVAILABLE;
@end


enum PESDKTemperatureFormat : NSInteger;
@class PESDKTemperature;

/// The <code>WeatherProvider</code> protocol represents weather data independent of its source.
SWIFT_PROTOCOL_NAMED("WeatherProvider")
@protocol PESDKWeatherProvider
/// The temperature format that should be used for displaying temperature measurements to the user.
@property (nonatomic, readonly) enum PESDKTemperatureFormat temperatureFormat;
/// The temperature measurement.
@property (nonatomic, readonly, strong) PESDKTemperature * _Nullable temperature;
/// Request to update the weather data.
- (void)updateData;
@end


/// A <code>WeatherProvider</code> for the https://openweathermap.org service.
SWIFT_CLASS_NAMED("OpenWeatherProvider")
@interface PESDKOpenWeatherProvider : NSObject <CLLocationManagerDelegate, PESDKWeatherProvider>
/// The used API key. If <code>nil</code> or empty the sample API is used.
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// The minimum update interval to request new data from the service. It defaults to one hour.
@property (nonatomic) NSTimeInterval updateInterval;
/// Create a new <code>OpenWeatherProvider</code>.
/// \param apiKey The used API key. If <code>nil</code> or empty the sample API is used.
///
/// \param unit The temperature format that should be used for displaying temperature measurements to the user.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nullable)apiKey unit:(enum PESDKTemperatureFormat)unit OBJC_DESIGNATED_INITIALIZER;
/// The temperature format that should be used for displaying temperature measurements to the user.
@property (nonatomic) enum PESDKTemperatureFormat temperatureFormat;
/// The temperature measurement.
@property (nonatomic, readonly, strong) PESDKTemperature * _Nullable temperature;
/// Request to update the weather data.
- (void)updateData;
/// When this closure is called, the SDK has determined that location access has not been granted
/// to the host app yet. Within this closure you should then request appropriate permissions from
/// the passed in <code>CLLocationManager</code> object. Location access is used to request weather data
/// for the current location for weather stickers.
/// attention:
/// Starting Spring 2019, all apps submitted to the App Store that access user data
/// are required to include a purpose string as soon as location permissions requests appear
/// somewhere in the binary. Since we do not want to force developers integrating the SDK into
/// their app to include a purpose string even with weather stickers disabled, this closure was
/// introduced, so that developers can decide for themselves if it is appropriate to request
/// location access. Simply set this property like this:
/// \code
/// openWeatherProvider.locationAccessRequestClosure = { locationManager in
///   locationManager.requestWhenInUseAuthorization()
/// }
///
/// \endcode
@property (nonatomic, copy) void (^ _Nullable locationAccessRequestClosure)(CLLocationManager * _Nonnull);
/// :nodoc:
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the orientation of an image and has the same meaning as the corresponding EXIF value.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKOrientation, "Orientation", open) {
/// Row 0 is at the top, column 0 is on the left.
  PESDKOrientationNormal = 1,
/// Row 0 is at the top, column 0 is on the right.
  PESDKOrientationFlipX = 2,
/// Row 0 is at the bottom, column 0 is on the right.
  PESDKOrientationRotate180 = 3,
/// Row 0 is at the bottom, column 0 is on the left.
  PESDKOrientationFlipY = 4,
/// Row 0 is on the left, column 0 is at the top.
  PESDKOrientationTransverse = 5,
/// Row 0 is on the right, column 0 is at the top.
  PESDKOrientationRotate90 = 6,
/// Row 0 is on the right, column 0 is at the bottom.
  PESDKOrientationTranspose = 7,
/// Row 0 is on the left, column 0 is at the bottom.
  PESDKOrientationRotate270 = 8,
};

/// Represents how will editor handle output resolution in case where desired
/// crop ratio can’t be represented with current dimensions.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKOutputScalingRule, "OutputScalingRule", open) {
/// No output scaling will be performed. This means that output resolution
/// aspect ratio isnt guaranteed to be exactly the same as selected in editor.
  PESDKOutputScalingRuleNone = 0,
/// Image will be scaled down to the closest dimensions that represent the
/// selected aspect ratio.
  PESDKOutputScalingRuleScaleDown = 1,
/// Image will be scaled up to the closest dimensions that represent the
/// selected aspect ratio.
  PESDKOutputScalingRuleScaleUp = 2,
/// Image will be scaled down or up to the closest dimensions (depending
/// what is closer), that represent the selected aspect ratio.
  PESDKOutputScalingRuleScaleUpOrDown = 3,
/// Image will have the exact resolution as aspect ratio width and height.
/// Example: If aspect ratio is set to 16×9, output resolution will have width
/// of 16px and height of 9px.
  PESDKOutputScalingRuleExactResolution = 4,
};


/// An <code>Overlay</code> represents a unique overlay that can be added to a photo.
SWIFT_CLASS_NAMED("Overlay")
@interface PESDKOverlay : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// This string is used to identify the overlay. It must be unique.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The URL of the image.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The URL of the thumbnail for this overlay. If none is provided,
/// the <code>url</code> will be used.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// This string will be used within the UI.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// This mode will be set when the overlay is selected in the UI.
@property (nonatomic, readonly) enum PESDKBlendMode initialBlendMode;
/// Initialize a new Overlay
/// \param identifier An identifier.
///
/// \param displayName This will be used within the UI.
///
/// \param url The URL of the image.
///
/// \param thumbnailURL The URL of the thumbnail for this overlay. If none is provided,
/// the <code>url</code> will be used.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier displayName:(NSString * _Nonnull)displayName url:(NSURL * _Nullable)url thumbnailURL:(NSURL * _Nullable)thumbnailURL initialBlendMode:(enum PESDKBlendMode)initialBlendMode OBJC_DESIGNATED_INITIALIZER;
/// Get the overlay from the pool with the given identifier.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier An identifier.
///
///
/// returns:
/// The overlay that matches the identifier, <code>nil</code> otherwise.
+ (PESDKOverlay * _Nullable)overlayWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.overlay(withIdentifier:)` of your `Configuration` object instead.");
/// This is a special case of an overlay. It means, apply no overlay at all.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKOverlay * _Nonnull none;)
+ (PESDKOverlay * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Creates the default overlays that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKOverlay *> * _Nonnull defaultItems;)
+ (NSArray<PESDKOverlay *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// This array represents the pool of overlays available to the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKOverlay *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.overlays` of your `Configuration` object instead.");)
+ (NSArray<PESDKOverlay *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKOverlay *> * _Nonnull)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An <code>OverlayButton</code> is used inside the <code>workspaceView</code> of a <code>StackLayoutToolController</code>. It is
/// a regular button with a translucent black background.
SWIFT_CLASS_NAMED("OverlayButton")
@interface PESDKOverlayButton : PESDKButton
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Sets the images for the <code>UIControl.State</code> <code>normal</code> and <code>disabled</code> based on the given templated image.
/// The alpha value of the image is reduced for the <code>disabled</code> state.
/// \param image The image for the <code>UIControl.State</code> <code>normal</code> and <code>disabled</code>.
///
- (void)setImage:(UIImage * _Nullable)image;
/// Creates the default add button.
///
/// returns:
/// The default add button.
+ (PESDKOverlayButton * _Nonnull)makeAddButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default delete button.
///
/// returns:
/// The default delete button.
+ (PESDKOverlayButton * _Nonnull)makeDeleteButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default flip button.
///
/// returns:
/// The default flip button.
+ (PESDKOverlayButton * _Nonnull)makeFlipButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default straighten button.
///
/// returns:
/// The default straighten button.
+ (PESDKOverlayButton * _Nonnull)makeStraightenButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default bring to front button.
///
/// returns:
/// The default bring to front button.
+ (PESDKOverlayButton * _Nonnull)makeToFrontButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default undo button.
///
/// returns:
/// The default undo button.
+ (PESDKOverlayButton * _Nonnull)makeUndoButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default redo button.
///
/// returns:
/// The default redo button.
+ (PESDKOverlayButton * _Nonnull)makeRedoButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default alignment button.
///
/// returns:
/// The default alignment button.
+ (PESDKOverlayButton * _Nonnull)makeAlignmentButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default invert button.
///
/// returns:
/// The default invert button.
+ (PESDKOverlayButton * _Nonnull)makeInvertButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default disable invert button.
///
/// returns:
/// The default disable invert button.
+ (PESDKOverlayButton * _Nonnull)makeDisableInvertButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default play button.
///
/// returns:
/// The default play button.
+ (PESDKOverlayButton * _Nonnull)makePlayButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default pause button.
///
/// returns:
/// The default pause button.
+ (PESDKOverlayButton * _Nonnull)makePauseButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default sound on button.
///
/// returns:
/// The default sound on button.
+ (PESDKOverlayButton * _Nonnull)makeSoundOnButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default sound off button.
///
/// returns:
/// The default sound off button.
+ (PESDKOverlayButton * _Nonnull)makeSoundOffButton SWIFT_WARN_UNUSED_RESULT;
/// Creates the default background removal button.
///
/// returns:
/// The default background removal button.
+ (PESDKOverlayButton * _Nonnull)makeRemoveBackgroundButton SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=15.0);
@end

@protocol PESDKOverlayEditControllerDelegate;

/// A <code>OverlayEditController</code> displays controls to update the blend mode and intensity of an
/// overlay. It is supposed to be contained in a tool controller and be presented above a
/// <code>PhotoEditPreviewController</code>. It contains a <code>SliderEditController</code> to present a slider to
/// control the overlay intensity.
SWIFT_CLASS_NAMED("OverlayEditController")
@interface PESDKOverlayEditController : PESDKViewController
/// The container for the blend mode collection view. This view displays a light gradient.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull blendModeContainerView;
/// The collection view that displays the currently selected blend mode.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull blendModeCollectionView;
/// The currently active overlay.
@property (nonatomic, strong) PESDKOverlay * _Nullable overlay;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKOverlayEditControllerDelegate> _Nullable delegate;
/// Whether to show the intensity slider, <code>true</code> by default.
@property (nonatomic) BOOL showOverlayIntensitySlider;
/// Whether to show the blend mode selection view, <code>true</code> by default.
@property (nonatomic) BOOL showBlendModeCollectionView;
/// The default initial intensity when selecting a new overlay, <code>1</code> by default.
@property (nonatomic) CGFloat initialOverlayIntensity;
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Changes the currently active blend mode.
/// \param blendMode The new blend mode.
///
/// \param animated Whether to animate this change.
///
- (void)selectBlendMode:(enum PESDKBlendMode)blendMode animated:(BOOL)animated;
/// Selects the next available blend mode.
/// \param animated Whether to animate this change.
///
- (void)selectNextBlendModeWithAnimated:(BOOL)animated;
/// Shows the intensity slider based on <code>showOverlayIntensitySlider</code>.
/// \param animated Whether to animate this change.
///
- (void)showControlsWithAnimated:(BOOL)animated;
/// Hides the intensity slider.
/// \param animated Whether to animate this change.
///
- (void)hideControlsWithAnimated:(BOOL)animated;
/// Shows the blend mode collection view.
/// \param animated Whether to animate this change.
///
- (void)showBlendModesWithAnimated:(BOOL)animated;
/// Hides the blend mode collection view.
/// \param animated Whether to animate this change.
///
- (void)hideBlendModesWithAnimated:(BOOL)animated;
/// Whether the blend mode collection view is currently hidden or not.
@property (nonatomic, readonly) BOOL isBlendModeViewHidden;
/// The time it takes until the blend mode collection view will fade out after switching blend
/// modes. Default is two seconds.
@property (nonatomic) NSTimeInterval blendModeHideTimeInterval;
/// Changes the currently set overlay.
/// \param overlay The new overlay or <code>nil</code> to disable the overlay.
///
/// \param animated Whether to animate this change.
///
- (void)setOverlay:(PESDKOverlay * _Nullable)overlay animated:(BOOL)animated;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)updateViewConstraints;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKBlendModeCollectionViewCell) _Nonnull collectionViewCellType;)
+ (SWIFT_METATYPE(PESDKBlendModeCollectionViewCell) _Nonnull)collectionViewCellType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
@end


@interface PESDKOverlayEditController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// The <code>OverlayEditControllerDelegate</code> defines methods that allow you to respond to messages from
/// the <code>OverlayEditControllerDelegate</code>.
SWIFT_PROTOCOL_NAMED("OverlayEditControllerDelegate")
@protocol PESDKOverlayEditControllerDelegate
/// Tells the delegate that the controller’s <code>PhotoEditModel</code> changed.
/// \param overlayEditController The overlay edit controller that changed the photo edit model.
///
- (void)overlayEditControllerDidChangePhotoEditModel:(PESDKOverlayEditController * _Nonnull)overlayEditController;
/// Asks the delegate for the scroll view to which zoom events of the overlay edit controller should
/// be forwarded.
/// \param overlayEditController The overlay edit controller asking for the scroll view.
///
///
/// returns:
/// The scroll view which should be the target of the proxy scroll view.
- (UIScrollView * _Nullable)overlayEditControllerTargetScrollView:(PESDKOverlayEditController * _Nonnull)overlayEditController SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the controller is about to display the given blend mode in the given
/// cell.
/// \param overlayEditController The overlay edit controller that is about to diplay the blend mode.
///
/// \param blendMode The blend mode that is about to be displayed.
///
/// \param cell The cell in which the blend mode is displayed.
///
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController willDisplay:(enum PESDKBlendMode)blendMode in:(PESDKBlendModeCollectionViewCell * _Nonnull)cell;
/// Tells the delegate when the preview view’s preferred insets changed.
/// \param overlayEditController The overlay edit controller object that changed the insets.
///
/// \param animated Whether or not this change should be animated.
///
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end


/// This filter applies an overlay to an image.
SWIFT_CLASS_NAMED("OverlayFilter")
@interface PESDKOverlayFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The overlay image image.
@property (nonatomic, strong) CIImage * _Nullable inputOverlayImage;
/// The effect intensity.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/// The blend mode that should be used
@property (nonatomic, strong) NSNumber * _Nullable inputBlendMode;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// An <code>OverlayLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("OverlayLabel")
@interface PESDKOverlayLabel : PESDKLabel
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// Handles the display of <code>OverlayMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("OverlayListSectionController")
@interface PESDKOverlayListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (void)selectItemAt:(NSInteger)index;
/// :nodoc:
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>OverlayToolController</code>.
SWIFT_CLASS_NAMED("OverlayMenuItem")
@interface PESDKOverlayMenuItem : NSObject <PESDKMenuItem>
/// The <code>Overlay</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKOverlay * _Nonnull overlay;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the thumbnail image of this overlay.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// An optional thumbnail image. If this is set, <code>thumbnailURL</code> won’t be used.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;
/// Creates a new overlay menu item for the given overlay.
/// \param overlay The overlay that this menu item represents.
///
- (nonnull instancetype)initWithOverlay:(PESDKOverlay * _Nonnull)overlay thumbnail:(UIImage * _Nullable)thumbnail;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit the overlay. It contains a menu with options to select the overlay
/// and a <code>OverlayEditController</code> to update the blend mode and overlay intensity.
SWIFT_CLASS_NAMED("OverlayToolController")
@interface PESDKOverlayToolController : PESDKMenuToolController <PESDKOverlayEditControllerDelegate>
/// The contained <code>OverlayEditController</code>.
@property (nonatomic, readonly, strong) PESDKOverlayEditController * _Nonnull overlayEditController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// :nodoc:
- (void)overlayEditControllerDidChangePhotoEditModel:(PESDKOverlayEditController * _Nonnull)overlayEditController;
/// :nodoc:
- (UIScrollView * _Nullable)overlayEditControllerTargetScrollView:(PESDKOverlayEditController * _Nonnull)overlayEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController willDisplay:(enum PESDKBlendMode)blendMode in:(PESDKBlendModeCollectionViewCell * _Nonnull)cell;
/// :nodoc:
- (void)overlayEditController:(PESDKOverlayEditController * _Nonnull)overlayEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
@end



/// Options for configuring a <code>OverlayToolController</code>.
SWIFT_CLASS_NAMED("OverlayToolControllerOptions")
@interface PESDKOverlayToolControllerOptions : PESDKToolControllerOptions
/// This closure can be used to configure the overlay intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the overlay intensity slider’s container view.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the overlay intensity slider. Defaults to true.
@property (nonatomic, readonly) BOOL showOverlayIntensitySlider;
/// Enable/Disable the overlay blend mode collection view. Defaults to true.
@property (nonatomic, readonly) BOOL showBlendModeCollectionView;
/// This closure is called every time the user selects a overlay.
@property (nonatomic, readonly, copy) void (^ _Nullable overlaySelectedClosure)(PESDKOverlay * _Nonnull);
/// This closure is called every time the user selects a new blend mode.
@property (nonatomic, readonly, copy) void (^ _Nullable blendModeSelectedClosure)(enum PESDKBlendMode);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Overlay</code> will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKOverlay * _Nonnull);
/// This closure allows further configuration of the overlay cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Overlay</code> as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKOverlay * _Nonnull);
/// The initial intensity that should be set when selecting an overlay.
@property (nonatomic, readonly) CGFloat initialOverlayIntensity;
/// This closure allows further configuration of the blend mode collection view.
@property (nonatomic, readonly, copy) void (^ _Nullable blendModeCollectionViewConfigurationClosure)(UICollectionView * _Nonnull);
/// This closure allows further configuration of the blend mode collection view cell.
@property (nonatomic, readonly, copy) void (^ _Nullable blendModeCollectionViewCellConfigurationClosure)(PESDKBlendModeCollectionViewCell * _Nonnull, enum PESDKBlendMode);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>OverlayToolControllerOptions</code> using the given builder.
/// \param builder A <code>OverlayToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKOverlayToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>OverlayToolControllerOptionsBuilder</code> for <code>OverlayToolControllerOptions</code>.
SWIFT_CLASS_NAMED("OverlayToolControllerOptionsBuilder")
@interface PESDKOverlayToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure can be used to configure the overlay intensity slider.
@property (nonatomic, copy) void (^ _Nullable overlayIntensitySliderConfigurationClosure)(PESDKSlider * _Nonnull);
/// This closure can be used to configure the overlay intensity slider’s container view.
@property (nonatomic, copy) void (^ _Nullable overlayIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/// Enable/Disable the overlay intensity slider. Defaults to true.
@property (nonatomic) BOOL showOverlayIntensitySlider;
/// This closure is called every time the user selects a overlay.
@property (nonatomic, copy) void (^ _Nullable overlaySelectedClosure)(PESDKOverlay * _Nonnull);
/// This closure is called every time the user selects a new blend mode.
@property (nonatomic, copy) void (^ _Nullable blendModeSelectedClosure)(enum PESDKBlendMode);
/// This closure will be called whenever the value of the slider changes. The <code>Slider</code> and the
/// selected instance of <code>Overlay</code> will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayIntensityChangedClosure)(PESDKSlider * _Nonnull, PESDKOverlay * _Nonnull);
/// Enable/Disable the overlay blend mode collection view. Defaults to true.
@property (nonatomic) BOOL showBlendModeCollectionView;
/// This closure allows further configuration of the overlay cells. The closure is called for
/// each filter cell and has the cell and its corresponding instance of <code>Overlay</code> as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayCellConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKOverlay * _Nonnull);
/// The initial intensity that should be set when selecting an overlay.
@property (nonatomic) CGFloat initialOverlayIntensity;
/// This closure allows further configuration of the blend mode collection view.
@property (nonatomic, copy) void (^ _Nullable blendModeCollectionViewConfigurationClosure)(UICollectionView * _Nonnull);
/// This closure allows further configuration of the blend mode collection view cell.
@property (nonatomic, copy) void (^ _Nullable blendModeCollectionViewCellConfigurationClosure)(PESDKBlendModeCollectionViewCell * _Nonnull, enum PESDKBlendMode);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>OverlayToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>OverlayToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKOverlayToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKOverlayToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>BlendMode</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedBlendModes</code> with the corresponding <code>BlendMode</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBlendModes;
@end


/// <code>PESDK</code> provides methods to unlock and customize the SDK.
SWIFT_CLASS("_TtC8ImglyKit5PESDK")
@interface PESDK : IMGLY
/// :nodoc:
+ (BOOL)crashIfNeededAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKTexture;

/// A <code>Painting</code> manages the shaders, textures, vertices and framebuffers involved in a single painting.
SWIFT_CLASS_NAMED("Painting")
@interface PESDKPainting : NSObject
/// The canvas view that displays this painting.
@property (nonatomic, weak) PESDKCanvasView * _Nullable canvas;
/// The size of the painting.
@property (nonatomic, readonly) CGSize dimensions;
/// The bounds of the painting.
@property (nonatomic, readonly) CGRect bounds;
/// The brush texture that will be used to paint strokes.
@property (nonatomic, strong) PESDKTexture * _Nullable brushTexture;
/// Creates a new painting of the given size for a specific Metal device.
/// \param size The size of the painting.
///
/// \param device The Metal device to use for drawing.
///
- (nonnull instancetype)initWithSize:(CGSize)size device:(id <MTLDevice> _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
/// Creates a new painting of the given size using the default Metal device.
/// \param size The size of the painting.
///
- (nullable instancetype)initWithSize:(CGSize)size;
/// Clears the painting of any drawings.
- (void)clear;
/// Preloads the texture that will be used to render drawings into.
- (void)preloadPaintTexture;
/// Generates an <code>UIImage</code> of the painting of the given size and with the given background color.
/// \param size The size of the requested image.
///
/// \param color The background color of the image.
///
///
/// returns:
/// An image of the painting.
- (UIImage * _Nullable)imageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Generates a <code>CIImage</code> of the painting of the given size and with the given background color.
/// \param size The size of the requested image.
///
/// \param color The background color of the image.
///
///
/// returns:
/// An image of the painting.
- (CIImage * _Nullable)ciImageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>PaintingFragment</code> holds the data to redraw a certain part of a <code>Painting</code>. This is mainly
/// used for fast and efficient undo and redo.
SWIFT_CLASS_NAMED("PaintingFragment")
@interface PESDKPaintingFragment : NSObject
/// The rectangle of the painting that this fragment represents.
@property (nonatomic, readonly) CGRect bounds;
/// The size of the saved data.
@property (nonatomic, readonly) NSInteger dataLength;
/// The bitmap data that belongs to this fragment. This is stored on disk and retrieved when needed.
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Creates a new <code>PaintingFragment</code> with the given data and for the given bounds.
/// \param data The bitmap data that belongs to this fragment.
///
/// \param bounds The rectangle of the painting that this fragment represents.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data bounds:(CGRect)bounds OBJC_DESIGNATED_INITIALIZER;
/// Applies the bitmap data of this fragment in the given painting.
/// \param painting The painting to apply this fragment in.
///
- (void)applyIn:(PESDKPainting * _Nonnull)painting;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object that wraps different types of image data.
/// The <code>Photo</code> class currently supports <code>URL</code>, <code>Data</code> and <code>UIImage</code> as sources for photos.
/// The image type to choose depends on where the image comes from:
/// <ul>
///   <li>
///     Use <code>URL</code> for image files on disk.
///   </li>
///   <li>
///     Use <code>Data</code> for images from the web.
///   </li>
///   <li>
///     Use <code>UIImage</code> only if the image was already used in the UI.
///   </li>
/// </ul>
/// Using <code>URL</code> or <code>Data</code> will have the least amount of memory footprint because we will do
/// the image scaling without reading the full image if possible. We also try to do this with
/// <code>UIImage</code>, however if the instance of <code>UIImage</code> represents a wide-color image we will have to
/// read the full image which can lead to memory pressure for large images.
/// If memory is still an issue when using <code>Data</code> objects, it is recommended that you write the data
/// to disk and initialize a <code>Photo</code> with a file url instead.
/// When <code>URL</code> or <code>Data</code> is used we are also able to keep any associated EXIF data, which <code>UIImage</code>
/// does not support.
/// The data format can be any image format that can be read by iOS, for example PNG, JPEG or HEIF.
/// note:
/// You don’t have to pre-scale your image because we’re already doing any work that is
/// necessary.
SWIFT_CLASS_NAMED("Photo")
@interface PESDKPhoto : NSObject
/// The url that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The data object that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The image object that this photo was initialized with if any.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The <code>UIImage</code> representation of this <code>Photo</code>.
@property (nonatomic, strong) UIImage * _Nullable uiImage;
/// The size of the photo.
@property (nonatomic, readonly) CGSize size;
/// Get the underlying <code>Photo</code> from a <code>PhotoRepresentation</code> if it is a <code>Photo</code> or create a new photo if necessary.
+ (PESDKPhoto * _Nullable)photoFromPhotoRepresentation:(id <PESDKPhotoRepresentation> _Nonnull)photoRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Creates a new photo from the given url.
/// \param url The url to the image on disk.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Creates a new photo from the given data.
/// \param data The data of the image.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
/// Creates a new photo from the given <code>UIImage</code> object.
/// \param image The <code>UIImage</code> instance.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>PhotoRepresentation</code> protocol represents a photo of some form.
SWIFT_PROTOCOL_NAMED("PhotoRepresentation")
@protocol PESDKPhotoRepresentation
/// The url that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The data object that this photo was initialized with if any.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The image object that this photo was initialized with if any.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The <code>UIImage</code> representation of this <code>PhotoRepresentation</code>.
@property (nonatomic, readonly, strong) UIImage * _Nullable uiImage;
/// The size of the photo.
@property (nonatomic, readonly) CGSize size;
/// Creates a new photo representation with the given data.
/// \param data The data of the image.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// Creates a new photo representatino with the given url.
/// \param url The url of the image on disk.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
@end


@interface PESDKPhoto (SWIFT_EXTENSION(ImglyKit)) <PESDKPhotoRepresentation>
@end


/// The <code>PhotoEditPreviewController</code> is responsible for previewing changes to a photo and displaying
/// the image in a scrollable container. It is passed a full resolution <code>UIImage</code> object and handles
/// downscaling automatically.
SWIFT_CLASS_NAMED("PhotoEditPreviewController")
@interface PESDKPhotoEditPreviewController : PESDKMediaEditPreviewController
/// The photo that is being previewed.
@property (nonatomic, readonly, strong) PESDKPhoto * _Nonnull photo;
/// Generates a resized version of the high resolution photo such that it fits within the bounds
/// of <code>workImageSize(for:)</code> while maintaining the original aspect ratio.
- (void)loadBaseImage:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// :nodoc:
- (void)updateRenderer;
@end


@interface PESDKPhotoEditPreviewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a newly initialized photo edit preview controller for the given photo and the given
/// photo edit model.
/// \param photoAsset The photo to preview.
///
/// \param photoEditModel The photo edit model to render.
///
- (nonnull instancetype)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
@end

enum PESDKLicenseProduct : NSInteger;
@class CIContext;
@protocol CAMetalDrawable;
@protocol MTLCommandQueue;
@class PESDKDrawReturnValue;

/// A <code>PhotoEditRenderer</code> takes a <code>CIImage</code> and a <code>PhotoEditModel</code> as input and takes care of
/// applying all necessary effects and filters to the image. The output image can then be rendered
/// into an <code>EAGLContext</code> or converted into a <code>CGImage</code> instance.
SWIFT_CLASS_NAMED("PhotoEditRenderer")
@interface PESDKPhotoEditRenderer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a new <code>PhotoEditRenderer</code> object.
/// note:
/// This initializer should only be used with Objective-C.
/// \param _objCProductType The product this renderer is used in.
///
- (nonnull instancetype)initWithProductType:(enum PESDKLicenseProduct)_objCProductType;
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable originalImage;
/// The render mode describes which effects should be applied to the input image.
@property (nonatomic) PESDKRenderMode renderMode;
/// The asset manager that is associated with this renderer. It is used to fetch the resources
/// for sprites like stickers, brush and frames.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The asset catalog that is associated with this renderer.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// The queue on which rendering is perfomed.
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull renderingQueue;
/// A <code>CIImage</code> instance with all effects and filters applied to it.
@property (nonatomic, readonly, strong) CIImage * _Nonnull outputImage;
/// :nodoc:
- (CIImage * _Nonnull)watermarkedImageFrom:(CIImage * _Nonnull)inputImage SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nonnull)customWatermarkedImageFrom:(CIImage * _Nonnull)inputImage SWIFT_WARN_UNUSED_RESULT;
/// The size of the output image.
@property (nonatomic, readonly) CGSize outputImageSize;
/// Invalidates the cache. You can call this prior to rendering to force a complete rerender.
- (void)invalidateCache;
/// The <code>CIContext</code> that is used to generate images.
@property (nonatomic, readonly, strong) CIContext * _Nonnull generatingCIContext;
/// Applies all necessary filters and effects to the input image and converts it to an instance
/// of <code>CGImage</code>.
///
/// returns:
/// A newly created instance of <code>CGImage</code>.
- (CGImageRef _Nonnull)newOutputImage SWIFT_WARN_UNUSED_RESULT;
/// Renders the final output image into a pixel buffer.
/// \param pixelBuffer The pixel buffer to render the output image into.
///
- (void)renderOutputImageInto:(CVPixelBufferRef _Nonnull)pixelBuffer;
/// Same as <code>newOutputImage()</code> but asynchronously.
/// \param completion A completion handler that receives the newly created instance of
/// <code>CGImage</code> once rendering is complete.
///
- (void)createOutputImageWithCompletion:(void (^ _Nonnull)(CGImageRef _Nonnull))completion;
/// Draws the output image into the given <code>CAMetalDrawable</code>.
/// \param device The <code>MTLDevice</code> to use.
///
/// \param drawable The drawable to draw into.
///
/// \param rect The rectangle to draw into.
///
/// \param commandQueue The <code>MTLCommandQueue</code> to use.
///
///
/// returns:
/// A tuple containing the created <code>MTLCommandBuffer</code> and the target <code>CGColorSpace</code> that was used to render the image.
- (PESDKDrawReturnValue * _Nullable)drawOutputImageFor:(id <MTLDevice> _Nonnull)device in:(id <CAMetalDrawable> _Nonnull)drawable to:(CGRect)rect commandQueue:(id <MTLCommandQueue> _Nonnull)commandQueue;
@end

@protocol MTLCommandBuffer;

/// A class containing the created <code>MTLCommandBuffer</code> and the target <code>CGColorSpace</code> that were used to draw the image with a Metal context.
SWIFT_CLASS_NAMED("DrawReturnValue")
@interface PESDKDrawReturnValue : NSObject
/// The command buffer used to render the image.
@property (nonatomic, readonly, strong) id <MTLCommandBuffer> _Nonnull commandBuffer;
/// The target color space used to render the image.
@property (nonatomic, readonly) CGColorSpaceRef _Nullable colorSpace;
/// Creates a new return value object.
/// \param commandBuffer The command buffer used to render the image.
///
/// \param colorSpace The target color space used to render the image.
///
- (nonnull instancetype)initWithCommandBuffer:(id <MTLCommandBuffer> _Nonnull)commandBuffer colorSpace:(CGColorSpaceRef _Nullable)colorSpace OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface PESDKPhotoEditRenderer (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKPhotoEditRenderer (SWIFT_EXTENSION(ImglyKit))
/// Applies all necessary filters and effects to the input image and converts it to a <code>Data</code>
/// object containing the specified image file format and the given compressoin quality
/// (if applicable).
/// \param imageFormat The image file format to generate.
///
/// \param compressionQuality The compression quality to apply. This will only be used for lossy
/// image formats.
///
/// \param metadataSourcePhoto The photo of which the metadata should be copied to the new image. If
/// <code>nil</code> it uses the metadata of the original image, if available.
///
/// \param completionHandler A completion handler that receives the newly created
/// instance of <code>Data</code> once rendering is complete.
///
- (void)generateOutputImageDataWithFormat:(enum PESDKImageFileFormat)imageFormat compressionQuality:(CGFloat)compressionQuality metadataSourcePhoto:(PESDKPhoto * _Nullable)metadataSourcePhoto completionHandler:(void (^ _Nonnull)(NSData * _Nullable, CGFloat, CGFloat))completionHandler;
@end








@interface PESDKPhotoEditToolController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKPhotoEditToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


@protocol PESDKPhotoEditViewControllerDelegate;

/// A <code>PhotoEditViewController</code> is the main starting point for the SDK. It displays the rendered
/// photo and a menu. It can present <code>PhotoEditToolController</code> objects and react to changes. It
/// can be presented on its own (thus displaying a toolbar for navigation at the bottom) or be
/// embedded into a <code>UINavigationController</code> (thus using the navigation controller’s navigation bar
/// for navigation).
SWIFT_CLASS_NAMED("PhotoEditViewController")
@interface PESDKPhotoEditViewController : PESDKMediaEditViewController
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKPhotoEditViewControllerDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, readonly, strong) PESDKMediaEditViewControllerOptions * _Nonnull options;
/// Applies all changes to the high resolution image and calls the delegate methods.
- (void)renderHighResolutionVariant;
/// Serializes all currently applied operations into a single file, which may be restored on other
/// platforms to continue editing.
/// \param includeImageData Whether or not to include the base64 encoded JPEG image within
/// the generated image.
///
///
/// returns:
/// The serialized settings.
- (NSData * _Nullable)serializedSettingsWithImageData:(BOOL)includeImageData SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didCancel;
/// :nodoc:
- (void)willPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)willDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
@end


@interface PESDKPhotoEditViewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>PhotoEditViewController</code> for the given <code>Photo</code> and the given configuration,
/// using the default photo edit model.
/// \param photoAsset The photo to edit.
///
/// \param configuration The configuration options to apply.
///
- (nonnull instancetype)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration;
/// Creates a new <code>PhotoEditViewController</code> for the given <code>Photo</code>, the given configuration and
/// photo edit model.
/// attention:
/// This initializer should only be used with Objective-C.
/// \param photoAsset The photo to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
- (nonnull instancetype)initWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
/// Creates a new <code>PhotoEditViewController</code> or subclass if there is a replacing class defined by <code>PESDK.replaceClass</code> in Swift.
/// \param photoAsset The photo to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
+ (PESDKPhotoEditViewController * _Nonnull)photoEditViewControllerWithPhotoAsset:(PESDKPhoto * _Nonnull)photoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel SWIFT_WARN_UNUSED_RESULT;
@end

@class PESDKPhotoEditorTask;
@class PESDKPhotoEditorResult;
@class PESDKPhotoEditorError;

/// The <code>PhotoEditViewControllerDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>PhotoEditViewController</code>.
SWIFT_PROTOCOL_NAMED("PhotoEditViewControllerDelegate")
@protocol PESDKPhotoEditViewControllerDelegate <PESDKMediaEditViewControllerDelegate>
@optional
/// Called before the output image is generated.
/// \param photoEditViewController The photo edit view controller that will create the output image.
///
/// \param task The input data, containing the input image and <code>PhotoEditModel</code>.
///
- (BOOL)photoEditViewControllerShouldStart:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController task:(PESDKPhotoEditorTask * _Nonnull)task SWIFT_WARN_UNUSED_RESULT;
@required
/// Called when the output image was generated.
/// \param photoEditViewController The photo edit view controller that created the output image.
///
/// \param result The result of the processing, containing output image data and the export status.
///
- (void)photoEditViewControllerDidFinish:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController result:(PESDKPhotoEditorResult * _Nonnull)result;
/// Called when the output image could not be generated.
/// \param photoEditViewController The photo edit view controller that was unable to create the output image.
///
/// \param error The occurred error.
///
- (void)photoEditViewControllerDidFail:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController error:(PESDKPhotoEditorError * _Nonnull)error;
/// Called when the user wants to dismiss the editor.
/// \param photoEditViewController The photo edit view controller that is asking to be cancelled.
///
- (void)photoEditViewControllerDidCancel:(PESDKPhotoEditViewController * _Nonnull)photoEditViewController;
@end


/// Options for configuring a <code>PhotoEditViewController</code>.
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptions")
@interface PESDKPhotoEditViewControllerOptions : PESDKMediaEditViewControllerOptions
/// The image file format of the generated high resolution image. Default is <code>.jpeg</code>.
@property (nonatomic, readonly) enum PESDKImageFileFormat outputImageFileFormat;
/// The Uniform Type Identifier (UTI) of the output image as <code>UTType</code>.
@property (nonatomic, readonly) CFStringRef _Nonnull outputImageFileFormatUTI;
/// The compression quality to use when creating the output image. Default is <code>0.9</code>. This will
/// only be used if a lossy image file format was specified in <code>outputImageFileFormat</code>.
@property (nonatomic, readonly) CGFloat compressionQuality;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>PhotoEditViewControllerOptions</code> using the given builder.
/// \param photoEditBuilder A <code>PhotoEditViewControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithPhotoEditBuilder:(PESDKPhotoEditViewControllerOptionsBuilder * _Nonnull)photoEditBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKMediaEditViewControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>PhotoEditViewControllerOptionsBuilder</code> for <code>PhotoEditViewControllerOptions</code>.
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptionsBuilder")
@interface PESDKPhotoEditViewControllerOptionsBuilder : PESDKMediaEditViewControllerOptionsBuilder
/// The image file format of the generated high resolution image. Default is <code>.jpeg</code>.
@property (nonatomic) enum PESDKImageFileFormat outputImageFileFormat;
/// The compression quality to use when creating the output image. Default is <code>0.9</code>. This will
/// only be used if a lossy image file format was specified in <code>outputImageFileFormat</code>.
@property (nonatomic) CGFloat compressionQuality;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>PhotoEditViewControllerOptionsBuilder</code> initialized with the given options.
/// \param photoEditOptions A <code>PhotoEditViewControllerOptions</code> instance.
///
- (nonnull instancetype)initWithPhotoEditOptions:(PESDKPhotoEditViewControllerOptions * _Nonnull)photoEditOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKMediaEditViewControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

enum PESDKPhotoEditorErrorReason : NSInteger;

/// Possible errors that could be returned by PhotoEditor SDK.
SWIFT_CLASS_NAMED("PhotoEditorError")
@interface PESDKPhotoEditorError : NSError
/// The error reason.
@property (nonatomic, readonly) enum PESDKPhotoEditorErrorReason reason;
/// The underlying error.
@property (nonatomic, readonly) NSError * _Nullable underlyingError;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSError *> * _Nonnull underlyingErrors;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// The error reason.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKPhotoEditorErrorReason, "Reason", open) {
/// Unable to load underlying image from the input image.
  PESDKPhotoEditorErrorReasonInputImageNotFound = 0,
/// <code>PhotoEditRenderer</code> failed to generate the output image.
  PESDKPhotoEditorErrorReasonRenderingFailed = 1,
/// Input image size is <code>.zero</code>.
  PESDKPhotoEditorErrorReasonImageSizeZero = 2,
};

@class PESDKPhotoEditorOutput;
enum PESDKPhotoEditorStatus : NSInteger;

/// A <code>PhotoEditorResult</code> contains the relevant information from a successful export of PhotoEditor SDK.
SWIFT_CLASS_NAMED("PhotoEditorResult")
@interface PESDKPhotoEditorResult : NSObject
/// The output image object.
@property (nonatomic, readonly, strong) PESDKPhotoEditorOutput * _Nonnull output;
/// An enum indicating whether any changes have been applied to the image.
@property (nonatomic, readonly) enum PESDKPhotoEditorStatus status;
/// The <code>PhotoEditorTask</code> that initialized the export.
@property (nonatomic, readonly, strong) PESDKPhotoEditorTask * _Nonnull task;
/// A flag indicating whether any changes have been applied to the image.
@property (nonatomic, readonly) BOOL hasChanges SWIFT_DEPRECATED_MSG("Use `status` instead.");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The export status.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKPhotoEditorStatus, "Status", open) {
/// Input image was not modified.
/// note:
/// To process the unedited image with the rendering pipeline, enable <code>PhotoEditViewControllerOptions.forceExport</code>.
  PESDKPhotoEditorStatusPassedWithoutRendering = 0,
/// Input image was processed by the rendering pipeline, without any edits.
/// note:
/// To avoid processing the unedited image with the rendering pipeline, disable <code>PhotoEditViewControllerOptions.forceExport</code>.
  PESDKPhotoEditorStatusRenderedWithoutChanges = 1,
/// Input image was rendered with edits described in the <code>PhotoEditModel</code>.
  PESDKPhotoEditorStatusRenderedWithChanges = 2,
};


/// A <code>PhotoEditor.Output</code> contains output image data and format.
SWIFT_CLASS_NAMED("Output")
@interface PESDKPhotoEditorOutput : NSObject
/// The output image encoded <code>Data</code>.
/// important:
/// This property can contain data in different formats, depending on the use case:
/// <ul>
///   <li>
///     If the editor was initialized with <code>Photo(data:)</code> or <code>Photo(url:)</code> and <em>no modifications</em> have been made to the image - it will contain the input data in the same format.
///   </li>
///   <li>
///     If any modifications have been made to the image or <code>PhotoEditViewControllerOptions.forceExport</code> is enabled - it will use <code>PhotoEditViewControllerOptions.outputImageFileFormat</code>.
///   </li>
/// </ul>
/// note:
/// This property can be used to create a new <code>UIImage</code> with <code>UIImage(data:)</code>
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// The type identifier of the generated image data if available. See <code>data</code> for possible cases.
/// note:
/// This property can be used to save the generated data to a file with proper extension, see <code>UTType</code> class.
///
/// returns:
/// <code>nil</code> if the image format cannot be recognized.
@property (nonatomic, readonly, copy) NSString * _Nullable uti;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>PhotoEditorTask</code> contains all the data that is necessary to start rendering.
SWIFT_CLASS_NAMED("PhotoEditorTask")
@interface PESDKPhotoEditorTask : NSObject
/// The <code>Photo</code> that was passed to the editor.
@property (nonatomic, readonly, strong) PESDKPhoto * _Nonnull photo;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKPhotoEditorTask (SWIFT_EXTENSION(ImglyKit))
/// The <code>PhotoEditModel</code> that holds the operations applied to the image.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull model;
@end



/// Represents a color that can be changed with the color pipette.
SWIFT_CLASS_NAMED("PipettableColor")
@interface PESDKColorPipette : PESDKColor
/// Creates a new <code>PipetteableColor</code> object.
/// \param color The initial color that this object represents.
///
/// \param colorName The name for <code>color</code>, used for accessibility.
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color colorName:(NSString * _Nonnull)colorName OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>PrimaryLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("PrimaryLabel")
@interface PESDKPrimaryLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>ProgressLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("ProgressLabel")
@interface PESDKProgressLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>ProxyZoomController</code> is supposed to be contained in a tool controller. It is added above
/// a <code>PhotoEditPreviewController</code> and can forward scroll view events to the preview, to enabled
/// zooming and scrolling within a tool.
SWIFT_CLASS_NAMED("ProxyZoomController")
@interface PESDKProxyZoomController : PESDKViewController
/// If <code>wantsScrollingInDefaultPreviewViewEnabled</code> is true, this is the scroll view
/// that acts as a proxy scroll view for the underlying image scroll view.
@property (nonatomic, strong) UIScrollView * _Nullable proxyScrollView;
/// If <code>wantsScrollingInDefaultPreviewViewEnabled</code> is true, this acts as the content view of
/// the <code>toolControllerScrollView</code>.
@property (nonatomic, strong) UIView * _Nullable proxyContentView;
/// An object that acts as a delegate. This is usually the tool controller that contains this
/// view controller.
@property (nonatomic, weak) id <PESDKProxyZoomControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Creates the views necessary to enabled proxy scrolling and zooming.
- (void)setupProxyScrolling;
/// Resets the proxy scroll view’s properties to match the target scroll view’s properties.
- (void)resetProxyScrolling;
@end


@interface PESDKProxyZoomController (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end



/// Applies a radial focus to an instance of <code>CIImage</code>.
SWIFT_CLASS_NAMED("RadialFocusFilter")
@interface PESDKRadialFocusFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The first normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/// The second normalized control point of the focus. This control point should use the coordinate
/// system of Core Image, which means that (0, 0) is at the bottom left. <code>x</code> is relative to the
/// width of the <code>inputImage</code>, <code>y</code> is relative to the height of the <code>inputImage</code>.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/// The blur radius to use for focus. Default is 10.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/// The fade width to use for focus. Default is 0.
@property (nonatomic, strong) NSNumber * _Nullable inputFadeWidth;
/// The quality that should be used expressed as <code>BlurQuality</code> raw values.
/// <code>BlurQuality.low</code> should be used only during preview.
@property (nonatomic, strong) NSNumber * _Nullable inputBlurQuality;
/// :nodoc:
- (void)setDefaults;
/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The <code>RecordingMode</code> determines if a photo or a video should be recorded.
typedef SWIFT_ENUM(NSInteger, RecordingMode, open) {
/// Take a photo.
  RecordingModePhoto = 0,
/// Record a video.
  RecordingModeVideo = 1,
};

/// The <code>RecordingOrientation</code> determines the orientation used by the camera for
/// taking a photo or recording a video.
typedef SWIFT_ENUM(NSInteger, RecordingOrientation, open) {
/// The default vertical orientation with the bottom of the device pointing down.
  RecordingOrientationPortrait = 0,
/// The vertical orientation with the bottom of the device pointing up.
  RecordingOrientationPortraitBottomUp = 1,
/// The horizontal orientation with the bottom of the device pointing left.
  RecordingOrientationLandscapeBottomLeft = 2,
/// The horizontal orientation with the bottom of the device pointing right.
  RecordingOrientationLandscapeBottomRight = 3,
};



/// A <code>StampGenerator</code> is responsible for generating a stamp image that is used by a brush to draw a stroke.
SWIFT_CLASS_NAMED("StampGenerator")
@interface PESDKStampGenerator : NSObject
/// The size of the generated stamp.
@property (nonatomic) CGSize size;
/// The stamp image.
@property (nonatomic, readonly, strong) UIImage * _Nonnull stamp;
/// A lower resolution version of the stamp image. This is used for the brush preview.
@property (nonatomic, readonly, strong) UIImage * _Nonnull smallStamp;
/// The base dimension of the generated stamp image.
@property (nonatomic, readonly) CGFloat baseDimension;
/// The bounds of the generated stamp image.
@property (nonatomic, readonly) CGRect baseBounds;
/// The scale of the stamp image in respect to its base dimension.
@property (nonatomic, readonly) CGFloat scale;
/// The object that acts as the delegate of the stamp generator.
@property (nonatomic, weak) id <PESDKGeneratorDelegate> _Nullable delegate;
/// This method should be override by subclasses. This is where the actual stamp image should be
/// generated using Core Graphics.
/// \param context The context to render into.
///
- (void)renderStampInContext:(CGContextRef _Nonnull)context;
/// A helper method to generate a radial gradient image from white to black.
/// \param hardness The hardness of the gradient.
///
///
/// returns:
/// A radial gradient image from white to black.
- (CGImageRef _Nonnull)radialFadeWithHardness:(CGFloat)hardness SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>RoundGenerator</code> generates a round stamp image with a given hardness.
SWIFT_CLASS_NAMED("RoundGenerator")
@interface PESDKRoundGenerator : PESDKStampGenerator
/// The hardness of the stamp image that is being generated.
@property (nonatomic) CGFloat hardness;
/// :nodoc:
- (void)renderStampInContext:(CGContextRef _Nonnull)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKScalePickerDelegate;

/// A <code>ScalePicker</code> provides an UI element to pick values.
SWIFT_CLASS_NAMED("ScalePicker")
@interface PESDKScalePicker : UIView
/// The current value of the scale picker.
@property (nonatomic) CGFloat currentValue;
/// The smallest pickable value.
@property (nonatomic) NSInteger minValue;
/// The biggest pickable value.
@property (nonatomic) NSInteger maxValue;
/// The dimensions of a tick.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGSize tickSize;
/// The dimensions of the main tick. That is the tick the marks the zero-value.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGSize mainTickSize;
/// The spacing between the ticks.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat spaceBetweenTicks;
/// The color of the ticks.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull tickColor;
/// The color of the value label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of a view that lies behind the value label. That should be the background with an alpha value.
/// This view is used to improve the readability of the value label.
@property (nonatomic, strong) UIColor * _Nonnull valueLabelBackgroundColor;
/// A delegate that informs the receiver about changes of the value.
@property (nonatomic, weak) id <PESDKScalePickerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// This method will move the scale to the given value.
- (void)scrollToValue:(CGFloat)value;
/// :nodoc:
- (void)accessibilityIncrement;
/// :nodoc:
- (void)accessibilityDecrement;
@end



@interface PESDKScalePicker (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/// The <code>ScalePickerDelegate</code> protocol defines a set of methods you can use to receive value-change
/// messages for <code>ScalePicker</code> objects.
SWIFT_PROTOCOL_NAMED("ScalePickerDelegate")
@protocol PESDKScalePickerDelegate
/// Called when the scale picker’s value changes.
/// \param value The new value of the scale picker.
///
/// \param scalePicker The scale picker that called this method.
///
- (void)scalePicker:(CGFloat)value didChangeValue:(PESDKScalePicker * _Nonnull)scalePicker;
@end



/// This filter changes the sharpness of an image.
SWIFT_CLASS_NAMED("SharpnessFilter")
@interface PESDKSharpnessFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The sharpness of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputSharpness;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPanGestureRecognizer;

/// A Slider object is a visual control used to select a single value from a continuous range of
/// values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the
/// current value of the slider and can be moved by the user to change the setting.
/// A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
IB_DESIGNABLE
SWIFT_CLASS_NAMED("Slider")
@interface PESDKSlider : UIControl
/// The color used to tint the thumb image. If no color is set, the default <code>tintColor</code> will be used.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable thumbTintColor;
/// The color used to tint the background color of the thumb.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull thumbBackgroundColor;
/// The color used to tint the filled track. If no color is set, the default <code>tintColor</code> will be used.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable filledTrackColor;
/// The color used to tint the unfilled track.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull unfilledTrackColor;
/// The height of the unfilled and filled track.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat trackHeight;
/// The corner radius of the unfilled and filled track.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat trackCornerRadius;
/// The size of the <code>thumbView</code>.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGSize thumbSize;
/// Contains the minimum value of the receiver.
@property (nonatomic) IBInspectable CGFloat minimumValue;
/// Contains the maximum value of the receiver.
@property (nonatomic) IBInspectable CGFloat maximumValue;
/// Contains the neutral value of the receiver.
@property (nonatomic) IBInspectable CGFloat neutralValue;
/// The pan gesture recognizer that is used to recognize user interaction in the slider.
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Nonnull panGestureRecognizer;
/// Contains the receiver’s current value.
@property (nonatomic) IBInspectable CGFloat value;
/// :nodoc:
@property (nonatomic) CGRect frame;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)accessibilityIncrement;
/// :nodoc:
- (void)accessibilityDecrement;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (void)tintColorDidChange;
/// Returns the drawing rectangle for the slider’s thumb image.
/// \param bounds The bounding rectangle of the receiver.
///
/// \param value The current value of the slider.
///
///
/// returns:
/// The computed drawing rectangle for the thumb image.
- (CGRect)thumbRectFor:(CGRect)bounds value:(CGFloat)value SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The view that is displaying the thumb.
@property (nonatomic, strong) UIImageView * _Nullable thumbView;
/// The left track for unfilled state.
@property (nonatomic, strong) UIView * _Nullable leftUnfilledTrackView;
/// The right track for unfilled state.
@property (nonatomic, strong) UIView * _Nullable rightUnfilledTrackView;
/// The track for the filled state.
@property (nonatomic, strong) UIView * _Nullable filledTrackView;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Called by the gesture recognizer detecting the pan gesture. You should not call this method
/// directly.
/// \param panGestureRecognizer The pan gesture recognizer which began tracking.
///
///
/// returns:
/// Whether to continue tracking or not.
- (BOOL)beginTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// Called by the gesture recognizer detecting the pan gesture. You should not call this method
/// directly.
/// \param panGestureRecognizer The pan gesture recognizer that continues tracking.
///
- (void)continueTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
/// Called by the gesture recognizer detecting the pan gesture. You should not call this method
/// directly.
/// \param panGestureRecognizer The pan gesture recognizer that ended tracking.
///
- (void)endTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
@end


@class NSAttributedString;

/// A SliderTooltip object is a visual element that displays a Slider’s current value above the
/// thumb image while dragging.
SWIFT_CLASS_NAMED("SliderTooltip")
@interface PESDKSliderTooltip : UIView
/// The background color of the tooltip.
@property (nonatomic, strong) UIColor * _Nonnull tooltipColor;
/// The string to display in the tooltip.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedString;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class PESDKSmartStickerPromptViewController;

/// A <code>SmartSticker</code> is a sticker with dynamically generated content. It is updated when added to the canvas or when changed as part of a <code>MultiImageSticker</code> variant.
SWIFT_CLASS_NAMED("SmartSticker")
@interface PESDKSmartSticker : PESDKSticker
/// Creates a <code>SmartSticker</code> with unique identifier.
/// \param identifier Sticker identifier.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Creates the default smart stickers that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKSticker *> * _Nonnull defaultItems;)
+ (NSArray<PESDKSticker *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// <code>UIViewController</code> that will be presented when this sticker is selected in
/// sticker selection menu, so it can be used for configuration of the smart sticker.
@property (nonatomic, readonly, strong) PESDKSmartStickerPromptViewController * _Nullable prompt;
/// This method returns the size that sticker is requesting to draw on.
/// \param metadata Metadata dictionary that contains sticker data. If <code>nil</code> is passed it means we are rendering the preview.
///
///
/// returns:
/// Size of the sticker. Make sure to return size greater than 0.
- (CGSize)sizeFor:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Method that is being called when sticker is being rendered.
/// \param metadata Metadata dictionary that contains sticker data. If <code>nil</code> is passed it means we are rendering the preview.
///
/// \param context CoreGraphics contect that you will be drawing in.
///
/// \param size Size on screen that is available for rendering. Make sure you scale the context according to the <code>self.size(...)</code> ratio.
///
/// \param scale The natural scale factor associated with the screen.
///
- (void)drawWith:(NSDictionary<NSString *, NSString *> * _Nullable)metadata context:(CGContextRef _Nonnull)context size:(CGSize)size scale:(CGFloat)scale;
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL tintMode:(enum PESDKStickerTintMode)tintMode identifier:(NSString * _Nonnull)identifier SWIFT_UNAVAILABLE;
@end


/// A <code>PromptViewController</code> is a UIViewController that can be presented when <code>SmartSticker</code> is presented.
SWIFT_CLASS_NAMED("PromptViewController")
@interface PESDKSmartStickerPromptViewController : UIViewController
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// The type of snapping guide visualization for a <code>SnapGuideView</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKSnapGuide, "SnapGuide", open) {
/// The corresponding <code>SnapGuideView</code> displays a horizontal line through its center in its local coordinate system.
  PESDKSnapGuideHorizontalLine = 0,
/// The corresponding <code>SnapGuideView</code> displays a vertical line through its center in its local coordinate system.
  PESDKSnapGuideVerticalLine = 1,
/// The corresponding <code>SnapGuideView</code> displays a rectangle at its <code>bounds</code>.
  PESDKSnapGuideRectangle = 2,
};


/// A <code>SnapGuideView</code> is meant to visualize snapping guides.
SWIFT_CLASS_NAMED("SnapGuideView")
@interface PESDKSnapGuideView : UIView
/// The snap guide visualization mode.
@property (nonatomic) enum PESDKSnapGuide guideMode;
/// The color of the snap guide.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nonnull guideColor;
/// The line width of the snap guide.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat lineWidth;
/// The line dash pattern of the snap guide.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull lineDash;
/// Whether this snap guide is in the snapped state or not. If this value transitions from <code>false</code> to <code>true</code> the <code>didSnapHandler</code> is executed.
/// <code>isHidden</code> is automatically set to the opposing state of this value.
@property (nonatomic) BOOL isSnapped;
/// This closure is executed when <code>isSnapped</code> changes from <code>false</code> to <code>true</code>.
@property (nonatomic, copy) void (^ _Nullable didSnapHandler)(void);
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
@end


/// Options for configuring snapping behavior.
SWIFT_CLASS_NAMED("SnappingOptions")
@interface PESDKSnappingOptions : NSObject
/// Whether sprites, e.g., stickers, texts, or text designs, should snap to specific positions and/or
/// orientations during pan or rotation interactions. This switch enables or disables any snapping at
/// all. The detailed snapping behavior can be configured with the <code>snapTo*</code> configuration options.
/// Snapping is enabled by default.
@property (nonatomic, readonly) BOOL snappingEnabled;
/// Whether user interface objects should snap to specific orientations during rotation interactions.
/// This switch enables or disables rotation snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL rotationSnappingEnabled;
/// This threshold defines the arc length of a rotation gesture where snapping at a snap angle occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic, readonly) CGFloat rotationSnappingThreshold;
/// Whether user interface objects should snap to specific positions during pan interactions.
/// This switch enables or disables position snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL positionSnappingEnabled;
/// This threshold defines the distance of a pan gesture where snapping at a snap point occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic, readonly) CGFloat positionSnappingThreshold;
/// Enabled snapping angles in degrees for rotating a sprite. The rotation angle is defined clockwise.
/// The default value is [0, 45, 90, 135, 180, 225, 270, 315].
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull snapToAngles;
/// If enabled a sprite’s center snaps to the horizontal line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL snapToHorizontalCenterLine;
/// If enabled a sprite’s center snaps to the vertical line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly) BOOL snapToVerticalCenterLine;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>SnappingOptions</code> using the given builder.
/// \param builder A <code>SnappingOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKSnappingOptionsOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


@interface PESDKSnappingOptions (SWIFT_EXTENSION(ImglyKit))
/// If not <code>nil</code> the left side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the left side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToLeft;
/// If not <code>nil</code> the right side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the right side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToRight;
/// If not <code>nil</code> the top side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the top side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToTop;
/// If not <code>nil</code> the bottom side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the bottom side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, readonly, strong) NSNumber * _Nullable snapToBottom;
@end


/// The default <code>SnappingOptionsBuilder</code> for <code>SnappingOptions</code>.
SWIFT_CLASS_NAMED("SnappingOptionsBuilder")
@interface PESDKSnappingOptionsOptionsBuilder : NSObject
/// Whether user interface objects should snap to specific positions and/or
/// orientations during pan or rotation interactions. This switch enables or disables any snapping at
/// all. The detailed snapping behavior can be configured with the <code>snapTo*</code> configuration options.
/// Snapping is enabled by default.
@property (nonatomic) BOOL snappingEnabled;
/// Whether user interface objects should snap to specific orientations during rotation interactions.
/// This switch enables or disables rotation snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL rotationSnappingEnabled;
/// This threshold defines the arc length of a rotation gesture where snapping at a snap angle occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic) CGFloat rotationSnappingThreshold;
/// Whether user interface objects should snap to specific positions during pan interactions.
/// This switch enables or disables position snapping.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL positionSnappingEnabled;
/// This threshold defines the distance of a pan gesture where snapping at a snap point occurs.
/// It is measured in points. The default value is <code>20</code>.
@property (nonatomic) CGFloat positionSnappingThreshold;
/// Enabled snapping angles in degrees for rotating a sprite. The rotation angle is defined clockwise.
/// The default value is [0, 45, 90, 135, 180, 225, 270, 315].
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull snapToAngles;
/// If enabled a sprite’s center snaps to the horizontal line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL snapToHorizontalCenterLine;
/// If enabled a sprite’s center snaps to the vertical line through the center of the edited image.
/// The default value is <code>true</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic) BOOL snapToVerticalCenterLine;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PESDKSnappingOptionsOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// If not <code>nil</code> the left side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the left side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToLeft;
/// If not <code>nil</code> the right side of a sprite’s bounding box snaps to a vertical line which is shifted by
/// this value from the right side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToRight;
/// If not <code>nil</code> the top side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the top side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToTop;
/// If not <code>nil</code> the bottom side of a sprite’s bounding box snaps to a horizontal line which is shifted by
/// this value from the bottom side of the edited image towards its center. This value is measured in
/// normalized coordinates relative to the smaller side of the edited image.
/// The default value is <code>0.1</code>.
/// note:
/// <code>snappingEnabled</code> must be set to <code>true</code> otherwise this option is ignored.
@property (nonatomic, strong) NSNumber * _Nullable snapToBottom;
@end

@class PESDKSoundstripeAudioProvider;

/// An <code>AssetResolver</code> for Soundstripe.
SWIFT_CLASS_NAMED("SoundstripeAssetResolver")
@interface PESDKSoundstripeAssetResolver : NSObject <PESDKAssetResolver>
/// The identifier of this resolver.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// The <code>SoundstripeAudioProvider</code> responsible for fetching the song for deserialization.
@property (nonatomic, readonly, strong) PESDKSoundstripeAudioProvider * _Nonnull provider;
/// Initializes a new <code>SoundstripeAssetResolver</code> from a provider.
/// \param provider The <code>SoundstripeAudioProvider</code> responsible for fetching the song for deserialization.
///
- (nonnull instancetype)initWithProvider:(PESDKSoundstripeAudioProvider * _Nonnull)provider OBJC_DESIGNATED_INITIALIZER;
/// Deserializes the custom asset.
/// \param data The data to deserialize the asset from.
///
- (void)deserializeFrom:(NSDictionary<NSString *, NSString *> * _Nonnull)data completion:(void (^ _Nonnull)(id <PESDKResolvableAsset> _Nullable))completion;
/// Serializes a custom asset.
/// \param asset The <code>ResolvableAsset</code> that should be serialized.
///
- (NSDictionary<NSString *, NSString *> * _Nullable)serialize:(id <PESDKResolvableAsset> _Nonnull)asset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>SoundstripeAudioClipCategory</code> is a preconfigured category providing an easy access to the Soundstripe API.
SWIFT_CLASS_NAMED("SoundstripeAudioClipCategory")
@interface PESDKSoundstripeAudioCategory : PESDKAudioProviderCategory
/// Creates an audio clip category with Soundstripe as <code>AudioProvider</code>.
- (nonnull instancetype)init;
+ (nonnull instancetype)new;
/// Creates an audio clip category with Soundstripe as <code>AudioProvider</code>.
/// \param provider The <code>SoundstripeAudioProvider</code>.
///
- (nonnull instancetype)initWithProvider:(PESDKSoundstripeAudioProvider * _Nonnull)provider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL audioProvider:(id <PESDKAudioProvider> _Nonnull)_objCAudioProvider SWIFT_UNAVAILABLE;
@end


/// A <code>SoundstripeAudioProvider</code> represents an entry point to the Soundstripe Audio API.
SWIFT_CLASS_NAMED("SoundstripeAudioProvider")
@interface PESDKSoundstripeAudioProvider : NSObject
/// Creates an audio provider consuming Soundstripe Audio API.
/// note:
/// The <code>SoundstripeAudioProvider</code> assumes that your endpoint is mirroring the official <a href="https://docs.soundstripe.com">Soundstripe API</a>.
/// \param baseURL The base URL of your endpoint.
///
/// \param headers The headers for the URL request.
///
- (nonnull instancetype)initWithBaseURL:(NSString * _Nonnull)baseURL headers:(NSDictionary<NSString *, NSString *> * _Nullable)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Types conforming to <code>PESDKAudioProvider</code> can implement a custom service to load audio clips from local/network sources.
SWIFT_PROTOCOL_NAMED("_ObjCAudioProvider")
@protocol PESDKAudioProvider
/// Loads initial search page with the default set of audio clips.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
/// Loads search results for the given query.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param query The query string.
///
/// \param offset The number of items to skip for the current page.
///
/// \param limit The number of items to load for the current page.
///
/// \param completion The completion handler.
///
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
/// Loads a specific audio clip.
/// important:
/// This method will be called on a background thread.
/// The completion handler will be dispatched to the main thread internally.
/// \param identifier The identifier of the audio clip.
///
/// \param completion The completion handler.
///
- (void)getWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
@end


@interface PESDKSoundstripeAudioProvider (SWIFT_EXTENSION(ImglyKit)) <PESDKAudioProvider>
- (void)trendingWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
- (void)searchWithQuery:(NSString * _Nonnull)query offset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
- (void)getWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(PESDKAudioProviderResult * _Nullable, NSError * _Nullable))completion;
@end



/// This class provides our own implementation of adjustment filters.
/// Using these we get more consistant results across the several platforms.
SWIFT_CLASS_NAMED("SpriteAdjustmentsFilter")
@interface PESDKSpriteAdjustmentsFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The brightness value.
@property (nonatomic, strong) NSNumber * _Nullable inputBrightness;
/// The contrast value.
@property (nonatomic, strong) NSNumber * _Nullable inputContrast;
/// The saturation value.
@property (nonatomic, strong) NSNumber * _Nullable inputSaturation;
/// Returns an image with the applied changes.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>SpriteContainerView</code> is the parent view of <code>SpriteView</code>s. It is responsible for updating their
/// position and size based on their normalized position and size and the size of the input image.
SWIFT_CLASS_NAMED("SpriteContainerView")
@interface PESDKSpriteContainerView : UIView
/// The size of the untransformed preview image. This is used to denormalize the normalized values.
@property (nonatomic) CGSize referenceSize;
/// The size of the transformed preview image. This is used to calculate the position within the
/// view.
@property (nonatomic) CGSize currentSize;
/// The scale factor that is needed to fit the transformed preview image into the view.
@property (nonatomic, readonly) CGFloat imageToViewScaleFactor;
/// :nodoc:
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface PESDKSpriteContainerView (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end





/// A <code>SpriteLabel</code> is used to display text in a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("SpriteLabel")
@interface PESDKSpriteLabel : UILabel
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat normalizedFontSize;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// Creates a new <code>SpriteLabel</code> that is identified by the given <code>UUID</code>.
/// \param uuid The <code>UUID</code> that identifies this view.
///
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end










/// A view that renders and displays a certain <code>TextDesign</code>.
SWIFT_CLASS_NAMED("TextDesignView")
@interface PESDKTextDesignView : UIView
/// The text design that this view should display.
@property (nonatomic, strong) PESDKTextDesign * _Nullable textDesign;
/// The scale factor to apply to the generated image. Default is <code>0</code> which means that the main
/// screen’s scale is used.
@property (nonatomic) CGFloat renderingScaleFactor;
/// The text that should be displayed.
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// The seed used for the randomizer.
@property (nonatomic) uint64_t randomizerSeed;
/// Whether the text design should be drawn inverted.
@property (nonatomic) BOOL isInverted;
/// :nodoc:
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// Padding that is added to each side of the view. This is used when <code>isInverted</code> is <code>true</code>.
@property (nonatomic) CGFloat padding;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)drawRect:(CGRect)rect;
/// Renders the text design into an image and sets that image as <code>imageView</code>’s <code>image</code>.
- (void)render;
@end


/// A <code>SpriteTextDesignView</code> is used to display a text design in a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("SpriteTextDesignView")
@interface PESDKSpriteTextDesignView : PESDKTextDesignView
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat normalizedPadding;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// Creates a new <code>SpriteTextDesignView</code> that is identified by the given <code>UUID</code>.
/// \param uuid The <code>UUID</code> that identifies this view.
///
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end









@class UITapGestureRecognizer;

/// A <code>SpriteViewController</code> is supposed to be added above a <code>PhotoEditPreviewController</code>.
/// It uses the <code>PhotoEditModel</code> to display <code>SpriteView</code>s corresponding to <code>SpriteModel</code>s and it
/// reacts to changes in the <code>PhotoEditModel</code> by adding, changing or deleting <code>SpriteView</code>s.
SWIFT_CLASS_NAMED("SpriteViewController")
@interface PESDKSpriteViewController : PESDKViewController
/// An object that acts as a delegate.
@property (nonatomic, weak) id <PESDKSpriteViewControllerDelegate> _Nullable delegate;
/// The <code>SpriteContainerView</code> that this view controller uses.
@property (nonatomic, readonly, strong) PESDKSpriteContainerView * _Nonnull spriteContainerView;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>AssetCatalog</code> that is associated with this view controller.
@property (nonatomic, strong) PESDKAssetCatalog * _Nonnull assetCatalog;
/// The size of the untransformed preview image. This is used to denormalize the normalized values.
@property (nonatomic) CGSize referenceSize;
/// The size of the transformed preview image. This is used to calculate the position within the
/// view.
@property (nonatomic) CGSize currentSize;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)loadView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// Called by a <code>UITapGestureRecognizer</code> to select a sprite. You shouldn’t need to call this
/// method directly.
- (void)tapped:(UITapGestureRecognizer * _Nonnull)gestureRecognizer;
/// The custom watermark view.
@property (nonatomic, strong) UIImageView * _Nullable customWatermarkView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface PESDKSpriteViewController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end



@interface PESDKSpriteViewController (SWIFT_EXTENSION(ImglyKit)) <PESDKCanvasViewDataSource>
/// :nodoc:
- (CGRect)canvasViewNormalizedCropRect:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (enum PESDKOrientation)canvasViewAppliedOrientation:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)canvasViewStraightenAngle:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIEdgeInsets)canvasViewImageInsets:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGSize)canvasViewOutputImageSize:(PESDKCanvasView * _Nonnull)canvasView SWIFT_WARN_UNUSED_RESULT;
@end








/// The actions that can be used in an instance of <code>StickerOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, StickerAction, open) {
/// Change the color of the sticker. Only works if the sticker’s <code>tintMode</code> is not <code>.none</code>.
  StickerActionColor = 0,
/// Straighten the sticker.
  StickerActionStraighten = 1,
/// Change the brightness of the sticker. Only works if <code>allowBrightnessAdjustment</code> of the sticker
/// is <code>true</code>.
  StickerActionBrightness = 2,
/// Change the contrast of the sticker. Only works if <code>allowContrastAdjustment</code> of the sticker
/// is <code>true</code>.
  StickerActionContrast = 3,
/// Change the saturation of the sticker. Only works if <code>allowSaturationAdjustment</code> of the sticker
/// is <code>true</code>.
  StickerActionSaturation = 4,
/// Replace the sticker with a different sticker.
  StickerActionReplace = 5,
/// Change the opacity of the sticker.
  StickerActionOpacity = 6,
/// Remove background on a sticker if a face or a person is detected.
/// attention:
/// This option does not work properly on a simulator.
/// To see background properly removed, please test on physical device.
  StickerActionRemoveBackground = 7,
/// Change the duration of the sticker when editing a video.
  StickerActionDuration = 8,
};

/// The sticker adjustment mode that is currently active in a <code>StickerEditController</code> object.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKStickerAdjustmentModel, "StickerAdjustmentMode", open) {
/// Change the brightness of a sticker.
  PESDKStickerAdjustmentModelBrightness = 0,
/// Change the contrast of a sticker.
  PESDKStickerAdjustmentModelContrast = 1,
/// Change the saturation of a sticker.
  PESDKStickerAdjustmentModelSaturation = 2,
/// Change the opacity of a sticker.
  PESDKStickerAdjustmentModelOpacity = 3,
};



/// The menu item that is used in <code>StickerToolController</code> for action menu items, e.g. custom sticker upload button.
SWIFT_CLASS_NAMED("StickerCategoryActionMenuItem")
@interface PESDKStickerCategoryActionMenuItem : PESDKActionMenuItem
@end


/// Handles the display of <code>StickerCategoryMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("StickerCategoryListSectionController")
@interface PESDKStickerCategoryListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>StickerToolController</code>.
SWIFT_CLASS_NAMED("StickerCategoryMenuItem")
@interface PESDKStickerCategoryMenuItem : NSObject <PESDKMenuItem>
/// The <code>StickerCategory</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKStickerCategory * _Nonnull stickerCategory;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the icon of the menu item.
@property (nonatomic, readonly, copy) NSURL * _Nonnull iconURL;
/// Creates a new sticker category menu item for the given sticker category.
/// \param stickerCategory The sticker category that this menu item represents.
///
- (nonnull instancetype)initWithStickerCategory:(PESDKStickerCategory * _Nonnull)stickerCategory;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol PESDKStickerCollectionDelegate;

/// Types conforming to <code>StickerCollection</code> can provide a custom <code>UIViewController</code> instance for selecting stickers.
SWIFT_PROTOCOL_NAMED("StickerCollection")
@protocol PESDKStickerCollection
/// The delegate object that handles inserting stickers into the canvas.
@property (nonatomic, weak) id <PESDKStickerCollectionDelegate> _Nullable delegate;
/// The view controller responsible for presenting and loading the stickers.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull viewController;
@end


/// A <code>StickerCollectionCategory</code> represents an empty category with a custom <code>StickerCollection</code>.
SWIFT_CLASS_NAMED("StickerCollectionCategory")
@interface PESDKStickerCollectionCategory : PESDKStickerCategory
/// The <code>StickerCollection</code> associated with this sticker category.
@property (nonatomic, readonly, strong) id <PESDKStickerCollection> _Nonnull stickerCollection;
/// Creates a sticker category with a <code>StickerCollection</code> object.
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param stickerCollection The associated <code>StickerCollection</code> object responsible for displaying the selection view.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection;
/// Creates a sticker category with a <code>StickerCollection</code> object.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Toy Collection’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param stickerCollection The associated <code>StickerCollection</code> object responsible for displaying the selection view.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<PESDKSticker *> * _Nonnull)stickers SWIFT_UNAVAILABLE;
@end


/// The <code>StickerCollectionDelegate</code> protocol defines methods to handle stickers provided by <code>StickerCollection</code>.
SWIFT_PROTOCOL_NAMED("StickerCollectionDelegate")
@protocol PESDKStickerCollectionDelegate
/// Tells the delegate when a new sticker is selected and that it should be added to the canvas.
/// important:
/// This method can be called on a background thread.
/// UI updates will be dispatched to the main thread internally.
/// \param stickerCollection The sticker collection object that initiated the loading.
///
/// \param sticker The sticker to be inserted.
///
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker;
@optional
/// Tells the delegate when a new sticker with metadata is selected and that it should be added to the canvas.
/// \param stickerCollection The sticker collection object that initiated the loading.
///
/// \param sticker The sticker to be inserted.
///
/// \param metadata Metadata that is passed to the <code>SmartSticker</code>.
///
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata;
@end


/// A <code>StickerCollectionViewCell</code> is a cell that has an image view and an activity indicator in its
/// center.
SWIFT_CLASS_NAMED("StickerCollectionViewCell")
@interface PESDKIconCollectionViewCell : PESDKAssetCollectionViewCell
/// :nodoc:
- (void)setupImageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>StickerDurationToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, StickerDurationOverlayAction, open) {
/// Toggle play/pause for video preview.
  StickerDurationOverlayActionPlayPause = 0,
};


/// Options for configuring a <code>StickerDurationToolController</code>.
SWIFT_CLASS_NAMED("StickerDurationToolControllerOptions")
@interface PESDKStickerDurationToolControllerOptions : PESDKDurationToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerDurationOverlayActionSelectedClosure)(enum StickerDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>StickerDurationToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>StickerDurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKStickerDurationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>StickerDurationToolControllerOptionsBuilder</code> for <code>StickerDurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("StickerDurationToolControllerOptionsBuilder")
@interface PESDKStickerDurationToolControllerOptionsBuilder : PESDKDurationToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerDurationOverlayActionSelectedClosure)(enum StickerDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>StickerDurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>StickerDurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKStickerDurationToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions SWIFT_UNAVAILABLE;
@end


/// A <code>StickerEmptyView</code> is used as a placeholder for empty search results from a <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerEmptyView")
@interface PESDKStickerEmptyView : PESDKEmptyView
/// The search term that triggered the placeholder.
@property (nonatomic, copy) NSString * _Nonnull query;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>StickerErrorView</code> is used to indicate download errors in <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerErrorView")
@interface PESDKStickerErrorView : PESDKErrorView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>StickerImageView</code> is used to display a <code>Sticker</code> within a <code>SpriteContainerView</code>.
SWIFT_CLASS_NAMED("StickerImageView")
@interface PESDKStickerImageView : PESDKSpriteImageView
/// :nodoc:
@property (nonatomic) CGSize normalizedSize;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// The tint mode to apply to this sticker’s image.
@property (nonatomic) enum PESDKStickerTintMode tintMode;
/// The color used to colorize the image according to the <code>tintMode</code>.
@property (nonatomic, strong) UIColor * _Nonnull colorizeColor;
/// The brightness of the image, between -1 and 1.
@property (nonatomic) CGFloat brightness;
/// The contrast of the image, between -1 and 1.
@property (nonatomic) CGFloat contrast;
/// The saturation of the image, between -1 and 1.
@property (nonatomic) CGFloat saturation;
/// Background mask for the image. If set to nil, background will not be removed.
@property (nonatomic, strong) CIImage * _Nullable backgroundMask;
/// :nodoc:
@property (nonatomic, strong) UIImage * _Nullable image;
@end






/// The menu item that is used in <code>StickerSelectionController</code>.
SWIFT_CLASS_NAMED("StickerMenuItem")
@interface PESDKStickerMenuItem : NSObject
/// The <code>Sticker</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKSticker * _Nonnull sticker;
/// The url to the icon of this menu item.
@property (nonatomic, readonly, copy) NSURL * _Nonnull iconURL;
/// Creates a new sticker menu item for the given sticker.
/// \param sticker The sticker that this menu item represents.
///
- (nonnull instancetype)initWithSticker:(PESDKSticker * _Nonnull)sticker;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Handles the display of <code>StickerOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("StickerOptionListSectionController")
@interface PESDKStickerOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>StickerOptionsToolController</code>.
SWIFT_CLASS_NAMED("StickerOptionMenuItem")
@interface PESDKStickerOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>StickerAction</code> that this menu item represents.
@property (nonatomic, readonly) enum StickerAction stickerAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Flag that indicates if the menu item is a togglable action, which isn’t deselected when choosing other items.
@property (nonatomic, readonly) BOOL isTogglable;
/// Creates a new sticker option menu item for the given sticker action.
/// \param stickerAction The sticker action that this menu item represents.
///
- (nonnull instancetype)initWithStickerAction:(enum StickerAction)stickerAction icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit stickers. It contains a menu with options to change attributes of
/// the sticker and a <code>SpriteEditController</code> to change a sticker’s geometry.
SWIFT_CLASS_NAMED("StickerOptionsToolController")
@interface PESDKStickerOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end




enum StickerOverlayAction : NSInteger;

/// Options for configuring a <code>StickerOptionsToolController</code>.
SWIFT_CLASS_NAMED("StickerOptionsToolControllerOptions")
@interface PESDKStickerOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerAction);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum StickerAction);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerOverlayActionSelectedClosure)(enum StickerOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// Creates an instance of <code>StickerOptionsToolControllerOptions</code> using the default builder.
- (nonnull instancetype)init;
/// Creates an instance of <code>StickerOptionsToolControllerOptions</code> using the given builder.
/// \param builder A builder to create the options.
///
- (nonnull instancetype)initWithBuilder:(PESDKStickerOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>StickerOptionsToolControllerOptionsBuilder</code> for <code>StickerOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("StickerOptionsToolControllerOptionsBuilder")
@interface PESDKStickerOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerAction);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum StickerAction);
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum StickerOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerOverlayActionSelectedClosure)(enum StickerOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKStickerOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>StickerOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedStickerOverlayActions</code> with the corresponding <code>StickerOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedStickerOverlayActions;
/// An array of <code>StickerAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedStickerActions</code> with the corresponding <code>StickerAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedStickerActions;
@end

/// The overlay actions that can be used in an instance of <code>StickerToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, StickerOverlayAction, open) {
/// Switch to the add sticker UI.
  StickerOverlayActionAdd = 0,
/// Delete the sticker.
  StickerOverlayActionDelete = 1,
/// Undo
  StickerOverlayActionUndo = 2,
/// Redo
  StickerOverlayActionRedo = 3,
/// Flip the s ticker
  StickerOverlayActionFlip = 4,
/// Bring the sticker to the front
  StickerOverlayActionBringToFront = 5,
};



/// Type representing the result of a sticker query.
SWIFT_CLASS_NAMED("StickerProviderResult")
@interface PESDKStickerProviderResult : NSObject
/// An array of <code>Sticker</code> models.
@property (nonatomic, readonly, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// A flag indicating that more content is available for endless scrolling.
@property (nonatomic, readonly) BOOL hasMore;
/// Creates a new sticker result.
/// \param stickers An array of <code>Sticker</code> models.
///
/// \param hasMore A flag indicating that more content is available for endless scrolling.
///
- (nonnull instancetype)initWithStickers:(NSArray<PESDKSticker *> * _Nonnull)stickers hasMore:(BOOL)hasMore OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A <code>StickerSearchBar</code> is displayed above the sticker collection view when using <code>StickerProvider</code>.
SWIFT_CLASS_NAMED("StickerSearchBar")
@interface PESDKStickerSearchBar : PESDKSearchBar
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PESDKStickerSelectionControllerDelegate;

/// A <code>StickerSelectionController</code> displays multiple <code>Sticker</code>s and allows selection of a sticker.
SWIFT_CLASS_NAMED("StickerSelectionController")
@interface PESDKStickerSelectionController : PESDKViewController
/// The collection view that displays the <code>Sticker</code>s.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/// The gradient view that is added to the collection view for a fade effect.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull gradientView;
/// The visual effect view in the background of the collection view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull visualEffectView;
/// The size of the stickers in the collection view.
@property (nonatomic) CGSize stickerPreviewSize;
/// The search bar view enabled when using <code>StickerProvider</code>.
@property (nonatomic, readonly, strong) PESDKStickerSearchBar * _Nonnull searchBar;
/// The error view used with <code>StickerProvider</code>.
@property (nonatomic, readonly, strong) PESDKStickerErrorView * _Nonnull errorView;
/// The empty collection view used with <code>StickerProvider</code>.
@property (nonatomic, readonly, strong) PESDKStickerEmptyView * _Nonnull emptyView;
/// Calls the current error handler.
- (void)handleError;
/// The stickers which should be displayed.
@property (nonatomic, copy) NSArray<PESDKSticker *> * _Nonnull stickers;
/// The async sticker provider.
@property (nonatomic, strong) id <PESDKStickerProvider> _Nullable stickerProvider;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKStickerSelectionControllerDelegate> _Nullable delegate;
/// A closure to configure the cell of each sticker.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull);
/// A closure that is called when a sticker was selected.
@property (nonatomic, copy) void (^ _Nullable stickerAddedClosure)(PESDKSticker * _Nonnull);
/// A closure that is called when the sticker image is retrieved from a local/network source.
@property (nonatomic, copy) void (^ _Nullable stickerCustomizationClosure)(PESDKStickerSelectionController * _Nonnull, PESDKSticker * _Nonnull, UIImage * _Nonnull, void (^ _Nonnull)(PESDKSticker * _Nonnull, UIImage * _Nonnull));
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKIconCollectionViewCell) _Nonnull collectionViewCellType;)
+ (SWIFT_METATYPE(PESDKIconCollectionViewCell) _Nonnull)collectionViewCellType SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegateFlowLayout>
/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSourcePrefetching>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end



@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UISearchBarDelegate>
/// :nodoc:
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
/// :nodoc:
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
/// :nodoc:
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface PESDKStickerSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView;
@end


/// The <code>StickerSelectionControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>StickerSelectionController</code>.
SWIFT_PROTOCOL_NAMED("StickerSelectionControllerDelegate")
@protocol PESDKStickerSelectionControllerDelegate
/// Tells the delegate that the given sticker with the given image was selected.
/// \param stickerSelectionController The sticker selection controller where the sticker was selected
/// in.
///
/// \param sticker The sticker that was selected.
///
/// \param image The image that belongs to the sticker that was selected.
///
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image;
@optional
/// Tells the delegate that the given sticker with the given image was selected.
/// \param stickerSelectionController The sticker selection controller where the sticker was selected
/// in.
///
/// \param sticker The sticker that was selected.
///
/// \param image The image that belongs to the sticker that was selected.
///
/// \param metadata Metadata dictionary passed to the renderer.
///
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
@end


/// A <code>StickerSelectionView</code> is displayed above a sticker image view to indicate that this sticker
/// is selected.
SWIFT_CLASS_NAMED("StickerSelectionView")
@interface PESDKStickerSelectionView : UIView
/// Called by accessibility to make the selection smaller.
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);
/// Called by accessibility to make the selection bigger.
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);
/// Called by accessibility to rotate the selection to the left.
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);
/// Called by accessibility to rotate the selection to the right.
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGRect)alignmentRectForFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)accessibilityDecrement;
/// :nodoc:
- (void)accessibilityIncrement;
@end

/// The tinting mode a sticker supports.
/// <ul>
///   <li>
///     none:         The sticker’s color cannot be changed.
///   </li>
///   <li>
///     solid:        The sticker’s color is changed completely (i.e. <code>tintColor</code> is used).
///   </li>
///   <li>
///     colorized:    The sticker is converted to a gray scale image and the selected tint color is then
///     applied by the amount of the gray scale value.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKStickerTintMode, "StickerTintMode", open) {
/// The sticker’s color cannot be changed.
  PESDKStickerTintModeNone = 0,
/// The sticker’s color is changed completely (i.e. <code>tintColor</code> is used).
  PESDKStickerTintModeSolid = 1,
/// The sticker is converted to a gray scale image and the selected tint color is then applied
/// by the amount of the gray scale value.
  PESDKStickerTintModeColorized = 2,
};


/// The tool controller to add a <code>Sticker</code> to the image. It contains a menu with the available
/// <code>StickerCategory</code>s and a <code>StickerSelectionController</code> to display the available stickers in that
/// category.
SWIFT_CLASS_NAMED("StickerToolController")
@interface PESDKStickerToolController : PESDKMenuToolController <PESDKStickerSelectionControllerDelegate>
/// The contained <code>StickerSelectionController</code>.
@property (nonatomic, readonly, strong) PESDKStickerSelectionController * _Nonnull stickerSelectionController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image;
/// :nodoc:
- (void)stickerSelectionController:(PESDKStickerSelectionController * _Nonnull)stickerSelectionController didSelect:(PESDKSticker * _Nonnull)sticker with:(UIImage * _Nonnull)image metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
@end


@interface PESDKStickerToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKStickerCollectionDelegate>
/// :nodoc:
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker;
/// :nodoc:
- (void)stickerCollection:(id <PESDKStickerCollection> _Nonnull)stickerCollection didSelect:(PESDKSticker * _Nonnull)sticker metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata;
@end



@interface PESDKStickerToolController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


/// Options for configuring a <code>StickerToolController</code>.
SWIFT_CLASS_NAMED("StickerToolControllerOptions")
@interface PESDKStickerToolControllerOptions : PESDKToolControllerOptions
/// This closure is called when the user adds a sticker.
@property (nonatomic, readonly, copy) void (^ _Nullable addedStickerClosure)(PESDKSticker * _Nonnull);
/// This closure allows for customization of any sticker from a local/network source. When it is set it will be called after the image data is retrieved.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo or apply any other processing. It is passed a reference to the instance of <code>StickerSelectionController</code>
/// that calls this closure, the original <code>Sticker</code> object, the retrieved image data as <code>UIImage</code> and a completion handler, that you <em>must</em> call
/// with the modified <code>Sticker</code> and <code>UIImage</code> after you’re done with your customizations.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerCustomizationClosure)(PESDKStickerSelectionController * _Nonnull, PESDKSticker * _Nonnull, UIImage * _Nonnull, void (^ _Nonnull)(PESDKSticker * _Nonnull, UIImage * _Nonnull));
/// This closure allows further configuration of the sticker category buttons. The closure is called for
/// each sticker category button and has the button and its corresponding sticker category as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull);
/// This closure allows further configuration of the sticker buttons. The closure is called for
/// each sticker button and has the button and its corresponding sticker as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerButtonConfigurationClosure)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull);
/// The size of the stickers in the preview. Default is <code>(44, 44)</code>.
@property (nonatomic, readonly) CGSize stickerPreviewSize;
/// The index of the sticker category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic, readonly) NSInteger defaultStickerCategoryIndex;
/// Whether the user can create personal stickers from the device’s photo library. If <code>true</code> an action button is added as first item in the menu in front of the sticker categories which modally presents an <code>UIImagePickerController</code>
/// for personal sticker creation. Personal stickers will be added to a personal sticker category which will be added between the action button and the regular sticker categories if it does not exist.
/// Default is <code>false</code>.
@property (nonatomic, readonly) BOOL personalStickersEnabled;
/// The default tint mode for personal stickers. Default is <code>StickerTintMode.none</code>.
@property (nonatomic, readonly) enum PESDKStickerTintMode defaultPersonalStickerTintMode;
/// The weather provider used for all smart weather stickers. The default is <code>nil</code> which will hide all smart weather stickers or <code>MultiImageSticker</code>s that contain smart weather stickers from the <code>StickerSelectionController</code>.
@property (nonatomic, readonly, strong) id <PESDKWeatherProvider> _Nullable weatherProvider;
/// This closure allows for further customization of personal stickers. When it is set it will be called after a user selected a sticker from their photo roll.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo. It is passed a reference to the instance of <code>StickerToolController</code> that calls this closure, an instance of <code>URL</code>
/// pointing to the user’s selected sticker and a completion handler, that you <em>must</em> call with the <code>URL</code> to your modified sticker after you’re done
/// with your customizations.
@property (nonatomic, readonly, copy) void (^ _Nullable personalStickerCustomizationClosure)(PESDKStickerToolController * _Nonnull, NSURL * _Nonnull, void (^ _Nonnull)(NSURL * _Nullable));
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>StickerToolControllerOptions</code> using the given builder.
/// \param builder A <code>StickerToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKStickerToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>StickerToolControllerOptionsBuilder</code> for <code>StickerToolControllerOptions</code>.
SWIFT_CLASS_NAMED("StickerToolControllerOptionsBuilder")
@interface PESDKStickerToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure is called when the user adds a sticker.
@property (nonatomic, copy) void (^ _Nullable addedStickerClosure)(PESDKSticker * _Nonnull);
/// This closure allows for customization of any sticker from a local/network source. When it is set it will be called after the image data is retrieved.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo or apply any other processing. It is passed a reference to the instance of <code>StickerSelectionController</code>
/// that calls this closure, the original <code>Sticker</code> object, the retrieved image data as <code>UIImage</code> and a completion handler, that you <em>must</em> call
/// with the modified <code>Sticker</code> and <code>UIImage</code> after you’re done with your customizations.
@property (nonatomic, copy) void (^ _Nullable stickerCustomizationClosure)(PESDKStickerSelectionController * _Nonnull, PESDKSticker * _Nonnull, UIImage * _Nonnull, void (^ _Nonnull)(PESDKSticker * _Nonnull, UIImage * _Nonnull));
/// This closure allows further configuration of the sticker category buttons. The closure is called for
/// each sticker category button and has the button and its corresponding sticker category as parameters.
@property (nonatomic, copy) void (^ _Nullable stickerCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKStickerCategory * _Nonnull);
/// This closure allows further configuration of the sticker buttons. The closure is called for
/// each sticker button and has the button and its corresponding sticker as parameters.
@property (nonatomic, copy) void (^ _Nullable stickerButtonConfigurationClosure)(PESDKIconCollectionViewCell * _Nonnull, PESDKSticker * _Nonnull);
/// The size of the stickers in the preview. Default is <code>(44, 44)</code>.
@property (nonatomic) CGSize stickerPreviewSize;
/// The index of the sticker category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic) NSInteger defaultStickerCategoryIndex;
/// Whether the user can create personal stickers from the device’s photo library. If <code>true</code> an action button is added as first item in the menu in front of the sticker categories which modally presents an <code>UIImagePickerController</code>
/// for personal sticker creation. Personal stickers will be added to a personal sticker category which will be added between the action button and the regular sticker categories if it does not exist.
/// Default is <code>false</code>.
@property (nonatomic) BOOL personalStickersEnabled;
/// The default tint mode for personal stickers. Default is <code>StickerTintMode.none</code>.
@property (nonatomic) enum PESDKStickerTintMode defaultPersonalStickerTintMode;
/// The weather provider used for all smart weather stickers. The default is <code>nil</code> which will hide all smart weather stickers or <code>MultiImageSticker</code>s that contain smart weather stickers from the <code>StickerSelectionController</code>.
@property (nonatomic, strong) id <PESDKWeatherProvider> _Nullable weatherProvider;
/// This closure allows for further customization of personal stickers. When it is set it will be called after a user selected a sticker from their photo roll.
/// You could for example use this to present another instance of PhotoEditor SDK to allow your users to edit the selected sticker before placing it
/// on top of the original photo. It is passed a reference to the instance of <code>StickerToolController</code> that calls this closure, an instance of <code>URL</code>
/// pointing to the user’s selected sticker and a completion handler, that you <em>must</em> call with the <code>URL</code> to your modified sticker after you’re done
/// with your customizations.
@property (nonatomic, copy) void (^ _Nullable personalStickerCustomizationClosure)(PESDKStickerToolController * _Nonnull, NSURL * _Nonnull, void (^ _Nonnull)(NSURL * _Nullable));
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>StickerToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>StickerToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKStickerToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// A <code>SubtleLabel</code> is a subclass of <code>Label</code>, which allows to restrict appearance proxy calls
/// to a subset of all labels that are instances of this class.
SWIFT_CLASS_NAMED("SubtleLabel")
@interface PESDKSubtleLabel : PESDKLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

enum PESDKTemperatureUnit : NSInteger;

/// A temperature measurement that stores a temperature value and its corresponding unit.
SWIFT_CLASS_NAMED("Temperature")
@interface PESDKTemperature : NSObject
/// The temperature value.
@property (nonatomic, readonly) double value;
/// The temperature unit for the <code>value</code>.
@property (nonatomic, readonly) enum PESDKTemperatureUnit unit;
/// Creates a temperature measurement.
/// \param value The temperature value.
///
/// \param unit The temperature unit for the given <code>value</code>.
///
- (nonnull instancetype)initWithValue:(double)value unit:(enum PESDKTemperatureUnit)unit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This filter changes the temperature of an image.
SWIFT_CLASS_NAMED("TemperatureFilter")
@interface PESDKTemperatureFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The temperature of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputTemperature;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// A temperature format that should be used for displaying temperature measurements to the user.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKTemperatureFormat, "TemperatureFormat", open) {
/// Temperature values will always be formatted to use “°F” as unit.
  PESDKTemperatureFormatFahrenheit = 0,
/// Temperature values will always be formatted to use “°C” as unit.
  PESDKTemperatureFormatCelsius = 1,
/// Temperature values will always be formatted to use “°K” as unit.
  PESDKTemperatureFormatKelvin = 2,
/// Temperature values will be formatted according to <code>Locale.current</code>.
  PESDKTemperatureFormatLocale = 3,
};

/// A unit of measure for temperature.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKTemperatureUnit, "TemperatureUnit", open) {
/// The degree Fahrenheit unit of temperature.
  PESDKTemperatureUnitFahrenheit = 0,
/// The degree Celsius unit of temperature.
  PESDKTemperatureUnitCelsius = 1,
/// The kelvin unit of temperature.
  PESDKTemperatureUnitKelvin = 2,
};

/// The actions that can be used in an instance of <code>TextOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextAction, open) {
/// Change the font of the text.
  TextActionSelectFont = 0,
/// Change the color of the text.
  TextActionSelectColor = 1,
/// Change the color of the text’s bounding box.
  TextActionSelectBackgroundColor = 2,
/// Change the alignment of the text.
  TextActionSelectAlignment = 3,
/// Straighten the label
  TextActionStraighten = 4,
/// Change the duration of the text when editing a video.
  TextActionDuration = 5,
};


/// A <code>TextButton</code> is used within a <code>FontSelectorView</code> to present different fonts and their names.
SWIFT_CLASS_NAMED("TextButton")
@interface PESDKTextButton : PESDKButton
/// The color of the label.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/// The name of the font.
@property (nonatomic, copy) NSString * _Nonnull fontName;
/// :nodoc:
@property (nonatomic) CGRect frame;
/// The name that is shown to the user.
@property (nonatomic, copy) NSString * _Nonnull displayName;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The different modes that an instance of <code>TextColorToolController</code> can handle.
typedef SWIFT_ENUM(NSInteger, TextColorToolControllerMode, open) {
/// The mode to handle the foreground appearance of the text.
  TextColorToolControllerModeForeground = 0,
/// The mode to handle the background appearance of the text.
  TextColorToolControllerModeBackground = 1,
};


/// Options for configuring a <code>TextColorToolController</code>.
SWIFT_CLASS_NAMED("TextColorToolControllerOptions")
@interface PESDKTextColorToolControllerOptions : PESDKColorToolControllerOptions
/// An array of colors to present in the color tool when the <code>textColorMode</code> of
/// <code>TextColorToolController</code> is <code>.background</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKColor *> * _Nonnull availableBackgroundTextColors;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextColorToolControllerOptions</code> using the given builder.
/// \param textBuilder A <code>TextColorToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithTextBuilder:(PESDKTextColorToolControllerOptionsBuilder * _Nonnull)textBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextColorToolControllerOptionsBuilder</code> for <code>TextColorToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextColorToolControllerOptionsBuilder")
@interface PESDKTextColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
/// An array of colors to present in the color tool when the <code>textColorMode</code> of
/// <code>TextColorToolController</code> is <code>.background</code>.
@property (nonatomic, copy) NSArray<PESDKColor *> * _Nonnull availableBackgroundTextColors;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end


/// The base class for all text designs.
SWIFT_CLASS_NAMED("TextDesign")
@interface PESDKTextDesign : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// When a specific text design’s layout is changed or contains bugs, a legacy, backwards
/// compatible version of it is created and added to this array. This ensures that older
/// serializations can still be loaded with the same look. If you do not want to support backwards
/// compatibility, just set this to an empty array.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKTextDesign *> * _Nonnull legacy;)
+ (NSArray<PESDKTextDesign *> * _Nonnull)legacy SWIFT_WARN_UNUSED_RESULT;
+ (void)setLegacy:(NSArray<PESDKTextDesign *> * _Nonnull)value;
/// Creates the default text designs that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKTextDesign *> * _Nonnull defaultItems;)
+ (NSArray<PESDKTextDesign *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// The pool of text designs available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKTextDesign *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.textDesigns` of your `Configuration` object instead.");)
+ (NSArray<PESDKTextDesign *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKTextDesign *> * _Nonnull)newValue;
/// Get the text design from the pool with the given identifier.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier An identifier.
///
///
/// returns:
/// The text design that matches the identifier, <code>nil</code> otherwise.
+ (PESDKTextDesign * _Nullable)textDesignWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.textDesign(withIdentifier:)` of your `Configuration` object instead.");
/// The identifier of the layout.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Do not use this initializer!
/// attention:
/// It should not be public but it is currently required to workaround issues with generated <code>.swiftinterface</code> files.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The actions that can be used in an instance of <code>TextDesignOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextDesignAction, open) {
/// Change the color of the text design.
  TextDesignActionSelectColor = 0,
/// Change the style of the text design.
  TextDesignActionSelectStyle = 1,
/// Change the duration of the text design when editing a video.
  TextDesignActionDuration = 2,
};


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignBlocks")
@interface PESDKTextDesignBlocks : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignBlocksCondensed")
@interface PESDKTextDesignBlocksCondensed : PESDKTextDesignBlocks
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignBlocksLight")
@interface PESDKTextDesignBlocksLight : PESDKTextDesignBlocks
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This layout is included for compatibility of TextDesign serialization v3.0.0 ..< v3.1.1
/// Please do not use directly.
SWIFT_CLASS_NAMED("TextDesignBlocksLight_V3_1_0")
@interface PESDKTextDesignBlocksLight_V3_1_0 : PESDKTextDesignBlocksLight
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignCelebrate")
@interface PESDKTextDesignCelebrate : PESDKTextDesignBlocks
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignCelebrateSimple")
@interface PESDKTextDesignCelebrateSimple : PESDKTextDesignCelebrate
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Options for configuring a <code>TextDesignColorToolController</code>.
SWIFT_CLASS_NAMED("TextDesignColorToolControllerOptions")
@interface PESDKTextDesignColorToolControllerOptions : PESDKColorToolControllerOptions
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignColorToolControllerOptions</code> using the given builder.
/// \param textDesignBuilder A <code>TextDesignColorToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithTextDesignBuilder:(PESDKTextDesignColorToolControllerOptionsBuilder * _Nonnull)textDesignBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKColorToolControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignColorToolControllerOptionsBuilder</code> for <code>TextDesignColorToolController</code>.
SWIFT_CLASS_NAMED("TextDesignColorToolControllerOptionsBuilder")
@interface PESDKTextDesignColorToolControllerOptionsBuilder : PESDKColorToolControllerOptionsBuilder
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignColorToolControllerOptionsBuilder</code> initialized with the given options.
/// \param textDesignOptions A <code>TextDesignColorToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithTextDesignOptions:(PESDKTextDesignColorToolControllerOptions * _Nonnull)textDesignOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKColorToolControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

/// The overlay actions that can be used in an instance of <code>TextDesignDurationToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, TextDesignDurationOverlayAction, open) {
/// Toggle play/pause for video preview.
  TextDesignDurationOverlayActionPlayPause = 0,
};


/// Options for configuring a <code>TextDesignDurationToolController</code>.
SWIFT_CLASS_NAMED("TextDesignDurationToolControllerOptions")
@interface PESDKTextDesignDurationToolControllerOptions : PESDKDurationToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textDesignDurationOverlayActionSelectedClosure)(enum TextDesignDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignDurationToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>TextDesignDurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignDurationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignDurationToolControllerOptionsBuilder</code> for <code>TextDesignDurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignDurationToolControllerOptionsBuilder")
@interface PESDKTextDesignDurationToolControllerOptionsBuilder : PESDKDurationToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textDesignDurationOverlayActionSelectedClosure)(enum TextDesignDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignDurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignDurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignDurationToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions SWIFT_UNAVAILABLE;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignEqualWidth")
@interface PESDKTextDesignEqualWidth : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignEqualWidthFat")
@interface PESDKTextDesignEqualWidthFat : PESDKTextDesignEqualWidth
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The tool controller to change the layout of a text design.
SWIFT_CLASS_NAMED("TextDesignLayoutToolController")
@interface PESDKTextDesignLayoutToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end




/// Options for configuring a <code>TextDesignLayoutToolController</code>.
SWIFT_CLASS_NAMED("TextDesignLayoutToolControllerOptions")
@interface PESDKTextDesignLayoutToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignLayoutToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextDesignLayoutToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignLayoutToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignLayoutToolControllerOptionsBuilder</code> for <code>TextDesignLayoutToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignLayoutToolControllerOptionsBuilder")
@interface PESDKTextDesignLayoutToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignLayoutToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignLayoutToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignLayoutToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// Handles the display of <code>TextDesignMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("TextDesignListSectionController")
@interface PESDKTextDesignListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (void)selectItemAt:(NSInteger)index;
/// :nodoc:
- (void)deselectItemAt:(NSInteger)index;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMasked")
@interface PESDKTextDesignMasked : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMaskedBadge")
@interface PESDKTextDesignMaskedBadge : PESDKTextDesignMasked
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMaskedSpeechBubble")
@interface PESDKTextDesignMaskedSpeechBubble : PESDKTextDesignMasked
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMaskedSpeechBubbleComic")
@interface PESDKTextDesignMaskedSpeechBubbleComic : PESDKTextDesignMaskedSpeechBubble
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextDesignOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextDesignMenuItem")
@interface PESDKTextDesignMenuItem : NSObject <PESDKMenuItem>
/// The <code>TextDesign</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKTextDesign * _Nonnull textDesign;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// Creates a new text design menu item for the given text design.
/// \param textDesign The text design that this menu item represents.
///
- (nonnull instancetype)initWithTextDesign:(PESDKTextDesign * _Nonnull)textDesign;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignMultiline")
@interface PESDKTextDesignMultiline : PESDKTextDesignMasked
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Handles the display of <code>TextDesignOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("TextDesignOptionListSectionController")
@interface PESDKTextDesignOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextDesignOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextDesignOptionMenuItem")
@interface PESDKTextDesignOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>TextDesignAction</code> that this menu item represents.
@property (nonatomic, readonly) enum TextDesignAction textDesignAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new text design option menu item for the given text action.
/// \param textDesignAction The text design action that this menu item represents.
///
- (nonnull instancetype)initWithTextDesignAction:(enum TextDesignAction)textDesignAction icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit text designs. It contains a menu with all available text designs and
/// a <code>SpriteEditController</code> to change a layout’s geometry.
SWIFT_CLASS_NAMED("TextDesignOptionsToolController")
@interface PESDKTextDesignOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end



@interface PESDKTextDesignOptionsToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


enum TextDesignOverlayAction : NSInteger;

/// Options for configuring a <code>TextDesignOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextDesignOptionsToolControllerOptions")
@interface PESDKTextDesignOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>textDesignActionButtonConfigurationClosure</code> instead.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable menuActionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextDesignAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignOverlayAction);
/// This closure is called when the user selects a <code>TextDesign</code>.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>actionSelectedClosure</code> instead.
@property (nonatomic, readonly, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable actionSelectedClosure)(enum TextDesignAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextDesignOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignOptionsToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextDesignOptionsToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignOptionsToolControllerOptionsBuilder</code> for <code>TextDesignOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignOptionsToolControllerOptionsBuilder")
@interface PESDKTextDesignOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>textDesignActionButtonConfigurationClosure</code> instead.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKTextDesign * _Nonnull);
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable menuActionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextDesignAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDesignOverlayAction);
/// This closure is called when the user selects a <code>TextDesign</code>.
/// note:
/// This closure is only called in the <code>LegacyTextDesignOptionsToolController</code>.
/// For usage in the <code>TextDesignOptionsToolController</code>, use <code>actionSelectedClosure</code> instead.
@property (nonatomic, copy) void (^ _Nullable textDesignActionSelectedClosure)(PESDKTextDesign * _Nonnull);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable actionSelectedClosure)(enum TextDesignAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextDesignOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignOptionsToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignOptionsToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignOptionsToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTextDesignOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>TextDesignOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTextDesignOverlayActions</code> with the corresponding <code>TextDesignOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextDesignOverlayActions;
@end

/// The overlay actions that can be used in an instance of <code>TextDesignOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextDesignOverlayAction, open) {
/// Invert the text design.
  TextDesignOverlayActionInvert = 0,
/// Delete the text design.
  TextDesignOverlayActionDelete = 1,
/// Undo the latest operation.
  TextDesignOverlayActionUndo = 2,
/// Redo the latest operation.
  TextDesignOverlayActionRedo = 3,
/// Move the selected text design to the front.
  TextDesignOverlayActionBringToFront = 4,
/// Switch to the add text design UI.
  TextDesignOverlayActionAdd = 5,
};


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignSunshine")
@interface PESDKTextDesignSunshine : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init;
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignParticles")
@interface PESDKTextDesignParticles : PESDKTextDesignSunshine
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier SWIFT_UNAVAILABLE;
@end


/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignRotated")
@interface PESDKTextDesignRotated : PESDKTextDesign
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This layout is included for compatibility of TextDesign serialization v3.0.0 ..< v3.1.1
/// Please do not use directly.
SWIFT_CLASS_NAMED("TextDesignSunshine_V3_1_0")
@interface PESDKTextDesignSunshine_V3_1_0 : PESDKTextDesignSunshine
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

/// Options for configuring a <code>TextDesignToolController</code>.
SWIFT_CLASS_NAMED("TextDesignToolControllerOptions")
@interface PESDKTextDesignToolControllerOptions : PESDKToolControllerOptions
/// Use this closure to configure the text input view.
/// Defaults to an empty implementation.
@property (nonatomic, readonly, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, readonly, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// Use this closure to configure the color collection view.
/// note:
/// This closure is only used in the legacy tool.
@property (nonatomic, readonly, copy) void (^ _Nullable colorCollectionViewConfigurationClosure)(PESDKColorCollectionView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, readonly, copy) NSString * _Nullable updateTitle;
/// The color palette to display.
@property (nonatomic, readonly, strong) PESDKColorPalette * _Nonnull colorPalette;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic, readonly) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDesignToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextDesignToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDesignToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDesignToolControllerOptionsBuilder</code> for <code>TextDesignToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDesignToolControllerOptionsBuilder")
@interface PESDKTextDesignToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Use this closure to configure the text input view.
@property (nonatomic, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// Use this closure to configure the color collection view.
@property (nonatomic, copy) void (^ _Nullable colorCollectionViewConfigurationClosure)(PESDKColorCollectionView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, copy) NSString * _Nullable updateTitle;
/// The color palette to display.
@property (nonatomic, strong) PESDKColorPalette * _Nonnull colorPalette;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDesignToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDesignToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDesignToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end




/// A concrete implementation of a <code>TextDesign</code>. For more details about the look of each layout,
/// please take a look at the documentation.
SWIFT_CLASS_NAMED("TextDesignWatercolor")
@interface PESDKTextDesignWatercolor : PESDKTextDesignMaskedSpeechBubble
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The overlay actions that can be used in an instance of <code>TextDurationToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, TextDurationOverlayAction, open) {
/// Toggle play/pause for video preview.
  TextDurationOverlayActionPlayPause = 0,
};


/// Options for configuring a <code>TextDurationToolController</code>.
SWIFT_CLASS_NAMED("TextDurationToolControllerOptions")
@interface PESDKTextDurationToolControllerOptions : PESDKDurationToolControllerOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textDurationOverlayActionSelectedClosure)(enum TextDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextDurationToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>TextDurationToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextDurationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationBuilder:(PESDKDurationToolControllerOptionsBuilder * _Nonnull)durationBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextDurationToolControllerOptionsBuilder</code> for <code>TextDurationToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextDurationToolControllerOptionsBuilder")
@interface PESDKTextDurationToolControllerOptionsBuilder : PESDKDurationToolControllerOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextDurationOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textDurationOverlayActionSelectedClosure)(enum TextDurationOverlayAction);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextDurationToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextDurationToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextDurationToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDurationOptions:(PESDKDurationToolControllerOptions * _Nonnull)durationOptions SWIFT_UNAVAILABLE;
@end


/// The tool to edit the font of a sprite label. It contains a menu with available fonts and a
/// <code>FontSelectorViewController</code> to see a more detailed view of the fonts.
SWIFT_CLASS_NAMED("TextFontToolController")
@interface PESDKTextFontToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



@interface PESDKTextFontToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end



/// Options for configuring a <code>TextFontToolController</code>.
SWIFT_CLASS_NAMED("TextFontToolControllerOptions")
@interface PESDKTextFontToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFont * _Nonnull);
/// This closure is called every time the user selects a crop ratio.
@property (nonatomic, readonly, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);
/// This closure allows further configuration of the font selector view, i.e. the view that can
/// be expanded from the bottom to display a more detailed view of the fonts.
@property (nonatomic, readonly, copy) void (^ _Nullable fontSelectorViewConfigurationClosure)(PESDKFontSelectorView * _Nonnull);
/// This closure allows further configuration of the handle button, i.e. the view that is used to
/// expand the font selector view.
@property (nonatomic, readonly, copy) void (^ _Nullable handleButtonConfigurationClosure)(PESDKHandleButton * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextFontToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextFontToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextFontToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextFontToolControllerOptionsBuilder</code> for <code>TextFontToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextFontToolControllerOptionsBuilder")
@interface PESDKTextFontToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKFont * _Nonnull);
/// This closure is called every time the user selects a font.
@property (nonatomic, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);
/// This closure allows further configuration of the font selector view, i.e. the view that can
/// be expanded from the bottom to display a more detailed view of the fonts.
@property (nonatomic, copy) void (^ _Nullable fontSelectorViewConfigurationClosure)(PESDKFontSelectorView * _Nonnull);
/// This closure allows further configuration of the handle button, i.e. the view that is used to
/// expand the font selector view.
@property (nonatomic, copy) void (^ _Nullable handleButtonConfigurationClosure)(PESDKHandleButton * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// Handles the display of <code>TextOptionMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("TextOptionListSectionController")
@interface PESDKTextOptionListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>TextOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextOptionMenuItem")
@interface PESDKTextOptionMenuItem : NSObject <PESDKMenuItem>
/// The <code>TextAction</code> that this menu item represents.
@property (nonatomic, readonly) enum TextAction textAction;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Creates a new text option menu item for the given text action.
/// \param textAction The text action that this menu item represents.
///
- (nonnull instancetype)initWithTextAction:(enum TextAction)textAction icon:(UIImage * _Nullable)icon;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The tool controller to edit text. It contains a menu with options to change attributes of the
/// text and a <code>SpriteEditController</code> to change a text’s geometry.
SWIFT_CLASS_NAMED("TextOptionsToolController")
@interface PESDKTextOptionsToolController : PESDKMenuToolController
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)setupForZoomAndPan;
/// :nodoc:
- (void)resetForZoomAndPan;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
/// An array of all overlay buttons that are displayed in the controller. This includes
/// <code>undoButton</code> and <code>redoButton</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKOverlayButton *> * _Nonnull overlayButtons;
/// The undo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable undoButton;
/// The redo button that is displayed in the controller.
@property (nonatomic, readonly, strong) PESDKOverlayButton * _Nullable redoButton;
@end



@interface PESDKTextOptionsToolController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsVideoPlayback;
@end


enum TextOverlayAction : NSInteger;

/// Options for configuring a <code>TextOptionsToolController</code>.
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptions")
@interface IMGLTextOptionsToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic, readonly) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextOptionsToolConrollerOptions</code> using the given builder.
/// \param builder A <code>TextOptionsToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TextOptionsToolControllerOptionsBuilder</code> for <code>TextOptionsToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptionsBuilder")
@interface PESDKTextOptionsToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the action buttons. The closure is called for
/// each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, enum TextAction);
/// This closure allows further configuration of the overlay actions. The closure is called for
/// each overlay and has the overlay and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TextOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);
/// This closure is called when the user selects an overlay action.
@property (nonatomic, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextOverlayAction);
/// The insets used to layout the overlay buttons in their container. The <code>.top</code> value is ignored.
@property (nonatomic) UIEdgeInsets overlayButtonInsets;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTextOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// An array of <code>TextAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTextActions</code> with the corresponding <code>TextAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextActions;
/// An array of <code>TextOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTextOverlayActions</code> with the corresponding <code>TextOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextOverlayActions;
@end

/// The overlay actions that can be used in an instance of <code>TextOptionsToolController</code>.
typedef SWIFT_ENUM(NSInteger, TextOverlayAction, open) {
/// Switch to the add text UI.
  TextOverlayActionAdd = 0,
/// Delete the label.
  TextOverlayActionDelete = 1,
/// Undo the latest operation.
  TextOverlayActionUndo = 2,
/// Redo the latest operation.
  TextOverlayActionRedo = 3,
/// Flip the label.
  TextOverlayActionFlip = 4,
/// Move the selected text to the front.
  TextOverlayActionBringToFront = 5,
};


/// A <code>TextSelectionView</code> is displayed above a label to indicate that this label is selected.
SWIFT_CLASS_NAMED("TextSelectionView")
@interface PESDKTextSelectionView : UIView
/// The handle on the right side of the view. This is used to resize the bounding box of a label.
@property (nonatomic, readonly, strong) UIView * _Nonnull rightHandle;
/// The handle on the left side of the view. This is used to resize the bounding box of a label.
@property (nonatomic, readonly, strong) UIView * _Nonnull leftHandle;
/// Called by accessibility to make this selection smaller.
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);
/// Called by accessibility to make this selection bigger.
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);
/// Called by accessibility to rotate this selection to the left.
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);
/// Called by accessibility to rotate this selection to the right.
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);
/// Called by accessibility to increase the bounding box.
@property (nonatomic, copy) void (^ _Nullable increaseBoundingBoxHandler)(void);
/// Called by accessibility to decrease the bounding box.
@property (nonatomic, copy) void (^ _Nullable decreaseBoundingBoxHandler)(void);
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (CGRect)alignmentRectForFrame:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)accessibilityDecrement;
/// :nodoc:
- (void)accessibilityIncrement;
@end


/// Options for configuring a <code>TextToolController</code>.
SWIFT_CLASS_NAMED("TextToolControllerOptions")
@interface PESDKTextToolControllerOptions : PESDKToolControllerOptions
/// Use this closure to configure the text input view.
/// Defaults to an empty implementation.
@property (nonatomic, readonly, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, readonly, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, readonly, copy) NSString * _Nullable updateTitle;
/// The default color a newly created text has.
@property (nonatomic, readonly, strong) UIColor * _Nonnull defaultTextColor;
/// The default alignment a newly created text has.
@property (nonatomic, readonly) NSTextAlignment defaultTextAlignment;
/// The minimum initial font size of newly created text.
@property (nonatomic, readonly) CGFloat minimumTextSize;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic, readonly) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TextToolControllerOptions</code> using the given builder.
/// \param builder A <code>TextToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTextToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


@interface PESDKTextToolControllerOptions (SWIFT_EXTENSION(ImglyKit))
/// The maximum initial font size of newly created text.
/// If set to <code>nil</code> the maximum text size is calculated
/// to fit the image size which is the default.
@property (nonatomic, readonly, strong) NSNumber * _Nullable maximumTextSize;
@end


/// The default <code>TextToolControllerOptionsBuilder</code> for <code>TextToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TextToolControllerOptionsBuilder")
@interface PESDKTextToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Use this closure to configure the text input view.
@property (nonatomic, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/// Use this closure to configure the dimming view.
@property (nonatomic, copy) void (^ _Nullable dimmingViewConfigurationClosure)(UIView * _Nonnull);
/// The title of the tool when it is used to update an existing label.
@property (nonatomic, copy) NSString * _Nullable updateTitle;
/// The default color a newly created text has.
@property (nonatomic, strong) UIColor * _Nonnull defaultTextColor;
/// The default alignment a newly created text has.
@property (nonatomic) NSTextAlignment defaultTextAlignment;
/// The minimum initial font size of newly created text.
@property (nonatomic) CGFloat minimumTextSize;
/// Whether the user can use emojis as text input.
/// Default is <code>true</code>.
/// attention:
/// Emojis are not cross-platform compatible. If you use the serialization feature to share edits
/// across different platforms emojis will be rendered with the system’s local set of emojis and will appear differently.
@property (nonatomic) BOOL emojisEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TextToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TextToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTextToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTextToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// The maximum initial font size of newly created text.
/// If set to <code>nil</code> the maximum text size is calculated
/// to fit the image size which is the default.
@property (nonatomic, strong) NSNumber * _Nullable maximumTextSize;
@end

@protocol MTLTexture;
@protocol MTLSamplerState;

/// A <code>Texture</code> manages a Metal texture. It is responsible for allocating and deallocting the necessary memory.
SWIFT_CLASS_NAMED("Texture")
@interface PESDKTexture : NSObject
/// The Metal texture that backs this instance
@property (nonatomic, strong) id <MTLTexture> _Nonnull texture;
/// The Metal sampler that should be used to sample this texture
@property (nonatomic, strong) id <MTLSamplerState> _Nonnull sampler;
/// Creates a new texture from the given image.
/// \param cgImage The image to create a texture for.
///
/// \param forceRGB Set to <code>true</code> if the image should be RGB, <code>false</code> otherwise.
///
/// \param device The Metal device to associate textures with.
///
- (nonnull instancetype)initWithCgImage:(CGImageRef _Nonnull)cgImage forceRGB:(BOOL)forceRGB device:(id <MTLDevice> _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface PESDKTimelineToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKProxyZoomControllerDelegate>
/// :nodoc:
- (UIScrollView * _Nullable)proxyZoomControllerTargetScrollView:(PESDKProxyZoomController * _Nonnull)proxyZoomController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)proxyZoomControllerDidScroll:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerWillBeginZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidZoom:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
/// :nodoc:
- (void)proxyZoomControllerDidEndZooming:(PESDKProxyZoomController * _Nonnull)proxyZoomController;
@end


@interface PESDKTimelineToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimViewDelegate>
/// :nodoc:
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
/// :nodoc:
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end



/// This filter is used to colorize stickers.
SWIFT_CLASS_NAMED("TintFilter")
@interface PESDKTintFilter : CIFilter
/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/// The color of the tint.
@property (nonatomic, strong) UIColor * _Nullable inputColor;
/// The filtered image.
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





/// Handles the display of <code>ToolMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("ToolListSectionController")
@interface PESDKToolListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>PhotoEditViewController</code> to present a new tool.
SWIFT_CLASS_NAMED("ToolMenuItem")
@interface PESDKToolMenuItem : NSObject <PESDKMenuItem>
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The icon of the menu item.
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
/// The class of the tool that should be presented when selecting this menu item.
@property (nonatomic, readonly) SWIFT_METATYPE(PESDKPhotoEditToolController) _Nonnull toolControllerClass;
/// Whether this tool supports editing photos.
@property (nonatomic, readonly) BOOL supportsPhoto;
/// Whether this tool supports editing videos.
@property (nonatomic, readonly) BOOL supportsVideo;
/// Whether this tool can be redirected to if it is the only one in the menu.
@property (nonatomic, readonly) BOOL supportsSingleToolUsage;
/// Creates a new tool menu item with the given title, icon and tool controller class.
/// \param title The title of the menu item.
///
/// \param icon The icon of the menu item.
///
/// \param toolControllerClass The class of the tool that should be presented when selecting this
/// menu item.
///
- (nullable instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon toolControllerClass:(SWIFT_METATYPE(PESDKPhotoEditToolController) _Nullable)toolControllerClass;
/// Creates a new tool menu item with the given title, icon and tool controller class.
/// \param title The title of the menu item.
///
/// \param icon The icon of the menu item.
///
/// \param toolControllerClass The class of the tool that should be presented when selecting this
/// menu item.
///
/// \param supportsPhoto Whether this tool supports editing photos.
///
/// \param supportsVideo Whether this tool supports editing videos.
///
- (nullable instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon toolControllerClass:(SWIFT_METATYPE(PESDKPhotoEditToolController) _Nullable)toolControllerClass supportsPhoto:(BOOL)supportsPhoto supportsVideo:(BOOL)supportsVideo supportsSingleToolUsage:(BOOL)supportsSingleToolUsage;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKToolMenuItem (SWIFT_EXTENSION(ImglyKit))
/// Creates the item for the transform tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTransformToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the filter tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createFilterToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the adjust tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createAdjustToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the sticker tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createStickerToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the text tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTextToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the text design tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTextDesignToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the legacy text design tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createLegacyTextDesignToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the overlay tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createOverlayToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the frame tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createFrameToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the brush tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createBrushToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the focus tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createFocusToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the trim tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createTrimToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the composition tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createCompositionToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the composition tool if the license feature is available otherwise the trim tool is created as fallback
/// because the composition tool also allows trimming and using both tools is usually not intended.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createCompositionOrTrimToolItem SWIFT_WARN_UNUSED_RESULT;
/// Creates the item for the audio tool.
///
/// returns:
/// A tool menu item.
+ (PESDKToolMenuItem * _Nullable)createAudioToolItem SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>Toolbar</code> is used inside a <code>ToolbarController</code> to display <code>ToolbarItem</code>s.
IB_DESIGNABLE
SWIFT_CLASS_NAMED("Toolbar")
@interface PESDKToolbar : UIView
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// The content view which hosts all <code>ToolbarItem</code>s.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// The toolbar items that are on the toolbar item stack.
@property (nonatomic, copy) NSArray<PESDKToolbarItem *> * _Nonnull items;
/// Updates the items that are on the toolbar item stack.
/// \param items The items to replace the toolbar item stack with.
///
/// \param animated Whether or not to animate the change.
///
- (void)setItems:(NSArray<PESDKToolbarItem *> * _Nullable)items animated:(BOOL)animated;
/// Pushes a toolbar item onto the toolbar item stack.
/// \param item The item to push onto the stack.
///
/// \param animated Whether or not to animate the change.
///
- (void)pushToolbarItem:(PESDKToolbarItem * _Nonnull)item animated:(BOOL)animated;
/// Pops the top toolbar item from the toolbar item stack.
/// \param animated Whether or not to animate the change.
///
///
/// returns:
/// The toolbar item that was popped from the stack, if any.
- (PESDKToolbarItem * _Nullable)popToolbarItemAnimated:(BOOL)animated;
@end


/// A <code>ToolbarButton</code> should be used within an instance of <code>Toolbar</code>. It automatically styles itself
/// to display touch events.
SWIFT_CLASS_NAMED("ToolbarButton")
@interface PESDKToolbarButton : PESDKButton
/// The width of the button that is used as a layout constraint
/// within the <code>Toolbar</code>. Default is set to 60.
@property (nonatomic) CGFloat width;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// :nodoc:
- (void)setEnabled:(BOOL)enabled animated:(BOOL)animated;
/// :nodoc:
- (void)tintColorDidChange;
@end



/// A TooltipSlider object is a visual control used to select a single value from a continuous range of
/// values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the
/// current value of the slider and can be moved by the user to change the setting.
/// A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
/// Additionally a <code>TooltipSlider</code> also presents a tooltip above the thumb image that displays the current
/// selected value while dragging.
SWIFT_CLASS_NAMED("TooltipSlider")
@interface PESDKTooltipSlider : PESDKSlider
/// The tooltip that is displayed above the thumb image.
@property (nonatomic, readonly, strong) PESDKSliderTooltip * _Nonnull tooltip;
/// The font of the label.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (BOOL)beginTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)endTrackingWith:(UIPanGestureRecognizer * _Nonnull)panGestureRecognizer;
@end


/// A <code>TouchingGestureRecognizer</code> is a simple <code>UIGestureRecognizer</code> subclass that counts the number
/// of touches on the associated view.
SWIFT_CLASS_NAMED("TouchingGestureRecognizer")
@interface PESDKTouchingGestureRecognizer : UIGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// :nodoc:
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// :nodoc:
- (void)reset;
@end

/// Describes all available transform actions.
typedef SWIFT_ENUM(NSInteger, TransformAction, open) {
/// Rotate the image to the left.
  TransformActionRotateLeft = 0,
/// Flip the image horizontally.
  TransformActionFlipHorizontally = 1,
/// Straightens the image.
  TransformActionStraighten = 2,
};





@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit)) <UIGestureRecognizerDelegate>
/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKScalePickerDelegate>
/// :nodoc:
- (void)scalePicker:(CGFloat)value didChangeValue:(PESDKScalePicker * _Nonnull)scalePicker;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit))
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit)) <PESDKCropAndStraightenViewDelegate>
/// :nodoc:
- (void)cropAndStraightenViewWillBeginTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// :nodoc:
- (void)cropAndStraightenViewDidEndTracking:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
/// :nodoc:
- (void)cropAndStraightenViewDidTrack:(PESDKCropAndStraightenView * _Nonnull)cropAndStraightenView;
@end


@interface PESDKTransformEditController (SWIFT_EXTENSION(ImglyKit))
/// :nodoc:
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/// :nodoc:
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
@end



/// The tool controller to update the geometry of an image. It contains a menu with available
/// aspect ratios and a <code>TransformEditController</code> to update the geometry.
SWIFT_CLASS_NAMED("TransformToolController")
@interface PESDKTransformToolController : PESDKMenuToolController <PESDKTransformEditControllerDelegate>
/// The contaiend <code>TransformEditController</code>.
@property (nonatomic, readonly, strong) PESDKTransformEditController * _Nonnull transformEditController;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)apply:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)discard:(PESDKToolbarItem * _Nonnull)sender;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (UIImage * _Nullable)transformEditControllerBaseImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CIImage * _Nullable)transformEditControllerBaseCIImage:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditController:(PESDKTransformEditController * _Nonnull)transformEditController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/// :nodoc:
- (void)transformEditControllerDidChangeWantsDefaultPreviewView:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (PESDKSpriteViewController * _Nullable)transformEditControllerSpriteViewController:(PESDKTransformEditController * _Nonnull)transformEditController SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)transformEditControllerDidChangeOrientation:(PESDKTransformEditController * _Nonnull)transformEditController;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didDeselect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



/// Options for configuring a <code>TransformToolController</code>.
SWIFT_CLASS_NAMED("TransformToolControllerOptions")
@interface PESDKTransformToolControllerOptions : PESDKToolControllerOptions
/// Whether to show a reset button to reset the applied crop, rotation and straighten angle.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL showResetButton;
/// Whether to allow free cropping. If this is enabled, ‘Free’ is always the first available option.
/// If disabled, the asset will be cropped automatically using the best fitting aspect from <code>allowedCropAspects</code>
/// or in case that <code>MediaEditViewControllerOptions.forceCropMode</code> is set to <code>true</code> the user will
/// be forced to pick one of the <code>allowedCropAspects</code> at launch.
/// Defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL allowFreeCrop;
/// Sets the output scaling in case when cropped output dimensions aren’t exactly the same ratio as the selected
/// <code>CropAspect</code>, so we scale the image accordingly so the image has exactly right output dimensions.
@property (nonatomic, readonly) enum PESDKOutputScalingRule outputScaling;
/// Defines all allowed crop aspects. The crop aspect buttons are shown in the given order.
/// If the size of the asset is not fitting one of these aspects and <code>allowFreeCrop</code> is disabled, it is
/// automatically cropped using the best fitting aspect from this array.
/// Defaults to <code>1:1</code>, <code>16:9</code>, <code>4:3</code> and <code>3:2</code>.
@property (nonatomic, readonly, copy) NSArray<PESDKCropAspect *> * _Nonnull allowedCropAspects;
/// This closure allows further configuration of the crop aspect buttons. The closure is called for
/// each crop aspect button and has the button and its corresponding crop aspect as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable cropAspectButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKCropAspect * _Nullable);
/// This closure is called every time the user selects a crop aspect.
@property (nonatomic, readonly, copy) void (^ _Nullable cropAspectSelectedClosure)(PESDKCropAspect * _Nullable);
/// This closure allows further configuration of the transform buttons, i.e. rotate left and flip. The closure is called for
/// each button and has the button and its corresponding transform action as parameters.
/// The scalepicker to choose the straighten angle, has its own configuration closeure.
@property (nonatomic, readonly, copy) void (^ _Nullable transformButtonConfigurationClosure)(PESDKButton * _Nonnull, enum TransformAction);
/// This closure alloes further configuration of the scale picker. This UI element is used to
/// choose the straighten angle.
@property (nonatomic, readonly, copy) void (^ _Nullable scalePickerConfigurationClosure)(PESDKScalePicker * _Nonnull);
/// This closure alloes further configuration of the scale picker container view.
@property (nonatomic, readonly, copy) void (^ _Nullable scalePickerContainerViewConfigurationClosure)(UIView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TransformToolControllerOptions</code> using the given builder.
/// \param builder A <code>TransformToolControllerOptionsBuilder</code> object.
///
- (nonnull instancetype)initWithBuilder:(PESDKTransformToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>TransformToolControllerOptionsBuilder</code> for <code>TransformToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TransformToolControllerOptionsBuilder")
@interface PESDKTransformToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// Whether to show a reset button to reset the applied crop, rotation and straighten angle.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL showResetButton;
/// Whether to allow free cropping. If this is enabled, ‘Free’ is always the first available option.
/// Defaults to <code>true</code>.
@property (nonatomic) BOOL allowFreeCrop;
/// Defines all allowed crop aspects. The crop aspect buttons are shown in the given order.
/// Defaults to <code>1:1</code>, <code>16:9</code>, <code>4:3</code> and <code>3:2</code>.
@property (nonatomic, copy) NSArray<PESDKCropAspect *> * _Nonnull allowedCropRatios;
/// Sets the output scaling in case when cropped output dimensions aren’t exactly the same ratio as the selected
/// <code>CropAspect</code>, so we scale the image accordingly so the image has exactly right output dimensions.
/// Defaults to <code>.none</code>.
@property (nonatomic) enum PESDKOutputScalingRule outputScaling;
/// This closure allows further configuration of the transform buttons, i.e. rotate left and flip. The closure is called for
/// each button and has the button and its corresponding transform action as parameters.
@property (nonatomic, copy) void (^ _Nullable transformButtonConfigurationClosure)(PESDKButton * _Nonnull, enum TransformAction);
/// This closure allows further configuration of the crop aspect buttons. The closure is called for
/// each crop aspect button and has the button and its corresponding crop aspect as parameters.
@property (nonatomic, copy) void (^ _Nullable cropAspectButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKCropAspect * _Nullable);
/// This closure is called every time the user selects a crop aspect.
@property (nonatomic, copy) void (^ _Nullable cropAspectSelectedClosure)(PESDKCropAspect * _Nullable);
/// This closure allows further configuration of the scale picker. This UI element is used to
/// choose the straighten angle.
@property (nonatomic, copy) void (^ _Nullable scalePickerConfigurationClosure)(PESDKScalePicker * _Nonnull);
/// This closure alloes further configuration of the scale picker container view.
@property (nonatomic, copy) void (^ _Nullable scalePickerContainerViewConfigurationClosure)(UIView * _Nonnull);
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TransformToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TransformToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTransformToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end

/// The overlay actions that can be used in an instance of <code>TrimToolControllerOptions</code>.
typedef SWIFT_ENUM(NSInteger, TrimOverlayAction, open) {
/// Toggle play/pause for video preview.
  TrimOverlayActionPlayPause = 0,
};



/// Options for configuring a <code>TrimToolController</code>.
SWIFT_CLASS_NAMED("TrimToolControllerOptions")
@interface PESDKTrimToolControllerOptions : PESDKTrimToolOptions
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable trimOverlayActionSelectedClosure)(enum TrimOverlayAction);
/// If set this closure is called right after starting the editor when the input video or video composition is too short
/// and the <code>minimumDuration</code> limit <em>cannot</em> be met either because the trim tool is used or because the composition tool is configured that
/// additional clips cannot be added (<code>CompositionToolControllerOptions.videoClipLibraryMode == .none</code>).
/// You can for example use this to present an alert view informing the user that the video is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will call
/// <code>videoEditViewController.delegate?.videoEditViewControllerDidFail(videoEditViewController)</code>
/// next which in turn should dismiss the editor.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, readonly, copy) void (^ _Nullable videoTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// Enforces a minimum allowed duration for the edited video for the trim and composition tool.
/// The minimum allowed value is 0.5 seconds.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>0.5</code>.
/// note:
/// The duration of the exported video may be inaccurate if this parameter is defined with high precision (below 0.1 s).
@property (nonatomic, readonly) NSTimeInterval minimumDuration;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>TrimToolControllerOptions</code> using the given builder.
/// \param builder An instance of <code>TrimToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKTrimToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimBuilder:(PESDKTrimToolOptionsBuilder * _Nonnull)trimBuilder SWIFT_UNAVAILABLE;
@end


@interface PESDKTrimToolControllerOptions (SWIFT_EXTENSION(ImglyKit))
/// Enforces a maximum allowed duration for the edited video for the trim and composition tool
/// if set to a value different from <code>nil</code>.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>nil</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nullable maximumDuration;
@end


/// The default <code>TrimToolControllerOptionsBuilder</code> for <code>TrimToolControllerOptions</code>.
SWIFT_CLASS_NAMED("TrimToolControllerOptionsBuilder")
@interface PESDKTrimToolControllerOptionsBuilder : PESDKTrimToolOptionsBuilder
/// This closure allows further configuration of the overlay buttons. The closure is called for
/// each button and has the button and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(PESDKOverlayButton * _Nonnull, enum TrimOverlayAction);
/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable trimOverlayActionSelectedClosure)(enum TrimOverlayAction);
/// If set this closure is called right after starting the editor when the input video or video composition is too short
/// and the <code>minimumDuration</code> limit <em>cannot</em> be met either because the trim tool is used or because the composition tool is configured that
/// additional clips cannot be added (<code>CompositionToolControllerOptions.videoClipLibraryMode == .none</code>).
/// You can for example use this to present an alert view informing the user that the video is too short. You have to call the passed closure when you have
/// confirmation by the user to continue with program execution which will call
/// <code>videoEditViewController.delegate?.videoEditViewControllerDidFail(videoEditViewController)</code>
/// next which in turn should dismiss the editor.
/// By default it is set to present an <code>UIAlertController</code>.
@property (nonatomic, copy) void (^ _Nullable videoTooShortConfirmationClosure)(PESDKVideoEditViewController * _Nonnull, void (^ _Nonnull)(void));
/// Enforces a minimum allowed duration for the edited video for the trim and composition tool.
/// The minimum allowed value is 0.5 seconds.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>0.5</code>.
/// note:
/// The duration of the exported video may be inaccurate if this parameter is defined with high precision (below 0.1 s).
@property (nonatomic) NSTimeInterval minimumDuration;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>TrimToolControllerOptionsBuilder</code> initialized with the given options.
/// \param options A <code>TrimToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKTrimToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTrimOptions:(PESDKTrimToolOptions * _Nonnull)trimOptions SWIFT_UNAVAILABLE;
@end


@interface PESDKTrimToolControllerOptionsBuilder (SWIFT_EXTENSION(ImglyKit))
/// Enforces a maximum allowed duration for the edited video for the trim and composition tool
/// if set to a value different from <code>nil</code>.
/// See <code>VideoEditViewControllerOptions.forceTrimMode</code> for additional options.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable maximumDuration;
/// An array of <code>TrimOverlayAction</code> raw values wrapped in NSNumbers.
/// Setting this property overrides any previously set values in
/// <code>allowedTrimOverlayActions</code> with the corresponding <code>TrimOverlayAction</code> values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTrimOverlayActions;
@end














@interface UIDevice (SWIFT_EXTENSION(ImglyKit))
/// Checks if the device is too old for our new blur.
@property (nonatomic, readonly) BOOL pesdk_isTooOldForLensBlurPreview;
@end









@interface UIImage (SWIFT_EXTENSION(ImglyKit))
/// Creates a lower resolution version of an image.
/// \param dimension The maximum dimensions of the image.
///
///
/// returns:
/// A lower resolution version of the image.
- (UIImage * _Nonnull)pesdk_downsampleWithMaxDimension:(CGFloat)dimension SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_downsampleWithMaxDimension");
/// Creates a lower resolution version of an image.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param dimension The maximum dimensions of the image.
///
///
/// returns:
/// A lower resolution version of the image.
- (UIImage * _Nonnull)imgly_downsampleWithMaxDimension:(CGFloat)dimension SWIFT_WARN_UNUSED_RESULT;
/// Resizes an image to a given size with a given interpolation quality.
/// \param newSize The size of the new image.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized image.
- (UIImage * _Nonnull)pesdk_resizedImageToSize:(CGSize)newSize interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_resizedImageToSize");
/// Resizes an image to a given size with a given interpolation quality.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param newSize The size of the new image.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized image.
- (UIImage * _Nonnull)imgly_resizedImageToSize:(CGSize)newSize interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT;
/// Resizes an image to a given size with a given interpolation quality, applies a transform and
/// optionally draws the image transposed.
/// \param newSize The size of the new image.
///
/// \param transform The transform to apply to the image.
///
/// \param transpose Set to <code>true</code> if the image should be drawn transposed, <code>false</code> otherweise.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized and transformed image.
- (UIImage * _Nonnull)pesdk_resizedImageToSize:(CGSize)newSize transform:(CGAffineTransform)transform drawTransposed:(BOOL)transpose interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_resizedImageToSize");
/// Resizes an image to a given size with a given interpolation quality, applies a transform and
/// optionally draws the image transposed.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param newSize The size of the new image.
///
/// \param transform The transform to apply to the image.
///
/// \param transpose Set to <code>true</code> if the image should be drawn transposed, <code>false</code> otherweise.
///
/// \param quality The interpolation quality.
///
///
/// returns:
/// A resized and transformed image.
- (UIImage * _Nonnull)imgly_resizedImageToSize:(CGSize)newSize transform:(CGAffineTransform)transform drawTransposed:(BOOL)transpose interpolationQuality:(CGInterpolationQuality)quality SWIFT_WARN_UNUSED_RESULT;
/// Returns a copy of the image, taking into account its orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull pesdk_normalizedImage SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_normalizedImage");
/// Returns a copy of the image, taking into account its orientation
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
@property (nonatomic, readonly, strong) UIImage * _Nonnull imgly_normalizedImage;
/// Returns a rescaled copy of the image, taking into account its orientation.
/// note:
/// The image will be scaled disproportionately if necessary to fit the bounds specified
/// by the parameter.
/// \param size The size of the rescaled image.
///
///
/// returns:
/// The rescaled image.
- (UIImage * _Nonnull)pesdk_normalizedImageOfSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_normalizedImageOfSize");
/// Returns a rescaled copy of the image, taking into account its orientation.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// note:
/// The image will be scaled disproportionately if necessary to fit the bounds specified
/// by the parameter.
/// \param size The size of the rescaled image.
///
///
/// returns:
/// The rescaled image.
- (UIImage * _Nonnull)imgly_normalizedImageOfSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Draws the receiver in the given rect with the given content mode.
/// \param rect The rectangle to draw into.
///
/// \param contentMode The content mode to use for drawing.
///
- (void)pesdk_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_drawInRect");
/// Draws the receiver in the given rect with the given content mode.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param rect The rectangle to draw into.
///
/// \param contentMode The content mode to use for drawing.
///
- (void)imgly_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode;
/// Returns a colored version of the image.
/// \param tint The color to colorize the image.
///
///
/// returns:
/// The colorized image.
- (UIImage * _Nonnull)pesdk_imageWithTintColor:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This rename \"Fix\" action can only be used if you are using Objective-C. For Swift use the `.imgly` property.", "imgly_imageWithTintColor");
/// Returns a colored version of the image.
/// note:
/// This property should only be used if you are using Objective-C. For Swift use the <code>.imgly</code> property instead.
/// \param tint The color to colorize the image.
///
///
/// returns:
/// The colorized image.
- (UIImage * _Nonnull)imgly_imageWithTintColor:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT;
@end











/// <code>UndoController</code> is a general-purpose recorder of operations for undo and redo.
/// note:
/// You register an undo operation by specifying the object that’s changing (or the owner
/// of that object), along with a method to invoke to revert its state, and the arguments for that
/// method. When performing undo an <code>UndoController</code> saves the operations reverted so that you can redo
/// the undos.
/// It differs from Foundation’s <code>NSUndoManager</code> in that groups are not created automatically for
/// each cycle of the run loop and that each step of a group can be undone rather than just the
/// whole group.
SWIFT_CLASS_NAMED("UndoController")
@interface PESDKUndoController : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A Boolean value that indicates whether the receiver is enabled and undo operations can be
/// registered.
@property (nonatomic) BOOL isEnabled;
/// Returns a Boolean value that indicates whether the receiver is in the process of performing
/// its <code>undo()</code>, <code>undoStep()</code>, <code>undoStepInCurrentGroup()</code>, <code>undoAllInCurrentGroup()</code> or
/// <code>undoGroup()</code> method.
@property (nonatomic, readonly) BOOL isUndoing;
/// Returns a Boolean value that indicates whether the receiver is in the process of performing
/// its <code>redo()</code> method.
@property (nonatomic, readonly) BOOL isRedoing;
/// Marks the beginning of an undo group.
- (void)beginUndoGrouping;
/// Marks the end of an undo group.
- (void)endUndoGrouping;
/// Clears the undo and redo stacks.
- (void)removeAllActions;
/// Clears the undo and redo stacks for the current group.
- (void)removeAllActionsInCurrentGroup;
/// A Boolean value that indicates whether the receiver has any actions to undo.
@property (nonatomic, readonly) BOOL canUndo;
/// A Boolean value that indicates whether the receiver has any actions to undo in the current
/// group.
@property (nonatomic, readonly) BOOL canUndoInCurrentGroup;
/// If the last undo operation on the undo stack is a group, this method performs the undo
/// operations of the whole group, if it is a single operation it performs only that operation.
- (void)undo;
/// Performs the latest undo operation only.
- (void)undoStep;
/// Performs the latest undo operation in the current group. If the group contains a nested group
/// it performs the undo operations of the whole nested group.
- (void)undoStepInCurrentGroup;
/// Performs all undo operations in the current group.
- (void)undoAllInCurrentGroup;
/// Performs the undo operations of the latest group. If the top item on the undo stack is not
/// the ending of a group, this method throws an exception.
- (void)undoGroup;
/// A Boolean value that indicates whether the receiver has any actions to redo.
@property (nonatomic, readonly) BOOL canRedo;
/// A Boolean value that indicates whether the receiver has any actions to redo in the current
/// group.
@property (nonatomic, readonly) BOOL canRedoInCurrentGroup;
/// Performs the operations in the last group on the redo stack, if there are any, recording
/// them on the undo stack as a single group.
- (void)redo;
@end



/// <code>VESDK</code> provides methods to unlock and customize the SDK.
SWIFT_CLASS("_TtC8ImglyKit5VESDK")
@interface VESDK : IMGLY
/// :nodoc:
+ (BOOL)crashIfNeededAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKVideoSegment;

/// An object that wraps audiovisual media.
/// The <code>Video</code> class currently supports <code>URL</code> and <code>AVAsset</code> as sources for videos. Passing an <code>URL</code>
/// requires the destination to be in a format that can be decoded by iOS.
SWIFT_CLASS_NAMED("Video")
@interface PESDKVideo : NSObject <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The underlying <code>AVAsset</code> object.
@property (nonatomic, readonly, strong) AVAsset * _Nonnull asset;
/// The video segments that compose the resulting video.
@property (nonatomic, readonly, copy) NSArray<PESDKVideoSegment *> * _Nonnull segments;
/// The size of the video in pixels.
@property (nonatomic, readonly) CGSize size;
/// Creates a new empty <code>Video</code> object with a specific size but without any assets.
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithSize:(CGSize)size;
/// Creates a new <code>Video</code> object from an <code>URL</code>.
/// \param url The URL to the video on disk. This must be in a format that can be decoded by iOS.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
/// Creates a new <code>Video</code> object from a <code>VideoSegment</code>.
/// \param segment The video segment that should be passed to the editor.
///
- (nonnull instancetype)initWithSegment:(PESDKVideoSegment * _Nonnull)segment;
/// Creates a new <code>Video</code> object from a <code>VideoSegment</code> with a specific size.
/// \param segment The video segment that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithSegment:(PESDKVideoSegment * _Nonnull)segment size:(CGSize)size;
/// Creates a new <code>Video</code> object with a composition from multiple <code>VideoSegment</code>s.
/// \param segments The video segments that should be passed to the editor. This array must include at least one asset.
/// The size of the first asset in the given array is used to initialize the editor.
///
- (nonnull instancetype)initWithSegments:(NSArray<PESDKVideoSegment *> * _Nonnull)segments;
/// Creates a new <code>Video</code> object with a composition from multiple <code>VideoSegment</code>s and a specific size.
/// \param segments The video segments that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithSegments:(NSArray<PESDKVideoSegment *> * _Nonnull)segments size:(CGSize)size;
/// Creates a new <code>Video</code> object from an <code>AVAsset</code>.
/// \param asset The asset that should be passed to the editor.
///
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegment:");
/// Creates a new <code>Video</code> object from an <code>AVAsset</code> with a specific size.
/// \param asset The asset that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset size:(CGSize)size SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegment:size:");
/// Creates a new <code>Video</code> object with a composition from multiple <code>AVAsset</code>s.
/// \param assets The assets that should be passed to the editor. This array must include at least one asset.
/// The size of the first asset in the given array is used to initialize the editor.
///
- (nonnull instancetype)initWithAssets:(NSArray<AVAsset *> * _Nonnull)assets SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegments:");
/// Creates a new <code>Video</code> object with a composition from multiple <code>AVAsset</code>s and a specific size.
/// \param assets The assets that should be passed to the editor.
///
/// \param size The size of the video in pixels that is about to be edited. This overrides the natural dimensions of the video(s) passed to the editor.
/// All videos will be fitted to the <code>size</code> aspect by adding black bars on the left and right side or top and bottom.
///
- (nonnull instancetype)initWithAssets:(NSArray<AVAsset *> * _Nonnull)assets size:(CGSize)size SWIFT_DEPRECATED_MSG("Use VideoSegment API instead.", "initWithSegments:size:");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An <code>VideoAsset</code> object can be used together with an <code>AssetManager</code> to cache an <code>AVAsset</code>
/// object and an optional user info dictionary.
SWIFT_CLASS_NAMED("VideoAsset")
@interface PESDKVideoAsset : NSObject
/// An <code>AVAsset</code> object.
@property (nonatomic, strong) AVAsset * _Nullable asset;
/// An optional user info dictionary to associate any metadata with this <code>VideoAsset</code>.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userInfo;
/// Creates a new video asset for the given image and an associated user info dictionary.
/// \param asset An<code>AVAsset</code> object.
///
/// \param userInfo An optional user info dictionary.
///
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>VideoClip</code> represents a single video clip in a video clip category. Each video clip needs a
/// video URL and a thumbnail image. If no thumbnail is provided, it is automatically generated.
SWIFT_CLASS_NAMED("VideoClip")
@interface PESDKVideoClip : NSObject
/// A unique string that makes the video clip uniquely identifiable.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of the video clip.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The artist of the video clip.
@property (nonatomic, readonly, copy) NSString * _Nullable artist;
/// The URL for the thumbnail image of the video clip.
/// If <code>nil</code> the thumbnail will be automatically generated from the <code>videoURL</code>.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/// The URL for the video clip.
/// note:
/// Video clips from remote resources can be used in the editor but
/// their use is not optimized. Remote resources should be downloaded
/// in advance and then passed to the editor as local resources.
@property (nonatomic, readonly, copy) NSURL * _Nonnull videoURL;
/// Creates a new <code>VideoClip</code> object with the given identifier and video URL.
/// \param identifier The identifier of the video clip.
///
/// \param videoURL The URL to the underlying video.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier videoURL:(NSURL * _Nonnull)videoURL;
/// Creates a new <code>VideoClip</code> object with the given identifier, video URL, an optional title, an optional artist as well
/// as an optional thumbnail URL.
/// \param identifier The title of the video clip.
///
/// \param title The title of the video clip.
///
/// \param videoURL The URL to the underlying video.
///
/// \param artist The artist of the video clip.
///
/// \param thumbnailURL The URL for the thumbnail image of the video clip.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier videoURL:(NSURL * _Nonnull)videoURL title:(NSString * _Nullable)title artist:(NSString * _Nullable)artist thumbnailURL:(NSURL * _Nullable)thumbnailURL OBJC_DESIGNATED_INITIALIZER;
/// Returns the first video clip with the given identifier if available.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
/// \param identifier The identifier of the video clip to look for.
///
///
/// returns:
/// The video clip with the given identifier or <code>nil</code>.
+ (PESDKVideoClip * _Nullable)withIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `assetCatalog.videoClip(withIdentifier:)` of your `Configuration` object instead.");
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A <code>VideoClipCategory</code> represents one category of video clips. Each category can have multiple video clips
/// associated with it. To support accessibility you should also set its <code>accessibilityLabel</code>.
SWIFT_CLASS_NAMED("VideoClipCategory")
@interface PESDKVideoClipCategory : NSObject
/// The identifier of this category.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The title of this category, e.g. ‘Toy Collection’.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The URL of the category’s preview image. This can be a file url or a remote url.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The video clips associated with this category.
@property (nonatomic, readonly, copy) NSArray<PESDKVideoClip *> * _Nonnull videoClips;
/// The pool of video clips that is available within the SDK.
/// note:
/// This is a wrapper for <code>AssetCatalog.shared</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKVideoClipCategory *> * _Nonnull all SWIFT_DEPRECATED_MSG("Use `assetCatalog.videoClips` of your `Configuration` object instead.");)
+ (NSArray<PESDKVideoClipCategory *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
+ (void)setAll:(NSArray<PESDKVideoClipCategory *> * _Nonnull)newValue;
/// Creates the default video clip categories that are shipped with the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PESDKVideoClipCategory *> * _Nonnull defaultItems;)
+ (NSArray<PESDKVideoClipCategory *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultItems:(NSArray<PESDKVideoClipCategory *> * _Nonnull)value;
/// Creates a video clip category with video clips, a title and an optional image url.
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url for the category’s preview image.
///
/// \param videoClips The video clips to associate with this category.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL videoClips:(NSArray<PESDKVideoClip *> * _Nonnull)videoClips;
/// Creates a video clip category with an identifier, video clips, a title and an optional image url.
/// \param identifier The identifier of this category.
///
/// \param title The title of this category, e.g. ‘Intros’.
///
/// \param imageURL The url of the category’s preview image.
///
/// \param videoClips The video clips to associate with this category.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title imageURL:(NSURL * _Nullable)imageURL videoClips:(NSArray<PESDKVideoClip *> * _Nonnull)videoClips OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The menu item that is used in <code>VideoClipToolController</code> for action menu items, e.g. open video picker button.
SWIFT_CLASS_NAMED("VideoClipCategoryActionMenuItem")
@interface PESDKVideoClipCategoryActionMenuItem : PESDKActionMenuItem
@end


/// Handles the display of <code>VideoClipCategoryMenuItem</code> objects in a section in the menu of a
/// <code>MenuViewController</code>.
SWIFT_CLASS_NAMED("VideoClipCategoryListSectionController")
@interface PESDKVideoClipCategoryListSectionController : PESDKMenuListSectionController
/// :nodoc:
- (UICollectionViewCell * _Nonnull)cellForItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)didUpdateTo:(id _Nonnull)object;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The menu item that is used in <code>VideoClipToolController</code>.
SWIFT_CLASS_NAMED("VideoClipCategoryMenuItem")
@interface PESDKVideoClipCategoryMenuItem : NSObject <PESDKMenuItem>
/// The <code>VideoClipCategory</code> that this menu item represents.
@property (nonatomic, readonly, strong) PESDKVideoClipCategory * _Nonnull videoClipCategory;
/// The title of the menu item.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url to the icon of the menu item.
@property (nonatomic, readonly, copy) NSURL * _Nullable iconURL;
/// Creates a new video clip category menu item for the given video clip category.
/// \param videoClipCategory The video clip category that this menu item represents.
///
- (nonnull instancetype)initWithVideoClipCategory:(PESDKVideoClipCategory * _Nonnull)videoClipCategory;
/// :nodoc:
@property (nonatomic, readonly, strong) id <NSObject> _Nonnull diffIdentifier;
/// :nodoc:
- (BOOL)isEqualToDiffableObject:(id <PESDKDiffable> _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull sectionControllerType;)
+ (SWIFT_METATYPE(PESDKMenuListSectionController) _Nonnull)sectionControllerType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>VideoClipCollectionViewCell</code> is a cell that has an image view and an activity indicator in its
/// center.
SWIFT_CLASS_NAMED("VideoClipCollectionViewCell")
@interface PESDKVideoClipCollectionViewCell : PESDKAssetCollectionViewCell
/// :nodoc:
- (void)setupImageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The mode determines which library type should be displayed when the user wants
/// to add a <code>VideoClip</code> within the <code>CompositionToolController</code>.
/// If set to any other mode than <code>.none</code> an action button is added as last item in the composition menu which
/// presents the corresponding selection controller.
/// In order to enable/disable personal video clips within the <code>VideoClipToolController</code> please refer
/// to <code>VideoClipToolControllerOptions.personalVideoClipsEnabled</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoClipLibraryMode, "VideoClipLibraryMode", open) {
/// Modally presents an <code>UIImagePickerController</code>
/// to add personal video clips to the video composition.
  PESDKVideoClipLibraryModePersonal = 0,
/// Presents a <code>VideoClipToolController</code> in which the user can select predefined video clips.
  PESDKVideoClipLibraryModePredefined = 1,
/// In this mode the user is not allowed to add video clips so no action button is added in the composition menu.
  PESDKVideoClipLibraryModeNone = 2,
};

@protocol PESDKVideoClipSelectionControllerDelegate;

/// A <code>VideoClipSelectionController</code> displays multiple <code>VideoClip</code>s and allows selection of a video clip for the video composition.
SWIFT_CLASS_NAMED("VideoClipSelectionController")
@interface PESDKVideoClipSelectionController : PESDKViewController
/// The collection view that displays the <code>VideoClip</code>s.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/// The gradient view that is added to the collection view for a fade effect.
@property (nonatomic, readonly, strong) PESDKGradientView * _Nonnull gradientView;
/// The visual effect view in the background of the collection view.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull visualEffectView;
/// The <code>AssetManager</code> that this view controller can use to set and get assets.
@property (nonatomic, strong) PESDKAssetManager * _Nullable assetManager;
/// The <code>VideoClip</code>s which should be displayed.
@property (nonatomic, copy) NSArray<PESDKVideoClip *> * _Nonnull videoClips;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKVideoClipSelectionControllerDelegate> _Nullable delegate;
/// A closure to configure the cell of each video clip.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(PESDKVideoClipCollectionViewCell * _Nonnull, PESDKVideoClip * _Nonnull);
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) SWIFT_METATYPE(PESDKVideoClipCollectionViewCell) _Nonnull collectionViewCellType;)
+ (SWIFT_METATYPE(PESDKVideoClipCollectionViewCell) _Nonnull)collectionViewCellType SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PESDKVideoClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSourcePrefetching>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end


@interface PESDKVideoClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDelegate>
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface PESDKVideoClipSelectionController (SWIFT_EXTENSION(ImglyKit)) <UICollectionViewDataSource>
/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>VideoClipSelectionControllerDelegate</code> defines methods that allow you to respond to messages
/// from the <code>VideoClipSelectionController</code>.
SWIFT_PROTOCOL_NAMED("VideoClipSelectionControllerDelegate")
@protocol PESDKVideoClipSelectionControllerDelegate
/// Tells the delegate that the given video clip was selected.
/// \param videoClipSelectionController The video clip selection controller where the video clip has been selected
/// in.
///
/// \param videoClip The video clip that was selected.
///
- (void)videoClipSelectionController:(PESDKVideoClipSelectionController * _Nonnull)videoClipSelectionController didSelect:(PESDKVideoClip * _Nonnull)videoClip;
@end


/// The tool controller to add a <code>VideoClip</code> to the composition. It contains a menu with the available
/// <code>VideoClipCategory</code>s and a <code>VideoClipSelectionController</code> to display the available video clips in that
/// category.
SWIFT_CLASS_NAMED("VideoClipToolController")
@interface PESDKVideoClipToolController : PESDKMenuToolController
/// The contained <code>VideoClipSelectionController</code>.
@property (nonatomic, readonly, strong) PESDKVideoClipSelectionController * _Nonnull videoClipSelectionController;
/// An object that acts as the selection delegate.
@property (nonatomic, weak) id <PESDKVideoClipToolControllerDelegate> _Nullable selectionDelegate;
/// Preview controller in charge of playing/pausing the preview video. Used from
@property (nonatomic, readonly, strong) PESDKVideoEditPreviewController * _Nullable videoPreviewController;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)configureToolbarItem;
/// :nodoc:
- (void)pesdk_didBecomeActiveTool;
/// :nodoc:
- (void)pesdk_willResignActiveTool;
/// :nodoc:
- (void)updateUserInterfaceState;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController didSelect:(id <PESDKMenuItem> _Nonnull)menuItem;
/// :nodoc:
- (void)menuViewController:(PESDKMenuViewController * _Nonnull)menuViewController willShow:(id <PESDKMenuItem> _Nonnull)menuItem in:(UICollectionViewCell * _Nonnull)cell at:(NSInteger)index;
@end



@interface PESDKVideoClipToolController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoClipSelectionControllerDelegate>
/// :nodoc:
- (void)videoClipSelectionController:(PESDKVideoClipSelectionController * _Nonnull)videoClipSelectionController didSelect:(PESDKVideoClip * _Nonnull)videoClip;
@end



@interface PESDKVideoClipToolController (SWIFT_EXTENSION(ImglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


@interface PESDKVideoClipToolController (SWIFT_EXTENSION(ImglyKit))
/// Adds clip to the composition.
/// \param videoClip Video clip to be added at the end of the composition.
///
- (void)addClip:(PESDKVideoClip * _Nonnull)videoClip;
/// Pauses the main video preview.
- (void)pausePreview;
/// Resumes playback of the main video preview.
- (void)playPreview;
/// Returns <code>true</code> if main preview is playing and <code>false</code> if paused.
@property (nonatomic, readonly) BOOL previewPlaying;
@end



/// Options for configuring a <code>VideoClipToolController</code>.
SWIFT_CLASS_NAMED("VideoClipToolControllerOptions")
@interface PESDKVideoClipToolControllerOptions : PESDKToolControllerOptions
/// This closure allows further configuration of the video clip category buttons. The closure is called for
/// each video clip category button and has the button and its corresponding video clip category as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable videoClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKVideoClipCategory * _Nonnull);
/// This closure allows further configuration of the video clip buttons. The closure is called for
/// each video clip button and has the button and its corresponding video clip as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable videoClipButtonConfigurationClosure)(PESDKVideoClipCollectionViewCell * _Nonnull, PESDKVideoClip * _Nonnull);
/// This closure is invoked when add button tapped on the composition tool. It can be used to call your own action and present
/// your own view controller like camera. If set, it will prevent original action, which is opening the gallery.
/// In case you are performing an action that requires preview to be paused, <code>VideoClipToolController</code> exposes
/// access to the preview playback so you can utilize methods <code>pausePreview()</code> and <code>playPreview()</code> if you require
/// this functionality.
@property (nonatomic, readonly, copy) void (^ _Nullable videoClipAddButtonSelectedClosure)(PESDKVideoClipToolController * _Nonnull);
/// The index of the video clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic, readonly) NSInteger defaultVideoClipCategoryIndex;
/// Whether the user can add personal video clips from the device’s video library. If <code>true</code> an action button is added as first item in the video clip category selection menu which modally presents an <code>UIImagePickerController</code>
/// to add personal video clips to the video composition.
/// Default is <code>true</code>.
@property (nonatomic, readonly) BOOL personalVideoClipsEnabled;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>VideoClipToolControllerOptionsBuilder</code> using the given builder.
/// \param builder An instance of <code>VideoClipToolControllerOptionsBuilder</code>.
///
- (nonnull instancetype)initWithBuilder:(PESDKVideoClipToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(PESDKToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/// The default <code>VideoClipToolControllerOptionsBuilder</code> for <code>VideoClipToolControllerOptions</code>.
SWIFT_CLASS_NAMED("VideoClipToolControllerOptionsBuilder")
@interface PESDKVideoClipToolControllerOptionsBuilder : PESDKToolControllerOptionsBuilder
/// This closure allows further configuration of the video clip category buttons. The closure is called for
/// each video clip category button and has the button and its corresponding video clip category as parameters.
@property (nonatomic, copy) void (^ _Nullable videoClipCategoryButtonConfigurationClosure)(PESDKMenuCollectionViewCell * _Nonnull, PESDKVideoClipCategory * _Nonnull);
/// This closure allows further configuration of the video clip buttons. The closure is called for
/// each video clip button and has the button and its corresponding video clip as parameters.
@property (nonatomic, copy) void (^ _Nullable videoClipButtonConfigurationClosure)(PESDKVideoClipCollectionViewCell * _Nonnull, PESDKVideoClip * _Nonnull);
/// This closure is invoked when add button tapped on the composition tool. It can be used to call your own action and present
/// your own view controller like camera. If set, it will prevent original action, which is opening the gallery.
/// note:
/// Preview will be paused when closure is invoked.
@property (nonatomic, copy) void (^ _Nullable videoClipAddButtonSelectedClosure)(PESDKVideoClipToolController * _Nonnull);
/// The index of the video clip category that should be selected when initially presenting the tool.
/// If this index is larger than the number of available categories, the first category will be used.
/// Default is <code>0</code>.
@property (nonatomic) NSInteger defaultVideoClipCategoryIndex;
/// Whether the user can add personal video clips from the device’s video library. If <code>true</code> an action button is added as first item in the video clip category selection menu which modally presents an <code>UIImagePickerController</code>
/// to add personal video clips to the video composition.
/// Default is <code>true</code>.
@property (nonatomic) BOOL personalVideoClipsEnabled;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>VideoClipToolControllerOptions</code> initialized with the given options.
/// \param options A <code>VideoClipToolControllerOptions</code> instance.
///
- (nonnull instancetype)initWithOptions:(PESDKVideoClipToolControllerOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorOptions:(PESDKToolControllerOptions * _Nonnull)editorOptions SWIFT_UNAVAILABLE;
@end


/// The model that is used in <code>VideoClipSelectionController</code>.
SWIFT_CLASS_NAMED("VideoClipViewModel")
@interface PESDKVideoClipViewModel : NSObject
/// The <code>VideoClip</code> that this model represents.
@property (nonatomic, readonly, strong) PESDKVideoClip * _Nonnull videoClip;
/// Creates a new video clip view model for the given video clip.
/// \param videoClip The video clip that this model represents.
///
- (nonnull instancetype)initWithVideoClip:(PESDKVideoClip * _Nonnull)videoClip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents different video codecs.
SWIFT_CLASS_NAMED("VideoCodec")
@interface PESDKVideoCodec : NSObject
/// The H264 video codec.
/// \param bitRate The bit rate to use in bits per second. The value of the input video
/// will be used if you do not specify this value.
///
///
/// returns:
/// The H264 video codec.
+ (PESDKVideoCodec * _Nonnull)h264WithBitRate:(NSNumber * _Nullable)bitRate SWIFT_WARN_UNUSED_RESULT;
/// The HEVC video codec.
/// \param quality The quality value ranges from 0.0 to 1.0 and it tells the encoder what compression level is desired.
/// Quality level value means low = 0.25, normal = 0.50, high = 0.75, and 1.0 implies lossless compression for the encoder.
/// In HEVC, lossless encoding means that DCT transforms and quantization are bypassed but normal predictions are still used.
///
///
/// returns:
/// The HEVC video codec.
+ (PESDKVideoCodec * _Nonnull)hevcWithQuality:(NSNumber * _Nonnull)quality SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKVideoCodec (SWIFT_EXTENSION(ImglyKit))
/// The H264 video codec.
/// \param bitRate The bit rate to use in bits per second. The value of the input video
/// will be used if you do not specify this value.
///
/// \param profile The <code>VideoCodecProfileH264</code>’s raw value wrapped in a <code>NSNumber</code>.
///
///
/// returns:
/// The H264 video codec.
+ (PESDKVideoCodec * _Nonnull)h264WithBitRate:(NSNumber * _Nullable)bitRate profile:(NSNumber * _Nullable)profile SWIFT_WARN_UNUSED_RESULT;
@end

/// A profile for the .H264 video codec.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoCodecProfileH264, "VideoCodecProfileH264", open) {
/// Baseline profile with auto level.
  PESDKVideoCodecProfileH264BaselineAutoLevel = 0,
/// Baseline profile level 3.0.
  PESDKVideoCodecProfileH264BaselineLevel30 = 1,
/// Baseline profile level 3.1.
  PESDKVideoCodecProfileH264BaselineLevel31 = 2,
/// Baseline profile level  4.1.
  PESDKVideoCodecProfileH264BaselineLevel41 = 3,
/// Main profile auto level.
  PESDKVideoCodecProfileH264MainAutoLevel = 4,
/// Main profile level 3.0.
  PESDKVideoCodecProfileH264MainLevel30 = 5,
/// Main profile level 3.1.
  PESDKVideoCodecProfileH264MainLevel31 = 6,
/// Main profile level 3.2.
  PESDKVideoCodecProfileH264MainLevel32 = 7,
/// Main profile level 4.1.
  PESDKVideoCodecProfileH264MainLevel41 = 8,
/// High profile auto level.
  PESDKVideoCodecProfileH264HighAutoLevel = 9,
/// High profile level 4.0.
  PESDKVideoCodecProfileH264HighLevel40 = 10,
/// High profile level 4.1.
  PESDKVideoCodecProfileH264HighLevel41 = 11,
};

/// Represents different video container formats.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoContainerFormat, "VideoContainerFormat", open) {
/// The MP4 container format.
  PESDKVideoContainerFormatMp4 = 0,
/// The MOV container format.
  PESDKVideoContainerFormatMov = 1,
};


/// The <code>VideoEditPreviewController</code> is responsible for previewing changes to a video and displaying
/// the video in a scrollable container.
SWIFT_CLASS_NAMED("VideoEditPreviewController")
@interface PESDKVideoEditPreviewController : PESDKMediaEditPreviewController
/// The video that is being previewed.
@property (nonatomic, readonly, strong) PESDKVideo * _Nonnull video;
/// Menu accessory containing the timeline view.
@property (nonatomic, readonly, strong) PESDKMenuAccessoryContainerView * _Nonnull timelineContainerView;
/// The main timeline view.
@property (nonatomic, readonly, strong) PESDKVideoTrimView * _Nonnull timelineView;
/// The height of the main timeline view. Default is <code>88</code>.
@property (nonatomic) CGFloat timelineHeight;
- (void)updateViewConstraints;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
@property (nonatomic, strong) UIImage * _Nullable baseWorkUIImage;
/// Loads the first frame of the video as the base image.
- (void)loadBaseImage:(void (^ _Nonnull)(UIImage * _Nullable))completion;
/// :nodoc:
- (void)updateLayout;
/// :nodoc:
- (void)updateRenderer;
@end


@interface PESDKVideoEditPreviewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a newly initialized video edit preview controller for the given video and the given
/// photo edit model.
/// \param videoAsset The video to preview.
///
/// \param photoEditModel The photo edit model to render.
///
- (nonnull instancetype)initWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
@end



@interface PESDKVideoEditPreviewController (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimViewDelegate>
- (void)videoTrimViewDidStartDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimView:(PESDKVideoTrimView * _Nonnull)videoTrimView didDragScrubberTo:(CMTime)time;
- (void)videoTrimViewDidStopDraggingScrubber:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidStartDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidChangeStartTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidChangeEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
- (void)videoTrimViewDidStopDraggingStartOrEndTime:(PESDKVideoTrimView * _Nonnull)videoTrimView;
@end

@protocol PESDKVideoEditViewControllerDelegate;

/// A <code>VideoEditViewController</code> is the main starting point for the SDK. It displays the rendered
/// video and a menu. It can present <code>PhotoEditToolController</code> objects and react to changes. It
/// can be presented on its own (thus displaying a toolbar for navigation at the bottom) or be
/// embedded into a <code>UINavigationController</code> (thus using the navigation controller’s navigation bar
/// for navigation).
SWIFT_CLASS_NAMED("VideoEditViewController")
@interface PESDKVideoEditViewController : PESDKMediaEditViewController
/// Indicates whether the video is currently being played or should be played when a new video is loaded if there is currently no video loaded.
@property (nonatomic, readonly) BOOL isPlaying;
/// An object that acts as the delegate.
@property (nonatomic, weak) id <PESDKVideoEditViewControllerDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, readonly, strong) PESDKMediaEditViewControllerOptions * _Nonnull options;
/// :nodoc:
- (void)viewDidLoad;
/// Resumes the video playback.
- (void)play;
/// Pauses the video playback.
- (void)pause;
/// Applies all changes to the high resolution video and calls the delegate methods.
- (void)renderHighResolutionVariant;
/// Serializes all currently applied operations into a single file, which may be restored on other
/// platforms to continue editing.
@property (nonatomic, readonly, copy) NSData * _Nullable serializedSettings;
/// :nodoc:
- (void)didCancel;
/// :nodoc:
- (void)willPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didPresent:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)willDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (void)didDismiss:(PESDKPhotoEditToolController * _Nonnull)toolController;
/// :nodoc:
- (BOOL)mediaEditPreviewControllerPlaybackEnabled:(PESDKMediaEditPreviewController * _Nonnull)mediaEditPreviewController SWIFT_WARN_UNUSED_RESULT;
@end



@interface PESDKVideoEditViewController (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>VideoEditViewController</code> for the given <code>Video</code> and the given configuration,
/// using the default photo edit model.
/// \param videoAsset The video to edit.
///
/// \param configuration The configuration options to apply.
///
- (nonnull instancetype)initWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset configuration:(PESDKConfiguration * _Nonnull)configuration;
/// Creates a new <code>VideoEditViewController</code> for the given <code>Video</code>, the given configuration and
/// photo edit model.
/// attention:
/// This initializer should only be used with Objective-C.
/// \param videoAsset The video to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
- (nonnull instancetype)initWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel;
/// Creates a new <code>VideoEditViewController</code> or subclass if there is a replacing class defined by <code>VESDK.replaceClass</code> in Swift.
/// \param videoAsset The video to edit.
///
/// \param configuration The configuration options to apply.
///
/// \param photoEditModel The initial photo edit model to apply to the photo.
///
+ (PESDKVideoEditViewController * _Nonnull)videoEditViewControllerWithVideoAsset:(PESDKVideo * _Nonnull)videoAsset configuration:(PESDKConfiguration * _Nonnull)configuration photoEditModel:(PESDKPhotoEditModel * _Nonnull)photoEditModel SWIFT_WARN_UNUSED_RESULT;
@end

@class PESDKVideoEditorTask;
@class PESDKVideoEditorResult;
@class PESDKVideoEditorError;

/// The <code>VideoEditViewControllerDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>VideoEditViewController</code>.
SWIFT_PROTOCOL_NAMED("VideoEditViewControllerDelegate")
@protocol PESDKVideoEditViewControllerDelegate <PESDKMediaEditViewControllerDelegate>
@optional
/// Called before the output video is generated.
/// \param videoEditViewController The video edit view controller that will create the output video.
///
/// \param task The input data, containing the input video and <code>PhotoEditModel</code>.
///
- (BOOL)videoEditViewControllerShouldStart:(PESDKVideoEditViewController * _Nonnull)videoEditViewController task:(PESDKVideoEditorTask * _Nonnull)task SWIFT_WARN_UNUSED_RESULT;
@required
/// Called when the output video was generated.
/// \param videoEditViewController The video edit view controller that created the output video.
///
/// \param result The result of the processing, containing output video URL and the export status.
///
- (void)videoEditViewControllerDidFinish:(PESDKVideoEditViewController * _Nonnull)videoEditViewController result:(PESDKVideoEditorResult * _Nonnull)result;
/// Called when the output video could not be generated.
/// \param videoEditViewController The video edit view controller that was unable to create the output video.
///
/// \param error The occurred error.
///
- (void)videoEditViewControllerDidFail:(PESDKVideoEditViewController * _Nonnull)videoEditViewController error:(PESDKVideoEditorError * _Nonnull)error;
/// Called when the user wants to dismiss the editor.
/// \param videoEditViewController The video edit view controller that is asking to be cancelled.
///
- (void)videoEditViewControllerDidCancel:(PESDKVideoEditViewController * _Nonnull)videoEditViewController;
@end


/// Options for configuring a <code>VideoEditViewController</code>.
SWIFT_CLASS_NAMED("VideoEditViewControllerOptions")
@interface PESDKVideoEditViewControllerOptions : PESDKMediaEditViewControllerOptions
/// The video container format to export. Default is <code>.mp4</code>.
@property (nonatomic, readonly) enum PESDKVideoContainerFormat videoContainerFormat;
/// The Uniform Type Identifier (UTI) of the output video as <code>UTType</code>.
@property (nonatomic, readonly) CFStringRef _Nonnull videoContainerFormatUTI;
/// The video codec to use for the exported video. Default is <code>.h264</code>.
@property (nonatomic, readonly, strong) PESDKVideoCodec * _Nonnull videoCodec;
/// The local file path where to export the edited video. <code>nil</code> means export to a temporary file. Default is <code>nil</code>.
/// If the file already exists it will be overwritten. Intermediate directories will be created if needed.
/// attention:
/// Please ensure to specify a <code>URL</code> with valid writing permissions otherwise <code>VideoEditViewControllerDelegate.videoEditViewControllerDidFail</code> will be called on export.
@property (nonatomic, readonly, copy) NSURL * _Nullable exportURL;
/// With the force trim option, you’re able to enforce a <code>TrimToolControllerOptions.minimumDuration</code> and
/// <code>TrimToolControllerOptions.maximumDuration</code> for a video composition in the composition tool and/or a
/// single video in the trim tool. Thus users will not be able to export videos, which are not within the defined video duration limits.
/// This feature is implemented as part of the user interface only.
/// To be able to use this feature your subscription must include the trim feature.
/// Default is set to <code>ForceTrimMode.silent</code>.
@property (nonatomic, readonly) enum PESDKForceTrimMode forceTrimMode;
/// Controls if we show the time scurbber on the main screen of video editor.
/// Default is set to <code>false</code>.
@property (nonatomic, readonly) BOOL showTimelineOnMainScreen;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>VideoEditViewControllerOptions</code> using the given builder.
/// \param videoEditBuilder A <code>VideoEditViewControllerOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithVideoEditBuilder:(PESDKVideoEditViewControllerOptionsBuilder * _Nonnull)videoEditBuilder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBuilder:(PESDKMediaEditViewControllerOptionsBuilder * _Nonnull)builder SWIFT_UNAVAILABLE;
@end


/// The default <code>VideoEditViewControllerOptionsBuilder</code> for <code>VideoEditViewControllerOptions</code>.
SWIFT_CLASS_NAMED("VideoEditViewControllerOptionsBuilder")
@interface PESDKVideoEditViewControllerOptionsBuilder : PESDKMediaEditViewControllerOptionsBuilder
/// The video container format to export. Default is <code>.mp4</code>.
@property (nonatomic) enum PESDKVideoContainerFormat videoContainerFormat;
/// The video codec to use for the exported video. Default is <code>.h264</code>.
@property (nonatomic, strong) PESDKVideoCodec * _Nonnull videoCodec;
/// The local file path where to export the edited video. <code>nil</code> means export to a temporary file. Default is <code>nil</code>.
@property (nonatomic, copy) NSURL * _Nullable exportURL;
/// Controls if we show the time scurbber on the main screen of video editor.
/// Default is set to <code>false</code>.
@property (nonatomic) BOOL showTimelineOnMainScreen;
/// With the force trim option, you’re able to enforce a <code>TrimToolControllerOptions.minimumDuration</code> and
/// <code>TrimToolControllerOptions.maximumDuration</code> for a video composition in the composition tool and/or a
/// single video in the trim tool. Thus users will not be able to export videos, which are not within the defined video duration limits.
/// This feature is implemented as part of the user interface only.
/// To be able to use this feature your subscription must include the trim feature.
/// Default is set to <code>ForceTrimMode.silent</code>.
@property (nonatomic) enum PESDKForceTrimMode forceTrimMode;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of <code>VideoEditViewControllerOptionsBuilder</code> initialized with the given options.
/// \param videoEditOptions A <code>VideoEditViewControllerOptions</code> instance.
///
- (nonnull instancetype)initWithVideoEditOptions:(PESDKVideoEditViewControllerOptions * _Nonnull)videoEditOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOptions:(PESDKMediaEditViewControllerOptions * _Nonnull)options SWIFT_UNAVAILABLE;
@end

enum PESDKVideoEditorErrorReason : NSInteger;

/// Possible errors that could be returned by VideoEditor SDK.
SWIFT_CLASS_NAMED("VideoEditorError")
@interface PESDKVideoEditorError : NSError
/// The error reason.
@property (nonatomic, readonly) enum PESDKVideoEditorErrorReason reason;
/// The underlying error.
@property (nonatomic, readonly) NSError * _Nullable underlyingError;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSError *> * _Nonnull underlyingErrors;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// The error reason.
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKVideoEditorErrorReason, "Reason", open) {
/// Video is too short to satisfy duration limits configured in the <code>TrimToolControllerOptions</code>.
  PESDKVideoEditorErrorReasonVideoTooShort = 0,
/// Video export operation failed.
  PESDKVideoEditorErrorReasonExportFailed = 1,
};

@class PESDKVideoEditorOutput;
enum VESDKVideoEditorStatus : NSInteger;

/// A <code>VideoEditorResult</code> contains the relevant information from a successful export of VideoEditor SDK.
SWIFT_CLASS_NAMED("VideoEditorResult")
@interface PESDKVideoEditorResult : NSObject
/// The output video object.
@property (nonatomic, readonly, strong) PESDKVideoEditorOutput * _Nonnull output;
/// An enum indicating whether any changes have been applied to the video.
@property (nonatomic, readonly) enum VESDKVideoEditorStatus status;
/// The <code>VideoEditorTask</code> that initialized the export.
@property (nonatomic, readonly, strong) PESDKVideoEditorTask * _Nonnull task;
/// A flag indicating whether any changes have been applied to the video.
@property (nonatomic, readonly) BOOL hasChanges SWIFT_DEPRECATED_MSG("Use `status` instead.");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The export status.
typedef SWIFT_ENUM_NAMED(NSInteger, VESDKVideoEditorStatus, "Status", open) {
/// Input video was not modified.
/// note:
/// To process the unedited video with the rendering pipeline, enable <code>VideoEditViewControllerOptions.forceExport</code>.
  VESDKVideoEditorStatusPassedWithoutRendering = 0,
/// Input video was processed by the rendering pipeline, without any edits.
/// note:
/// To avoid processing the unedited video with the rendering pipeline, disable <code>VideoEditViewControllerOptions.forceExport</code>.
  VESDKVideoEditorStatusRenderedWithoutChanges = 1,
/// Input video was rendered with edits described in the <code>PhotoEditModel</code>.
  VESDKVideoEditorStatusRenderedWithChanges = 2,
};


/// A <code>VideoEditor.Output</code> contains output video data and format.
SWIFT_CLASS_NAMED("Output")
@interface PESDKVideoEditorOutput : NSObject
/// The output video URL.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The type identifier of of the generated output file if available.
///
/// returns:
/// <code>nil</code> if the video format cannot be recognized.
@property (nonatomic, readonly, copy) NSString * _Nullable uti;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>VideoEditorTask</code> contains all the data that is necessary to start rendering.
SWIFT_CLASS_NAMED("VideoEditorTask")
@interface PESDKVideoEditorTask : NSObject
/// The <code>Video</code> that was passed to the editor or modified with the audio/video composition tool.
@property (nonatomic, readonly, strong) PESDKVideo * _Nonnull video;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKVideoEditorTask (SWIFT_EXTENSION(ImglyKit))
/// The <code>PhotoEditModel</code> that holds the operations applied to the video.
@property (nonatomic, readonly, strong) PESDKPhotoEditModel * _Nonnull model;
@end


/// A <code>VideoRecordButton</code> is a button that can be used to start a video recording. It animates between
/// a ‘Start recording’ and a ‘Stop recording’ state.
SWIFT_CLASS_NAMED("VideoRecordButton")
@interface PESDKVideoRecordButton : UIControl
/// Whether or not the button is currently in recording mode.
@property (nonatomic) BOOL isRecording;
/// The color of the outline around the red recording button.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic, strong) UIColor * _Nullable outlineColor;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/// :nodoc:
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end


/// The view that represents the scrubber in a <code>VideoTrimView</code>.
SWIFT_CLASS_NAMED("VideoScrubberView")
@interface PESDKVideoScrubberView : UIView
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>VideoSegment</code> holds information about a single video clip that should be part of a <code>Video</code> composition.
SWIFT_CLASS_NAMED("VideoSegment")
@interface PESDKVideoSegment : NSObject
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The URL to the asset’s media.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PESDKVideoSegment (SWIFT_EXTENSION(ImglyKit))
/// Creates a new <code>VideoSegment</code> for the given URL.
/// \param url The URL to the asset of the <code>VideoSegment</code> that should be added to a video composition.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url;
/// Creates a new <code>VideoSegment</code> for the given URL and clip trimming options.
/// \param url The URL to the asset of the <code>VideoSegment</code> that should be added to a video composition.
///
/// \param startTime The start time of the asset.
///
/// \param endTime The end time of the asset.
///
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url startTime:(NSNumber * _Nullable)startTime endTime:(NSNumber * _Nullable)endTime;
/// The start time of the asset.
@property (nonatomic, readonly, strong) NSNumber * _Nullable startTime;
/// The end time of the asset.
@property (nonatomic, readonly, strong) NSNumber * _Nullable endTime;
@end

@protocol PESDKVideoTrimSelectionViewDelegate;

/// The view that is used to change the start or end time of a video by dragging.
SWIFT_CLASS_NAMED("VideoTrimSelectionView")
@interface PESDKVideoTrimSelectionView : UIView
/// The delegate object for this view.
@property (nonatomic, weak) id <PESDKVideoTrimSelectionViewDelegate> _Nullable delegate;
/// The asset to load the keyframes for.
@property (nonatomic, strong) AVAsset * _Nullable asset;
/// The minimum trim duration.
@property (nonatomic) CMTime minimumDuration;
/// The width of the handle on both sides.
@property (nonatomic) CGFloat handleWidth;
/// The color to use when the control is inactive.
@property (nonatomic, strong) UIColor * _Nonnull inactiveColor;
/// The handle on the left.
@property (nonatomic, readonly, strong) UIView * _Nonnull leftHandle;
/// The handle on the right.
@property (nonatomic, readonly, strong) UIView * _Nonnull rightHandle;
/// The top border.
@property (nonatomic, readonly, strong) UIView * _Nonnull topBorder;
/// The bottom border.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomBorder;
/// The overlay label that displays the duration of the video.
@property (nonatomic, readonly, strong) PESDKOverlayLabel * _Nonnull durationOverlayLabel;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)tintColorDidChange;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>VideoTrimSelectionViewDelegate</code> protocol defines methods that allow you to respond to the
/// events of an instance of <code>VideoTrimSelectionView</code>.
SWIFT_PROTOCOL_NAMED("VideoTrimSelectionViewDelegate")
@protocol PESDKVideoTrimSelectionViewDelegate
/// Called when the user started dragging.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidStartDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// Called when the start time was changed.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidChangeStartTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// Called when the end time was changed.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidChangeEndTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// Called when the user stopped dragging.
/// \param videoTrimSelectionView The video trim selection view that this event occurred in.
///
- (void)videoTrimSelectionViewDidStopDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
@end


/// A view that displays keyframes of a video, a playback scrubber on top of the keyframes and a
/// view on the left and right side of the keyframes to adjust start and end time.
SWIFT_CLASS_NAMED("VideoTrimView")
@interface PESDKVideoTrimView : UIView
/// The delegate object for this view.
@property (nonatomic, weak) id <PESDKVideoTrimViewDelegate> _Nullable delegate;
/// The video to load the keyframes for.
@property (nonatomic, strong) PESDKVideo * _Nullable video;
/// The width of each generated thumbnail.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) CGFloat thumbnailWidth;
/// The minimum trim duration.
@property (nonatomic) CMTime minimumDuration;
/// If <code>true</code> the timeline is dynamic and automatically zooms the current trim duration defined by <code>startTime</code> and <code>endTime</code>  to the view width.
/// If <code>false</code> the timeline is static and it always maps the whole untrimmed video duration to the view width.
/// This property supports being set via a <code>UIAppearance</code> proxy.
@property (nonatomic) BOOL isZoomToSelectionEnabled;
/// If <code>true</code> handles for trimming the video will be shown, and hidden if set to <code>false</code>.
@property (nonatomic) BOOL trimEnabled;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) CGRect bounds;
/// :nodoc:
- (void)didMoveToWindow;
/// :nodoc:
- (void)layoutSubviews;
/// Displays the scrubber view.
- (void)play;
/// Hides the scrubber view.
- (void)pause;
@end


@interface PESDKVideoTrimView (SWIFT_EXTENSION(ImglyKit)) <PESDKVideoTrimSelectionViewDelegate>
/// :nodoc:
- (void)videoTrimSelectionViewDidStartDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// :nodoc:
- (void)videoTrimSelectionViewDidChangeStartTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// :nodoc:
- (void)videoTrimSelectionViewDidChangeEndTime:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
/// :nodoc:
- (void)videoTrimSelectionViewDidStopDragging:(PESDKVideoTrimSelectionView * _Nonnull)videoTrimSelectionView;
@end


@interface PESDKVideoTrimView (SWIFT_EXTENSION(ImglyKit)) <UIScrollViewDelegate>
/// :nodoc:
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
/// :nodoc:
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/// :nodoc:
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/// :nodoc:
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end




@interface PESDKViewController (SWIFT_EXTENSION(ImglyKit))
/// Called when this view controller or a parent view controller is about to become the active
/// tool of a <code>PhotoEditViewController</code>.
- (void)pesdk_willBecomeActiveTool;
/// Called when this view controller or a parent view controller became the active tool of a
/// <code>PhotoEditViewController</code>.
- (void)pesdk_didBecomeActiveTool;
/// Called when this view controller or a parent view controller is about to resign being the
/// active tool of a <code>PhotoEditViewController</code>.
- (void)pesdk_willResignActiveTool;
/// Called when this view controller or a parent view controller resigned being the active tool
/// of a <code>PhotoEditViewController</code>.
- (void)pesdk_didResignActiveTool;
@end


/// Options for configuring custom watermark.
SWIFT_CLASS_NAMED("WatermarkOptions")
@interface PESDKWatermarkOptions : NSObject
/// Input image URL for the watermark. No additional processing is performed on the image.
/// Transparency must be supported by the file itself.
/// If <code>nil</code> no watermark will be applied.
/// If the watermark is the only editing operation to be performed, <code>PhotoEditViewControllerOptions.forceExport</code>
/// or <code>VideoEditViewControllerOptions.forceExport</code> must be enabled for the change to be applied.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The relative size of the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.2</code>.
/// note:
/// Values outside <code>(0.0, 1.0)</code> will be clamped.
@property (nonatomic, readonly) CGFloat size;
/// The relative spacing between the edges of the image/video and the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.05</code>.
/// note:
/// Values outside <code>(0.0, 0.5)</code> will be clamped.
@property (nonatomic, readonly) CGFloat inset;
/// It defines the layout of the watermark inside the canvas.
/// The default value is <code>.topRight</code>.
/// note:
/// <code>.center</code>, <code>.topLeft</code>, <code>.topRight</code>, <code>.bottomLeft</code>, <code>.bottomRight</code> are currently supported.
@property (nonatomic, readonly) UIViewContentMode alignment;
/// :nodoc:
- (nonnull instancetype)init;
/// Creates a new instance of <code>WatermarkOptions</code> using the given builder.
/// \param builder A <code>WatermarkOptionsBuilder</code> instance.
///
- (nonnull instancetype)initWithBuilder:(PESDKWatermarkOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


/// The default <code>WatermarkOptionsBuilder</code> for <code>WatermarkOptions</code>.
SWIFT_CLASS_NAMED("WatermarkOptionsBuilder")
@interface PESDKWatermarkOptionsBuilder : NSObject
/// Input image URL for the watermark. No additional processing is performed on the image.
/// Transparency must be supported by the file itself.
/// If <code>nil</code> no watermark will be applied.
/// If the watermark is the only editing operation to be performed, <code>PhotoEditViewControllerOptions.forceExport</code>
/// or <code>VideoEditViewControllerOptions.forceExport</code> must be enabled for the change to be applied.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// The relative size of the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.2</code>.
/// note:
/// Values outside <code>(0.0, 1.0)</code> will be clamped.
@property (nonatomic) CGFloat size;
/// The relative spacing between the edges of the image/video and the watermark.
/// This value is measured in relation to the smaller side of the transformed image/video that the user is editing.
/// The default value is <code>0.05</code>.
/// note:
/// Values outside <code>(0.0, 0.5)</code> will be clamped.
@property (nonatomic) CGFloat inset;
/// It defines the layout of the watermark inside the canvas.
/// The default value is <code>.topRight</code>.
/// note:
/// <code>.center</code>, <code>.topLeft</code>, <code>.topRight</code>, <code>.bottomLeft</code>, <code>.bottomRight</code> are currently supported.
@property (nonatomic) UIViewContentMode alignment;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithOptions:(PESDKWatermarkOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
@end



/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>AdjustmentModel</code>. For more information about the type, please take
/// a look at the documentation for <code>AdjustmentModel</code>.
SWIFT_CLASS_NAMED("_ObjCAdjustmentModel")
@interface PESDKAdjustmentModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithBrightness:(double)brightness contrast:(double)contrast shadows:(double)shadows highlights:(double)highlights exposure:(double)exposure clarity:(double)clarity saturation:(double)saturation gamma:(double)gamma blacks:(double)blacks whites:(double)whites temperature:(double)temperature sharpness:(double)sharpness OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) double brightness;
/// :nodoc:
@property (nonatomic) double contrast;
/// :nodoc:
@property (nonatomic) double shadows;
/// :nodoc:
@property (nonatomic) double highlights;
/// :nodoc:
@property (nonatomic) double exposure;
/// :nodoc:
@property (nonatomic) double clarity;
/// :nodoc:
@property (nonatomic) double saturation;
/// :nodoc:
@property (nonatomic) double gamma;
/// :nodoc:
@property (nonatomic) double blacks;
/// :nodoc:
@property (nonatomic) double whites;
/// :nodoc:
@property (nonatomic) double temperature;
/// :nodoc:
@property (nonatomic) double sharpness;
@end

@class PESDKTrimModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>AudioClipModel</code>. For more information about the type, please take
/// a look at the documentation for <code>AudioClipModel</code>.
SWIFT_CLASS_NAMED("_ObjCAudioClipModel")
@interface PESDKAudioClipModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTrimModel * _Nonnull trimModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>AudioModel</code>. For more information about the type, please take
/// a look at the documentation for <code>AudioModel</code>.
SWIFT_CLASS_NAMED("_ObjCAudioModel")
@interface PESDKAudioModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKAudioClipModel *> * _Nonnull clips;
/// :nodoc:
@property (nonatomic) double volumeBalance;
@end



/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>SpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>SpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCSpriteModel")
@interface PESDKSpriteModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PESDKPathModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>BrushSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>BrushSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCBrushSpriteModel")
@interface PESDKBrushSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKPathModel *> * _Nonnull paths;
@end

@class PESDKVideoClipModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>CompositionModel</code>. For more information about the type, please take
/// a look at the documentation for <code>CompositionModel</code>.
SWIFT_CLASS_NAMED("_ObjCCompositionModel")
@interface PESDKCompositionModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKVideoClipModel *> * _Nonnull clips;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>EffectFilterModel</code>. For more information about the type, please take
/// a look at the documentation for <code>EffectFilterModel</code>.
SWIFT_CLASS_NAMED("_ObjCEffectFilterModel")
@interface PESDKEffectFilterModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier intensity:(double)intensity OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) double intensity;
@end


/// Wrapper class for <code>FloatValue</code>. This should only be used if you are using Objective-C.
SWIFT_CLASS_NAMED("_ObjCFloatValue")
@interface PESDKFloatValue : NSObject
/// Creates a new <code>FloatValue</code> that represents a relative value.
/// \param relativeValue The value to represent.
///
- (nonnull instancetype)initWithRelativeValue:(CGFloat)relativeValue OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>FloatValue</code> that represents an absolute value.
/// \param absoluteValue The value to represent.
///
- (nonnull instancetype)initWithAbsoluteValue:(CGFloat)absoluteValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>FocusModel</code>. For more information about the type, please take
/// a look at the documentation for <code>FocusModel</code>.
SWIFT_CLASS_NAMED("_ObjCFocusModel")
@interface PESDKFocusModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithNormalizedControlPoint1:(CGPoint)normalizedControlPoint1 normalizedControlPoint2:(CGPoint)normalizedControlPoint2 normalizedBlurRadius:(double)normalizedBlurRadius normalizedFadeWidth:(double)normalizedFadeWidth mode:(enum PESDKFocusMode)mode blurQuality:(enum PESDKBlurQuality)blurQuality OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) CGPoint normalizedControlPoint1;
/// :nodoc:
@property (nonatomic) CGPoint normalizedControlPoint2;
/// :nodoc:
@property (nonatomic) double normalizedBlurRadius;
/// :nodoc:
@property (nonatomic) double normalizedFadeWidth;
/// :nodoc:
@property (nonatomic) enum PESDKFocusMode mode;
/// :nodoc:
@property (nonatomic) enum PESDKBlurQuality blurQuality;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>FrameSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>FrameSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCFrameSpriteModel")
@interface PESDKFrameSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(PESDKFrame * _Nonnull)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic, strong) NSNumber * _Nullable scale;
/// :nodoc:
@property (nonatomic) CGFloat alpha;
/// :nodoc:
@property (nonatomic, strong) NSNumber * _Nullable ratio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, PESDKLicenseProduct, "_ObjCLicenseProduct", open) {
/// :nodoc:
  PESDKLicenseProductPESDK SWIFT_COMPILE_NAME("pesdk") = 0,
/// :nodoc:
  PESDKLicenseProductVESDK SWIFT_COMPILE_NAME("vesdk") = 1,
};


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>OverlayModel</code>. For more information about the type, please take
/// a look at the documentation for <code>OverlayModel</code>.
SWIFT_CLASS_NAMED("_ObjCOverlayModel")
@interface PESDKOverlayModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier blendMode:(enum PESDKBlendMode)blendMode intensity:(double)intensity OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) enum PESDKBlendMode blendMode;
/// :nodoc:
@property (nonatomic) double intensity;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>PathModel</code>. For more information about the type, please take
/// a look at the documentation for <code>PathModel</code>.
SWIFT_CLASS_NAMED("_ObjCPathModel")
@interface PESDKPathModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color normalizedSize:(CGFloat)normalizedSize hardness:(CGFloat)hardness points:(NSArray<NSValue *> * _Nonnull)points eraseFragment:(PESDKPaintingFragment * _Nullable)eraseFragment drawFragment:(PESDKPaintingFragment * _Nullable)drawFragment OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color normalizedSize:(CGFloat)normalizedSize hardness:(CGFloat)hardness points:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// :nodoc:
@property (nonatomic, readonly) CGFloat normalizedSize;
/// :nodoc:
@property (nonatomic, readonly) CGFloat hardness;
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
/// :nodoc:
@property (nonatomic, strong) PESDKPaintingFragment * _Nullable eraseFragment;
/// :nodoc:
@property (nonatomic, strong) PESDKPaintingFragment * _Nullable drawFragment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Wrapper class for <code>PhotoEditMenuItem</code>. This should only be used if you are using Objective-C.
SWIFT_CLASS_NAMED("_ObjCPhotoEditMenuItem")
@interface PESDKPhotoEditMenuItem : NSObject
/// The tool menu item associated with this photo edit menu item.
@property (nonatomic, readonly, strong) PESDKToolMenuItem * _Nullable toolMenuItem;
/// The action menu item associated with this photo edit menu item.
@property (nonatomic, readonly, strong) PESDKActionMenuItem * _Nullable actionMenuItem;
/// Creates the default menu items (trim, transform, filter, adjust, sticker, text, text design, overlay, frame,
/// brush, focus and auto enhancement)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<PESDKPhotoEditMenuItem *> * _Nonnull defaultItems;)
+ (NSArray<PESDKPhotoEditMenuItem *> * _Nonnull)defaultItems SWIFT_WARN_UNUSED_RESULT;
/// Creates a new <code>_ObjCPhotoEditMenuItem</code> for the given tool menu item.
/// \param toolMenuItem The tool menu item.
///
- (nullable instancetype)initWithToolMenuItem:(PESDKToolMenuItem * _Nullable)toolMenuItem OBJC_DESIGNATED_INITIALIZER;
/// Creates a new <code>_ObjCPhotoEditMenuItem</code> for the given action menu item.
/// \param actionMenuItem The action menu item.
///
- (nullable instancetype)initWithActionMenuItem:(PESDKActionMenuItem * _Nullable)actionMenuItem OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PESDKTransformModel;

/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>PhotoEditModel</code>. For more information about the type, please take
/// a look at the documentation for <code>PhotoEditModel</code>.
SWIFT_CLASS_NAMED("_ObjCPhotoEditModel")
@interface PESDKPhotoEditModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithSerializedData:(NSData * _Nonnull)data referenceSize:(CGSize)referenceSize OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use `init(serializedData:referenceSize:assetCatalog:)` instead");
/// :nodoc:
- (nullable instancetype)initWithSerializedData:(NSData * _Nonnull)data referenceSize:(CGSize)referenceSize assetCatalog:(PESDKAssetCatalog * _Nonnull)assetCatalog OBJC_DESIGNATED_INITIALIZER;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKAdjustmentModel * _Nonnull adjustmentModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKEffectFilterModel * _Nonnull effectFilterModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKFocusModel * _Nonnull focusModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKOverlayModel * _Nonnull overlayModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, copy) NSArray<PESDKSpriteModel *> * _Nonnull spriteModels;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTransformModel * _Nonnull transformModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTrimModel * _Nonnull trimModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKCompositionModel * _Nonnull compositionModel;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKAudioModel * _Nonnull audioModel;
/// :nodoc:
@property (nonatomic) BOOL isAutoEnhancementEnabled;
/// :nodoc:
@property (nonatomic) BOOL isBackgroundRemoved;
@end





/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>StickerSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>StickerSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCStickerSpriteModel")
@interface PESDKStickerSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithSticker:(PESDKSticker * _Nonnull)sticker OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) CGSize normalizedSize;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable startTime;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable endTime;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// :nodoc:
@property (nonatomic) CGFloat brightness;
/// :nodoc:
@property (nonatomic) CGFloat contrast;
/// :nodoc:
@property (nonatomic) CGFloat saturation;
/// :nodoc:
@property (nonatomic) CGFloat alpha;
/// :nodoc:
@property (nonatomic) BOOL backgroundRemoved;
/// :nodoc:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TextDesignSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TextDesignSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCTextDesignSpriteModel")
@interface PESDKTextDesignSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat normalizedPadding;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// :nodoc:
@property (nonatomic) uint64_t randomizerSeed;
/// :nodoc:
@property (nonatomic) BOOL isInverted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TextSpriteModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TextSpriteModel</code>.
SWIFT_CLASS_NAMED("_ObjCTextSpriteModel")
@interface PESDKTextSpriteModel : PESDKSpriteModel
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic) CGFloat normalizedWidth;
/// :nodoc:
@property (nonatomic) CGPoint normalizedCenter;
/// :nodoc:
@property (nonatomic) CGFloat rotation;
/// :nodoc:
@property (nonatomic) BOOL verticallyFlipped;
/// :nodoc:
@property (nonatomic) BOOL horizontallyFlipped;
/// :nodoc:
@property (nonatomic) CGFloat normalizedFontSize;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable startTime;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable endTime;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable text;
/// :nodoc:
@property (nonatomic) NSTextAlignment textAlignment;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable fontIdentifier;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>Theme</code>. For more information about the type, please take
/// a look at the documentation for <code>Theme</code>.
SWIFT_CLASS_NAMED("_ObjCTheme")
@interface PESDKTheme : NSObject
/// :nodoc:
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor menuBackgroundColor:(UIColor * _Nonnull)menuBackgroundColor toolbarBackgroundColor:(UIColor * _Nonnull)toolbarBackgroundColor primaryColor:(UIColor * _Nonnull)primaryColor OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull toolbarBackgroundColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable rotationSnapGuideColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable positionSnapGuideColor;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable boundingBoxSnapGuideColor;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull primaryFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull mediumFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull boldFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull monospacedFont;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull searchBarFont;
/// :nodoc:
@property (nonatomic) BOOL uppercasedToolbarTitles;
@end


@interface PESDKTheme (SWIFT_EXTENSION(ImglyKit))
/// The dark theme.
/// This property should only be used if you are using Objective-C.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKTheme * _Nonnull dark;)
+ (PESDKTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
/// The light theme.
/// This property should only be used if you are using Objective-C.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKTheme * _Nonnull light;)
+ (PESDKTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// The dynamic theme.
/// This property should only be used if you are using Objective-C.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDKTheme * _Nonnull dynamic;)
+ (PESDKTheme * _Nonnull)dynamic SWIFT_WARN_UNUSED_RESULT;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TransformModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TransformModel</code>.
SWIFT_CLASS_NAMED("_ObjCTransformModel")
@interface PESDKTransformModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithAppliedOrientation:(enum PESDKOrientation)appliedOrientation normalizedCropRect:(CGRect)normalizedCropRect straightenAngle:(double)straightenAngle imageInsets:(UIEdgeInsets)imageInsets OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic) enum PESDKOrientation appliedOrientation;
/// :nodoc:
@property (nonatomic) CGRect normalizedCropRect;
/// :nodoc:
@property (nonatomic) double straightenAngle;
/// :nodoc:
@property (nonatomic) UIEdgeInsets imageInsets;
/// :nodoc:
@property (nonatomic, readonly) double adjustedStraightenAngle;
/// :nodoc:
@property (nonatomic, readonly) BOOL isGeometryIdentity;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum PESDKOrientation identityOrientation;)
+ (enum PESDKOrientation)identityOrientation SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGRect identityNormalizedCropRect;)
+ (CGRect)identityNormalizedCropRect SWIFT_WARN_UNUSED_RESULT;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>TrimModel</code>. For more information about the type, please take
/// a look at the documentation for <code>TrimModel</code>.
SWIFT_CLASS_NAMED("_ObjCTrimModel")
@interface PESDKTrimModel : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable startTime;
/// :nodoc:
@property (nonatomic, strong) NSValue * _Nullable endTime;
@end


/// This class should only be used if you are using Objective-C. It is a wrapper
/// class for <code>VideoClipModel</code>. For more information about the type, please take
/// a look at the documentation for <code>VideoClipModel</code>.
SWIFT_CLASS_NAMED("_ObjCVideoClipModel")
@interface PESDKVideoClipModel : NSObject
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// This is a boxed property which exposes a Swift struct to Objective-C.
/// This property should only be used if you are using Objective-C.
/// Every invocation of the getter will return a new (temporary) object wrapping the underlying Swift struct.
/// Boxed properties cannot be chained with the dot syntax for mutable access of nested properties in place.
/// Use the setter with the assignment operator instead to modify boxed properties, e.g.:
/// \code
/// PESDKPhotoEditModel *photoEditModel = [[PESDKPhotoEditModel alloc] init];
///
/// // CORRECT:
/// // get boxed `AdjustmentModel`
/// PESDKAdjustmentModel *adjustmentModel = photoEditModel.adjustmentModel;
/// // modify boxed `AdjustmentModel`
/// adjustmentModel.brightness = 0.5;
/// // set modified boxed `AdjustmentModel`
/// photoEditModel.adjustmentModel = adjustmentModel;
///
/// // WRONG:
/// photoEditModel.adjustmentModel.brightness = 0.5;
///
/// \endcode
@property (nonatomic, strong) PESDKTrimModel * _Nonnull trimModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
